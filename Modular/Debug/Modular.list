
Modular.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080f4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080082a4  080082a4  000182a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800830c  0800830c  00020114  2**0
                  CONTENTS
  4 .ARM          00000008  0800830c  0800830c  0001830c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008314  08008314  00020114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008314  08008314  00018314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008318  08008318  00018318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  0800831c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020114  2**0
                  CONTENTS
 10 .bss          00009168  20000114  20000114  00020114  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000927c  2000927c  00020114  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c37f  00000000  00000000  00020187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003dd7  00000000  00000000  0003c506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017a8  00000000  00000000  000402e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000125a  00000000  00000000  00041a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026f04  00000000  00000000  00042ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ac50  00000000  00000000  00069be6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ea0b2  00000000  00000000  00084836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006660  00000000  00000000  0016e8e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  00174f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000114 	.word	0x20000114
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800828c 	.word	0x0800828c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000118 	.word	0x20000118
 80001ec:	0800828c 	.word	0x0800828c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr

080004fa <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80004fa:	b480      	push	{r7}
 80004fc:	b083      	sub	sp, #12
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
 8000502:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr

08000510 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
	...

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000524:	f000 ff80 	bl	8001428 <HAL_Init>

  /* USER CODE BEGIN Init */
  
  smInit();
 8000528:	f004 fdf0 	bl	800510c <smInit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f834 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 f9e0 	bl	80008f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000534:	f000 f96e 	bl	8000814 <MX_DMA_Init>
  MX_FMC_Init();
 8000538:	f000 f98c 	bl	8000854 <MX_FMC_Init>
  MX_TIM1_Init();
 800053c:	f000 f896 	bl	800066c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000540:	f000 f93e 	bl	80007c0 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000544:	f000 f8e2 	bl	800070c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  uartInit();
 8000548:	f007 fd6a 	bl	8008020 <uartInit>
  //HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuff, SizeRxBuff);
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800054c:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <main+0x64>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <main+0x64>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f022 0208 	bic.w	r2, r2, #8
 800055a:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 800055c:	2201      	movs	r2, #1
 800055e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000562:	4809      	ldr	r0, [pc, #36]	; (8000588 <main+0x68>)
 8000564:	f001 fe4a 	bl	80021fc <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000568:	f004 ff0c 	bl	8005384 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800056c:	4a07      	ldr	r2, [pc, #28]	; (800058c <main+0x6c>)
 800056e:	2100      	movs	r1, #0
 8000570:	4807      	ldr	r0, [pc, #28]	; (8000590 <main+0x70>)
 8000572:	f004 ff51 	bl	8005418 <osThreadNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a06      	ldr	r2, [pc, #24]	; (8000594 <main+0x74>)
 800057a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800057c:	f004 ff26 	bl	80053cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000580:	e7fe      	b.n	8000580 <main+0x60>
 8000582:	bf00      	nop
 8000584:	20000204 	.word	0x20000204
 8000588:	40021800 	.word	0x40021800
 800058c:	080082c8 	.word	0x080082c8
 8000590:	08000df9 	.word	0x08000df9
 8000594:	20000298 	.word	0x20000298

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	; 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	2230      	movs	r2, #48	; 0x30
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f007 fd86 	bl	80080b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	4b28      	ldr	r3, [pc, #160]	; (8000664 <SystemClock_Config+0xcc>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	4a27      	ldr	r2, [pc, #156]	; (8000664 <SystemClock_Config+0xcc>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	; 0x40
 80005cc:	4b25      	ldr	r3, [pc, #148]	; (8000664 <SystemClock_Config+0xcc>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	4b22      	ldr	r3, [pc, #136]	; (8000668 <SystemClock_Config+0xd0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005e4:	4a20      	ldr	r2, [pc, #128]	; (8000668 <SystemClock_Config+0xd0>)
 80005e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	4b1e      	ldr	r3, [pc, #120]	; (8000668 <SystemClock_Config+0xd0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f8:	2301      	movs	r3, #1
 80005fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000600:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000602:	2302      	movs	r3, #2
 8000604:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000606:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800060a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800060c:	2304      	movs	r3, #4
 800060e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000610:	2348      	movs	r3, #72	; 0x48
 8000612:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000614:	2302      	movs	r3, #2
 8000616:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000618:	2303      	movs	r3, #3
 800061a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061c:	f107 0320 	add.w	r3, r7, #32
 8000620:	4618      	mov	r0, r3
 8000622:	f001 fe37 	bl	8002294 <HAL_RCC_OscConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800062c:	f000 fc26 	bl	8000e7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000630:	230f      	movs	r3, #15
 8000632:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000634:	2302      	movs	r3, #2
 8000636:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800063c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000640:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000646:	f107 030c 	add.w	r3, r7, #12
 800064a:	2102      	movs	r1, #2
 800064c:	4618      	mov	r0, r3
 800064e:	f002 f899 	bl	8002784 <HAL_RCC_ClockConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000658:	f000 fc10 	bl	8000e7c <Error_Handler>
  }
}
 800065c:	bf00      	nop
 800065e:	3750      	adds	r7, #80	; 0x50
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000672:	f107 0308 	add.w	r3, r7, #8
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000680:	463b      	mov	r3, r7
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000688:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <MX_TIM1_Init+0x98>)
 800068a:	4a1f      	ldr	r2, [pc, #124]	; (8000708 <MX_TIM1_Init+0x9c>)
 800068c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800068e:	4b1d      	ldr	r3, [pc, #116]	; (8000704 <MX_TIM1_Init+0x98>)
 8000690:	2200      	movs	r2, #0
 8000692:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000694:	4b1b      	ldr	r3, [pc, #108]	; (8000704 <MX_TIM1_Init+0x98>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800069a:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <MX_TIM1_Init+0x98>)
 800069c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a2:	4b18      	ldr	r3, [pc, #96]	; (8000704 <MX_TIM1_Init+0x98>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006a8:	4b16      	ldr	r3, [pc, #88]	; (8000704 <MX_TIM1_Init+0x98>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ae:	4b15      	ldr	r3, [pc, #84]	; (8000704 <MX_TIM1_Init+0x98>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006b4:	4813      	ldr	r0, [pc, #76]	; (8000704 <MX_TIM1_Init+0x98>)
 80006b6:	f002 faeb 	bl	8002c90 <HAL_TIM_Base_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80006c0:	f000 fbdc 	bl	8000e7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006ca:	f107 0308 	add.w	r3, r7, #8
 80006ce:	4619      	mov	r1, r3
 80006d0:	480c      	ldr	r0, [pc, #48]	; (8000704 <MX_TIM1_Init+0x98>)
 80006d2:	f002 fdb7 	bl	8003244 <HAL_TIM_ConfigClockSource>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80006dc:	f000 fbce 	bl	8000e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e0:	2300      	movs	r3, #0
 80006e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_TIM1_Init+0x98>)
 80006ee:	f003 f983 	bl	80039f8 <HAL_TIMEx_MasterConfigSynchronization>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80006f8:	f000 fbc0 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	3718      	adds	r7, #24
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000130 	.word	0x20000130
 8000708:	40010000 	.word	0x40010000

0800070c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	; 0x28
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000712:	f107 0320 	add.w	r3, r7, #32
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]
 800072a:	615a      	str	r2, [r3, #20]
 800072c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800072e:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <MX_TIM4_Init+0xac>)
 8000730:	4a22      	ldr	r2, [pc, #136]	; (80007bc <MX_TIM4_Init+0xb0>)
 8000732:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000734:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <MX_TIM4_Init+0xac>)
 8000736:	2200      	movs	r2, #0
 8000738:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073a:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <MX_TIM4_Init+0xac>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000740:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <MX_TIM4_Init+0xac>)
 8000742:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000746:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000748:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_TIM4_Init+0xac>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_TIM4_Init+0xac>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000754:	4818      	ldr	r0, [pc, #96]	; (80007b8 <MX_TIM4_Init+0xac>)
 8000756:	f002 fb5b 	bl	8002e10 <HAL_TIM_PWM_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000760:	f000 fb8c 	bl	8000e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000764:	2300      	movs	r3, #0
 8000766:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800076c:	f107 0320 	add.w	r3, r7, #32
 8000770:	4619      	mov	r1, r3
 8000772:	4811      	ldr	r0, [pc, #68]	; (80007b8 <MX_TIM4_Init+0xac>)
 8000774:	f003 f940 	bl	80039f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800077e:	f000 fb7d 	bl	8000e7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000782:	2360      	movs	r3, #96	; 0x60
 8000784:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2204      	movs	r2, #4
 8000796:	4619      	mov	r1, r3
 8000798:	4807      	ldr	r0, [pc, #28]	; (80007b8 <MX_TIM4_Init+0xac>)
 800079a:	f002 fc91 	bl	80030c0 <HAL_TIM_PWM_ConfigChannel>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80007a4:	f000 fb6a 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80007a8:	4803      	ldr	r0, [pc, #12]	; (80007b8 <MX_TIM4_Init+0xac>)
 80007aa:	f000 fbdd 	bl	8000f68 <HAL_TIM_MspPostInit>

}
 80007ae:	bf00      	nop
 80007b0:	3728      	adds	r7, #40	; 0x28
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000178 	.word	0x20000178
 80007bc:	40000800 	.word	0x40000800

080007c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007c6:	4a12      	ldr	r2, [pc, #72]	; (8000810 <MX_USART1_UART_Init+0x50>)
 80007c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007e6:	220c      	movs	r2, #12
 80007e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007f8:	f003 f98e 	bl	8003b18 <HAL_UART_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000802:	f000 fb3b 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200001c0 	.word	0x200001c0
 8000810:	40011000 	.word	0x40011000

08000814 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_DMA_Init+0x3c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a0b      	ldr	r2, [pc, #44]	; (8000850 <MX_DMA_Init+0x3c>)
 8000824:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_DMA_Init+0x3c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	2105      	movs	r1, #5
 800083a:	203a      	movs	r0, #58	; 0x3a
 800083c:	f000 feee 	bl	800161c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000840:	203a      	movs	r0, #58	; 0x3a
 8000842:	f000 ff07 	bl	8001654 <HAL_NVIC_EnableIRQ>

}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800

08000854 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
 8000868:	615a      	str	r2, [r3, #20]
 800086a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800086c:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <MX_FMC_Init+0x98>)
 800086e:	4a20      	ldr	r2, [pc, #128]	; (80008f0 <MX_FMC_Init+0x9c>)
 8000870:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000872:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <MX_FMC_Init+0x98>)
 8000874:	2201      	movs	r2, #1
 8000876:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000878:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <MX_FMC_Init+0x98>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800087e:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <MX_FMC_Init+0x98>)
 8000880:	2204      	movs	r2, #4
 8000882:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000884:	4b19      	ldr	r3, [pc, #100]	; (80008ec <MX_FMC_Init+0x98>)
 8000886:	2210      	movs	r2, #16
 8000888:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800088a:	4b18      	ldr	r3, [pc, #96]	; (80008ec <MX_FMC_Init+0x98>)
 800088c:	2240      	movs	r2, #64	; 0x40
 800088e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000890:	4b16      	ldr	r3, [pc, #88]	; (80008ec <MX_FMC_Init+0x98>)
 8000892:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000896:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000898:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_FMC_Init+0x98>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800089e:	4b13      	ldr	r3, [pc, #76]	; (80008ec <MX_FMC_Init+0x98>)
 80008a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008a4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_FMC_Init+0x98>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_FMC_Init+0x98>)
 80008ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008b2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80008b4:	2302      	movs	r3, #2
 80008b6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80008b8:	2307      	movs	r3, #7
 80008ba:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80008bc:	2304      	movs	r3, #4
 80008be:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80008c0:	2307      	movs	r3, #7
 80008c2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80008c4:	2303      	movs	r3, #3
 80008c6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80008cc:	2302      	movs	r3, #2
 80008ce:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	4619      	mov	r1, r3
 80008d4:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_FMC_Init+0x98>)
 80008d6:	f002 f9a7 	bl	8002c28 <HAL_SDRAM_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80008e0:	f000 facc 	bl	8000e7c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80008e4:	bf00      	nop
 80008e6:	3720      	adds	r7, #32
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000264 	.word	0x20000264
 80008f0:	a0000140 	.word	0xa0000140

080008f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08e      	sub	sp, #56	; 0x38
 80008f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
 800090e:	4bb3      	ldr	r3, [pc, #716]	; (8000bdc <MX_GPIO_Init+0x2e8>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4ab2      	ldr	r2, [pc, #712]	; (8000bdc <MX_GPIO_Init+0x2e8>)
 8000914:	f043 0310 	orr.w	r3, r3, #16
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4bb0      	ldr	r3, [pc, #704]	; (8000bdc <MX_GPIO_Init+0x2e8>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0310 	and.w	r3, r3, #16
 8000922:	623b      	str	r3, [r7, #32]
 8000924:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
 800092a:	4bac      	ldr	r3, [pc, #688]	; (8000bdc <MX_GPIO_Init+0x2e8>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4aab      	ldr	r2, [pc, #684]	; (8000bdc <MX_GPIO_Init+0x2e8>)
 8000930:	f043 0304 	orr.w	r3, r3, #4
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4ba9      	ldr	r3, [pc, #676]	; (8000bdc <MX_GPIO_Init+0x2e8>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0304 	and.w	r3, r3, #4
 800093e:	61fb      	str	r3, [r7, #28]
 8000940:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	61bb      	str	r3, [r7, #24]
 8000946:	4ba5      	ldr	r3, [pc, #660]	; (8000bdc <MX_GPIO_Init+0x2e8>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4aa4      	ldr	r2, [pc, #656]	; (8000bdc <MX_GPIO_Init+0x2e8>)
 800094c:	f043 0320 	orr.w	r3, r3, #32
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4ba2      	ldr	r3, [pc, #648]	; (8000bdc <MX_GPIO_Init+0x2e8>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0320 	and.w	r3, r3, #32
 800095a:	61bb      	str	r3, [r7, #24]
 800095c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]
 8000962:	4b9e      	ldr	r3, [pc, #632]	; (8000bdc <MX_GPIO_Init+0x2e8>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a9d      	ldr	r2, [pc, #628]	; (8000bdc <MX_GPIO_Init+0x2e8>)
 8000968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b9b      	ldr	r3, [pc, #620]	; (8000bdc <MX_GPIO_Init+0x2e8>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000976:	617b      	str	r3, [r7, #20]
 8000978:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
 800097e:	4b97      	ldr	r3, [pc, #604]	; (8000bdc <MX_GPIO_Init+0x2e8>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a96      	ldr	r2, [pc, #600]	; (8000bdc <MX_GPIO_Init+0x2e8>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b94      	ldr	r3, [pc, #592]	; (8000bdc <MX_GPIO_Init+0x2e8>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	4b90      	ldr	r3, [pc, #576]	; (8000bdc <MX_GPIO_Init+0x2e8>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a8f      	ldr	r2, [pc, #572]	; (8000bdc <MX_GPIO_Init+0x2e8>)
 80009a0:	f043 0302 	orr.w	r3, r3, #2
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b8d      	ldr	r3, [pc, #564]	; (8000bdc <MX_GPIO_Init+0x2e8>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	4b89      	ldr	r3, [pc, #548]	; (8000bdc <MX_GPIO_Init+0x2e8>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a88      	ldr	r2, [pc, #544]	; (8000bdc <MX_GPIO_Init+0x2e8>)
 80009bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b86      	ldr	r3, [pc, #536]	; (8000bdc <MX_GPIO_Init+0x2e8>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	4b82      	ldr	r3, [pc, #520]	; (8000bdc <MX_GPIO_Init+0x2e8>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a81      	ldr	r2, [pc, #516]	; (8000bdc <MX_GPIO_Init+0x2e8>)
 80009d8:	f043 0308 	orr.w	r3, r3, #8
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b7f      	ldr	r3, [pc, #508]	; (8000bdc <MX_GPIO_Init+0x2e8>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0308 	and.w	r3, r3, #8
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SMZL_DIR_Pin|SMZR_DIR_Pin|SMZR_STEP_Pin|SMX_STEP_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2178      	movs	r1, #120	; 0x78
 80009ee:	487c      	ldr	r0, [pc, #496]	; (8000be0 <MX_GPIO_Init+0x2ec>)
 80009f0:	f001 fc04 	bl	80021fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SMX_DIR_Pin|NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f242 0116 	movw	r1, #8214	; 0x2016
 80009fa:	487a      	ldr	r0, [pc, #488]	; (8000be4 <MX_GPIO_Init+0x2f0>)
 80009fc:	f001 fbfe 	bl	80021fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SMZL_STEP_GPIO_Port, SMZL_STEP_Pin, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2140      	movs	r1, #64	; 0x40
 8000a04:	4878      	ldr	r0, [pc, #480]	; (8000be8 <MX_GPIO_Init+0x2f4>)
 8000a06:	f001 fbf9 	bl	80021fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SRVO1_Pin|ACP_RST_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	21a0      	movs	r1, #160	; 0xa0
 8000a0e:	4877      	ldr	r0, [pc, #476]	; (8000bec <MX_GPIO_Init+0x2f8>)
 8000a10:	f001 fbf4 	bl	80021fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000a1a:	4875      	ldr	r0, [pc, #468]	; (8000bf0 <MX_GPIO_Init+0x2fc>)
 8000a1c:	f001 fbee 	bl	80021fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000a26:	4873      	ldr	r0, [pc, #460]	; (8000bf4 <MX_GPIO_Init+0x300>)
 8000a28:	f001 fbe8 	bl	80021fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TOP_ZEL_Pin */
  GPIO_InitStruct.Pin = TOP_ZEL_Pin;
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a30:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a36:	2302      	movs	r3, #2
 8000a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TOP_ZEL_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4867      	ldr	r0, [pc, #412]	; (8000be0 <MX_GPIO_Init+0x2ec>)
 8000a42:	f001 fa17 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMZL_DIR_Pin SMZR_DIR_Pin SMZR_STEP_Pin SMX_STEP_Pin */
  GPIO_InitStruct.Pin = SMZL_DIR_Pin|SMZR_DIR_Pin|SMZR_STEP_Pin|SMX_STEP_Pin;
 8000a46:	2378      	movs	r3, #120	; 0x78
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4860      	ldr	r0, [pc, #384]	; (8000be0 <MX_GPIO_Init+0x2ec>)
 8000a5e:	f001 fa09 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMX_DIR_Pin NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = SMX_DIR_Pin|NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000a62:	f242 0316 	movw	r3, #8214	; 0x2016
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a78:	4619      	mov	r1, r3
 8000a7a:	485a      	ldr	r0, [pc, #360]	; (8000be4 <MX_GPIO_Init+0x2f0>)
 8000a7c:	f001 f9fa 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMZL_STEP_Pin */
  GPIO_InitStruct.Pin = SMZL_STEP_Pin;
 8000a80:	2340      	movs	r3, #64	; 0x40
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SMZL_STEP_GPIO_Port, &GPIO_InitStruct);
 8000a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a94:	4619      	mov	r1, r3
 8000a96:	4854      	ldr	r0, [pc, #336]	; (8000be8 <MX_GPIO_Init+0x2f4>)
 8000a98:	f001 f9ec 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000a9c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000aae:	2305      	movs	r3, #5
 8000ab0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	484b      	ldr	r0, [pc, #300]	; (8000be8 <MX_GPIO_Init+0x2f4>)
 8000aba:	f001 f9db 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000abe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ad0:	230e      	movs	r3, #14
 8000ad2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4843      	ldr	r0, [pc, #268]	; (8000be8 <MX_GPIO_Init+0x2f4>)
 8000adc:	f001 f9ca 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : SNSOR_INFRR_Pin */
  GPIO_InitStruct.Pin = SNSOR_INFRR_Pin;
 8000ae0:	2308      	movs	r3, #8
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SNSOR_INFRR_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af0:	4619      	mov	r1, r3
 8000af2:	483c      	ldr	r0, [pc, #240]	; (8000be4 <MX_GPIO_Init+0x2f0>)
 8000af4:	f001 f9be 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|TP_INT1_Pin;
 8000af8:	f248 0303 	movw	r3, #32771	; 0x8003
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000afe:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4837      	ldr	r0, [pc, #220]	; (8000bec <MX_GPIO_Init+0x2f8>)
 8000b10:	f001 f9b0 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000b14:	f641 0358 	movw	r3, #6232	; 0x1858
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b26:	230e      	movs	r3, #14
 8000b28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2e:	4619      	mov	r1, r3
 8000b30:	482e      	ldr	r0, [pc, #184]	; (8000bec <MX_GPIO_Init+0x2f8>)
 8000b32:	f001 f99f 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : SRVO1_Pin ACP_RST_Pin */
  GPIO_InitStruct.Pin = SRVO1_Pin|ACP_RST_Pin;
 8000b36:	23a0      	movs	r3, #160	; 0xa0
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4827      	ldr	r0, [pc, #156]	; (8000bec <MX_GPIO_Init+0x2f8>)
 8000b4e:	f001 f991 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000b52:	2303      	movs	r3, #3
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000b62:	2309      	movs	r3, #9
 8000b64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4822      	ldr	r0, [pc, #136]	; (8000bf8 <MX_GPIO_Init+0x304>)
 8000b6e:	f001 f981 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b72:	2304      	movs	r3, #4
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b82:	4619      	mov	r1, r3
 8000b84:	481c      	ldr	r0, [pc, #112]	; (8000bf8 <MX_GPIO_Init+0x304>)
 8000b86:	f001 f975 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000b8a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b9c:	230e      	movs	r3, #14
 8000b9e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4814      	ldr	r0, [pc, #80]	; (8000bf8 <MX_GPIO_Init+0x304>)
 8000ba8:	f001 f964 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000bac:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000bbe:	230c      	movs	r3, #12
 8000bc0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	480b      	ldr	r0, [pc, #44]	; (8000bf8 <MX_GPIO_Init+0x304>)
 8000bca:	f001 f953 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000bce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bd8:	e010      	b.n	8000bfc <MX_GPIO_Init+0x308>
 8000bda:	bf00      	nop
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40021000 	.word	0x40021000
 8000be4:	40020800 	.word	0x40020800
 8000be8:	40021400 	.word	0x40021400
 8000bec:	40020000 	.word	0x40020000
 8000bf0:	40020c00 	.word	0x40020c00
 8000bf4:	40021800 	.word	0x40021800
 8000bf8:	40020400 	.word	0x40020400
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c04:	4619      	mov	r1, r3
 8000c06:	4868      	ldr	r0, [pc, #416]	; (8000da8 <MX_GPIO_Init+0x4b4>)
 8000c08:	f001 f934 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000c0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c12:	2300      	movs	r3, #0
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4862      	ldr	r0, [pc, #392]	; (8000dac <MX_GPIO_Init+0x4b8>)
 8000c22:	f001 f927 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000c26:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	485b      	ldr	r0, [pc, #364]	; (8000dac <MX_GPIO_Init+0x4b8>)
 8000c40:	f001 f918 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000c44:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c56:	230e      	movs	r3, #14
 8000c58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4853      	ldr	r0, [pc, #332]	; (8000db0 <MX_GPIO_Init+0x4bc>)
 8000c62:	f001 f907 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000c66:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c78:	230e      	movs	r3, #14
 8000c7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c80:	4619      	mov	r1, r3
 8000c82:	484c      	ldr	r0, [pc, #304]	; (8000db4 <MX_GPIO_Init+0x4c0>)
 8000c84:	f001 f8f6 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000c88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c8e:	2312      	movs	r3, #18
 8000c90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c9a:	2304      	movs	r3, #4
 8000c9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4843      	ldr	r0, [pc, #268]	; (8000db4 <MX_GPIO_Init+0x4c0>)
 8000ca6:	f001 f8e5 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000caa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cb0:	2312      	movs	r3, #18
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000cbc:	2304      	movs	r3, #4
 8000cbe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	483c      	ldr	r0, [pc, #240]	; (8000db8 <MX_GPIO_Init+0x4c4>)
 8000cc8:	f001 f8d4 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000ccc:	2348      	movs	r3, #72	; 0x48
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000cdc:	230e      	movs	r3, #14
 8000cde:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4831      	ldr	r0, [pc, #196]	; (8000dac <MX_GPIO_Init+0x4b8>)
 8000ce8:	f001 f8c4 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LEFT_XEL_Pin */
  GPIO_InitStruct.Pin = LEFT_XEL_Pin;
 8000cec:	2320      	movs	r3, #32
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000cf0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LEFT_XEL_GPIO_Port, &GPIO_InitStruct);
 8000cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfe:	4619      	mov	r1, r3
 8000d00:	482a      	ldr	r0, [pc, #168]	; (8000dac <MX_GPIO_Init+0x4b8>)
 8000d02:	f001 f8b7 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000d06:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000d18:	2309      	movs	r3, #9
 8000d1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d20:	4619      	mov	r1, r3
 8000d22:	4823      	ldr	r0, [pc, #140]	; (8000db0 <MX_GPIO_Init+0x4bc>)
 8000d24:	f001 f8a6 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000d28:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3e:	4619      	mov	r1, r3
 8000d40:	481b      	ldr	r0, [pc, #108]	; (8000db0 <MX_GPIO_Init+0x4bc>)
 8000d42:	f001 f897 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : RGHT_XEL_Pin BOTT_ZEL_Pin */
  GPIO_InitStruct.Pin = RGHT_XEL_Pin|BOTT_ZEL_Pin;
 8000d46:	2318      	movs	r3, #24
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000d4a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d50:	2302      	movs	r3, #2
 8000d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4813      	ldr	r0, [pc, #76]	; (8000da8 <MX_GPIO_Init+0x4b4>)
 8000d5c:	f001 f88a 	bl	8001e74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2105      	movs	r1, #5
 8000d64:	2008      	movs	r0, #8
 8000d66:	f000 fc59 	bl	800161c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000d6a:	2008      	movs	r0, #8
 8000d6c:	f000 fc72 	bl	8001654 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2105      	movs	r1, #5
 8000d74:	2009      	movs	r0, #9
 8000d76:	f000 fc51 	bl	800161c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000d7a:	2009      	movs	r0, #9
 8000d7c:	f000 fc6a 	bl	8001654 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2105      	movs	r1, #5
 8000d84:	200a      	movs	r0, #10
 8000d86:	f000 fc49 	bl	800161c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000d8a:	200a      	movs	r0, #10
 8000d8c:	f000 fc62 	bl	8001654 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2105      	movs	r1, #5
 8000d94:	2017      	movs	r0, #23
 8000d96:	f000 fc41 	bl	800161c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d9a:	2017      	movs	r0, #23
 8000d9c:	f000 fc5a 	bl	8001654 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000da0:	bf00      	nop
 8000da2:	3738      	adds	r7, #56	; 0x38
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40020400 	.word	0x40020400
 8000dac:	40020c00 	.word	0x40020c00
 8000db0:	40021800 	.word	0x40021800
 8000db4:	40020800 	.word	0x40020800
 8000db8:	40020000 	.word	0x40020000

08000dbc <Task_action>:

/* USER CODE BEGIN 4 */
void Task_action(unsigned message)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	//uint8_t data[] = {message, '\n', '\r'};
	//HAL_UART_Transmit(&huart1, data, 3, 2);
	switch (message) {
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d008      	beq.n	8000ddc <Task_action+0x20>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d10b      	bne.n	8000de8 <Task_action+0x2c>
		case Verde:
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000dd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dd4:	4807      	ldr	r0, [pc, #28]	; (8000df4 <Task_action+0x38>)
 8000dd6:	f001 fa2a 	bl	800222e <HAL_GPIO_TogglePin>
			break;
 8000dda:	e006      	b.n	8000dea <Task_action+0x2e>
		case Rojo:
			HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000ddc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000de0:	4804      	ldr	r0, [pc, #16]	; (8000df4 <Task_action+0x38>)
 8000de2:	f001 fa24 	bl	800222e <HAL_GPIO_TogglePin>
			break;
 8000de6:	e000      	b.n	8000dea <Task_action+0x2e>
		default:
			break;
 8000de8:	bf00      	nop
	}
	//osDelay(100);
	//HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40021800 	.word	0x40021800

08000df8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	GPIO_PinState state = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {

	  state = HAL_GPIO_ReadPin(SMZL_DIR_GPIO_Port, SMZL_DIR_Pin);
 8000e04:	2108      	movs	r1, #8
 8000e06:	4813      	ldr	r0, [pc, #76]	; (8000e54 <StartDefaultTask+0x5c>)
 8000e08:	f001 f9e0 	bl	80021cc <HAL_GPIO_ReadPin>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	73fb      	strb	r3, [r7, #15]
	  HAL_GPIO_WritePin(SMZL_DIR_GPIO_Port, SMZL_DIR_Pin, (GPIO_PinState)AxisDir_Z_DOWN);
 8000e10:	2201      	movs	r2, #1
 8000e12:	2108      	movs	r1, #8
 8000e14:	480f      	ldr	r0, [pc, #60]	; (8000e54 <StartDefaultTask+0x5c>)
 8000e16:	f001 f9f1 	bl	80021fc <HAL_GPIO_WritePin>
	  HAL_GPIO_TogglePin(SMZR_DIR_GPIO_Port, SMZR_DIR_Pin);
 8000e1a:	2110      	movs	r1, #16
 8000e1c:	480d      	ldr	r0, [pc, #52]	; (8000e54 <StartDefaultTask+0x5c>)
 8000e1e:	f001 fa06 	bl	800222e <HAL_GPIO_TogglePin>

	  Task_action(Verde);
 8000e22:	2001      	movs	r0, #1
 8000e24:	f7ff ffca 	bl	8000dbc <Task_action>
		//Test();
	  //smRun();
	smMotorSteps(120);
 8000e28:	2078      	movs	r0, #120	; 0x78
 8000e2a:	f004 f9a5 	bl	8005178 <smMotorSteps>

    state = HAL_GPIO_ReadPin(SMZL_DIR_GPIO_Port, SMZL_DIR_Pin);
 8000e2e:	2108      	movs	r1, #8
 8000e30:	4808      	ldr	r0, [pc, #32]	; (8000e54 <StartDefaultTask+0x5c>)
 8000e32:	f001 f9cb 	bl	80021cc <HAL_GPIO_ReadPin>
 8000e36:	4603      	mov	r3, r0
 8000e38:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(SMZL_DIR_GPIO_Port, SMZL_DIR_Pin, (GPIO_PinState)AxisDir_Z_UP);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2108      	movs	r1, #8
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <StartDefaultTask+0x5c>)
 8000e40:	f001 f9dc 	bl	80021fc <HAL_GPIO_WritePin>

    smMotorSteps(120);
 8000e44:	2078      	movs	r0, #120	; 0x78
 8000e46:	f004 f997 	bl	8005178 <smMotorSteps>

	  Task_action(Verde);
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f7ff ffb6 	bl	8000dbc <Task_action>
	  state = HAL_GPIO_ReadPin(SMZL_DIR_GPIO_Port, SMZL_DIR_Pin);
 8000e50:	e7d8      	b.n	8000e04 <StartDefaultTask+0xc>
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000

08000e58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d101      	bne.n	8000e6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e6a:	f000 faff 	bl	800146c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40001000 	.word	0x40001000

08000e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e80:	b672      	cpsid	i
}
 8000e82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <Error_Handler+0x8>
	...

08000e88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_MspInit+0x54>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	4a11      	ldr	r2, [pc, #68]	; (8000edc <HAL_MspInit+0x54>)
 8000e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <HAL_MspInit+0x54>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	603b      	str	r3, [r7, #0]
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <HAL_MspInit+0x54>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <HAL_MspInit+0x54>)
 8000eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <HAL_MspInit+0x54>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	210f      	movs	r1, #15
 8000eca:	f06f 0001 	mvn.w	r0, #1
 8000ece:	f000 fba5 	bl	800161c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40023800 	.word	0x40023800

08000ee0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0b      	ldr	r2, [pc, #44]	; (8000f1c <HAL_TIM_Base_MspInit+0x3c>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d10d      	bne.n	8000f0e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <HAL_TIM_Base_MspInit+0x40>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	4a09      	ldr	r2, [pc, #36]	; (8000f20 <HAL_TIM_Base_MspInit+0x40>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6453      	str	r3, [r2, #68]	; 0x44
 8000f02:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <HAL_TIM_Base_MspInit+0x40>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f0e:	bf00      	nop
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40010000 	.word	0x40010000
 8000f20:	40023800 	.word	0x40023800

08000f24 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <HAL_TIM_PWM_MspInit+0x3c>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d10d      	bne.n	8000f52 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <HAL_TIM_PWM_MspInit+0x40>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	4a09      	ldr	r2, [pc, #36]	; (8000f64 <HAL_TIM_PWM_MspInit+0x40>)
 8000f40:	f043 0304 	orr.w	r3, r3, #4
 8000f44:	6413      	str	r3, [r2, #64]	; 0x40
 8000f46:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <HAL_TIM_PWM_MspInit+0x40>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f003 0304 	and.w	r3, r3, #4
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f52:	bf00      	nop
 8000f54:	3714      	adds	r7, #20
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	40000800 	.word	0x40000800
 8000f64:	40023800 	.word	0x40023800

08000f68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a12      	ldr	r2, [pc, #72]	; (8000fd0 <HAL_TIM_MspPostInit+0x68>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d11d      	bne.n	8000fc6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <HAL_TIM_MspPostInit+0x6c>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a10      	ldr	r2, [pc, #64]	; (8000fd4 <HAL_TIM_MspPostInit+0x6c>)
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <HAL_TIM_MspPostInit+0x6c>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = SRVO2_Pin;
 8000fa6:	2380      	movs	r3, #128	; 0x80
 8000fa8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SRVO2_GPIO_Port, &GPIO_InitStruct);
 8000fba:	f107 030c 	add.w	r3, r7, #12
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <HAL_TIM_MspPostInit+0x70>)
 8000fc2:	f000 ff57 	bl	8001e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000fc6:	bf00      	nop
 8000fc8:	3720      	adds	r7, #32
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40000800 	.word	0x40000800
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020400 	.word	0x40020400

08000fdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	; 0x28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a34      	ldr	r2, [pc, #208]	; (80010cc <HAL_UART_MspInit+0xf0>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d162      	bne.n	80010c4 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	4b33      	ldr	r3, [pc, #204]	; (80010d0 <HAL_UART_MspInit+0xf4>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	4a32      	ldr	r2, [pc, #200]	; (80010d0 <HAL_UART_MspInit+0xf4>)
 8001008:	f043 0310 	orr.w	r3, r3, #16
 800100c:	6453      	str	r3, [r2, #68]	; 0x44
 800100e:	4b30      	ldr	r3, [pc, #192]	; (80010d0 <HAL_UART_MspInit+0xf4>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	f003 0310 	and.w	r3, r3, #16
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b2c      	ldr	r3, [pc, #176]	; (80010d0 <HAL_UART_MspInit+0xf4>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a2b      	ldr	r2, [pc, #172]	; (80010d0 <HAL_UART_MspInit+0xf4>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b29      	ldr	r3, [pc, #164]	; (80010d0 <HAL_UART_MspInit+0xf4>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001036:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800103a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001044:	2303      	movs	r3, #3
 8001046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001048:	2307      	movs	r3, #7
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	4820      	ldr	r0, [pc, #128]	; (80010d4 <HAL_UART_MspInit+0xf8>)
 8001054:	f000 ff0e 	bl	8001e74 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001058:	4b1f      	ldr	r3, [pc, #124]	; (80010d8 <HAL_UART_MspInit+0xfc>)
 800105a:	4a20      	ldr	r2, [pc, #128]	; (80010dc <HAL_UART_MspInit+0x100>)
 800105c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800105e:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <HAL_UART_MspInit+0xfc>)
 8001060:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001064:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001066:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <HAL_UART_MspInit+0xfc>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800106c:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <HAL_UART_MspInit+0xfc>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001072:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <HAL_UART_MspInit+0xfc>)
 8001074:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001078:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800107a:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <HAL_UART_MspInit+0xfc>)
 800107c:	2200      	movs	r2, #0
 800107e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001080:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <HAL_UART_MspInit+0xfc>)
 8001082:	2200      	movs	r2, #0
 8001084:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001086:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <HAL_UART_MspInit+0xfc>)
 8001088:	2200      	movs	r2, #0
 800108a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_UART_MspInit+0xfc>)
 800108e:	2200      	movs	r2, #0
 8001090:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <HAL_UART_MspInit+0xfc>)
 8001094:	2200      	movs	r2, #0
 8001096:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001098:	480f      	ldr	r0, [pc, #60]	; (80010d8 <HAL_UART_MspInit+0xfc>)
 800109a:	f000 fae9 	bl	8001670 <HAL_DMA_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80010a4:	f7ff feea 	bl	8000e7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a0b      	ldr	r2, [pc, #44]	; (80010d8 <HAL_UART_MspInit+0xfc>)
 80010ac:	639a      	str	r2, [r3, #56]	; 0x38
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <HAL_UART_MspInit+0xfc>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2105      	movs	r1, #5
 80010b8:	2025      	movs	r0, #37	; 0x25
 80010ba:	f000 faaf 	bl	800161c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010be:	2025      	movs	r0, #37	; 0x25
 80010c0:	f000 fac8 	bl	8001654 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010c4:	bf00      	nop
 80010c6:	3728      	adds	r7, #40	; 0x28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40011000 	.word	0x40011000
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40020000 	.word	0x40020000
 80010d8:	20000204 	.word	0x20000204
 80010dc:	40026440 	.word	0x40026440

080010e0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80010f4:	4b3b      	ldr	r3, [pc, #236]	; (80011e4 <HAL_FMC_MspInit+0x104>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d16f      	bne.n	80011dc <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80010fc:	4b39      	ldr	r3, [pc, #228]	; (80011e4 <HAL_FMC_MspInit+0x104>)
 80010fe:	2201      	movs	r2, #1
 8001100:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	603b      	str	r3, [r7, #0]
 8001106:	4b38      	ldr	r3, [pc, #224]	; (80011e8 <HAL_FMC_MspInit+0x108>)
 8001108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800110a:	4a37      	ldr	r2, [pc, #220]	; (80011e8 <HAL_FMC_MspInit+0x108>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6393      	str	r3, [r2, #56]	; 0x38
 8001112:	4b35      	ldr	r3, [pc, #212]	; (80011e8 <HAL_FMC_MspInit+0x108>)
 8001114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800111e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001122:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112c:	2303      	movs	r3, #3
 800112e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001130:	230c      	movs	r3, #12
 8001132:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	4619      	mov	r1, r3
 8001138:	482c      	ldr	r0, [pc, #176]	; (80011ec <HAL_FMC_MspInit+0x10c>)
 800113a:	f000 fe9b 	bl	8001e74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800113e:	2301      	movs	r3, #1
 8001140:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114a:	2303      	movs	r3, #3
 800114c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800114e:	230c      	movs	r3, #12
 8001150:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	4619      	mov	r1, r3
 8001156:	4826      	ldr	r0, [pc, #152]	; (80011f0 <HAL_FMC_MspInit+0x110>)
 8001158:	f000 fe8c 	bl	8001e74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800115c:	f248 1333 	movw	r3, #33075	; 0x8133
 8001160:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	2302      	movs	r3, #2
 8001164:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116a:	2303      	movs	r3, #3
 800116c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800116e:	230c      	movs	r3, #12
 8001170:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	4619      	mov	r1, r3
 8001176:	481f      	ldr	r0, [pc, #124]	; (80011f4 <HAL_FMC_MspInit+0x114>)
 8001178:	f000 fe7c 	bl	8001e74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800117c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001180:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001182:	2302      	movs	r3, #2
 8001184:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118a:	2303      	movs	r3, #3
 800118c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800118e:	230c      	movs	r3, #12
 8001190:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	4619      	mov	r1, r3
 8001196:	4818      	ldr	r0, [pc, #96]	; (80011f8 <HAL_FMC_MspInit+0x118>)
 8001198:	f000 fe6c 	bl	8001e74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800119c:	f24c 7303 	movw	r3, #50947	; 0xc703
 80011a0:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011aa:	2303      	movs	r3, #3
 80011ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011ae:	230c      	movs	r3, #12
 80011b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	4619      	mov	r1, r3
 80011b6:	4811      	ldr	r0, [pc, #68]	; (80011fc <HAL_FMC_MspInit+0x11c>)
 80011b8:	f000 fe5c 	bl	8001e74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80011bc:	2360      	movs	r3, #96	; 0x60
 80011be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c0:	2302      	movs	r3, #2
 80011c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c8:	2303      	movs	r3, #3
 80011ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011cc:	230c      	movs	r3, #12
 80011ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	4619      	mov	r1, r3
 80011d4:	480a      	ldr	r0, [pc, #40]	; (8001200 <HAL_FMC_MspInit+0x120>)
 80011d6:	f000 fe4d 	bl	8001e74 <HAL_GPIO_Init>
 80011da:	e000      	b.n	80011de <HAL_FMC_MspInit+0xfe>
    return;
 80011dc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	2000029c 	.word	0x2000029c
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40021400 	.word	0x40021400
 80011f0:	40020800 	.word	0x40020800
 80011f4:	40021800 	.word	0x40021800
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40020c00 	.word	0x40020c00
 8001200:	40020400 	.word	0x40020400

08001204 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800120c:	f7ff ff68 	bl	80010e0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08e      	sub	sp, #56	; 0x38
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001220:	2300      	movs	r3, #0
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001224:	2300      	movs	r3, #0
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001228:	2300      	movs	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	4b33      	ldr	r3, [pc, #204]	; (80012fc <HAL_InitTick+0xe4>)
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	4a32      	ldr	r2, [pc, #200]	; (80012fc <HAL_InitTick+0xe4>)
 8001232:	f043 0310 	orr.w	r3, r3, #16
 8001236:	6413      	str	r3, [r2, #64]	; 0x40
 8001238:	4b30      	ldr	r3, [pc, #192]	; (80012fc <HAL_InitTick+0xe4>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	f003 0310 	and.w	r3, r3, #16
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001244:	f107 0210 	add.w	r2, r7, #16
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4611      	mov	r1, r2
 800124e:	4618      	mov	r0, r3
 8001250:	f001 fcb8 	bl	8002bc4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001254:	6a3b      	ldr	r3, [r7, #32]
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125a:	2b00      	cmp	r3, #0
 800125c:	d103      	bne.n	8001266 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800125e:	f001 fc89 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 8001262:	6378      	str	r0, [r7, #52]	; 0x34
 8001264:	e004      	b.n	8001270 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001266:	f001 fc85 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 800126a:	4603      	mov	r3, r0
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001272:	4a23      	ldr	r2, [pc, #140]	; (8001300 <HAL_InitTick+0xe8>)
 8001274:	fba2 2303 	umull	r2, r3, r2, r3
 8001278:	0c9b      	lsrs	r3, r3, #18
 800127a:	3b01      	subs	r3, #1
 800127c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800127e:	4b21      	ldr	r3, [pc, #132]	; (8001304 <HAL_InitTick+0xec>)
 8001280:	4a21      	ldr	r2, [pc, #132]	; (8001308 <HAL_InitTick+0xf0>)
 8001282:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001284:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <HAL_InitTick+0xec>)
 8001286:	f240 32e7 	movw	r2, #999	; 0x3e7
 800128a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800128c:	4a1d      	ldr	r2, [pc, #116]	; (8001304 <HAL_InitTick+0xec>)
 800128e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001290:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001292:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <HAL_InitTick+0xec>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001298:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <HAL_InitTick+0xec>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <HAL_InitTick+0xec>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80012a4:	4817      	ldr	r0, [pc, #92]	; (8001304 <HAL_InitTick+0xec>)
 80012a6:	f001 fcf3 	bl	8002c90 <HAL_TIM_Base_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80012b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d11b      	bne.n	80012f0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80012b8:	4812      	ldr	r0, [pc, #72]	; (8001304 <HAL_InitTick+0xec>)
 80012ba:	f001 fd39 	bl	8002d30 <HAL_TIM_Base_Start_IT>
 80012be:	4603      	mov	r3, r0
 80012c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80012c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d111      	bne.n	80012f0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012cc:	2036      	movs	r0, #54	; 0x36
 80012ce:	f000 f9c1 	bl	8001654 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b0f      	cmp	r3, #15
 80012d6:	d808      	bhi.n	80012ea <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80012d8:	2200      	movs	r2, #0
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	2036      	movs	r0, #54	; 0x36
 80012de:	f000 f99d 	bl	800161c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012e2:	4a0a      	ldr	r2, [pc, #40]	; (800130c <HAL_InitTick+0xf4>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	e002      	b.n	80012f0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3738      	adds	r7, #56	; 0x38
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40023800 	.word	0x40023800
 8001300:	431bde83 	.word	0x431bde83
 8001304:	200002a0 	.word	0x200002a0
 8001308:	40001000 	.word	0x40001000
 800130c:	20000004 	.word	0x20000004

08001310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <NMI_Handler+0x4>

08001316 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131a:	e7fe      	b.n	800131a <HardFault_Handler+0x4>

0800131c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <MemManage_Handler+0x4>

08001322 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001326:	e7fe      	b.n	8001326 <BusFault_Handler+0x4>

08001328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800132c:	e7fe      	b.n	800132c <UsageFault_Handler+0x4>

0800132e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOP_ZEL_Pin);
 8001340:	2004      	movs	r0, #4
 8001342:	f000 ff8f 	bl	8002264 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}

0800134a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RGHT_XEL_Pin);
 800134e:	2008      	movs	r0, #8
 8001350:	f000 ff88 	bl	8002264 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}

08001358 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOTT_ZEL_Pin);
 800135c:	2010      	movs	r0, #16
 800135e:	f000 ff81 	bl	8002264 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}

08001366 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFT_XEL_Pin);
 800136a:	2020      	movs	r0, #32
 800136c:	f000 ff7a 	bl	8002264 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}

08001374 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001378:	4802      	ldr	r0, [pc, #8]	; (8001384 <USART1_IRQHandler+0x10>)
 800137a:	f002 fd11 	bl	8003da0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200001c0 	.word	0x200001c0

08001388 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800138c:	4802      	ldr	r0, [pc, #8]	; (8001398 <TIM6_DAC_IRQHandler+0x10>)
 800138e:	f001 fd8e 	bl	8002eae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	200002a0 	.word	0x200002a0

0800139c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80013a0:	4802      	ldr	r0, [pc, #8]	; (80013ac <DMA2_Stream2_IRQHandler+0x10>)
 80013a2:	f000 fafd 	bl	80019a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000204 	.word	0x20000204

080013b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <SystemInit+0x20>)
 80013b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ba:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <SystemInit+0x20>)
 80013bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80013d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800140c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013d8:	480d      	ldr	r0, [pc, #52]	; (8001410 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013da:	490e      	ldr	r1, [pc, #56]	; (8001414 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013dc:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e0:	e002      	b.n	80013e8 <LoopCopyDataInit>

080013e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e6:	3304      	adds	r3, #4

080013e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ec:	d3f9      	bcc.n	80013e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ee:	4a0b      	ldr	r2, [pc, #44]	; (800141c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013f0:	4c0b      	ldr	r4, [pc, #44]	; (8001420 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f4:	e001      	b.n	80013fa <LoopFillZerobss>

080013f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f8:	3204      	adds	r2, #4

080013fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013fc:	d3fb      	bcc.n	80013f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013fe:	f7ff ffd7 	bl	80013b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001402:	f006 feb7 	bl	8008174 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001406:	f7ff f88b 	bl	8000520 <main>
  bx  lr    
 800140a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800140c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001414:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 8001418:	0800831c 	.word	0x0800831c
  ldr r2, =_sbss
 800141c:	20000114 	.word	0x20000114
  ldr r4, =_ebss
 8001420:	2000927c 	.word	0x2000927c

08001424 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001424:	e7fe      	b.n	8001424 <ADC_IRQHandler>
	...

08001428 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800142c:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <HAL_Init+0x40>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a0d      	ldr	r2, [pc, #52]	; (8001468 <HAL_Init+0x40>)
 8001432:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001436:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <HAL_Init+0x40>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <HAL_Init+0x40>)
 800143e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001442:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <HAL_Init+0x40>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a07      	ldr	r2, [pc, #28]	; (8001468 <HAL_Init+0x40>)
 800144a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800144e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001450:	2003      	movs	r0, #3
 8001452:	f000 f8d8 	bl	8001606 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001456:	200f      	movs	r0, #15
 8001458:	f7ff fede 	bl	8001218 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800145c:	f7ff fd14 	bl	8000e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40023c00 	.word	0x40023c00

0800146c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_IncTick+0x20>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_IncTick+0x24>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4413      	add	r3, r2
 800147c:	4a04      	ldr	r2, [pc, #16]	; (8001490 <HAL_IncTick+0x24>)
 800147e:	6013      	str	r3, [r2, #0]
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	20000008 	.word	0x20000008
 8001490:	200002e8 	.word	0x200002e8

08001494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return uwTick;
 8001498:	4b03      	ldr	r3, [pc, #12]	; (80014a8 <HAL_GetTick+0x14>)
 800149a:	681b      	ldr	r3, [r3, #0]
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	200002e8 	.word	0x200002e8

080014ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c8:	4013      	ands	r3, r2
 80014ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014de:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	60d3      	str	r3, [r2, #12]
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <__NVIC_GetPriorityGrouping+0x18>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	0a1b      	lsrs	r3, r3, #8
 80014fe:	f003 0307 	and.w	r3, r3, #7
}
 8001502:	4618      	mov	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	2b00      	cmp	r3, #0
 8001520:	db0b      	blt.n	800153a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	f003 021f 	and.w	r2, r3, #31
 8001528:	4907      	ldr	r1, [pc, #28]	; (8001548 <__NVIC_EnableIRQ+0x38>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	095b      	lsrs	r3, r3, #5
 8001530:	2001      	movs	r0, #1
 8001532:	fa00 f202 	lsl.w	r2, r0, r2
 8001536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000e100 	.word	0xe000e100

0800154c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	6039      	str	r1, [r7, #0]
 8001556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155c:	2b00      	cmp	r3, #0
 800155e:	db0a      	blt.n	8001576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	b2da      	uxtb	r2, r3
 8001564:	490c      	ldr	r1, [pc, #48]	; (8001598 <__NVIC_SetPriority+0x4c>)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	0112      	lsls	r2, r2, #4
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	440b      	add	r3, r1
 8001570:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001574:	e00a      	b.n	800158c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4908      	ldr	r1, [pc, #32]	; (800159c <__NVIC_SetPriority+0x50>)
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	f003 030f 	and.w	r3, r3, #15
 8001582:	3b04      	subs	r3, #4
 8001584:	0112      	lsls	r2, r2, #4
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	440b      	add	r3, r1
 800158a:	761a      	strb	r2, [r3, #24]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000e100 	.word	0xe000e100
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b089      	sub	sp, #36	; 0x24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f1c3 0307 	rsb	r3, r3, #7
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	bf28      	it	cs
 80015be:	2304      	movcs	r3, #4
 80015c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3304      	adds	r3, #4
 80015c6:	2b06      	cmp	r3, #6
 80015c8:	d902      	bls.n	80015d0 <NVIC_EncodePriority+0x30>
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3b03      	subs	r3, #3
 80015ce:	e000      	b.n	80015d2 <NVIC_EncodePriority+0x32>
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	f04f 32ff 	mov.w	r2, #4294967295
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43da      	mvns	r2, r3
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	401a      	ands	r2, r3
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	fa01 f303 	lsl.w	r3, r1, r3
 80015f2:	43d9      	mvns	r1, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f8:	4313      	orrs	r3, r2
         );
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3724      	adds	r7, #36	; 0x24
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff ff4c 	bl	80014ac <__NVIC_SetPriorityGrouping>
}
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
 8001628:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800162e:	f7ff ff61 	bl	80014f4 <__NVIC_GetPriorityGrouping>
 8001632:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	68b9      	ldr	r1, [r7, #8]
 8001638:	6978      	ldr	r0, [r7, #20]
 800163a:	f7ff ffb1 	bl	80015a0 <NVIC_EncodePriority>
 800163e:	4602      	mov	r2, r0
 8001640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001644:	4611      	mov	r1, r2
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff ff80 	bl	800154c <__NVIC_SetPriority>
}
 800164c:	bf00      	nop
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff ff54 	bl	8001510 <__NVIC_EnableIRQ>
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800167c:	f7ff ff0a 	bl	8001494 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e099      	b.n	80017c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2202      	movs	r2, #2
 8001690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0201 	bic.w	r2, r2, #1
 80016aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ac:	e00f      	b.n	80016ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016ae:	f7ff fef1 	bl	8001494 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b05      	cmp	r3, #5
 80016ba:	d908      	bls.n	80016ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2220      	movs	r2, #32
 80016c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2203      	movs	r2, #3
 80016c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e078      	b.n	80017c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1e8      	bne.n	80016ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	4b38      	ldr	r3, [pc, #224]	; (80017c8 <HAL_DMA_Init+0x158>)
 80016e8:	4013      	ands	r3, r2
 80016ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	691b      	ldr	r3, [r3, #16]
 8001700:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001706:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001712:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	4313      	orrs	r3, r2
 800171e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	2b04      	cmp	r3, #4
 8001726:	d107      	bne.n	8001738 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001730:	4313      	orrs	r3, r2
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	4313      	orrs	r3, r2
 8001736:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f023 0307 	bic.w	r3, r3, #7
 800174e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	4313      	orrs	r3, r2
 8001758:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	2b04      	cmp	r3, #4
 8001760:	d117      	bne.n	8001792 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	4313      	orrs	r3, r2
 800176a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	2b00      	cmp	r3, #0
 8001772:	d00e      	beq.n	8001792 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 fb01 	bl	8001d7c <DMA_CheckFifoParam>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d008      	beq.n	8001792 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2240      	movs	r2, #64	; 0x40
 8001784:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2201      	movs	r2, #1
 800178a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800178e:	2301      	movs	r3, #1
 8001790:	e016      	b.n	80017c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 fab8 	bl	8001d10 <DMA_CalcBaseAndBitshift>
 80017a0:	4603      	mov	r3, r0
 80017a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a8:	223f      	movs	r2, #63	; 0x3f
 80017aa:	409a      	lsls	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2201      	movs	r2, #1
 80017ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	f010803f 	.word	0xf010803f

080017cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d101      	bne.n	80017f2 <HAL_DMA_Start_IT+0x26>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e040      	b.n	8001874 <HAL_DMA_Start_IT+0xa8>
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b01      	cmp	r3, #1
 8001804:	d12f      	bne.n	8001866 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2202      	movs	r2, #2
 800180a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2200      	movs	r2, #0
 8001812:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	68b9      	ldr	r1, [r7, #8]
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f000 fa4a 	bl	8001cb4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001824:	223f      	movs	r2, #63	; 0x3f
 8001826:	409a      	lsls	r2, r3
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f042 0216 	orr.w	r2, r2, #22
 800183a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	2b00      	cmp	r3, #0
 8001842:	d007      	beq.n	8001854 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f042 0208 	orr.w	r2, r2, #8
 8001852:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 0201 	orr.w	r2, r2, #1
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	e005      	b.n	8001872 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800186e:	2302      	movs	r3, #2
 8001870:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001872:	7dfb      	ldrb	r3, [r7, #23]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001888:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800188a:	f7ff fe03 	bl	8001494 <HAL_GetTick>
 800188e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001896:	b2db      	uxtb	r3, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d008      	beq.n	80018ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2280      	movs	r2, #128	; 0x80
 80018a0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e052      	b.n	8001954 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0216 	bic.w	r2, r2, #22
 80018bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	695a      	ldr	r2, [r3, #20]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d103      	bne.n	80018de <HAL_DMA_Abort+0x62>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d007      	beq.n	80018ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 0208 	bic.w	r2, r2, #8
 80018ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 0201 	bic.w	r2, r2, #1
 80018fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018fe:	e013      	b.n	8001928 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001900:	f7ff fdc8 	bl	8001494 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b05      	cmp	r3, #5
 800190c:	d90c      	bls.n	8001928 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2220      	movs	r2, #32
 8001912:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2203      	movs	r2, #3
 8001918:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e015      	b.n	8001954 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1e4      	bne.n	8001900 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193a:	223f      	movs	r2, #63	; 0x3f
 800193c:	409a      	lsls	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d004      	beq.n	800197a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2280      	movs	r2, #128	; 0x80
 8001974:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e00c      	b.n	8001994 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2205      	movs	r2, #5
 800197e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 0201 	bic.w	r2, r2, #1
 8001990:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019ac:	4b8e      	ldr	r3, [pc, #568]	; (8001be8 <HAL_DMA_IRQHandler+0x248>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a8e      	ldr	r2, [pc, #568]	; (8001bec <HAL_DMA_IRQHandler+0x24c>)
 80019b2:	fba2 2303 	umull	r2, r3, r2, r3
 80019b6:	0a9b      	lsrs	r3, r3, #10
 80019b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ca:	2208      	movs	r2, #8
 80019cc:	409a      	lsls	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4013      	ands	r3, r2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d01a      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d013      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0204 	bic.w	r2, r2, #4
 80019f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f8:	2208      	movs	r2, #8
 80019fa:	409a      	lsls	r2, r3
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a04:	f043 0201 	orr.w	r2, r3, #1
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a10:	2201      	movs	r2, #1
 8001a12:	409a      	lsls	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d012      	beq.n	8001a42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00b      	beq.n	8001a42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2e:	2201      	movs	r2, #1
 8001a30:	409a      	lsls	r2, r3
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a3a:	f043 0202 	orr.w	r2, r3, #2
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a46:	2204      	movs	r2, #4
 8001a48:	409a      	lsls	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d012      	beq.n	8001a78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00b      	beq.n	8001a78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a64:	2204      	movs	r2, #4
 8001a66:	409a      	lsls	r2, r3
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a70:	f043 0204 	orr.w	r2, r3, #4
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7c:	2210      	movs	r2, #16
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d043      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d03c      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9a:	2210      	movs	r2, #16
 8001a9c:	409a      	lsls	r2, r3
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d018      	beq.n	8001ae2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d108      	bne.n	8001ad0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d024      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	4798      	blx	r3
 8001ace:	e01f      	b.n	8001b10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d01b      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	4798      	blx	r3
 8001ae0:	e016      	b.n	8001b10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d107      	bne.n	8001b00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0208 	bic.w	r2, r2, #8
 8001afe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b14:	2220      	movs	r2, #32
 8001b16:	409a      	lsls	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 808f 	beq.w	8001c40 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0310 	and.w	r3, r3, #16
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 8087 	beq.w	8001c40 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b36:	2220      	movs	r2, #32
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b05      	cmp	r3, #5
 8001b48:	d136      	bne.n	8001bb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0216 	bic.w	r2, r2, #22
 8001b58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	695a      	ldr	r2, [r3, #20]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d103      	bne.n	8001b7a <HAL_DMA_IRQHandler+0x1da>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d007      	beq.n	8001b8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 0208 	bic.w	r2, r2, #8
 8001b88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8e:	223f      	movs	r2, #63	; 0x3f
 8001b90:	409a      	lsls	r2, r3
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d07e      	beq.n	8001cac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	4798      	blx	r3
        }
        return;
 8001bb6:	e079      	b.n	8001cac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d01d      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10d      	bne.n	8001bf0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d031      	beq.n	8001c40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	4798      	blx	r3
 8001be4:	e02c      	b.n	8001c40 <HAL_DMA_IRQHandler+0x2a0>
 8001be6:	bf00      	nop
 8001be8:	20000000 	.word	0x20000000
 8001bec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d023      	beq.n	8001c40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	4798      	blx	r3
 8001c00:	e01e      	b.n	8001c40 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10f      	bne.n	8001c30 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0210 	bic.w	r2, r2, #16
 8001c1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d032      	beq.n	8001cae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d022      	beq.n	8001c9a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2205      	movs	r2, #5
 8001c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0201 	bic.w	r2, r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d307      	bcc.n	8001c88 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f2      	bne.n	8001c6c <HAL_DMA_IRQHandler+0x2cc>
 8001c86:	e000      	b.n	8001c8a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c88:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d005      	beq.n	8001cae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	4798      	blx	r3
 8001caa:	e000      	b.n	8001cae <HAL_DMA_IRQHandler+0x30e>
        return;
 8001cac:	bf00      	nop
    }
  }
}
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
 8001cc0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cd0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2b40      	cmp	r3, #64	; 0x40
 8001ce0:	d108      	bne.n	8001cf4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001cf2:	e007      	b.n	8001d04 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	60da      	str	r2, [r3, #12]
}
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	3b10      	subs	r3, #16
 8001d20:	4a14      	ldr	r2, [pc, #80]	; (8001d74 <DMA_CalcBaseAndBitshift+0x64>)
 8001d22:	fba2 2303 	umull	r2, r3, r2, r3
 8001d26:	091b      	lsrs	r3, r3, #4
 8001d28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d2a:	4a13      	ldr	r2, [pc, #76]	; (8001d78 <DMA_CalcBaseAndBitshift+0x68>)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4413      	add	r3, r2
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	d909      	bls.n	8001d52 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d46:	f023 0303 	bic.w	r3, r3, #3
 8001d4a:	1d1a      	adds	r2, r3, #4
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	659a      	str	r2, [r3, #88]	; 0x58
 8001d50:	e007      	b.n	8001d62 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d5a:	f023 0303 	bic.w	r3, r3, #3
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	aaaaaaab 	.word	0xaaaaaaab
 8001d78:	08008304 	.word	0x08008304

08001d7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d11f      	bne.n	8001dd6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	2b03      	cmp	r3, #3
 8001d9a:	d856      	bhi.n	8001e4a <DMA_CheckFifoParam+0xce>
 8001d9c:	a201      	add	r2, pc, #4	; (adr r2, 8001da4 <DMA_CheckFifoParam+0x28>)
 8001d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da2:	bf00      	nop
 8001da4:	08001db5 	.word	0x08001db5
 8001da8:	08001dc7 	.word	0x08001dc7
 8001dac:	08001db5 	.word	0x08001db5
 8001db0:	08001e4b 	.word	0x08001e4b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d046      	beq.n	8001e4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dc4:	e043      	b.n	8001e4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001dce:	d140      	bne.n	8001e52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dd4:	e03d      	b.n	8001e52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dde:	d121      	bne.n	8001e24 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d837      	bhi.n	8001e56 <DMA_CheckFifoParam+0xda>
 8001de6:	a201      	add	r2, pc, #4	; (adr r2, 8001dec <DMA_CheckFifoParam+0x70>)
 8001de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dec:	08001dfd 	.word	0x08001dfd
 8001df0:	08001e03 	.word	0x08001e03
 8001df4:	08001dfd 	.word	0x08001dfd
 8001df8:	08001e15 	.word	0x08001e15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8001e00:	e030      	b.n	8001e64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d025      	beq.n	8001e5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e12:	e022      	b.n	8001e5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e1c:	d11f      	bne.n	8001e5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e22:	e01c      	b.n	8001e5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d903      	bls.n	8001e32 <DMA_CheckFifoParam+0xb6>
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	d003      	beq.n	8001e38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e30:	e018      	b.n	8001e64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	73fb      	strb	r3, [r7, #15]
      break;
 8001e36:	e015      	b.n	8001e64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00e      	beq.n	8001e62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	73fb      	strb	r3, [r7, #15]
      break;
 8001e48:	e00b      	b.n	8001e62 <DMA_CheckFifoParam+0xe6>
      break;
 8001e4a:	bf00      	nop
 8001e4c:	e00a      	b.n	8001e64 <DMA_CheckFifoParam+0xe8>
      break;
 8001e4e:	bf00      	nop
 8001e50:	e008      	b.n	8001e64 <DMA_CheckFifoParam+0xe8>
      break;
 8001e52:	bf00      	nop
 8001e54:	e006      	b.n	8001e64 <DMA_CheckFifoParam+0xe8>
      break;
 8001e56:	bf00      	nop
 8001e58:	e004      	b.n	8001e64 <DMA_CheckFifoParam+0xe8>
      break;
 8001e5a:	bf00      	nop
 8001e5c:	e002      	b.n	8001e64 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e5e:	bf00      	nop
 8001e60:	e000      	b.n	8001e64 <DMA_CheckFifoParam+0xe8>
      break;
 8001e62:	bf00      	nop
    }
  } 
  
  return status; 
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop

08001e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b089      	sub	sp, #36	; 0x24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	e177      	b.n	8002180 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e90:	2201      	movs	r2, #1
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	f040 8166 	bne.w	800217a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d005      	beq.n	8001ec6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d130      	bne.n	8001f28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001efc:	2201      	movs	r2, #1
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	f003 0201 	and.w	r2, r3, #1
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	d017      	beq.n	8001f64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	2203      	movs	r2, #3
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d123      	bne.n	8001fb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	08da      	lsrs	r2, r3, #3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3208      	adds	r2, #8
 8001f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	220f      	movs	r2, #15
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	691a      	ldr	r2, [r3, #16]
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	08da      	lsrs	r2, r3, #3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3208      	adds	r2, #8
 8001fb2:	69b9      	ldr	r1, [r7, #24]
 8001fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0203 	and.w	r2, r3, #3
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 80c0 	beq.w	800217a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	4b66      	ldr	r3, [pc, #408]	; (8002198 <HAL_GPIO_Init+0x324>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	4a65      	ldr	r2, [pc, #404]	; (8002198 <HAL_GPIO_Init+0x324>)
 8002004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002008:	6453      	str	r3, [r2, #68]	; 0x44
 800200a:	4b63      	ldr	r3, [pc, #396]	; (8002198 <HAL_GPIO_Init+0x324>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002016:	4a61      	ldr	r2, [pc, #388]	; (800219c <HAL_GPIO_Init+0x328>)
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	089b      	lsrs	r3, r3, #2
 800201c:	3302      	adds	r3, #2
 800201e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	220f      	movs	r2, #15
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a58      	ldr	r2, [pc, #352]	; (80021a0 <HAL_GPIO_Init+0x32c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d037      	beq.n	80020b2 <HAL_GPIO_Init+0x23e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a57      	ldr	r2, [pc, #348]	; (80021a4 <HAL_GPIO_Init+0x330>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d031      	beq.n	80020ae <HAL_GPIO_Init+0x23a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a56      	ldr	r2, [pc, #344]	; (80021a8 <HAL_GPIO_Init+0x334>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d02b      	beq.n	80020aa <HAL_GPIO_Init+0x236>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a55      	ldr	r2, [pc, #340]	; (80021ac <HAL_GPIO_Init+0x338>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d025      	beq.n	80020a6 <HAL_GPIO_Init+0x232>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a54      	ldr	r2, [pc, #336]	; (80021b0 <HAL_GPIO_Init+0x33c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d01f      	beq.n	80020a2 <HAL_GPIO_Init+0x22e>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a53      	ldr	r2, [pc, #332]	; (80021b4 <HAL_GPIO_Init+0x340>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d019      	beq.n	800209e <HAL_GPIO_Init+0x22a>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a52      	ldr	r2, [pc, #328]	; (80021b8 <HAL_GPIO_Init+0x344>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d013      	beq.n	800209a <HAL_GPIO_Init+0x226>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a51      	ldr	r2, [pc, #324]	; (80021bc <HAL_GPIO_Init+0x348>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d00d      	beq.n	8002096 <HAL_GPIO_Init+0x222>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a50      	ldr	r2, [pc, #320]	; (80021c0 <HAL_GPIO_Init+0x34c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d007      	beq.n	8002092 <HAL_GPIO_Init+0x21e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a4f      	ldr	r2, [pc, #316]	; (80021c4 <HAL_GPIO_Init+0x350>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d101      	bne.n	800208e <HAL_GPIO_Init+0x21a>
 800208a:	2309      	movs	r3, #9
 800208c:	e012      	b.n	80020b4 <HAL_GPIO_Init+0x240>
 800208e:	230a      	movs	r3, #10
 8002090:	e010      	b.n	80020b4 <HAL_GPIO_Init+0x240>
 8002092:	2308      	movs	r3, #8
 8002094:	e00e      	b.n	80020b4 <HAL_GPIO_Init+0x240>
 8002096:	2307      	movs	r3, #7
 8002098:	e00c      	b.n	80020b4 <HAL_GPIO_Init+0x240>
 800209a:	2306      	movs	r3, #6
 800209c:	e00a      	b.n	80020b4 <HAL_GPIO_Init+0x240>
 800209e:	2305      	movs	r3, #5
 80020a0:	e008      	b.n	80020b4 <HAL_GPIO_Init+0x240>
 80020a2:	2304      	movs	r3, #4
 80020a4:	e006      	b.n	80020b4 <HAL_GPIO_Init+0x240>
 80020a6:	2303      	movs	r3, #3
 80020a8:	e004      	b.n	80020b4 <HAL_GPIO_Init+0x240>
 80020aa:	2302      	movs	r3, #2
 80020ac:	e002      	b.n	80020b4 <HAL_GPIO_Init+0x240>
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <HAL_GPIO_Init+0x240>
 80020b2:	2300      	movs	r3, #0
 80020b4:	69fa      	ldr	r2, [r7, #28]
 80020b6:	f002 0203 	and.w	r2, r2, #3
 80020ba:	0092      	lsls	r2, r2, #2
 80020bc:	4093      	lsls	r3, r2
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020c4:	4935      	ldr	r1, [pc, #212]	; (800219c <HAL_GPIO_Init+0x328>)
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	089b      	lsrs	r3, r3, #2
 80020ca:	3302      	adds	r3, #2
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020d2:	4b3d      	ldr	r3, [pc, #244]	; (80021c8 <HAL_GPIO_Init+0x354>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020f6:	4a34      	ldr	r2, [pc, #208]	; (80021c8 <HAL_GPIO_Init+0x354>)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020fc:	4b32      	ldr	r3, [pc, #200]	; (80021c8 <HAL_GPIO_Init+0x354>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002120:	4a29      	ldr	r2, [pc, #164]	; (80021c8 <HAL_GPIO_Init+0x354>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002126:	4b28      	ldr	r3, [pc, #160]	; (80021c8 <HAL_GPIO_Init+0x354>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800214a:	4a1f      	ldr	r2, [pc, #124]	; (80021c8 <HAL_GPIO_Init+0x354>)
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002150:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <HAL_GPIO_Init+0x354>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002174:	4a14      	ldr	r2, [pc, #80]	; (80021c8 <HAL_GPIO_Init+0x354>)
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3301      	adds	r3, #1
 800217e:	61fb      	str	r3, [r7, #28]
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	2b0f      	cmp	r3, #15
 8002184:	f67f ae84 	bls.w	8001e90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002188:	bf00      	nop
 800218a:	bf00      	nop
 800218c:	3724      	adds	r7, #36	; 0x24
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40023800 	.word	0x40023800
 800219c:	40013800 	.word	0x40013800
 80021a0:	40020000 	.word	0x40020000
 80021a4:	40020400 	.word	0x40020400
 80021a8:	40020800 	.word	0x40020800
 80021ac:	40020c00 	.word	0x40020c00
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40021400 	.word	0x40021400
 80021b8:	40021800 	.word	0x40021800
 80021bc:	40021c00 	.word	0x40021c00
 80021c0:	40022000 	.word	0x40022000
 80021c4:	40022400 	.word	0x40022400
 80021c8:	40013c00 	.word	0x40013c00

080021cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691a      	ldr	r2, [r3, #16]
 80021dc:	887b      	ldrh	r3, [r7, #2]
 80021de:	4013      	ands	r3, r2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d002      	beq.n	80021ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021e4:	2301      	movs	r3, #1
 80021e6:	73fb      	strb	r3, [r7, #15]
 80021e8:	e001      	b.n	80021ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021ea:	2300      	movs	r3, #0
 80021ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	807b      	strh	r3, [r7, #2]
 8002208:	4613      	mov	r3, r2
 800220a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800220c:	787b      	ldrb	r3, [r7, #1]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002212:	887a      	ldrh	r2, [r7, #2]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002218:	e003      	b.n	8002222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800221a:	887b      	ldrh	r3, [r7, #2]
 800221c:	041a      	lsls	r2, r3, #16
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	619a      	str	r2, [r3, #24]
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800222e:	b480      	push	{r7}
 8002230:	b085      	sub	sp, #20
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	460b      	mov	r3, r1
 8002238:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002240:	887a      	ldrh	r2, [r7, #2]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4013      	ands	r3, r2
 8002246:	041a      	lsls	r2, r3, #16
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	43d9      	mvns	r1, r3
 800224c:	887b      	ldrh	r3, [r7, #2]
 800224e:	400b      	ands	r3, r1
 8002250:	431a      	orrs	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	619a      	str	r2, [r3, #24]
}
 8002256:	bf00      	nop
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800226e:	4b08      	ldr	r3, [pc, #32]	; (8002290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002270:	695a      	ldr	r2, [r3, #20]
 8002272:	88fb      	ldrh	r3, [r7, #6]
 8002274:	4013      	ands	r3, r2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d006      	beq.n	8002288 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800227a:	4a05      	ldr	r2, [pc, #20]	; (8002290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800227c:	88fb      	ldrh	r3, [r7, #6]
 800227e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002280:	88fb      	ldrh	r3, [r7, #6]
 8002282:	4618      	mov	r0, r3
 8002284:	f002 ffb4 	bl	80051f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002288:	bf00      	nop
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40013c00 	.word	0x40013c00

08002294 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e267      	b.n	8002776 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d075      	beq.n	800239e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022b2:	4b88      	ldr	r3, [pc, #544]	; (80024d4 <HAL_RCC_OscConfig+0x240>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 030c 	and.w	r3, r3, #12
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	d00c      	beq.n	80022d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022be:	4b85      	ldr	r3, [pc, #532]	; (80024d4 <HAL_RCC_OscConfig+0x240>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022c6:	2b08      	cmp	r3, #8
 80022c8:	d112      	bne.n	80022f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ca:	4b82      	ldr	r3, [pc, #520]	; (80024d4 <HAL_RCC_OscConfig+0x240>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022d6:	d10b      	bne.n	80022f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d8:	4b7e      	ldr	r3, [pc, #504]	; (80024d4 <HAL_RCC_OscConfig+0x240>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d05b      	beq.n	800239c <HAL_RCC_OscConfig+0x108>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d157      	bne.n	800239c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e242      	b.n	8002776 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f8:	d106      	bne.n	8002308 <HAL_RCC_OscConfig+0x74>
 80022fa:	4b76      	ldr	r3, [pc, #472]	; (80024d4 <HAL_RCC_OscConfig+0x240>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a75      	ldr	r2, [pc, #468]	; (80024d4 <HAL_RCC_OscConfig+0x240>)
 8002300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	e01d      	b.n	8002344 <HAL_RCC_OscConfig+0xb0>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002310:	d10c      	bne.n	800232c <HAL_RCC_OscConfig+0x98>
 8002312:	4b70      	ldr	r3, [pc, #448]	; (80024d4 <HAL_RCC_OscConfig+0x240>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a6f      	ldr	r2, [pc, #444]	; (80024d4 <HAL_RCC_OscConfig+0x240>)
 8002318:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	4b6d      	ldr	r3, [pc, #436]	; (80024d4 <HAL_RCC_OscConfig+0x240>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a6c      	ldr	r2, [pc, #432]	; (80024d4 <HAL_RCC_OscConfig+0x240>)
 8002324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	e00b      	b.n	8002344 <HAL_RCC_OscConfig+0xb0>
 800232c:	4b69      	ldr	r3, [pc, #420]	; (80024d4 <HAL_RCC_OscConfig+0x240>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a68      	ldr	r2, [pc, #416]	; (80024d4 <HAL_RCC_OscConfig+0x240>)
 8002332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	4b66      	ldr	r3, [pc, #408]	; (80024d4 <HAL_RCC_OscConfig+0x240>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a65      	ldr	r2, [pc, #404]	; (80024d4 <HAL_RCC_OscConfig+0x240>)
 800233e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002342:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d013      	beq.n	8002374 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234c:	f7ff f8a2 	bl	8001494 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002354:	f7ff f89e 	bl	8001494 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b64      	cmp	r3, #100	; 0x64
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e207      	b.n	8002776 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002366:	4b5b      	ldr	r3, [pc, #364]	; (80024d4 <HAL_RCC_OscConfig+0x240>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0xc0>
 8002372:	e014      	b.n	800239e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002374:	f7ff f88e 	bl	8001494 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800237c:	f7ff f88a 	bl	8001494 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b64      	cmp	r3, #100	; 0x64
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e1f3      	b.n	8002776 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238e:	4b51      	ldr	r3, [pc, #324]	; (80024d4 <HAL_RCC_OscConfig+0x240>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0xe8>
 800239a:	e000      	b.n	800239e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800239c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d063      	beq.n	8002472 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023aa:	4b4a      	ldr	r3, [pc, #296]	; (80024d4 <HAL_RCC_OscConfig+0x240>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 030c 	and.w	r3, r3, #12
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00b      	beq.n	80023ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023b6:	4b47      	ldr	r3, [pc, #284]	; (80024d4 <HAL_RCC_OscConfig+0x240>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d11c      	bne.n	80023fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023c2:	4b44      	ldr	r3, [pc, #272]	; (80024d4 <HAL_RCC_OscConfig+0x240>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d116      	bne.n	80023fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ce:	4b41      	ldr	r3, [pc, #260]	; (80024d4 <HAL_RCC_OscConfig+0x240>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d005      	beq.n	80023e6 <HAL_RCC_OscConfig+0x152>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d001      	beq.n	80023e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e1c7      	b.n	8002776 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e6:	4b3b      	ldr	r3, [pc, #236]	; (80024d4 <HAL_RCC_OscConfig+0x240>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	4937      	ldr	r1, [pc, #220]	; (80024d4 <HAL_RCC_OscConfig+0x240>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fa:	e03a      	b.n	8002472 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d020      	beq.n	8002446 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002404:	4b34      	ldr	r3, [pc, #208]	; (80024d8 <HAL_RCC_OscConfig+0x244>)
 8002406:	2201      	movs	r2, #1
 8002408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240a:	f7ff f843 	bl	8001494 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002412:	f7ff f83f 	bl	8001494 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e1a8      	b.n	8002776 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002424:	4b2b      	ldr	r3, [pc, #172]	; (80024d4 <HAL_RCC_OscConfig+0x240>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0f0      	beq.n	8002412 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002430:	4b28      	ldr	r3, [pc, #160]	; (80024d4 <HAL_RCC_OscConfig+0x240>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4925      	ldr	r1, [pc, #148]	; (80024d4 <HAL_RCC_OscConfig+0x240>)
 8002440:	4313      	orrs	r3, r2
 8002442:	600b      	str	r3, [r1, #0]
 8002444:	e015      	b.n	8002472 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002446:	4b24      	ldr	r3, [pc, #144]	; (80024d8 <HAL_RCC_OscConfig+0x244>)
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244c:	f7ff f822 	bl	8001494 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002454:	f7ff f81e 	bl	8001494 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e187      	b.n	8002776 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002466:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <HAL_RCC_OscConfig+0x240>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f0      	bne.n	8002454 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d036      	beq.n	80024ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d016      	beq.n	80024b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002486:	4b15      	ldr	r3, [pc, #84]	; (80024dc <HAL_RCC_OscConfig+0x248>)
 8002488:	2201      	movs	r2, #1
 800248a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800248c:	f7ff f802 	bl	8001494 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002494:	f7fe fffe 	bl	8001494 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e167      	b.n	8002776 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a6:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <HAL_RCC_OscConfig+0x240>)
 80024a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f0      	beq.n	8002494 <HAL_RCC_OscConfig+0x200>
 80024b2:	e01b      	b.n	80024ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024b4:	4b09      	ldr	r3, [pc, #36]	; (80024dc <HAL_RCC_OscConfig+0x248>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ba:	f7fe ffeb 	bl	8001494 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c0:	e00e      	b.n	80024e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024c2:	f7fe ffe7 	bl	8001494 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d907      	bls.n	80024e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e150      	b.n	8002776 <HAL_RCC_OscConfig+0x4e2>
 80024d4:	40023800 	.word	0x40023800
 80024d8:	42470000 	.word	0x42470000
 80024dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e0:	4b88      	ldr	r3, [pc, #544]	; (8002704 <HAL_RCC_OscConfig+0x470>)
 80024e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1ea      	bne.n	80024c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 8097 	beq.w	8002628 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024fa:	2300      	movs	r3, #0
 80024fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024fe:	4b81      	ldr	r3, [pc, #516]	; (8002704 <HAL_RCC_OscConfig+0x470>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10f      	bne.n	800252a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	4b7d      	ldr	r3, [pc, #500]	; (8002704 <HAL_RCC_OscConfig+0x470>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	4a7c      	ldr	r2, [pc, #496]	; (8002704 <HAL_RCC_OscConfig+0x470>)
 8002514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002518:	6413      	str	r3, [r2, #64]	; 0x40
 800251a:	4b7a      	ldr	r3, [pc, #488]	; (8002704 <HAL_RCC_OscConfig+0x470>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002526:	2301      	movs	r3, #1
 8002528:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252a:	4b77      	ldr	r3, [pc, #476]	; (8002708 <HAL_RCC_OscConfig+0x474>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002532:	2b00      	cmp	r3, #0
 8002534:	d118      	bne.n	8002568 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002536:	4b74      	ldr	r3, [pc, #464]	; (8002708 <HAL_RCC_OscConfig+0x474>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a73      	ldr	r2, [pc, #460]	; (8002708 <HAL_RCC_OscConfig+0x474>)
 800253c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002542:	f7fe ffa7 	bl	8001494 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800254a:	f7fe ffa3 	bl	8001494 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e10c      	b.n	8002776 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255c:	4b6a      	ldr	r3, [pc, #424]	; (8002708 <HAL_RCC_OscConfig+0x474>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0f0      	beq.n	800254a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d106      	bne.n	800257e <HAL_RCC_OscConfig+0x2ea>
 8002570:	4b64      	ldr	r3, [pc, #400]	; (8002704 <HAL_RCC_OscConfig+0x470>)
 8002572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002574:	4a63      	ldr	r2, [pc, #396]	; (8002704 <HAL_RCC_OscConfig+0x470>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	6713      	str	r3, [r2, #112]	; 0x70
 800257c:	e01c      	b.n	80025b8 <HAL_RCC_OscConfig+0x324>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b05      	cmp	r3, #5
 8002584:	d10c      	bne.n	80025a0 <HAL_RCC_OscConfig+0x30c>
 8002586:	4b5f      	ldr	r3, [pc, #380]	; (8002704 <HAL_RCC_OscConfig+0x470>)
 8002588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258a:	4a5e      	ldr	r2, [pc, #376]	; (8002704 <HAL_RCC_OscConfig+0x470>)
 800258c:	f043 0304 	orr.w	r3, r3, #4
 8002590:	6713      	str	r3, [r2, #112]	; 0x70
 8002592:	4b5c      	ldr	r3, [pc, #368]	; (8002704 <HAL_RCC_OscConfig+0x470>)
 8002594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002596:	4a5b      	ldr	r2, [pc, #364]	; (8002704 <HAL_RCC_OscConfig+0x470>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	6713      	str	r3, [r2, #112]	; 0x70
 800259e:	e00b      	b.n	80025b8 <HAL_RCC_OscConfig+0x324>
 80025a0:	4b58      	ldr	r3, [pc, #352]	; (8002704 <HAL_RCC_OscConfig+0x470>)
 80025a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a4:	4a57      	ldr	r2, [pc, #348]	; (8002704 <HAL_RCC_OscConfig+0x470>)
 80025a6:	f023 0301 	bic.w	r3, r3, #1
 80025aa:	6713      	str	r3, [r2, #112]	; 0x70
 80025ac:	4b55      	ldr	r3, [pc, #340]	; (8002704 <HAL_RCC_OscConfig+0x470>)
 80025ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b0:	4a54      	ldr	r2, [pc, #336]	; (8002704 <HAL_RCC_OscConfig+0x470>)
 80025b2:	f023 0304 	bic.w	r3, r3, #4
 80025b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d015      	beq.n	80025ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c0:	f7fe ff68 	bl	8001494 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c6:	e00a      	b.n	80025de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025c8:	f7fe ff64 	bl	8001494 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e0cb      	b.n	8002776 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025de:	4b49      	ldr	r3, [pc, #292]	; (8002704 <HAL_RCC_OscConfig+0x470>)
 80025e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0ee      	beq.n	80025c8 <HAL_RCC_OscConfig+0x334>
 80025ea:	e014      	b.n	8002616 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ec:	f7fe ff52 	bl	8001494 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f2:	e00a      	b.n	800260a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025f4:	f7fe ff4e 	bl	8001494 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002602:	4293      	cmp	r3, r2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e0b5      	b.n	8002776 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800260a:	4b3e      	ldr	r3, [pc, #248]	; (8002704 <HAL_RCC_OscConfig+0x470>)
 800260c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1ee      	bne.n	80025f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002616:	7dfb      	ldrb	r3, [r7, #23]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d105      	bne.n	8002628 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800261c:	4b39      	ldr	r3, [pc, #228]	; (8002704 <HAL_RCC_OscConfig+0x470>)
 800261e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002620:	4a38      	ldr	r2, [pc, #224]	; (8002704 <HAL_RCC_OscConfig+0x470>)
 8002622:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002626:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 80a1 	beq.w	8002774 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002632:	4b34      	ldr	r3, [pc, #208]	; (8002704 <HAL_RCC_OscConfig+0x470>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	2b08      	cmp	r3, #8
 800263c:	d05c      	beq.n	80026f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	2b02      	cmp	r3, #2
 8002644:	d141      	bne.n	80026ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002646:	4b31      	ldr	r3, [pc, #196]	; (800270c <HAL_RCC_OscConfig+0x478>)
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264c:	f7fe ff22 	bl	8001494 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002654:	f7fe ff1e 	bl	8001494 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e087      	b.n	8002776 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002666:	4b27      	ldr	r3, [pc, #156]	; (8002704 <HAL_RCC_OscConfig+0x470>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69da      	ldr	r2, [r3, #28]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	019b      	lsls	r3, r3, #6
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002688:	085b      	lsrs	r3, r3, #1
 800268a:	3b01      	subs	r3, #1
 800268c:	041b      	lsls	r3, r3, #16
 800268e:	431a      	orrs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002694:	061b      	lsls	r3, r3, #24
 8002696:	491b      	ldr	r1, [pc, #108]	; (8002704 <HAL_RCC_OscConfig+0x470>)
 8002698:	4313      	orrs	r3, r2
 800269a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800269c:	4b1b      	ldr	r3, [pc, #108]	; (800270c <HAL_RCC_OscConfig+0x478>)
 800269e:	2201      	movs	r2, #1
 80026a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a2:	f7fe fef7 	bl	8001494 <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026aa:	f7fe fef3 	bl	8001494 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e05c      	b.n	8002776 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026bc:	4b11      	ldr	r3, [pc, #68]	; (8002704 <HAL_RCC_OscConfig+0x470>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0f0      	beq.n	80026aa <HAL_RCC_OscConfig+0x416>
 80026c8:	e054      	b.n	8002774 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ca:	4b10      	ldr	r3, [pc, #64]	; (800270c <HAL_RCC_OscConfig+0x478>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d0:	f7fe fee0 	bl	8001494 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d8:	f7fe fedc 	bl	8001494 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e045      	b.n	8002776 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ea:	4b06      	ldr	r3, [pc, #24]	; (8002704 <HAL_RCC_OscConfig+0x470>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f0      	bne.n	80026d8 <HAL_RCC_OscConfig+0x444>
 80026f6:	e03d      	b.n	8002774 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d107      	bne.n	8002710 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e038      	b.n	8002776 <HAL_RCC_OscConfig+0x4e2>
 8002704:	40023800 	.word	0x40023800
 8002708:	40007000 	.word	0x40007000
 800270c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002710:	4b1b      	ldr	r3, [pc, #108]	; (8002780 <HAL_RCC_OscConfig+0x4ec>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d028      	beq.n	8002770 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002728:	429a      	cmp	r2, r3
 800272a:	d121      	bne.n	8002770 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002736:	429a      	cmp	r2, r3
 8002738:	d11a      	bne.n	8002770 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002740:	4013      	ands	r3, r2
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002746:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002748:	4293      	cmp	r3, r2
 800274a:	d111      	bne.n	8002770 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002756:	085b      	lsrs	r3, r3, #1
 8002758:	3b01      	subs	r3, #1
 800275a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800275c:	429a      	cmp	r2, r3
 800275e:	d107      	bne.n	8002770 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800276c:	429a      	cmp	r2, r3
 800276e:	d001      	beq.n	8002774 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e000      	b.n	8002776 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40023800 	.word	0x40023800

08002784 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e0cc      	b.n	8002932 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002798:	4b68      	ldr	r3, [pc, #416]	; (800293c <HAL_RCC_ClockConfig+0x1b8>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 030f 	and.w	r3, r3, #15
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d90c      	bls.n	80027c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a6:	4b65      	ldr	r3, [pc, #404]	; (800293c <HAL_RCC_ClockConfig+0x1b8>)
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ae:	4b63      	ldr	r3, [pc, #396]	; (800293c <HAL_RCC_ClockConfig+0x1b8>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d001      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e0b8      	b.n	8002932 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d020      	beq.n	800280e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d005      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027d8:	4b59      	ldr	r3, [pc, #356]	; (8002940 <HAL_RCC_ClockConfig+0x1bc>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	4a58      	ldr	r2, [pc, #352]	; (8002940 <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0308 	and.w	r3, r3, #8
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d005      	beq.n	80027fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027f0:	4b53      	ldr	r3, [pc, #332]	; (8002940 <HAL_RCC_ClockConfig+0x1bc>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	4a52      	ldr	r2, [pc, #328]	; (8002940 <HAL_RCC_ClockConfig+0x1bc>)
 80027f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027fc:	4b50      	ldr	r3, [pc, #320]	; (8002940 <HAL_RCC_ClockConfig+0x1bc>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	494d      	ldr	r1, [pc, #308]	; (8002940 <HAL_RCC_ClockConfig+0x1bc>)
 800280a:	4313      	orrs	r3, r2
 800280c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d044      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d107      	bne.n	8002832 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002822:	4b47      	ldr	r3, [pc, #284]	; (8002940 <HAL_RCC_ClockConfig+0x1bc>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d119      	bne.n	8002862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e07f      	b.n	8002932 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b02      	cmp	r3, #2
 8002838:	d003      	beq.n	8002842 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800283e:	2b03      	cmp	r3, #3
 8002840:	d107      	bne.n	8002852 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002842:	4b3f      	ldr	r3, [pc, #252]	; (8002940 <HAL_RCC_ClockConfig+0x1bc>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d109      	bne.n	8002862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e06f      	b.n	8002932 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002852:	4b3b      	ldr	r3, [pc, #236]	; (8002940 <HAL_RCC_ClockConfig+0x1bc>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e067      	b.n	8002932 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002862:	4b37      	ldr	r3, [pc, #220]	; (8002940 <HAL_RCC_ClockConfig+0x1bc>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f023 0203 	bic.w	r2, r3, #3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	4934      	ldr	r1, [pc, #208]	; (8002940 <HAL_RCC_ClockConfig+0x1bc>)
 8002870:	4313      	orrs	r3, r2
 8002872:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002874:	f7fe fe0e 	bl	8001494 <HAL_GetTick>
 8002878:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287a:	e00a      	b.n	8002892 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800287c:	f7fe fe0a 	bl	8001494 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	f241 3288 	movw	r2, #5000	; 0x1388
 800288a:	4293      	cmp	r3, r2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e04f      	b.n	8002932 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002892:	4b2b      	ldr	r3, [pc, #172]	; (8002940 <HAL_RCC_ClockConfig+0x1bc>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 020c 	and.w	r2, r3, #12
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d1eb      	bne.n	800287c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028a4:	4b25      	ldr	r3, [pc, #148]	; (800293c <HAL_RCC_ClockConfig+0x1b8>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 030f 	and.w	r3, r3, #15
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d20c      	bcs.n	80028cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b2:	4b22      	ldr	r3, [pc, #136]	; (800293c <HAL_RCC_ClockConfig+0x1b8>)
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ba:	4b20      	ldr	r3, [pc, #128]	; (800293c <HAL_RCC_ClockConfig+0x1b8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d001      	beq.n	80028cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e032      	b.n	8002932 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d008      	beq.n	80028ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028d8:	4b19      	ldr	r3, [pc, #100]	; (8002940 <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	4916      	ldr	r1, [pc, #88]	; (8002940 <HAL_RCC_ClockConfig+0x1bc>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d009      	beq.n	800290a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028f6:	4b12      	ldr	r3, [pc, #72]	; (8002940 <HAL_RCC_ClockConfig+0x1bc>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	490e      	ldr	r1, [pc, #56]	; (8002940 <HAL_RCC_ClockConfig+0x1bc>)
 8002906:	4313      	orrs	r3, r2
 8002908:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800290a:	f000 f821 	bl	8002950 <HAL_RCC_GetSysClockFreq>
 800290e:	4602      	mov	r2, r0
 8002910:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <HAL_RCC_ClockConfig+0x1bc>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	091b      	lsrs	r3, r3, #4
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	490a      	ldr	r1, [pc, #40]	; (8002944 <HAL_RCC_ClockConfig+0x1c0>)
 800291c:	5ccb      	ldrb	r3, [r1, r3]
 800291e:	fa22 f303 	lsr.w	r3, r2, r3
 8002922:	4a09      	ldr	r2, [pc, #36]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 8002924:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002926:	4b09      	ldr	r3, [pc, #36]	; (800294c <HAL_RCC_ClockConfig+0x1c8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f7fe fc74 	bl	8001218 <HAL_InitTick>

  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40023c00 	.word	0x40023c00
 8002940:	40023800 	.word	0x40023800
 8002944:	080082ec 	.word	0x080082ec
 8002948:	20000000 	.word	0x20000000
 800294c:	20000004 	.word	0x20000004

08002950 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002954:	b094      	sub	sp, #80	; 0x50
 8002956:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	647b      	str	r3, [r7, #68]	; 0x44
 800295c:	2300      	movs	r3, #0
 800295e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002960:	2300      	movs	r3, #0
 8002962:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002968:	4b79      	ldr	r3, [pc, #484]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x200>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 030c 	and.w	r3, r3, #12
 8002970:	2b08      	cmp	r3, #8
 8002972:	d00d      	beq.n	8002990 <HAL_RCC_GetSysClockFreq+0x40>
 8002974:	2b08      	cmp	r3, #8
 8002976:	f200 80e1 	bhi.w	8002b3c <HAL_RCC_GetSysClockFreq+0x1ec>
 800297a:	2b00      	cmp	r3, #0
 800297c:	d002      	beq.n	8002984 <HAL_RCC_GetSysClockFreq+0x34>
 800297e:	2b04      	cmp	r3, #4
 8002980:	d003      	beq.n	800298a <HAL_RCC_GetSysClockFreq+0x3a>
 8002982:	e0db      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002984:	4b73      	ldr	r3, [pc, #460]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x204>)
 8002986:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002988:	e0db      	b.n	8002b42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800298a:	4b73      	ldr	r3, [pc, #460]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x208>)
 800298c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800298e:	e0d8      	b.n	8002b42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002990:	4b6f      	ldr	r3, [pc, #444]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x200>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002998:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800299a:	4b6d      	ldr	r3, [pc, #436]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x200>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d063      	beq.n	8002a6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029a6:	4b6a      	ldr	r3, [pc, #424]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x200>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	099b      	lsrs	r3, r3, #6
 80029ac:	2200      	movs	r2, #0
 80029ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80029b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80029b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029b8:	633b      	str	r3, [r7, #48]	; 0x30
 80029ba:	2300      	movs	r3, #0
 80029bc:	637b      	str	r3, [r7, #52]	; 0x34
 80029be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80029c2:	4622      	mov	r2, r4
 80029c4:	462b      	mov	r3, r5
 80029c6:	f04f 0000 	mov.w	r0, #0
 80029ca:	f04f 0100 	mov.w	r1, #0
 80029ce:	0159      	lsls	r1, r3, #5
 80029d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029d4:	0150      	lsls	r0, r2, #5
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	4621      	mov	r1, r4
 80029dc:	1a51      	subs	r1, r2, r1
 80029de:	6139      	str	r1, [r7, #16]
 80029e0:	4629      	mov	r1, r5
 80029e2:	eb63 0301 	sbc.w	r3, r3, r1
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	f04f 0200 	mov.w	r2, #0
 80029ec:	f04f 0300 	mov.w	r3, #0
 80029f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029f4:	4659      	mov	r1, fp
 80029f6:	018b      	lsls	r3, r1, #6
 80029f8:	4651      	mov	r1, sl
 80029fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029fe:	4651      	mov	r1, sl
 8002a00:	018a      	lsls	r2, r1, #6
 8002a02:	4651      	mov	r1, sl
 8002a04:	ebb2 0801 	subs.w	r8, r2, r1
 8002a08:	4659      	mov	r1, fp
 8002a0a:	eb63 0901 	sbc.w	r9, r3, r1
 8002a0e:	f04f 0200 	mov.w	r2, #0
 8002a12:	f04f 0300 	mov.w	r3, #0
 8002a16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a22:	4690      	mov	r8, r2
 8002a24:	4699      	mov	r9, r3
 8002a26:	4623      	mov	r3, r4
 8002a28:	eb18 0303 	adds.w	r3, r8, r3
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	462b      	mov	r3, r5
 8002a30:	eb49 0303 	adc.w	r3, r9, r3
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	f04f 0300 	mov.w	r3, #0
 8002a3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a42:	4629      	mov	r1, r5
 8002a44:	024b      	lsls	r3, r1, #9
 8002a46:	4621      	mov	r1, r4
 8002a48:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a4c:	4621      	mov	r1, r4
 8002a4e:	024a      	lsls	r2, r1, #9
 8002a50:	4610      	mov	r0, r2
 8002a52:	4619      	mov	r1, r3
 8002a54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a56:	2200      	movs	r2, #0
 8002a58:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a60:	f7fd fbc6 	bl	80001f0 <__aeabi_uldivmod>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4613      	mov	r3, r2
 8002a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a6c:	e058      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a6e:	4b38      	ldr	r3, [pc, #224]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	099b      	lsrs	r3, r3, #6
 8002a74:	2200      	movs	r2, #0
 8002a76:	4618      	mov	r0, r3
 8002a78:	4611      	mov	r1, r2
 8002a7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a7e:	623b      	str	r3, [r7, #32]
 8002a80:	2300      	movs	r3, #0
 8002a82:	627b      	str	r3, [r7, #36]	; 0x24
 8002a84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a88:	4642      	mov	r2, r8
 8002a8a:	464b      	mov	r3, r9
 8002a8c:	f04f 0000 	mov.w	r0, #0
 8002a90:	f04f 0100 	mov.w	r1, #0
 8002a94:	0159      	lsls	r1, r3, #5
 8002a96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a9a:	0150      	lsls	r0, r2, #5
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4641      	mov	r1, r8
 8002aa2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002aa6:	4649      	mov	r1, r9
 8002aa8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ab8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002abc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ac0:	ebb2 040a 	subs.w	r4, r2, sl
 8002ac4:	eb63 050b 	sbc.w	r5, r3, fp
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	f04f 0300 	mov.w	r3, #0
 8002ad0:	00eb      	lsls	r3, r5, #3
 8002ad2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ad6:	00e2      	lsls	r2, r4, #3
 8002ad8:	4614      	mov	r4, r2
 8002ada:	461d      	mov	r5, r3
 8002adc:	4643      	mov	r3, r8
 8002ade:	18e3      	adds	r3, r4, r3
 8002ae0:	603b      	str	r3, [r7, #0]
 8002ae2:	464b      	mov	r3, r9
 8002ae4:	eb45 0303 	adc.w	r3, r5, r3
 8002ae8:	607b      	str	r3, [r7, #4]
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	f04f 0300 	mov.w	r3, #0
 8002af2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002af6:	4629      	mov	r1, r5
 8002af8:	028b      	lsls	r3, r1, #10
 8002afa:	4621      	mov	r1, r4
 8002afc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b00:	4621      	mov	r1, r4
 8002b02:	028a      	lsls	r2, r1, #10
 8002b04:	4610      	mov	r0, r2
 8002b06:	4619      	mov	r1, r3
 8002b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	61bb      	str	r3, [r7, #24]
 8002b0e:	61fa      	str	r2, [r7, #28]
 8002b10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b14:	f7fd fb6c 	bl	80001f0 <__aeabi_uldivmod>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b20:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	0c1b      	lsrs	r3, r3, #16
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002b30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b3a:	e002      	b.n	8002b42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b3c:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b3e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3750      	adds	r7, #80	; 0x50
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b4e:	bf00      	nop
 8002b50:	40023800 	.word	0x40023800
 8002b54:	00f42400 	.word	0x00f42400
 8002b58:	007a1200 	.word	0x007a1200

08002b5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b60:	4b03      	ldr	r3, [pc, #12]	; (8002b70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b62:	681b      	ldr	r3, [r3, #0]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	20000000 	.word	0x20000000

08002b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b78:	f7ff fff0 	bl	8002b5c <HAL_RCC_GetHCLKFreq>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	0a9b      	lsrs	r3, r3, #10
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	4903      	ldr	r1, [pc, #12]	; (8002b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b8a:	5ccb      	ldrb	r3, [r1, r3]
 8002b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40023800 	.word	0x40023800
 8002b98:	080082fc 	.word	0x080082fc

08002b9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ba0:	f7ff ffdc 	bl	8002b5c <HAL_RCC_GetHCLKFreq>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	0b5b      	lsrs	r3, r3, #13
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	4903      	ldr	r1, [pc, #12]	; (8002bc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bb2:	5ccb      	ldrb	r3, [r1, r3]
 8002bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	080082fc 	.word	0x080082fc

08002bc4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	220f      	movs	r2, #15
 8002bd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002bd4:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <HAL_RCC_GetClockConfig+0x5c>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 0203 	and.w	r2, r3, #3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002be0:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <HAL_RCC_GetClockConfig+0x5c>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002bec:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <HAL_RCC_GetClockConfig+0x5c>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002bf8:	4b09      	ldr	r3, [pc, #36]	; (8002c20 <HAL_RCC_GetClockConfig+0x5c>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	08db      	lsrs	r3, r3, #3
 8002bfe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c06:	4b07      	ldr	r3, [pc, #28]	; (8002c24 <HAL_RCC_GetClockConfig+0x60>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 020f 	and.w	r2, r3, #15
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	601a      	str	r2, [r3, #0]
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	40023800 	.word	0x40023800
 8002c24:	40023c00 	.word	0x40023c00

08002c28 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e025      	b.n	8002c88 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d106      	bne.n	8002c56 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7fe fad7 	bl	8001204 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2202      	movs	r2, #2
 8002c5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3304      	adds	r3, #4
 8002c66:	4619      	mov	r1, r3
 8002c68:	4610      	mov	r0, r2
 8002c6a:	f002 f989 	bl	8004f80 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	461a      	mov	r2, r3
 8002c78:	6839      	ldr	r1, [r7, #0]
 8002c7a:	f002 f9de 	bl	800503a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e041      	b.n	8002d26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d106      	bne.n	8002cbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7fe f912 	bl	8000ee0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3304      	adds	r3, #4
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4610      	mov	r0, r2
 8002cd0:	f000 fba8 	bl	8003424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d001      	beq.n	8002d48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e04e      	b.n	8002de6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0201 	orr.w	r2, r2, #1
 8002d5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a23      	ldr	r2, [pc, #140]	; (8002df4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d022      	beq.n	8002db0 <HAL_TIM_Base_Start_IT+0x80>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d72:	d01d      	beq.n	8002db0 <HAL_TIM_Base_Start_IT+0x80>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a1f      	ldr	r2, [pc, #124]	; (8002df8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d018      	beq.n	8002db0 <HAL_TIM_Base_Start_IT+0x80>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a1e      	ldr	r2, [pc, #120]	; (8002dfc <HAL_TIM_Base_Start_IT+0xcc>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d013      	beq.n	8002db0 <HAL_TIM_Base_Start_IT+0x80>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a1c      	ldr	r2, [pc, #112]	; (8002e00 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d00e      	beq.n	8002db0 <HAL_TIM_Base_Start_IT+0x80>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a1b      	ldr	r2, [pc, #108]	; (8002e04 <HAL_TIM_Base_Start_IT+0xd4>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d009      	beq.n	8002db0 <HAL_TIM_Base_Start_IT+0x80>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a19      	ldr	r2, [pc, #100]	; (8002e08 <HAL_TIM_Base_Start_IT+0xd8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d004      	beq.n	8002db0 <HAL_TIM_Base_Start_IT+0x80>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a18      	ldr	r2, [pc, #96]	; (8002e0c <HAL_TIM_Base_Start_IT+0xdc>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d111      	bne.n	8002dd4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2b06      	cmp	r3, #6
 8002dc0:	d010      	beq.n	8002de4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f042 0201 	orr.w	r2, r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd2:	e007      	b.n	8002de4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0201 	orr.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40010000 	.word	0x40010000
 8002df8:	40000400 	.word	0x40000400
 8002dfc:	40000800 	.word	0x40000800
 8002e00:	40000c00 	.word	0x40000c00
 8002e04:	40010400 	.word	0x40010400
 8002e08:	40014000 	.word	0x40014000
 8002e0c:	40001800 	.word	0x40001800

08002e10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e041      	b.n	8002ea6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d106      	bne.n	8002e3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7fe f874 	bl	8000f24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3304      	adds	r3, #4
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4610      	mov	r0, r2
 8002e50:	f000 fae8 	bl	8003424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d122      	bne.n	8002f0a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d11b      	bne.n	8002f0a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f06f 0202 	mvn.w	r2, #2
 8002eda:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	f003 0303 	and.w	r3, r3, #3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 fa78 	bl	80033e6 <HAL_TIM_IC_CaptureCallback>
 8002ef6:	e005      	b.n	8002f04 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fa6a 	bl	80033d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fa7b 	bl	80033fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b04      	cmp	r3, #4
 8002f16:	d122      	bne.n	8002f5e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	f003 0304 	and.w	r3, r3, #4
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d11b      	bne.n	8002f5e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f06f 0204 	mvn.w	r2, #4
 8002f2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 fa4e 	bl	80033e6 <HAL_TIM_IC_CaptureCallback>
 8002f4a:	e005      	b.n	8002f58 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 fa40 	bl	80033d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fa51 	bl	80033fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	f003 0308 	and.w	r3, r3, #8
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d122      	bne.n	8002fb2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d11b      	bne.n	8002fb2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f06f 0208 	mvn.w	r2, #8
 8002f82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2204      	movs	r2, #4
 8002f88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 fa24 	bl	80033e6 <HAL_TIM_IC_CaptureCallback>
 8002f9e:	e005      	b.n	8002fac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 fa16 	bl	80033d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 fa27 	bl	80033fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	f003 0310 	and.w	r3, r3, #16
 8002fbc:	2b10      	cmp	r3, #16
 8002fbe:	d122      	bne.n	8003006 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f003 0310 	and.w	r3, r3, #16
 8002fca:	2b10      	cmp	r3, #16
 8002fcc:	d11b      	bne.n	8003006 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f06f 0210 	mvn.w	r2, #16
 8002fd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2208      	movs	r2, #8
 8002fdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f9fa 	bl	80033e6 <HAL_TIM_IC_CaptureCallback>
 8002ff2:	e005      	b.n	8003000 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f9ec 	bl	80033d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f9fd 	bl	80033fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b01      	cmp	r3, #1
 8003012:	d10e      	bne.n	8003032 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b01      	cmp	r3, #1
 8003020:	d107      	bne.n	8003032 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f06f 0201 	mvn.w	r2, #1
 800302a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7fd ff13 	bl	8000e58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303c:	2b80      	cmp	r3, #128	; 0x80
 800303e:	d10e      	bne.n	800305e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304a:	2b80      	cmp	r3, #128	; 0x80
 800304c:	d107      	bne.n	800305e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 fd53 	bl	8003b04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003068:	2b40      	cmp	r3, #64	; 0x40
 800306a:	d10e      	bne.n	800308a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003076:	2b40      	cmp	r3, #64	; 0x40
 8003078:	d107      	bne.n	800308a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f9c2 	bl	800340e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	f003 0320 	and.w	r3, r3, #32
 8003094:	2b20      	cmp	r3, #32
 8003096:	d10e      	bne.n	80030b6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f003 0320 	and.w	r3, r3, #32
 80030a2:	2b20      	cmp	r3, #32
 80030a4:	d107      	bne.n	80030b6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f06f 0220 	mvn.w	r2, #32
 80030ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 fd1d 	bl	8003af0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030b6:	bf00      	nop
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
	...

080030c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030cc:	2300      	movs	r3, #0
 80030ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d101      	bne.n	80030de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030da:	2302      	movs	r3, #2
 80030dc:	e0ae      	b.n	800323c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b0c      	cmp	r3, #12
 80030ea:	f200 809f 	bhi.w	800322c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80030ee:	a201      	add	r2, pc, #4	; (adr r2, 80030f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f4:	08003129 	.word	0x08003129
 80030f8:	0800322d 	.word	0x0800322d
 80030fc:	0800322d 	.word	0x0800322d
 8003100:	0800322d 	.word	0x0800322d
 8003104:	08003169 	.word	0x08003169
 8003108:	0800322d 	.word	0x0800322d
 800310c:	0800322d 	.word	0x0800322d
 8003110:	0800322d 	.word	0x0800322d
 8003114:	080031ab 	.word	0x080031ab
 8003118:	0800322d 	.word	0x0800322d
 800311c:	0800322d 	.word	0x0800322d
 8003120:	0800322d 	.word	0x0800322d
 8003124:	080031eb 	.word	0x080031eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68b9      	ldr	r1, [r7, #8]
 800312e:	4618      	mov	r0, r3
 8003130:	f000 fa18 	bl	8003564 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	699a      	ldr	r2, [r3, #24]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0208 	orr.w	r2, r2, #8
 8003142:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699a      	ldr	r2, [r3, #24]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0204 	bic.w	r2, r2, #4
 8003152:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6999      	ldr	r1, [r3, #24]
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	691a      	ldr	r2, [r3, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	619a      	str	r2, [r3, #24]
      break;
 8003166:	e064      	b.n	8003232 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68b9      	ldr	r1, [r7, #8]
 800316e:	4618      	mov	r0, r3
 8003170:	f000 fa68 	bl	8003644 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	699a      	ldr	r2, [r3, #24]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003182:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	699a      	ldr	r2, [r3, #24]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003192:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6999      	ldr	r1, [r3, #24]
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	021a      	lsls	r2, r3, #8
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	619a      	str	r2, [r3, #24]
      break;
 80031a8:	e043      	b.n	8003232 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68b9      	ldr	r1, [r7, #8]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 fabd 	bl	8003730 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	69da      	ldr	r2, [r3, #28]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f042 0208 	orr.w	r2, r2, #8
 80031c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	69da      	ldr	r2, [r3, #28]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0204 	bic.w	r2, r2, #4
 80031d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	69d9      	ldr	r1, [r3, #28]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	691a      	ldr	r2, [r3, #16]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	61da      	str	r2, [r3, #28]
      break;
 80031e8:	e023      	b.n	8003232 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68b9      	ldr	r1, [r7, #8]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 fb11 	bl	8003818 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	69da      	ldr	r2, [r3, #28]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003204:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	69da      	ldr	r2, [r3, #28]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003214:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	69d9      	ldr	r1, [r3, #28]
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	021a      	lsls	r2, r3, #8
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	61da      	str	r2, [r3, #28]
      break;
 800322a:	e002      	b.n	8003232 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	75fb      	strb	r3, [r7, #23]
      break;
 8003230:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800323a:	7dfb      	ldrb	r3, [r7, #23]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800324e:	2300      	movs	r3, #0
 8003250:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003258:	2b01      	cmp	r3, #1
 800325a:	d101      	bne.n	8003260 <HAL_TIM_ConfigClockSource+0x1c>
 800325c:	2302      	movs	r3, #2
 800325e:	e0b4      	b.n	80033ca <HAL_TIM_ConfigClockSource+0x186>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800327e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003286:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003298:	d03e      	beq.n	8003318 <HAL_TIM_ConfigClockSource+0xd4>
 800329a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800329e:	f200 8087 	bhi.w	80033b0 <HAL_TIM_ConfigClockSource+0x16c>
 80032a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a6:	f000 8086 	beq.w	80033b6 <HAL_TIM_ConfigClockSource+0x172>
 80032aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ae:	d87f      	bhi.n	80033b0 <HAL_TIM_ConfigClockSource+0x16c>
 80032b0:	2b70      	cmp	r3, #112	; 0x70
 80032b2:	d01a      	beq.n	80032ea <HAL_TIM_ConfigClockSource+0xa6>
 80032b4:	2b70      	cmp	r3, #112	; 0x70
 80032b6:	d87b      	bhi.n	80033b0 <HAL_TIM_ConfigClockSource+0x16c>
 80032b8:	2b60      	cmp	r3, #96	; 0x60
 80032ba:	d050      	beq.n	800335e <HAL_TIM_ConfigClockSource+0x11a>
 80032bc:	2b60      	cmp	r3, #96	; 0x60
 80032be:	d877      	bhi.n	80033b0 <HAL_TIM_ConfigClockSource+0x16c>
 80032c0:	2b50      	cmp	r3, #80	; 0x50
 80032c2:	d03c      	beq.n	800333e <HAL_TIM_ConfigClockSource+0xfa>
 80032c4:	2b50      	cmp	r3, #80	; 0x50
 80032c6:	d873      	bhi.n	80033b0 <HAL_TIM_ConfigClockSource+0x16c>
 80032c8:	2b40      	cmp	r3, #64	; 0x40
 80032ca:	d058      	beq.n	800337e <HAL_TIM_ConfigClockSource+0x13a>
 80032cc:	2b40      	cmp	r3, #64	; 0x40
 80032ce:	d86f      	bhi.n	80033b0 <HAL_TIM_ConfigClockSource+0x16c>
 80032d0:	2b30      	cmp	r3, #48	; 0x30
 80032d2:	d064      	beq.n	800339e <HAL_TIM_ConfigClockSource+0x15a>
 80032d4:	2b30      	cmp	r3, #48	; 0x30
 80032d6:	d86b      	bhi.n	80033b0 <HAL_TIM_ConfigClockSource+0x16c>
 80032d8:	2b20      	cmp	r3, #32
 80032da:	d060      	beq.n	800339e <HAL_TIM_ConfigClockSource+0x15a>
 80032dc:	2b20      	cmp	r3, #32
 80032de:	d867      	bhi.n	80033b0 <HAL_TIM_ConfigClockSource+0x16c>
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d05c      	beq.n	800339e <HAL_TIM_ConfigClockSource+0x15a>
 80032e4:	2b10      	cmp	r3, #16
 80032e6:	d05a      	beq.n	800339e <HAL_TIM_ConfigClockSource+0x15a>
 80032e8:	e062      	b.n	80033b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6818      	ldr	r0, [r3, #0]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	6899      	ldr	r1, [r3, #8]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f000 fb5d 	bl	80039b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800330c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	609a      	str	r2, [r3, #8]
      break;
 8003316:	e04f      	b.n	80033b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6818      	ldr	r0, [r3, #0]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	6899      	ldr	r1, [r3, #8]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f000 fb46 	bl	80039b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800333a:	609a      	str	r2, [r3, #8]
      break;
 800333c:	e03c      	b.n	80033b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6818      	ldr	r0, [r3, #0]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	6859      	ldr	r1, [r3, #4]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	461a      	mov	r2, r3
 800334c:	f000 faba 	bl	80038c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2150      	movs	r1, #80	; 0x50
 8003356:	4618      	mov	r0, r3
 8003358:	f000 fb13 	bl	8003982 <TIM_ITRx_SetConfig>
      break;
 800335c:	e02c      	b.n	80033b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6818      	ldr	r0, [r3, #0]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	6859      	ldr	r1, [r3, #4]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	461a      	mov	r2, r3
 800336c:	f000 fad9 	bl	8003922 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2160      	movs	r1, #96	; 0x60
 8003376:	4618      	mov	r0, r3
 8003378:	f000 fb03 	bl	8003982 <TIM_ITRx_SetConfig>
      break;
 800337c:	e01c      	b.n	80033b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	6859      	ldr	r1, [r3, #4]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	461a      	mov	r2, r3
 800338c:	f000 fa9a 	bl	80038c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2140      	movs	r1, #64	; 0x40
 8003396:	4618      	mov	r0, r3
 8003398:	f000 faf3 	bl	8003982 <TIM_ITRx_SetConfig>
      break;
 800339c:	e00c      	b.n	80033b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4619      	mov	r1, r3
 80033a8:	4610      	mov	r0, r2
 80033aa:	f000 faea 	bl	8003982 <TIM_ITRx_SetConfig>
      break;
 80033ae:	e003      	b.n	80033b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	73fb      	strb	r3, [r7, #15]
      break;
 80033b4:	e000      	b.n	80033b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
	...

08003424 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a40      	ldr	r2, [pc, #256]	; (8003538 <TIM_Base_SetConfig+0x114>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d013      	beq.n	8003464 <TIM_Base_SetConfig+0x40>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003442:	d00f      	beq.n	8003464 <TIM_Base_SetConfig+0x40>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a3d      	ldr	r2, [pc, #244]	; (800353c <TIM_Base_SetConfig+0x118>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d00b      	beq.n	8003464 <TIM_Base_SetConfig+0x40>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a3c      	ldr	r2, [pc, #240]	; (8003540 <TIM_Base_SetConfig+0x11c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d007      	beq.n	8003464 <TIM_Base_SetConfig+0x40>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a3b      	ldr	r2, [pc, #236]	; (8003544 <TIM_Base_SetConfig+0x120>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d003      	beq.n	8003464 <TIM_Base_SetConfig+0x40>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a3a      	ldr	r2, [pc, #232]	; (8003548 <TIM_Base_SetConfig+0x124>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d108      	bne.n	8003476 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800346a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	4313      	orrs	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a2f      	ldr	r2, [pc, #188]	; (8003538 <TIM_Base_SetConfig+0x114>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d02b      	beq.n	80034d6 <TIM_Base_SetConfig+0xb2>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003484:	d027      	beq.n	80034d6 <TIM_Base_SetConfig+0xb2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a2c      	ldr	r2, [pc, #176]	; (800353c <TIM_Base_SetConfig+0x118>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d023      	beq.n	80034d6 <TIM_Base_SetConfig+0xb2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a2b      	ldr	r2, [pc, #172]	; (8003540 <TIM_Base_SetConfig+0x11c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d01f      	beq.n	80034d6 <TIM_Base_SetConfig+0xb2>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a2a      	ldr	r2, [pc, #168]	; (8003544 <TIM_Base_SetConfig+0x120>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d01b      	beq.n	80034d6 <TIM_Base_SetConfig+0xb2>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a29      	ldr	r2, [pc, #164]	; (8003548 <TIM_Base_SetConfig+0x124>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d017      	beq.n	80034d6 <TIM_Base_SetConfig+0xb2>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a28      	ldr	r2, [pc, #160]	; (800354c <TIM_Base_SetConfig+0x128>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d013      	beq.n	80034d6 <TIM_Base_SetConfig+0xb2>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a27      	ldr	r2, [pc, #156]	; (8003550 <TIM_Base_SetConfig+0x12c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d00f      	beq.n	80034d6 <TIM_Base_SetConfig+0xb2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a26      	ldr	r2, [pc, #152]	; (8003554 <TIM_Base_SetConfig+0x130>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d00b      	beq.n	80034d6 <TIM_Base_SetConfig+0xb2>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a25      	ldr	r2, [pc, #148]	; (8003558 <TIM_Base_SetConfig+0x134>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d007      	beq.n	80034d6 <TIM_Base_SetConfig+0xb2>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a24      	ldr	r2, [pc, #144]	; (800355c <TIM_Base_SetConfig+0x138>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d003      	beq.n	80034d6 <TIM_Base_SetConfig+0xb2>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a23      	ldr	r2, [pc, #140]	; (8003560 <TIM_Base_SetConfig+0x13c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d108      	bne.n	80034e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a0a      	ldr	r2, [pc, #40]	; (8003538 <TIM_Base_SetConfig+0x114>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d003      	beq.n	800351c <TIM_Base_SetConfig+0xf8>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a0c      	ldr	r2, [pc, #48]	; (8003548 <TIM_Base_SetConfig+0x124>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d103      	bne.n	8003524 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	691a      	ldr	r2, [r3, #16]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	615a      	str	r2, [r3, #20]
}
 800352a:	bf00      	nop
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40010000 	.word	0x40010000
 800353c:	40000400 	.word	0x40000400
 8003540:	40000800 	.word	0x40000800
 8003544:	40000c00 	.word	0x40000c00
 8003548:	40010400 	.word	0x40010400
 800354c:	40014000 	.word	0x40014000
 8003550:	40014400 	.word	0x40014400
 8003554:	40014800 	.word	0x40014800
 8003558:	40001800 	.word	0x40001800
 800355c:	40001c00 	.word	0x40001c00
 8003560:	40002000 	.word	0x40002000

08003564 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	f023 0201 	bic.w	r2, r3, #1
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f023 0303 	bic.w	r3, r3, #3
 800359a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f023 0302 	bic.w	r3, r3, #2
 80035ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a20      	ldr	r2, [pc, #128]	; (800363c <TIM_OC1_SetConfig+0xd8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d003      	beq.n	80035c8 <TIM_OC1_SetConfig+0x64>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a1f      	ldr	r2, [pc, #124]	; (8003640 <TIM_OC1_SetConfig+0xdc>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d10c      	bne.n	80035e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f023 0308 	bic.w	r3, r3, #8
 80035ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f023 0304 	bic.w	r3, r3, #4
 80035e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a15      	ldr	r2, [pc, #84]	; (800363c <TIM_OC1_SetConfig+0xd8>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d003      	beq.n	80035f2 <TIM_OC1_SetConfig+0x8e>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a14      	ldr	r2, [pc, #80]	; (8003640 <TIM_OC1_SetConfig+0xdc>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d111      	bne.n	8003616 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003600:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4313      	orrs	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	4313      	orrs	r3, r2
 8003614:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	621a      	str	r2, [r3, #32]
}
 8003630:	bf00      	nop
 8003632:	371c      	adds	r7, #28
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	40010000 	.word	0x40010000
 8003640:	40010400 	.word	0x40010400

08003644 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003644:	b480      	push	{r7}
 8003646:	b087      	sub	sp, #28
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	f023 0210 	bic.w	r2, r3, #16
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800367a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	021b      	lsls	r3, r3, #8
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	4313      	orrs	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f023 0320 	bic.w	r3, r3, #32
 800368e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	4313      	orrs	r3, r2
 800369a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a22      	ldr	r2, [pc, #136]	; (8003728 <TIM_OC2_SetConfig+0xe4>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d003      	beq.n	80036ac <TIM_OC2_SetConfig+0x68>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a21      	ldr	r2, [pc, #132]	; (800372c <TIM_OC2_SetConfig+0xe8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d10d      	bne.n	80036c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	4313      	orrs	r3, r2
 80036be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a17      	ldr	r2, [pc, #92]	; (8003728 <TIM_OC2_SetConfig+0xe4>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d003      	beq.n	80036d8 <TIM_OC2_SetConfig+0x94>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a16      	ldr	r2, [pc, #88]	; (800372c <TIM_OC2_SetConfig+0xe8>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d113      	bne.n	8003700 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	621a      	str	r2, [r3, #32]
}
 800371a:	bf00      	nop
 800371c:	371c      	adds	r7, #28
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	40010000 	.word	0x40010000
 800372c:	40010400 	.word	0x40010400

08003730 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003730:	b480      	push	{r7}
 8003732:	b087      	sub	sp, #28
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800375e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 0303 	bic.w	r3, r3, #3
 8003766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	021b      	lsls	r3, r3, #8
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	4313      	orrs	r3, r2
 8003784:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a21      	ldr	r2, [pc, #132]	; (8003810 <TIM_OC3_SetConfig+0xe0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d003      	beq.n	8003796 <TIM_OC3_SetConfig+0x66>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a20      	ldr	r2, [pc, #128]	; (8003814 <TIM_OC3_SetConfig+0xe4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d10d      	bne.n	80037b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800379c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	021b      	lsls	r3, r3, #8
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a16      	ldr	r2, [pc, #88]	; (8003810 <TIM_OC3_SetConfig+0xe0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d003      	beq.n	80037c2 <TIM_OC3_SetConfig+0x92>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a15      	ldr	r2, [pc, #84]	; (8003814 <TIM_OC3_SetConfig+0xe4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d113      	bne.n	80037ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	621a      	str	r2, [r3, #32]
}
 8003804:	bf00      	nop
 8003806:	371c      	adds	r7, #28
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	40010000 	.word	0x40010000
 8003814:	40010400 	.word	0x40010400

08003818 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800384e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	021b      	lsls	r3, r3, #8
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	4313      	orrs	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003862:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	031b      	lsls	r3, r3, #12
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a12      	ldr	r2, [pc, #72]	; (80038bc <TIM_OC4_SetConfig+0xa4>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d003      	beq.n	8003880 <TIM_OC4_SetConfig+0x68>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a11      	ldr	r2, [pc, #68]	; (80038c0 <TIM_OC4_SetConfig+0xa8>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d109      	bne.n	8003894 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003886:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	019b      	lsls	r3, r3, #6
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	4313      	orrs	r3, r2
 8003892:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	621a      	str	r2, [r3, #32]
}
 80038ae:	bf00      	nop
 80038b0:	371c      	adds	r7, #28
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	40010000 	.word	0x40010000
 80038c0:	40010400 	.word	0x40010400

080038c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	f023 0201 	bic.w	r2, r3, #1
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	011b      	lsls	r3, r3, #4
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f023 030a 	bic.w	r3, r3, #10
 8003900:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	4313      	orrs	r3, r2
 8003908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	621a      	str	r2, [r3, #32]
}
 8003916:	bf00      	nop
 8003918:	371c      	adds	r7, #28
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003922:	b480      	push	{r7}
 8003924:	b087      	sub	sp, #28
 8003926:	af00      	add	r7, sp, #0
 8003928:	60f8      	str	r0, [r7, #12]
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	f023 0210 	bic.w	r2, r3, #16
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800394c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	031b      	lsls	r3, r3, #12
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	4313      	orrs	r3, r2
 8003956:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800395e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	4313      	orrs	r3, r2
 8003968:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	621a      	str	r2, [r3, #32]
}
 8003976:	bf00      	nop
 8003978:	371c      	adds	r7, #28
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003982:	b480      	push	{r7}
 8003984:	b085      	sub	sp, #20
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
 800398a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003998:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4313      	orrs	r3, r2
 80039a0:	f043 0307 	orr.w	r3, r3, #7
 80039a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	609a      	str	r2, [r3, #8]
}
 80039ac:	bf00      	nop
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
 80039c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	021a      	lsls	r2, r3, #8
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	431a      	orrs	r2, r3
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	4313      	orrs	r3, r2
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	609a      	str	r2, [r3, #8]
}
 80039ec:	bf00      	nop
 80039ee:	371c      	adds	r7, #28
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d101      	bne.n	8003a10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	e05a      	b.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a21      	ldr	r2, [pc, #132]	; (8003ad4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d022      	beq.n	8003a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a5c:	d01d      	beq.n	8003a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a1d      	ldr	r2, [pc, #116]	; (8003ad8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d018      	beq.n	8003a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a1b      	ldr	r2, [pc, #108]	; (8003adc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d013      	beq.n	8003a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a1a      	ldr	r2, [pc, #104]	; (8003ae0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d00e      	beq.n	8003a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a18      	ldr	r2, [pc, #96]	; (8003ae4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d009      	beq.n	8003a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a17      	ldr	r2, [pc, #92]	; (8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d004      	beq.n	8003a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a15      	ldr	r2, [pc, #84]	; (8003aec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d10c      	bne.n	8003ab4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	40010000 	.word	0x40010000
 8003ad8:	40000400 	.word	0x40000400
 8003adc:	40000800 	.word	0x40000800
 8003ae0:	40000c00 	.word	0x40000c00
 8003ae4:	40010400 	.word	0x40010400
 8003ae8:	40014000 	.word	0x40014000
 8003aec:	40001800 	.word	0x40001800

08003af0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e03f      	b.n	8003baa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d106      	bne.n	8003b44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7fd fa4c 	bl	8000fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2224      	movs	r2, #36	; 0x24
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 ff9b 	bl	8004a98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	691a      	ldr	r2, [r3, #16]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695a      	ldr	r2, [r3, #20]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68da      	ldr	r2, [r3, #12]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b08a      	sub	sp, #40	; 0x28
 8003bb6:	af02      	add	r7, sp, #8
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	603b      	str	r3, [r7, #0]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b20      	cmp	r3, #32
 8003bd0:	d17c      	bne.n	8003ccc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <HAL_UART_Transmit+0x2c>
 8003bd8:	88fb      	ldrh	r3, [r7, #6]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e075      	b.n	8003cce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <HAL_UART_Transmit+0x3e>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e06e      	b.n	8003cce <HAL_UART_Transmit+0x11c>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2221      	movs	r2, #33	; 0x21
 8003c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c06:	f7fd fc45 	bl	8001494 <HAL_GetTick>
 8003c0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	88fa      	ldrh	r2, [r7, #6]
 8003c10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	88fa      	ldrh	r2, [r7, #6]
 8003c16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c20:	d108      	bne.n	8003c34 <HAL_UART_Transmit+0x82>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d104      	bne.n	8003c34 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	61bb      	str	r3, [r7, #24]
 8003c32:	e003      	b.n	8003c3c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c44:	e02a      	b.n	8003c9c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	2180      	movs	r1, #128	; 0x80
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f000 fc53 	bl	80044fc <UART_WaitOnFlagUntilTimeout>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e036      	b.n	8003cce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10b      	bne.n	8003c7e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	881b      	ldrh	r3, [r3, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	3302      	adds	r3, #2
 8003c7a:	61bb      	str	r3, [r7, #24]
 8003c7c:	e007      	b.n	8003c8e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	781a      	ldrb	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1cf      	bne.n	8003c46 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	2200      	movs	r2, #0
 8003cae:	2140      	movs	r1, #64	; 0x40
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 fc23 	bl	80044fc <UART_WaitOnFlagUntilTimeout>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e006      	b.n	8003cce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	e000      	b.n	8003cce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ccc:	2302      	movs	r3, #2
  }
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3720      	adds	r7, #32
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b08c      	sub	sp, #48	; 0x30
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	60f8      	str	r0, [r7, #12]
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b20      	cmp	r3, #32
 8003cee:	d152      	bne.n	8003d96 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d002      	beq.n	8003cfc <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003cf6:	88fb      	ldrh	r3, [r7, #6]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e04b      	b.n	8003d98 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d101      	bne.n	8003d0e <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	e044      	b.n	8003d98 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003d1c:	88fb      	ldrh	r3, [r7, #6]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	68b9      	ldr	r1, [r7, #8]
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f000 fc58 	bl	80045d8 <UART_Start_Receive_DMA>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003d2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d12c      	bne.n	8003d90 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d125      	bne.n	8003d8a <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d3e:	2300      	movs	r3, #0
 8003d40:	613b      	str	r3, [r7, #16]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	613b      	str	r3, [r7, #16]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	613b      	str	r3, [r7, #16]
 8003d52:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	330c      	adds	r3, #12
 8003d5a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	e853 3f00 	ldrex	r3, [r3]
 8003d62:	617b      	str	r3, [r7, #20]
   return(result);
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f043 0310 	orr.w	r3, r3, #16
 8003d6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	330c      	adds	r3, #12
 8003d72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d74:	627a      	str	r2, [r7, #36]	; 0x24
 8003d76:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d78:	6a39      	ldr	r1, [r7, #32]
 8003d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7c:	e841 2300 	strex	r3, r2, [r1]
 8003d80:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1e5      	bne.n	8003d54 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8003d88:	e002      	b.n	8003d90 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003d90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d94:	e000      	b.n	8003d98 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8003d96:	2302      	movs	r3, #2
  }
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3730      	adds	r7, #48	; 0x30
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b0ba      	sub	sp, #232	; 0xe8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003dde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10f      	bne.n	8003e06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dea:	f003 0320 	and.w	r3, r3, #32
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d009      	beq.n	8003e06 <HAL_UART_IRQHandler+0x66>
 8003df2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003df6:	f003 0320 	and.w	r3, r3, #32
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fd8f 	bl	8004922 <UART_Receive_IT>
      return;
 8003e04:	e256      	b.n	80042b4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 80de 	beq.w	8003fcc <HAL_UART_IRQHandler+0x22c>
 8003e10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d106      	bne.n	8003e2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e20:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 80d1 	beq.w	8003fcc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00b      	beq.n	8003e4e <HAL_UART_IRQHandler+0xae>
 8003e36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d005      	beq.n	8003e4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	f043 0201 	orr.w	r2, r3, #1
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e52:	f003 0304 	and.w	r3, r3, #4
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00b      	beq.n	8003e72 <HAL_UART_IRQHandler+0xd2>
 8003e5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d005      	beq.n	8003e72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	f043 0202 	orr.w	r2, r3, #2
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00b      	beq.n	8003e96 <HAL_UART_IRQHandler+0xf6>
 8003e7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d005      	beq.n	8003e96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	f043 0204 	orr.w	r2, r3, #4
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d011      	beq.n	8003ec6 <HAL_UART_IRQHandler+0x126>
 8003ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ea6:	f003 0320 	and.w	r3, r3, #32
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d105      	bne.n	8003eba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003eae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d005      	beq.n	8003ec6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	f043 0208 	orr.w	r2, r3, #8
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 81ed 	beq.w	80042aa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ed4:	f003 0320 	and.w	r3, r3, #32
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d008      	beq.n	8003eee <HAL_UART_IRQHandler+0x14e>
 8003edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ee0:	f003 0320 	and.w	r3, r3, #32
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 fd1a 	bl	8004922 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef8:	2b40      	cmp	r3, #64	; 0x40
 8003efa:	bf0c      	ite	eq
 8003efc:	2301      	moveq	r3, #1
 8003efe:	2300      	movne	r3, #0
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d103      	bne.n	8003f1a <HAL_UART_IRQHandler+0x17a>
 8003f12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d04f      	beq.n	8003fba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 fc22 	bl	8004764 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2a:	2b40      	cmp	r3, #64	; 0x40
 8003f2c:	d141      	bne.n	8003fb2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3314      	adds	r3, #20
 8003f34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f3c:	e853 3f00 	ldrex	r3, [r3]
 8003f40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	3314      	adds	r3, #20
 8003f56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f6a:	e841 2300 	strex	r3, r2, [r1]
 8003f6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1d9      	bne.n	8003f2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d013      	beq.n	8003faa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f86:	4a7d      	ldr	r2, [pc, #500]	; (800417c <HAL_UART_IRQHandler+0x3dc>)
 8003f88:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fd fce4 	bl	800195c <HAL_DMA_Abort_IT>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d016      	beq.n	8003fc8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa8:	e00e      	b.n	8003fc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f9a4 	bl	80042f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb0:	e00a      	b.n	8003fc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f9a0 	bl	80042f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb8:	e006      	b.n	8003fc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f99c 	bl	80042f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003fc6:	e170      	b.n	80042aa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc8:	bf00      	nop
    return;
 8003fca:	e16e      	b.n	80042aa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	f040 814a 	bne.w	800426a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fda:	f003 0310 	and.w	r3, r3, #16
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 8143 	beq.w	800426a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fe8:	f003 0310 	and.w	r3, r3, #16
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 813c 	beq.w	800426a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	60bb      	str	r3, [r7, #8]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	60bb      	str	r3, [r7, #8]
 8004006:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004012:	2b40      	cmp	r3, #64	; 0x40
 8004014:	f040 80b4 	bne.w	8004180 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004024:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 8140 	beq.w	80042ae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004032:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004036:	429a      	cmp	r2, r3
 8004038:	f080 8139 	bcs.w	80042ae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004042:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800404e:	f000 8088 	beq.w	8004162 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	330c      	adds	r3, #12
 8004058:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004060:	e853 3f00 	ldrex	r3, [r3]
 8004064:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004068:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800406c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004070:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	330c      	adds	r3, #12
 800407a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800407e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004082:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004086:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800408a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800408e:	e841 2300 	strex	r3, r2, [r1]
 8004092:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004096:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1d9      	bne.n	8004052 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	3314      	adds	r3, #20
 80040a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040a8:	e853 3f00 	ldrex	r3, [r3]
 80040ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80040ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040b0:	f023 0301 	bic.w	r3, r3, #1
 80040b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3314      	adds	r3, #20
 80040be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80040c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80040ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80040ce:	e841 2300 	strex	r3, r2, [r1]
 80040d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80040d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1e1      	bne.n	800409e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3314      	adds	r3, #20
 80040e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040e4:	e853 3f00 	ldrex	r3, [r3]
 80040e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80040ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3314      	adds	r3, #20
 80040fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80040fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004100:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004102:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004104:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004106:	e841 2300 	strex	r3, r2, [r1]
 800410a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800410c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1e3      	bne.n	80040da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	330c      	adds	r3, #12
 8004126:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800412a:	e853 3f00 	ldrex	r3, [r3]
 800412e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004132:	f023 0310 	bic.w	r3, r3, #16
 8004136:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	330c      	adds	r3, #12
 8004140:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004144:	65ba      	str	r2, [r7, #88]	; 0x58
 8004146:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004148:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800414a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800414c:	e841 2300 	strex	r3, r2, [r1]
 8004150:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1e3      	bne.n	8004120 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415c:	4618      	mov	r0, r3
 800415e:	f7fd fb8d 	bl	800187c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800416a:	b29b      	uxth	r3, r3
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	b29b      	uxth	r3, r3
 8004170:	4619      	mov	r1, r3
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f003 ff72 	bl	800805c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004178:	e099      	b.n	80042ae <HAL_UART_IRQHandler+0x50e>
 800417a:	bf00      	nop
 800417c:	0800482b 	.word	0x0800482b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004188:	b29b      	uxth	r3, r3
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004194:	b29b      	uxth	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 808b 	beq.w	80042b2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800419c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 8086 	beq.w	80042b2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	330c      	adds	r3, #12
 80041ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b0:	e853 3f00 	ldrex	r3, [r3]
 80041b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	330c      	adds	r3, #12
 80041c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80041ca:	647a      	str	r2, [r7, #68]	; 0x44
 80041cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041d2:	e841 2300 	strex	r3, r2, [r1]
 80041d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1e3      	bne.n	80041a6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	3314      	adds	r3, #20
 80041e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	e853 3f00 	ldrex	r3, [r3]
 80041ec:	623b      	str	r3, [r7, #32]
   return(result);
 80041ee:	6a3b      	ldr	r3, [r7, #32]
 80041f0:	f023 0301 	bic.w	r3, r3, #1
 80041f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	3314      	adds	r3, #20
 80041fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004202:	633a      	str	r2, [r7, #48]	; 0x30
 8004204:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004206:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800420a:	e841 2300 	strex	r3, r2, [r1]
 800420e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1e3      	bne.n	80041de <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2220      	movs	r2, #32
 800421a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	330c      	adds	r3, #12
 800422a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	e853 3f00 	ldrex	r3, [r3]
 8004232:	60fb      	str	r3, [r7, #12]
   return(result);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f023 0310 	bic.w	r3, r3, #16
 800423a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	330c      	adds	r3, #12
 8004244:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004248:	61fa      	str	r2, [r7, #28]
 800424a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424c:	69b9      	ldr	r1, [r7, #24]
 800424e:	69fa      	ldr	r2, [r7, #28]
 8004250:	e841 2300 	strex	r3, r2, [r1]
 8004254:	617b      	str	r3, [r7, #20]
   return(result);
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1e3      	bne.n	8004224 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800425c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004260:	4619      	mov	r1, r3
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f003 fefa 	bl	800805c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004268:	e023      	b.n	80042b2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800426a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800426e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004272:	2b00      	cmp	r3, #0
 8004274:	d009      	beq.n	800428a <HAL_UART_IRQHandler+0x4ea>
 8004276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800427a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fae5 	bl	8004852 <UART_Transmit_IT>
    return;
 8004288:	e014      	b.n	80042b4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800428a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800428e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00e      	beq.n	80042b4 <HAL_UART_IRQHandler+0x514>
 8004296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800429a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d008      	beq.n	80042b4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 fb25 	bl	80048f2 <UART_EndTransmit_IT>
    return;
 80042a8:	e004      	b.n	80042b4 <HAL_UART_IRQHandler+0x514>
    return;
 80042aa:	bf00      	nop
 80042ac:	e002      	b.n	80042b4 <HAL_UART_IRQHandler+0x514>
      return;
 80042ae:	bf00      	nop
 80042b0:	e000      	b.n	80042b4 <HAL_UART_IRQHandler+0x514>
      return;
 80042b2:	bf00      	nop
  }
}
 80042b4:	37e8      	adds	r7, #232	; 0xe8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop

080042bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b09c      	sub	sp, #112	; 0x70
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004318:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004324:	2b00      	cmp	r3, #0
 8004326:	d172      	bne.n	800440e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800432a:	2200      	movs	r2, #0
 800432c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800432e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	330c      	adds	r3, #12
 8004334:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004338:	e853 3f00 	ldrex	r3, [r3]
 800433c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800433e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004344:	66bb      	str	r3, [r7, #104]	; 0x68
 8004346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	330c      	adds	r3, #12
 800434c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800434e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004350:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004352:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004354:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004356:	e841 2300 	strex	r3, r2, [r1]
 800435a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800435c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1e5      	bne.n	800432e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	3314      	adds	r3, #20
 8004368:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436c:	e853 3f00 	ldrex	r3, [r3]
 8004370:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004374:	f023 0301 	bic.w	r3, r3, #1
 8004378:	667b      	str	r3, [r7, #100]	; 0x64
 800437a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	3314      	adds	r3, #20
 8004380:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004382:	647a      	str	r2, [r7, #68]	; 0x44
 8004384:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004386:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004388:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800438a:	e841 2300 	strex	r3, r2, [r1]
 800438e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1e5      	bne.n	8004362 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	3314      	adds	r3, #20
 800439c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	e853 3f00 	ldrex	r3, [r3]
 80043a4:	623b      	str	r3, [r7, #32]
   return(result);
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043ac:	663b      	str	r3, [r7, #96]	; 0x60
 80043ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3314      	adds	r3, #20
 80043b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043b6:	633a      	str	r2, [r7, #48]	; 0x30
 80043b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043be:	e841 2300 	strex	r3, r2, [r1]
 80043c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1e5      	bne.n	8004396 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80043ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d119      	bne.n	800440e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	330c      	adds	r3, #12
 80043e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	e853 3f00 	ldrex	r3, [r3]
 80043e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f023 0310 	bic.w	r3, r3, #16
 80043f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	330c      	adds	r3, #12
 80043f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80043fa:	61fa      	str	r2, [r7, #28]
 80043fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fe:	69b9      	ldr	r1, [r7, #24]
 8004400:	69fa      	ldr	r2, [r7, #28]
 8004402:	e841 2300 	strex	r3, r2, [r1]
 8004406:	617b      	str	r3, [r7, #20]
   return(result);
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1e5      	bne.n	80043da <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800440e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004412:	2b01      	cmp	r3, #1
 8004414:	d106      	bne.n	8004424 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004418:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800441a:	4619      	mov	r1, r3
 800441c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800441e:	f003 fe1d 	bl	800805c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004422:	e002      	b.n	800442a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004424:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004426:	f7ff ff53 	bl	80042d0 <HAL_UART_RxCpltCallback>
}
 800442a:	bf00      	nop
 800442c:	3770      	adds	r7, #112	; 0x70
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b084      	sub	sp, #16
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004444:	2b01      	cmp	r3, #1
 8004446:	d108      	bne.n	800445a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800444c:	085b      	lsrs	r3, r3, #1
 800444e:	b29b      	uxth	r3, r3
 8004450:	4619      	mov	r1, r3
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f003 fe02 	bl	800805c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004458:	e002      	b.n	8004460 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f7ff ff42 	bl	80042e4 <HAL_UART_RxHalfCpltCallback>
}
 8004460:	bf00      	nop
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004470:	2300      	movs	r3, #0
 8004472:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004478:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004484:	2b80      	cmp	r3, #128	; 0x80
 8004486:	bf0c      	ite	eq
 8004488:	2301      	moveq	r3, #1
 800448a:	2300      	movne	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b21      	cmp	r3, #33	; 0x21
 800449a:	d108      	bne.n	80044ae <UART_DMAError+0x46>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d005      	beq.n	80044ae <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	2200      	movs	r2, #0
 80044a6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80044a8:	68b8      	ldr	r0, [r7, #8]
 80044aa:	f000 f933 	bl	8004714 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b8:	2b40      	cmp	r3, #64	; 0x40
 80044ba:	bf0c      	ite	eq
 80044bc:	2301      	moveq	r3, #1
 80044be:	2300      	movne	r3, #0
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b22      	cmp	r3, #34	; 0x22
 80044ce:	d108      	bne.n	80044e2 <UART_DMAError+0x7a>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d005      	beq.n	80044e2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	2200      	movs	r2, #0
 80044da:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80044dc:	68b8      	ldr	r0, [r7, #8]
 80044de:	f000 f941 	bl	8004764 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	f043 0210 	orr.w	r2, r3, #16
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044ee:	68b8      	ldr	r0, [r7, #8]
 80044f0:	f7ff ff02 	bl	80042f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044f4:	bf00      	nop
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b090      	sub	sp, #64	; 0x40
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	603b      	str	r3, [r7, #0]
 8004508:	4613      	mov	r3, r2
 800450a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800450c:	e050      	b.n	80045b0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800450e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004514:	d04c      	beq.n	80045b0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004518:	2b00      	cmp	r3, #0
 800451a:	d007      	beq.n	800452c <UART_WaitOnFlagUntilTimeout+0x30>
 800451c:	f7fc ffba 	bl	8001494 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004528:	429a      	cmp	r2, r3
 800452a:	d241      	bcs.n	80045b0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	330c      	adds	r3, #12
 8004532:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004536:	e853 3f00 	ldrex	r3, [r3]
 800453a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004542:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	330c      	adds	r3, #12
 800454a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800454c:	637a      	str	r2, [r7, #52]	; 0x34
 800454e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004550:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004552:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004554:	e841 2300 	strex	r3, r2, [r1]
 8004558:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800455a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1e5      	bne.n	800452c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3314      	adds	r3, #20
 8004566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	e853 3f00 	ldrex	r3, [r3]
 800456e:	613b      	str	r3, [r7, #16]
   return(result);
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	f023 0301 	bic.w	r3, r3, #1
 8004576:	63bb      	str	r3, [r7, #56]	; 0x38
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	3314      	adds	r3, #20
 800457e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004580:	623a      	str	r2, [r7, #32]
 8004582:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004584:	69f9      	ldr	r1, [r7, #28]
 8004586:	6a3a      	ldr	r2, [r7, #32]
 8004588:	e841 2300 	strex	r3, r2, [r1]
 800458c:	61bb      	str	r3, [r7, #24]
   return(result);
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1e5      	bne.n	8004560 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2220      	movs	r2, #32
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2220      	movs	r2, #32
 80045a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e00f      	b.n	80045d0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	4013      	ands	r3, r2
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	429a      	cmp	r2, r3
 80045be:	bf0c      	ite	eq
 80045c0:	2301      	moveq	r3, #1
 80045c2:	2300      	movne	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	461a      	mov	r2, r3
 80045c8:	79fb      	ldrb	r3, [r7, #7]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d09f      	beq.n	800450e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3740      	adds	r7, #64	; 0x40
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b098      	sub	sp, #96	; 0x60
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	4613      	mov	r3, r2
 80045e4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	88fa      	ldrh	r2, [r7, #6]
 80045f0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2222      	movs	r2, #34	; 0x22
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004604:	4a40      	ldr	r2, [pc, #256]	; (8004708 <UART_Start_Receive_DMA+0x130>)
 8004606:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460c:	4a3f      	ldr	r2, [pc, #252]	; (800470c <UART_Start_Receive_DMA+0x134>)
 800460e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004614:	4a3e      	ldr	r2, [pc, #248]	; (8004710 <UART_Start_Receive_DMA+0x138>)
 8004616:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461c:	2200      	movs	r2, #0
 800461e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004620:	f107 0308 	add.w	r3, r7, #8
 8004624:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3304      	adds	r3, #4
 8004630:	4619      	mov	r1, r3
 8004632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	88fb      	ldrh	r3, [r7, #6]
 8004638:	f7fd f8c8 	bl	80017cc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800463c:	2300      	movs	r3, #0
 800463e:	613b      	str	r3, [r7, #16]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	613b      	str	r3, [r7, #16]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	613b      	str	r3, [r7, #16]
 8004650:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d019      	beq.n	8004696 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	330c      	adds	r3, #12
 8004668:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800466c:	e853 3f00 	ldrex	r3, [r3]
 8004670:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004678:	65bb      	str	r3, [r7, #88]	; 0x58
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	330c      	adds	r3, #12
 8004680:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004682:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004684:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004686:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004688:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800468a:	e841 2300 	strex	r3, r2, [r1]
 800468e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1e5      	bne.n	8004662 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	3314      	adds	r3, #20
 800469c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a0:	e853 3f00 	ldrex	r3, [r3]
 80046a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a8:	f043 0301 	orr.w	r3, r3, #1
 80046ac:	657b      	str	r3, [r7, #84]	; 0x54
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	3314      	adds	r3, #20
 80046b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80046b6:	63ba      	str	r2, [r7, #56]	; 0x38
 80046b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80046bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046be:	e841 2300 	strex	r3, r2, [r1]
 80046c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80046c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1e5      	bne.n	8004696 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3314      	adds	r3, #20
 80046d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	e853 3f00 	ldrex	r3, [r3]
 80046d8:	617b      	str	r3, [r7, #20]
   return(result);
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046e0:	653b      	str	r3, [r7, #80]	; 0x50
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	3314      	adds	r3, #20
 80046e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80046ea:	627a      	str	r2, [r7, #36]	; 0x24
 80046ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ee:	6a39      	ldr	r1, [r7, #32]
 80046f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f2:	e841 2300 	strex	r3, r2, [r1]
 80046f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1e5      	bne.n	80046ca <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3760      	adds	r7, #96	; 0x60
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	0800430d 	.word	0x0800430d
 800470c:	08004433 	.word	0x08004433
 8004710:	08004469 	.word	0x08004469

08004714 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004714:	b480      	push	{r7}
 8004716:	b089      	sub	sp, #36	; 0x24
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	330c      	adds	r3, #12
 8004722:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	e853 3f00 	ldrex	r3, [r3]
 800472a:	60bb      	str	r3, [r7, #8]
   return(result);
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004732:	61fb      	str	r3, [r7, #28]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	330c      	adds	r3, #12
 800473a:	69fa      	ldr	r2, [r7, #28]
 800473c:	61ba      	str	r2, [r7, #24]
 800473e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004740:	6979      	ldr	r1, [r7, #20]
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	e841 2300 	strex	r3, r2, [r1]
 8004748:	613b      	str	r3, [r7, #16]
   return(result);
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1e5      	bne.n	800471c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004758:	bf00      	nop
 800475a:	3724      	adds	r7, #36	; 0x24
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004764:	b480      	push	{r7}
 8004766:	b095      	sub	sp, #84	; 0x54
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	330c      	adds	r3, #12
 8004772:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004776:	e853 3f00 	ldrex	r3, [r3]
 800477a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800477c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004782:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	330c      	adds	r3, #12
 800478a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800478c:	643a      	str	r2, [r7, #64]	; 0x40
 800478e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004790:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004792:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004794:	e841 2300 	strex	r3, r2, [r1]
 8004798:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800479a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1e5      	bne.n	800476c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	3314      	adds	r3, #20
 80047a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	e853 3f00 	ldrex	r3, [r3]
 80047ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	f023 0301 	bic.w	r3, r3, #1
 80047b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	3314      	adds	r3, #20
 80047be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047c8:	e841 2300 	strex	r3, r2, [r1]
 80047cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1e5      	bne.n	80047a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d119      	bne.n	8004810 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	330c      	adds	r3, #12
 80047e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	e853 3f00 	ldrex	r3, [r3]
 80047ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f023 0310 	bic.w	r3, r3, #16
 80047f2:	647b      	str	r3, [r7, #68]	; 0x44
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	330c      	adds	r3, #12
 80047fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047fc:	61ba      	str	r2, [r7, #24]
 80047fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004800:	6979      	ldr	r1, [r7, #20]
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	e841 2300 	strex	r3, r2, [r1]
 8004808:	613b      	str	r3, [r7, #16]
   return(result);
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1e5      	bne.n	80047dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2220      	movs	r2, #32
 8004814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800481e:	bf00      	nop
 8004820:	3754      	adds	r7, #84	; 0x54
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b084      	sub	sp, #16
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004836:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f7ff fd57 	bl	80042f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800484a:	bf00      	nop
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004852:	b480      	push	{r7}
 8004854:	b085      	sub	sp, #20
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b21      	cmp	r3, #33	; 0x21
 8004864:	d13e      	bne.n	80048e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800486e:	d114      	bne.n	800489a <UART_Transmit_IT+0x48>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d110      	bne.n	800489a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	461a      	mov	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800488c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	1c9a      	adds	r2, r3, #2
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	621a      	str	r2, [r3, #32]
 8004898:	e008      	b.n	80048ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	1c59      	adds	r1, r3, #1
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	6211      	str	r1, [r2, #32]
 80048a4:	781a      	ldrb	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	3b01      	subs	r3, #1
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	4619      	mov	r1, r3
 80048ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10f      	bne.n	80048e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	e000      	b.n	80048e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80048e4:	2302      	movs	r3, #2
  }
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b082      	sub	sp, #8
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004908:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2220      	movs	r2, #32
 800490e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7ff fcd2 	bl	80042bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b08c      	sub	sp, #48	; 0x30
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b22      	cmp	r3, #34	; 0x22
 8004934:	f040 80ab 	bne.w	8004a8e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004940:	d117      	bne.n	8004972 <UART_Receive_IT+0x50>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d113      	bne.n	8004972 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800494a:	2300      	movs	r3, #0
 800494c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004952:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	b29b      	uxth	r3, r3
 800495c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004960:	b29a      	uxth	r2, r3
 8004962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004964:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496a:	1c9a      	adds	r2, r3, #2
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	629a      	str	r2, [r3, #40]	; 0x28
 8004970:	e026      	b.n	80049c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004976:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004978:	2300      	movs	r3, #0
 800497a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004984:	d007      	beq.n	8004996 <UART_Receive_IT+0x74>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10a      	bne.n	80049a4 <UART_Receive_IT+0x82>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d106      	bne.n	80049a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	b2da      	uxtb	r2, r3
 800499e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a0:	701a      	strb	r2, [r3, #0]
 80049a2:	e008      	b.n	80049b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	3b01      	subs	r3, #1
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	4619      	mov	r1, r3
 80049ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d15a      	bne.n	8004a8a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68da      	ldr	r2, [r3, #12]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0220 	bic.w	r2, r2, #32
 80049e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	695a      	ldr	r2, [r3, #20]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0201 	bic.w	r2, r2, #1
 8004a02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d135      	bne.n	8004a80 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	330c      	adds	r3, #12
 8004a20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	e853 3f00 	ldrex	r3, [r3]
 8004a28:	613b      	str	r3, [r7, #16]
   return(result);
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	f023 0310 	bic.w	r3, r3, #16
 8004a30:	627b      	str	r3, [r7, #36]	; 0x24
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	330c      	adds	r3, #12
 8004a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a3a:	623a      	str	r2, [r7, #32]
 8004a3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3e:	69f9      	ldr	r1, [r7, #28]
 8004a40:	6a3a      	ldr	r2, [r7, #32]
 8004a42:	e841 2300 	strex	r3, r2, [r1]
 8004a46:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1e5      	bne.n	8004a1a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0310 	and.w	r3, r3, #16
 8004a58:	2b10      	cmp	r3, #16
 8004a5a:	d10a      	bne.n	8004a72 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	60fb      	str	r3, [r7, #12]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	60fb      	str	r3, [r7, #12]
 8004a70:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a76:	4619      	mov	r1, r3
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f003 faef 	bl	800805c <HAL_UARTEx_RxEventCallback>
 8004a7e:	e002      	b.n	8004a86 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7ff fc25 	bl	80042d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	e002      	b.n	8004a90 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	e000      	b.n	8004a90 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004a8e:	2302      	movs	r3, #2
  }
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3730      	adds	r7, #48	; 0x30
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a9c:	b0c0      	sub	sp, #256	; 0x100
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab4:	68d9      	ldr	r1, [r3, #12]
 8004ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	ea40 0301 	orr.w	r3, r0, r1
 8004ac0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004af0:	f021 010c 	bic.w	r1, r1, #12
 8004af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004afe:	430b      	orrs	r3, r1
 8004b00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b12:	6999      	ldr	r1, [r3, #24]
 8004b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	ea40 0301 	orr.w	r3, r0, r1
 8004b1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	4b8f      	ldr	r3, [pc, #572]	; (8004d64 <UART_SetConfig+0x2cc>)
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d005      	beq.n	8004b38 <UART_SetConfig+0xa0>
 8004b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	4b8d      	ldr	r3, [pc, #564]	; (8004d68 <UART_SetConfig+0x2d0>)
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d104      	bne.n	8004b42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b38:	f7fe f830 	bl	8002b9c <HAL_RCC_GetPCLK2Freq>
 8004b3c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b40:	e003      	b.n	8004b4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b42:	f7fe f817 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 8004b46:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4e:	69db      	ldr	r3, [r3, #28]
 8004b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b54:	f040 810c 	bne.w	8004d70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b62:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b6a:	4622      	mov	r2, r4
 8004b6c:	462b      	mov	r3, r5
 8004b6e:	1891      	adds	r1, r2, r2
 8004b70:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b72:	415b      	adcs	r3, r3
 8004b74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b7a:	4621      	mov	r1, r4
 8004b7c:	eb12 0801 	adds.w	r8, r2, r1
 8004b80:	4629      	mov	r1, r5
 8004b82:	eb43 0901 	adc.w	r9, r3, r1
 8004b86:	f04f 0200 	mov.w	r2, #0
 8004b8a:	f04f 0300 	mov.w	r3, #0
 8004b8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b9a:	4690      	mov	r8, r2
 8004b9c:	4699      	mov	r9, r3
 8004b9e:	4623      	mov	r3, r4
 8004ba0:	eb18 0303 	adds.w	r3, r8, r3
 8004ba4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ba8:	462b      	mov	r3, r5
 8004baa:	eb49 0303 	adc.w	r3, r9, r3
 8004bae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004bbe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004bc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	18db      	adds	r3, r3, r3
 8004bca:	653b      	str	r3, [r7, #80]	; 0x50
 8004bcc:	4613      	mov	r3, r2
 8004bce:	eb42 0303 	adc.w	r3, r2, r3
 8004bd2:	657b      	str	r3, [r7, #84]	; 0x54
 8004bd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004bd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004bdc:	f7fb fb08 	bl	80001f0 <__aeabi_uldivmod>
 8004be0:	4602      	mov	r2, r0
 8004be2:	460b      	mov	r3, r1
 8004be4:	4b61      	ldr	r3, [pc, #388]	; (8004d6c <UART_SetConfig+0x2d4>)
 8004be6:	fba3 2302 	umull	r2, r3, r3, r2
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	011c      	lsls	r4, r3, #4
 8004bee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bf8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004bfc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c00:	4642      	mov	r2, r8
 8004c02:	464b      	mov	r3, r9
 8004c04:	1891      	adds	r1, r2, r2
 8004c06:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c08:	415b      	adcs	r3, r3
 8004c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c10:	4641      	mov	r1, r8
 8004c12:	eb12 0a01 	adds.w	sl, r2, r1
 8004c16:	4649      	mov	r1, r9
 8004c18:	eb43 0b01 	adc.w	fp, r3, r1
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	f04f 0300 	mov.w	r3, #0
 8004c24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c30:	4692      	mov	sl, r2
 8004c32:	469b      	mov	fp, r3
 8004c34:	4643      	mov	r3, r8
 8004c36:	eb1a 0303 	adds.w	r3, sl, r3
 8004c3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c3e:	464b      	mov	r3, r9
 8004c40:	eb4b 0303 	adc.w	r3, fp, r3
 8004c44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c54:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	18db      	adds	r3, r3, r3
 8004c60:	643b      	str	r3, [r7, #64]	; 0x40
 8004c62:	4613      	mov	r3, r2
 8004c64:	eb42 0303 	adc.w	r3, r2, r3
 8004c68:	647b      	str	r3, [r7, #68]	; 0x44
 8004c6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c72:	f7fb fabd 	bl	80001f0 <__aeabi_uldivmod>
 8004c76:	4602      	mov	r2, r0
 8004c78:	460b      	mov	r3, r1
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	4b3b      	ldr	r3, [pc, #236]	; (8004d6c <UART_SetConfig+0x2d4>)
 8004c7e:	fba3 2301 	umull	r2, r3, r3, r1
 8004c82:	095b      	lsrs	r3, r3, #5
 8004c84:	2264      	movs	r2, #100	; 0x64
 8004c86:	fb02 f303 	mul.w	r3, r2, r3
 8004c8a:	1acb      	subs	r3, r1, r3
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c92:	4b36      	ldr	r3, [pc, #216]	; (8004d6c <UART_SetConfig+0x2d4>)
 8004c94:	fba3 2302 	umull	r2, r3, r3, r2
 8004c98:	095b      	lsrs	r3, r3, #5
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ca0:	441c      	add	r4, r3
 8004ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004cb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004cb4:	4642      	mov	r2, r8
 8004cb6:	464b      	mov	r3, r9
 8004cb8:	1891      	adds	r1, r2, r2
 8004cba:	63b9      	str	r1, [r7, #56]	; 0x38
 8004cbc:	415b      	adcs	r3, r3
 8004cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004cc4:	4641      	mov	r1, r8
 8004cc6:	1851      	adds	r1, r2, r1
 8004cc8:	6339      	str	r1, [r7, #48]	; 0x30
 8004cca:	4649      	mov	r1, r9
 8004ccc:	414b      	adcs	r3, r1
 8004cce:	637b      	str	r3, [r7, #52]	; 0x34
 8004cd0:	f04f 0200 	mov.w	r2, #0
 8004cd4:	f04f 0300 	mov.w	r3, #0
 8004cd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004cdc:	4659      	mov	r1, fp
 8004cde:	00cb      	lsls	r3, r1, #3
 8004ce0:	4651      	mov	r1, sl
 8004ce2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ce6:	4651      	mov	r1, sl
 8004ce8:	00ca      	lsls	r2, r1, #3
 8004cea:	4610      	mov	r0, r2
 8004cec:	4619      	mov	r1, r3
 8004cee:	4603      	mov	r3, r0
 8004cf0:	4642      	mov	r2, r8
 8004cf2:	189b      	adds	r3, r3, r2
 8004cf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cf8:	464b      	mov	r3, r9
 8004cfa:	460a      	mov	r2, r1
 8004cfc:	eb42 0303 	adc.w	r3, r2, r3
 8004d00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d18:	460b      	mov	r3, r1
 8004d1a:	18db      	adds	r3, r3, r3
 8004d1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d1e:	4613      	mov	r3, r2
 8004d20:	eb42 0303 	adc.w	r3, r2, r3
 8004d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d2e:	f7fb fa5f 	bl	80001f0 <__aeabi_uldivmod>
 8004d32:	4602      	mov	r2, r0
 8004d34:	460b      	mov	r3, r1
 8004d36:	4b0d      	ldr	r3, [pc, #52]	; (8004d6c <UART_SetConfig+0x2d4>)
 8004d38:	fba3 1302 	umull	r1, r3, r3, r2
 8004d3c:	095b      	lsrs	r3, r3, #5
 8004d3e:	2164      	movs	r1, #100	; 0x64
 8004d40:	fb01 f303 	mul.w	r3, r1, r3
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	3332      	adds	r3, #50	; 0x32
 8004d4a:	4a08      	ldr	r2, [pc, #32]	; (8004d6c <UART_SetConfig+0x2d4>)
 8004d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d50:	095b      	lsrs	r3, r3, #5
 8004d52:	f003 0207 	and.w	r2, r3, #7
 8004d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4422      	add	r2, r4
 8004d5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d60:	e106      	b.n	8004f70 <UART_SetConfig+0x4d8>
 8004d62:	bf00      	nop
 8004d64:	40011000 	.word	0x40011000
 8004d68:	40011400 	.word	0x40011400
 8004d6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d74:	2200      	movs	r2, #0
 8004d76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d82:	4642      	mov	r2, r8
 8004d84:	464b      	mov	r3, r9
 8004d86:	1891      	adds	r1, r2, r2
 8004d88:	6239      	str	r1, [r7, #32]
 8004d8a:	415b      	adcs	r3, r3
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d92:	4641      	mov	r1, r8
 8004d94:	1854      	adds	r4, r2, r1
 8004d96:	4649      	mov	r1, r9
 8004d98:	eb43 0501 	adc.w	r5, r3, r1
 8004d9c:	f04f 0200 	mov.w	r2, #0
 8004da0:	f04f 0300 	mov.w	r3, #0
 8004da4:	00eb      	lsls	r3, r5, #3
 8004da6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004daa:	00e2      	lsls	r2, r4, #3
 8004dac:	4614      	mov	r4, r2
 8004dae:	461d      	mov	r5, r3
 8004db0:	4643      	mov	r3, r8
 8004db2:	18e3      	adds	r3, r4, r3
 8004db4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004db8:	464b      	mov	r3, r9
 8004dba:	eb45 0303 	adc.w	r3, r5, r3
 8004dbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004dce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004dd2:	f04f 0200 	mov.w	r2, #0
 8004dd6:	f04f 0300 	mov.w	r3, #0
 8004dda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004dde:	4629      	mov	r1, r5
 8004de0:	008b      	lsls	r3, r1, #2
 8004de2:	4621      	mov	r1, r4
 8004de4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004de8:	4621      	mov	r1, r4
 8004dea:	008a      	lsls	r2, r1, #2
 8004dec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004df0:	f7fb f9fe 	bl	80001f0 <__aeabi_uldivmod>
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	4b60      	ldr	r3, [pc, #384]	; (8004f7c <UART_SetConfig+0x4e4>)
 8004dfa:	fba3 2302 	umull	r2, r3, r3, r2
 8004dfe:	095b      	lsrs	r3, r3, #5
 8004e00:	011c      	lsls	r4, r3, #4
 8004e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e06:	2200      	movs	r2, #0
 8004e08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e14:	4642      	mov	r2, r8
 8004e16:	464b      	mov	r3, r9
 8004e18:	1891      	adds	r1, r2, r2
 8004e1a:	61b9      	str	r1, [r7, #24]
 8004e1c:	415b      	adcs	r3, r3
 8004e1e:	61fb      	str	r3, [r7, #28]
 8004e20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e24:	4641      	mov	r1, r8
 8004e26:	1851      	adds	r1, r2, r1
 8004e28:	6139      	str	r1, [r7, #16]
 8004e2a:	4649      	mov	r1, r9
 8004e2c:	414b      	adcs	r3, r1
 8004e2e:	617b      	str	r3, [r7, #20]
 8004e30:	f04f 0200 	mov.w	r2, #0
 8004e34:	f04f 0300 	mov.w	r3, #0
 8004e38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e3c:	4659      	mov	r1, fp
 8004e3e:	00cb      	lsls	r3, r1, #3
 8004e40:	4651      	mov	r1, sl
 8004e42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e46:	4651      	mov	r1, sl
 8004e48:	00ca      	lsls	r2, r1, #3
 8004e4a:	4610      	mov	r0, r2
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4603      	mov	r3, r0
 8004e50:	4642      	mov	r2, r8
 8004e52:	189b      	adds	r3, r3, r2
 8004e54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e58:	464b      	mov	r3, r9
 8004e5a:	460a      	mov	r2, r1
 8004e5c:	eb42 0303 	adc.w	r3, r2, r3
 8004e60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004e70:	f04f 0200 	mov.w	r2, #0
 8004e74:	f04f 0300 	mov.w	r3, #0
 8004e78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e7c:	4649      	mov	r1, r9
 8004e7e:	008b      	lsls	r3, r1, #2
 8004e80:	4641      	mov	r1, r8
 8004e82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e86:	4641      	mov	r1, r8
 8004e88:	008a      	lsls	r2, r1, #2
 8004e8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e8e:	f7fb f9af 	bl	80001f0 <__aeabi_uldivmod>
 8004e92:	4602      	mov	r2, r0
 8004e94:	460b      	mov	r3, r1
 8004e96:	4611      	mov	r1, r2
 8004e98:	4b38      	ldr	r3, [pc, #224]	; (8004f7c <UART_SetConfig+0x4e4>)
 8004e9a:	fba3 2301 	umull	r2, r3, r3, r1
 8004e9e:	095b      	lsrs	r3, r3, #5
 8004ea0:	2264      	movs	r2, #100	; 0x64
 8004ea2:	fb02 f303 	mul.w	r3, r2, r3
 8004ea6:	1acb      	subs	r3, r1, r3
 8004ea8:	011b      	lsls	r3, r3, #4
 8004eaa:	3332      	adds	r3, #50	; 0x32
 8004eac:	4a33      	ldr	r2, [pc, #204]	; (8004f7c <UART_SetConfig+0x4e4>)
 8004eae:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb2:	095b      	lsrs	r3, r3, #5
 8004eb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004eb8:	441c      	add	r4, r3
 8004eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	673b      	str	r3, [r7, #112]	; 0x70
 8004ec2:	677a      	str	r2, [r7, #116]	; 0x74
 8004ec4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ec8:	4642      	mov	r2, r8
 8004eca:	464b      	mov	r3, r9
 8004ecc:	1891      	adds	r1, r2, r2
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	415b      	adcs	r3, r3
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ed8:	4641      	mov	r1, r8
 8004eda:	1851      	adds	r1, r2, r1
 8004edc:	6039      	str	r1, [r7, #0]
 8004ede:	4649      	mov	r1, r9
 8004ee0:	414b      	adcs	r3, r1
 8004ee2:	607b      	str	r3, [r7, #4]
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ef0:	4659      	mov	r1, fp
 8004ef2:	00cb      	lsls	r3, r1, #3
 8004ef4:	4651      	mov	r1, sl
 8004ef6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004efa:	4651      	mov	r1, sl
 8004efc:	00ca      	lsls	r2, r1, #3
 8004efe:	4610      	mov	r0, r2
 8004f00:	4619      	mov	r1, r3
 8004f02:	4603      	mov	r3, r0
 8004f04:	4642      	mov	r2, r8
 8004f06:	189b      	adds	r3, r3, r2
 8004f08:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f0a:	464b      	mov	r3, r9
 8004f0c:	460a      	mov	r2, r1
 8004f0e:	eb42 0303 	adc.w	r3, r2, r3
 8004f12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	663b      	str	r3, [r7, #96]	; 0x60
 8004f1e:	667a      	str	r2, [r7, #100]	; 0x64
 8004f20:	f04f 0200 	mov.w	r2, #0
 8004f24:	f04f 0300 	mov.w	r3, #0
 8004f28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f2c:	4649      	mov	r1, r9
 8004f2e:	008b      	lsls	r3, r1, #2
 8004f30:	4641      	mov	r1, r8
 8004f32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f36:	4641      	mov	r1, r8
 8004f38:	008a      	lsls	r2, r1, #2
 8004f3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f3e:	f7fb f957 	bl	80001f0 <__aeabi_uldivmod>
 8004f42:	4602      	mov	r2, r0
 8004f44:	460b      	mov	r3, r1
 8004f46:	4b0d      	ldr	r3, [pc, #52]	; (8004f7c <UART_SetConfig+0x4e4>)
 8004f48:	fba3 1302 	umull	r1, r3, r3, r2
 8004f4c:	095b      	lsrs	r3, r3, #5
 8004f4e:	2164      	movs	r1, #100	; 0x64
 8004f50:	fb01 f303 	mul.w	r3, r1, r3
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	011b      	lsls	r3, r3, #4
 8004f58:	3332      	adds	r3, #50	; 0x32
 8004f5a:	4a08      	ldr	r2, [pc, #32]	; (8004f7c <UART_SetConfig+0x4e4>)
 8004f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f60:	095b      	lsrs	r3, r3, #5
 8004f62:	f003 020f 	and.w	r2, r3, #15
 8004f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4422      	add	r2, r4
 8004f6e:	609a      	str	r2, [r3, #8]
}
 8004f70:	bf00      	nop
 8004f72:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f76:	46bd      	mov	sp, r7
 8004f78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f7c:	51eb851f 	.word	0x51eb851f

08004f80 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d123      	bne.n	8004fda <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004f9a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	6851      	ldr	r1, [r2, #4]
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	6892      	ldr	r2, [r2, #8]
 8004fa6:	4311      	orrs	r1, r2
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	68d2      	ldr	r2, [r2, #12]
 8004fac:	4311      	orrs	r1, r2
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	6912      	ldr	r2, [r2, #16]
 8004fb2:	4311      	orrs	r1, r2
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	6952      	ldr	r2, [r2, #20]
 8004fb8:	4311      	orrs	r1, r2
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	6992      	ldr	r2, [r2, #24]
 8004fbe:	4311      	orrs	r1, r2
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	69d2      	ldr	r2, [r2, #28]
 8004fc4:	4311      	orrs	r1, r2
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	6a12      	ldr	r2, [r2, #32]
 8004fca:	4311      	orrs	r1, r2
 8004fcc:	683a      	ldr	r2, [r7, #0]
 8004fce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	e028      	b.n	800502c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	69d9      	ldr	r1, [r3, #28]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	4319      	orrs	r1, r3
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	430b      	orrs	r3, r1
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005000:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	6851      	ldr	r1, [r2, #4]
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	6892      	ldr	r2, [r2, #8]
 800500c:	4311      	orrs	r1, r2
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	68d2      	ldr	r2, [r2, #12]
 8005012:	4311      	orrs	r1, r2
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	6912      	ldr	r2, [r2, #16]
 8005018:	4311      	orrs	r1, r2
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	6952      	ldr	r2, [r2, #20]
 800501e:	4311      	orrs	r1, r2
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	6992      	ldr	r2, [r2, #24]
 8005024:	430a      	orrs	r2, r1
 8005026:	431a      	orrs	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800503a:	b480      	push	{r7}
 800503c:	b085      	sub	sp, #20
 800503e:	af00      	add	r7, sp, #0
 8005040:	60f8      	str	r0, [r7, #12]
 8005042:	60b9      	str	r1, [r7, #8]
 8005044:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d128      	bne.n	800509e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	1e59      	subs	r1, r3, #1
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	3b01      	subs	r3, #1
 8005060:	011b      	lsls	r3, r3, #4
 8005062:	4319      	orrs	r1, r3
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	3b01      	subs	r3, #1
 800506a:	021b      	lsls	r3, r3, #8
 800506c:	4319      	orrs	r1, r3
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	3b01      	subs	r3, #1
 8005074:	031b      	lsls	r3, r3, #12
 8005076:	4319      	orrs	r1, r3
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	3b01      	subs	r3, #1
 800507e:	041b      	lsls	r3, r3, #16
 8005080:	4319      	orrs	r1, r3
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	3b01      	subs	r3, #1
 8005088:	051b      	lsls	r3, r3, #20
 800508a:	4319      	orrs	r1, r3
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	3b01      	subs	r3, #1
 8005092:	061b      	lsls	r3, r3, #24
 8005094:	430b      	orrs	r3, r1
 8005096:	431a      	orrs	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	609a      	str	r2, [r3, #8]
 800509c:	e02f      	b.n	80050fe <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80050a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	68d2      	ldr	r2, [r2, #12]
 80050ae:	3a01      	subs	r2, #1
 80050b0:	0311      	lsls	r1, r2, #12
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	6952      	ldr	r2, [r2, #20]
 80050b6:	3a01      	subs	r2, #1
 80050b8:	0512      	lsls	r2, r2, #20
 80050ba:	430a      	orrs	r2, r1
 80050bc:	431a      	orrs	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	1e59      	subs	r1, r3, #1
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	3b01      	subs	r3, #1
 80050d6:	011b      	lsls	r3, r3, #4
 80050d8:	4319      	orrs	r1, r3
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	3b01      	subs	r3, #1
 80050e0:	021b      	lsls	r3, r3, #8
 80050e2:	4319      	orrs	r1, r3
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	3b01      	subs	r3, #1
 80050ea:	041b      	lsls	r3, r3, #16
 80050ec:	4319      	orrs	r1, r3
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	3b01      	subs	r3, #1
 80050f4:	061b      	lsls	r3, r3, #24
 80050f6:	430b      	orrs	r3, r1
 80050f8:	431a      	orrs	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3714      	adds	r7, #20
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <smInit>:
 *
 * @note
 *
 **************************************************************************************************/
void smInit(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
	smInitAxisandMotors(&XAxisDes, SMDRV_AXIS_X, XMotors_Cfg);
 8005110:	4a05      	ldr	r2, [pc, #20]	; (8005128 <smInit+0x1c>)
 8005112:	2100      	movs	r1, #0
 8005114:	4805      	ldr	r0, [pc, #20]	; (800512c <smInit+0x20>)
 8005116:	f000 f80f 	bl	8005138 <smInitAxisandMotors>
	smInitAxisandMotors(&ZAxisDes, SMDRV_AXIS_Z, ZMotors_Cfg);
 800511a:	4a05      	ldr	r2, [pc, #20]	; (8005130 <smInit+0x24>)
 800511c:	2101      	movs	r1, #1
 800511e:	4805      	ldr	r0, [pc, #20]	; (8005134 <smInit+0x28>)
 8005120:	f000 f80a 	bl	8005138 <smInitAxisandMotors>

}
 8005124:	bf00      	nop
 8005126:	bd80      	pop	{r7, pc}
 8005128:	2000002c 	.word	0x2000002c
 800512c:	200002ec 	.word	0x200002ec
 8005130:	2000000c 	.word	0x2000000c
 8005134:	2000003c 	.word	0x2000003c

08005138 <smInitAxisandMotors>:


StpMtrReturnType smInitAxisandMotors(AxisStpMtrDescriptor * axisDes, AxisGroup group, StepperMotorCfg *motorCfg)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	460b      	mov	r3, r1
 8005142:	607a      	str	r2, [r7, #4]
 8005144:	72fb      	strb	r3, [r7, #11]
	if(NULL != axisDes)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00e      	beq.n	800516a <smInitAxisandMotors+0x32>
	{
		axisDes->axisGroup = group;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	7afa      	ldrb	r2, [r7, #11]
 8005150:	701a      	strb	r2, [r3, #0]
		axisDes->stpMotorCfg = motorCfg;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	605a      	str	r2, [r3, #4]
		axisDes->crrnt_step = 0;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	721a      	strb	r2, [r3, #8]
		axisDes->EOLflag = kEOL_Unkown;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2205      	movs	r2, #5
 8005162:	725a      	strb	r2, [r3, #9]
		axisDes->state = STOP;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	705a      	strb	r2, [r3, #1]
	}

	return 0;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <smMotorSteps>:
 *
 * @note
 *
 **************************************************************************************************/
void smMotorSteps(uint8_t steps)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	4603      	mov	r3, r0
 8005180:	71fb      	strb	r3, [r7, #7]
	for (int var = 0; var < 100; ++var)
 8005182:	2300      	movs	r3, #0
 8005184:	60fb      	str	r3, [r7, #12]
 8005186:	e026      	b.n	80051d6 <smMotorSteps+0x5e>
	{
		HAL_GPIO_WritePin(SMZR_STEP_GPIO_Port, SMZR_STEP_Pin, GPIO_PIN_SET);
 8005188:	2201      	movs	r2, #1
 800518a:	2120      	movs	r1, #32
 800518c:	4816      	ldr	r0, [pc, #88]	; (80051e8 <smMotorSteps+0x70>)
 800518e:	f7fd f835 	bl	80021fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SMZL_STEP_GPIO_Port, SMZL_STEP_Pin, GPIO_PIN_SET);
 8005192:	2201      	movs	r2, #1
 8005194:	2140      	movs	r1, #64	; 0x40
 8005196:	4815      	ldr	r0, [pc, #84]	; (80051ec <smMotorSteps+0x74>)
 8005198:	f7fd f830 	bl	80021fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SMX_STEP_GPIO_Port, SMX_STEP_Pin, GPIO_PIN_SET);
 800519c:	2201      	movs	r2, #1
 800519e:	2140      	movs	r1, #64	; 0x40
 80051a0:	4811      	ldr	r0, [pc, #68]	; (80051e8 <smMotorSteps+0x70>)
 80051a2:	f7fd f82b 	bl	80021fc <HAL_GPIO_WritePin>
		osDelay(1);
 80051a6:	2001      	movs	r0, #1
 80051a8:	f000 f9c8 	bl	800553c <osDelay>
		HAL_GPIO_WritePin(SMZR_STEP_GPIO_Port, SMZR_STEP_Pin, GPIO_PIN_RESET);
 80051ac:	2200      	movs	r2, #0
 80051ae:	2120      	movs	r1, #32
 80051b0:	480d      	ldr	r0, [pc, #52]	; (80051e8 <smMotorSteps+0x70>)
 80051b2:	f7fd f823 	bl	80021fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SMZL_STEP_GPIO_Port, SMZL_STEP_Pin, GPIO_PIN_RESET);
 80051b6:	2200      	movs	r2, #0
 80051b8:	2140      	movs	r1, #64	; 0x40
 80051ba:	480c      	ldr	r0, [pc, #48]	; (80051ec <smMotorSteps+0x74>)
 80051bc:	f7fd f81e 	bl	80021fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SMX_STEP_GPIO_Port, SMX_STEP_Pin, GPIO_PIN_RESET);
 80051c0:	2200      	movs	r2, #0
 80051c2:	2140      	movs	r1, #64	; 0x40
 80051c4:	4808      	ldr	r0, [pc, #32]	; (80051e8 <smMotorSteps+0x70>)
 80051c6:	f7fd f819 	bl	80021fc <HAL_GPIO_WritePin>
		osDelay(1);
 80051ca:	2001      	movs	r0, #1
 80051cc:	f000 f9b6 	bl	800553c <osDelay>
	for (int var = 0; var < 100; ++var)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	3301      	adds	r3, #1
 80051d4:	60fb      	str	r3, [r7, #12]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2b63      	cmp	r3, #99	; 0x63
 80051da:	ddd5      	ble.n	8005188 <smMotorSteps+0x10>
	}
}
 80051dc:	bf00      	nop
 80051de:	bf00      	nop
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	40021000 	.word	0x40021000
 80051ec:	40021400 	.word	0x40021400

080051f0 <HAL_GPIO_EXTI_Callback>:
 * 
 * @brief External Interupt Handler for End of Line switches
 *
 **********************************************************************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	4603      	mov	r3, r0
 80051f8:	80fb      	strh	r3, [r7, #6]
	GPIO_TypeDef *port;
	StpMtrEOLActive flag = kEOL_None;
 80051fa:	2300      	movs	r3, #0
 80051fc:	72fb      	strb	r3, [r7, #11]

	switch (GPIO_Pin){
 80051fe:	88fb      	ldrh	r3, [r7, #6]
 8005200:	3b04      	subs	r3, #4
 8005202:	2b1c      	cmp	r3, #28
 8005204:	d850      	bhi.n	80052a8 <HAL_GPIO_EXTI_Callback+0xb8>
 8005206:	a201      	add	r2, pc, #4	; (adr r2, 800520c <HAL_GPIO_EXTI_Callback+0x1c>)
 8005208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520c:	08005281 	.word	0x08005281
 8005210:	080052a9 	.word	0x080052a9
 8005214:	080052a9 	.word	0x080052a9
 8005218:	080052a9 	.word	0x080052a9
 800521c:	0800528b 	.word	0x0800528b
 8005220:	080052a9 	.word	0x080052a9
 8005224:	080052a9 	.word	0x080052a9
 8005228:	080052a9 	.word	0x080052a9
 800522c:	080052a9 	.word	0x080052a9
 8005230:	080052a9 	.word	0x080052a9
 8005234:	080052a9 	.word	0x080052a9
 8005238:	080052a9 	.word	0x080052a9
 800523c:	08005295 	.word	0x08005295
 8005240:	080052a9 	.word	0x080052a9
 8005244:	080052a9 	.word	0x080052a9
 8005248:	080052a9 	.word	0x080052a9
 800524c:	080052a9 	.word	0x080052a9
 8005250:	080052a9 	.word	0x080052a9
 8005254:	080052a9 	.word	0x080052a9
 8005258:	080052a9 	.word	0x080052a9
 800525c:	080052a9 	.word	0x080052a9
 8005260:	080052a9 	.word	0x080052a9
 8005264:	080052a9 	.word	0x080052a9
 8005268:	080052a9 	.word	0x080052a9
 800526c:	080052a9 	.word	0x080052a9
 8005270:	080052a9 	.word	0x080052a9
 8005274:	080052a9 	.word	0x080052a9
 8005278:	080052a9 	.word	0x080052a9
 800527c:	0800529f 	.word	0x0800529f
		case TOP_ZEL_Pin:
			port = TOP_ZEL_GPIO_Port;
 8005280:	4b19      	ldr	r3, [pc, #100]	; (80052e8 <HAL_GPIO_EXTI_Callback+0xf8>)
 8005282:	60fb      	str	r3, [r7, #12]
			flag = kEOL_Top;
 8005284:	2301      	movs	r3, #1
 8005286:	72fb      	strb	r3, [r7, #11]
			break;
 8005288:	e00f      	b.n	80052aa <HAL_GPIO_EXTI_Callback+0xba>
		case RGHT_XEL_Pin:
			port = RGHT_XEL_GPIO_Port;
 800528a:	4b18      	ldr	r3, [pc, #96]	; (80052ec <HAL_GPIO_EXTI_Callback+0xfc>)
 800528c:	60fb      	str	r3, [r7, #12]
			flag = kEOL_Right;
 800528e:	2303      	movs	r3, #3
 8005290:	72fb      	strb	r3, [r7, #11]
			break;
 8005292:	e00a      	b.n	80052aa <HAL_GPIO_EXTI_Callback+0xba>
		case BOTT_ZEL_Pin:
			port = BOTT_ZEL_GPIO_Port;
 8005294:	4b15      	ldr	r3, [pc, #84]	; (80052ec <HAL_GPIO_EXTI_Callback+0xfc>)
 8005296:	60fb      	str	r3, [r7, #12]
			flag = kEOL_Bottom;
 8005298:	2302      	movs	r3, #2
 800529a:	72fb      	strb	r3, [r7, #11]
			break;
 800529c:	e005      	b.n	80052aa <HAL_GPIO_EXTI_Callback+0xba>
		case LEFT_XEL_Pin:
			port = LEFT_XEL_GPIO_Port;
 800529e:	4b14      	ldr	r3, [pc, #80]	; (80052f0 <HAL_GPIO_EXTI_Callback+0x100>)
 80052a0:	60fb      	str	r3, [r7, #12]
			flag = kEOL_Left;
 80052a2:	2304      	movs	r3, #4
 80052a4:	72fb      	strb	r3, [r7, #11]
			break;	
 80052a6:	e000      	b.n	80052aa <HAL_GPIO_EXTI_Callback+0xba>
		default:
			break;
 80052a8:	bf00      	nop
	}

	if (GPIO_PIN_SET == HAL_GPIO_ReadPin(port,GPIO_Pin))
 80052aa:	88fb      	ldrh	r3, [r7, #6]
 80052ac:	4619      	mov	r1, r3
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f7fc ff8c 	bl	80021cc <HAL_GPIO_ReadPin>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d112      	bne.n	80052e0 <HAL_GPIO_EXTI_Callback+0xf0>
	{
		if (TOP_ZEL_Pin == GPIO_Pin || BOTT_ZEL_Pin== GPIO_Pin)
 80052ba:	88fb      	ldrh	r3, [r7, #6]
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d002      	beq.n	80052c6 <HAL_GPIO_EXTI_Callback+0xd6>
 80052c0:	88fb      	ldrh	r3, [r7, #6]
 80052c2:	2b10      	cmp	r3, #16
 80052c4:	d103      	bne.n	80052ce <HAL_GPIO_EXTI_Callback+0xde>
		{
			ZAxisDes.EOLflag = flag;			
 80052c6:	4a0b      	ldr	r2, [pc, #44]	; (80052f4 <HAL_GPIO_EXTI_Callback+0x104>)
 80052c8:	7afb      	ldrb	r3, [r7, #11]
 80052ca:	7253      	strb	r3, [r2, #9]
		else if (RGHT_XEL_Pin == GPIO_Pin || LEFT_XEL_Pin== GPIO_Pin)
		{
			XAxisDes.EOLflag = flag;
		}
	}
}
 80052cc:	e008      	b.n	80052e0 <HAL_GPIO_EXTI_Callback+0xf0>
		else if (RGHT_XEL_Pin == GPIO_Pin || LEFT_XEL_Pin== GPIO_Pin)
 80052ce:	88fb      	ldrh	r3, [r7, #6]
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d002      	beq.n	80052da <HAL_GPIO_EXTI_Callback+0xea>
 80052d4:	88fb      	ldrh	r3, [r7, #6]
 80052d6:	2b20      	cmp	r3, #32
 80052d8:	d102      	bne.n	80052e0 <HAL_GPIO_EXTI_Callback+0xf0>
			XAxisDes.EOLflag = flag;
 80052da:	4a07      	ldr	r2, [pc, #28]	; (80052f8 <HAL_GPIO_EXTI_Callback+0x108>)
 80052dc:	7afb      	ldrb	r3, [r7, #11]
 80052de:	7253      	strb	r3, [r2, #9]
}
 80052e0:	bf00      	nop
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	40021000 	.word	0x40021000
 80052ec:	40020400 	.word	0x40020400
 80052f0:	40020c00 	.word	0x40020c00
 80052f4:	2000003c 	.word	0x2000003c
 80052f8:	200002ec 	.word	0x200002ec

080052fc <__NVIC_SetPriority>:
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	4603      	mov	r3, r0
 8005304:	6039      	str	r1, [r7, #0]
 8005306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800530c:	2b00      	cmp	r3, #0
 800530e:	db0a      	blt.n	8005326 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	b2da      	uxtb	r2, r3
 8005314:	490c      	ldr	r1, [pc, #48]	; (8005348 <__NVIC_SetPriority+0x4c>)
 8005316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800531a:	0112      	lsls	r2, r2, #4
 800531c:	b2d2      	uxtb	r2, r2
 800531e:	440b      	add	r3, r1
 8005320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005324:	e00a      	b.n	800533c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	b2da      	uxtb	r2, r3
 800532a:	4908      	ldr	r1, [pc, #32]	; (800534c <__NVIC_SetPriority+0x50>)
 800532c:	79fb      	ldrb	r3, [r7, #7]
 800532e:	f003 030f 	and.w	r3, r3, #15
 8005332:	3b04      	subs	r3, #4
 8005334:	0112      	lsls	r2, r2, #4
 8005336:	b2d2      	uxtb	r2, r2
 8005338:	440b      	add	r3, r1
 800533a:	761a      	strb	r2, [r3, #24]
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr
 8005348:	e000e100 	.word	0xe000e100
 800534c:	e000ed00 	.word	0xe000ed00

08005350 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005350:	b580      	push	{r7, lr}
 8005352:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005354:	4b05      	ldr	r3, [pc, #20]	; (800536c <SysTick_Handler+0x1c>)
 8005356:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005358:	f001 fd54 	bl	8006e04 <xTaskGetSchedulerState>
 800535c:	4603      	mov	r3, r0
 800535e:	2b01      	cmp	r3, #1
 8005360:	d001      	beq.n	8005366 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005362:	f002 fb39 	bl	80079d8 <xPortSysTickHandler>
  }
}
 8005366:	bf00      	nop
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	e000e010 	.word	0xe000e010

08005370 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005370:	b580      	push	{r7, lr}
 8005372:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005374:	2100      	movs	r1, #0
 8005376:	f06f 0004 	mvn.w	r0, #4
 800537a:	f7ff ffbf 	bl	80052fc <__NVIC_SetPriority>
#endif
}
 800537e:	bf00      	nop
 8005380:	bd80      	pop	{r7, pc}
	...

08005384 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800538a:	f3ef 8305 	mrs	r3, IPSR
 800538e:	603b      	str	r3, [r7, #0]
  return(result);
 8005390:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005396:	f06f 0305 	mvn.w	r3, #5
 800539a:	607b      	str	r3, [r7, #4]
 800539c:	e00c      	b.n	80053b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800539e:	4b0a      	ldr	r3, [pc, #40]	; (80053c8 <osKernelInitialize+0x44>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d105      	bne.n	80053b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80053a6:	4b08      	ldr	r3, [pc, #32]	; (80053c8 <osKernelInitialize+0x44>)
 80053a8:	2201      	movs	r2, #1
 80053aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80053ac:	2300      	movs	r3, #0
 80053ae:	607b      	str	r3, [r7, #4]
 80053b0:	e002      	b.n	80053b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80053b2:	f04f 33ff 	mov.w	r3, #4294967295
 80053b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80053b8:	687b      	ldr	r3, [r7, #4]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	200002f8 	.word	0x200002f8

080053cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053d2:	f3ef 8305 	mrs	r3, IPSR
 80053d6:	603b      	str	r3, [r7, #0]
  return(result);
 80053d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80053de:	f06f 0305 	mvn.w	r3, #5
 80053e2:	607b      	str	r3, [r7, #4]
 80053e4:	e010      	b.n	8005408 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80053e6:	4b0b      	ldr	r3, [pc, #44]	; (8005414 <osKernelStart+0x48>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d109      	bne.n	8005402 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80053ee:	f7ff ffbf 	bl	8005370 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80053f2:	4b08      	ldr	r3, [pc, #32]	; (8005414 <osKernelStart+0x48>)
 80053f4:	2202      	movs	r2, #2
 80053f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80053f8:	f001 f880 	bl	80064fc <vTaskStartScheduler>
      stat = osOK;
 80053fc:	2300      	movs	r3, #0
 80053fe:	607b      	str	r3, [r7, #4]
 8005400:	e002      	b.n	8005408 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005402:	f04f 33ff 	mov.w	r3, #4294967295
 8005406:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005408:	687b      	ldr	r3, [r7, #4]
}
 800540a:	4618      	mov	r0, r3
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	200002f8 	.word	0x200002f8

08005418 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005418:	b580      	push	{r7, lr}
 800541a:	b08e      	sub	sp, #56	; 0x38
 800541c:	af04      	add	r7, sp, #16
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005424:	2300      	movs	r3, #0
 8005426:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005428:	f3ef 8305 	mrs	r3, IPSR
 800542c:	617b      	str	r3, [r7, #20]
  return(result);
 800542e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005430:	2b00      	cmp	r3, #0
 8005432:	d17e      	bne.n	8005532 <osThreadNew+0x11a>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d07b      	beq.n	8005532 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800543a:	2380      	movs	r3, #128	; 0x80
 800543c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800543e:	2318      	movs	r3, #24
 8005440:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005442:	2300      	movs	r3, #0
 8005444:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005446:	f04f 33ff 	mov.w	r3, #4294967295
 800544a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d045      	beq.n	80054de <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d002      	beq.n	8005460 <osThreadNew+0x48>
        name = attr->name;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d008      	beq.n	8005486 <osThreadNew+0x6e>
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	2b38      	cmp	r3, #56	; 0x38
 8005478:	d805      	bhi.n	8005486 <osThreadNew+0x6e>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <osThreadNew+0x72>
        return (NULL);
 8005486:	2300      	movs	r3, #0
 8005488:	e054      	b.n	8005534 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d003      	beq.n	800549a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	089b      	lsrs	r3, r3, #2
 8005498:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00e      	beq.n	80054c0 <osThreadNew+0xa8>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	2bab      	cmp	r3, #171	; 0xab
 80054a8:	d90a      	bls.n	80054c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d006      	beq.n	80054c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d002      	beq.n	80054c0 <osThreadNew+0xa8>
        mem = 1;
 80054ba:	2301      	movs	r3, #1
 80054bc:	61bb      	str	r3, [r7, #24]
 80054be:	e010      	b.n	80054e2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10c      	bne.n	80054e2 <osThreadNew+0xca>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d108      	bne.n	80054e2 <osThreadNew+0xca>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d104      	bne.n	80054e2 <osThreadNew+0xca>
          mem = 0;
 80054d8:	2300      	movs	r3, #0
 80054da:	61bb      	str	r3, [r7, #24]
 80054dc:	e001      	b.n	80054e2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80054de:	2300      	movs	r3, #0
 80054e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d110      	bne.n	800550a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80054f0:	9202      	str	r2, [sp, #8]
 80054f2:	9301      	str	r3, [sp, #4]
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	6a3a      	ldr	r2, [r7, #32]
 80054fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 fe0c 	bl	800611c <xTaskCreateStatic>
 8005504:	4603      	mov	r3, r0
 8005506:	613b      	str	r3, [r7, #16]
 8005508:	e013      	b.n	8005532 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d110      	bne.n	8005532 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	b29a      	uxth	r2, r3
 8005514:	f107 0310 	add.w	r3, r7, #16
 8005518:	9301      	str	r3, [sp, #4]
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 fe57 	bl	80061d6 <xTaskCreate>
 8005528:	4603      	mov	r3, r0
 800552a:	2b01      	cmp	r3, #1
 800552c:	d001      	beq.n	8005532 <osThreadNew+0x11a>
            hTask = NULL;
 800552e:	2300      	movs	r3, #0
 8005530:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005532:	693b      	ldr	r3, [r7, #16]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3728      	adds	r7, #40	; 0x28
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005544:	f3ef 8305 	mrs	r3, IPSR
 8005548:	60bb      	str	r3, [r7, #8]
  return(result);
 800554a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800554c:	2b00      	cmp	r3, #0
 800554e:	d003      	beq.n	8005558 <osDelay+0x1c>
    stat = osErrorISR;
 8005550:	f06f 0305 	mvn.w	r3, #5
 8005554:	60fb      	str	r3, [r7, #12]
 8005556:	e007      	b.n	8005568 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005558:	2300      	movs	r3, #0
 800555a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d002      	beq.n	8005568 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 ff96 	bl	8006494 <vTaskDelay>
    }
  }

  return (stat);
 8005568:	68fb      	ldr	r3, [r7, #12]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
	...

08005574 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4a07      	ldr	r2, [pc, #28]	; (80055a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8005584:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	4a06      	ldr	r2, [pc, #24]	; (80055a4 <vApplicationGetIdleTaskMemory+0x30>)
 800558a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2280      	movs	r2, #128	; 0x80
 8005590:	601a      	str	r2, [r3, #0]
}
 8005592:	bf00      	nop
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	200002fc 	.word	0x200002fc
 80055a4:	200003a8 	.word	0x200003a8

080055a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4a07      	ldr	r2, [pc, #28]	; (80055d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80055b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	4a06      	ldr	r2, [pc, #24]	; (80055d8 <vApplicationGetTimerTaskMemory+0x30>)
 80055be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055c6:	601a      	str	r2, [r3, #0]
}
 80055c8:	bf00      	nop
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	200005a8 	.word	0x200005a8
 80055d8:	20000654 	.word	0x20000654

080055dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f103 0208 	add.w	r2, r3, #8
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f04f 32ff 	mov.w	r2, #4294967295
 80055f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f103 0208 	add.w	r2, r3, #8
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f103 0208 	add.w	r2, r3, #8
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800562a:	bf00      	nop
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005636:	b480      	push	{r7}
 8005638:	b085      	sub	sp, #20
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	1c5a      	adds	r2, r3, #1
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	601a      	str	r2, [r3, #0]
}
 8005672:	bf00      	nop
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800567e:	b480      	push	{r7}
 8005680:	b085      	sub	sp, #20
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
 8005686:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005694:	d103      	bne.n	800569e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	60fb      	str	r3, [r7, #12]
 800569c:	e00c      	b.n	80056b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	3308      	adds	r3, #8
 80056a2:	60fb      	str	r3, [r7, #12]
 80056a4:	e002      	b.n	80056ac <vListInsert+0x2e>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d2f6      	bcs.n	80056a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	1c5a      	adds	r2, r3, #1
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	601a      	str	r2, [r3, #0]
}
 80056e4:	bf00      	nop
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6892      	ldr	r2, [r2, #8]
 8005706:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	6852      	ldr	r2, [r2, #4]
 8005710:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	429a      	cmp	r2, r3
 800571a:	d103      	bne.n	8005724 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	1e5a      	subs	r2, r3, #1
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10a      	bne.n	800576e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800576a:	bf00      	nop
 800576c:	e7fe      	b.n	800576c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800576e:	f002 f8a1 	bl	80078b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577a:	68f9      	ldr	r1, [r7, #12]
 800577c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800577e:	fb01 f303 	mul.w	r3, r1, r3
 8005782:	441a      	add	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800579e:	3b01      	subs	r3, #1
 80057a0:	68f9      	ldr	r1, [r7, #12]
 80057a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80057a4:	fb01 f303 	mul.w	r3, r1, r3
 80057a8:	441a      	add	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	22ff      	movs	r2, #255	; 0xff
 80057b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	22ff      	movs	r2, #255	; 0xff
 80057ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d114      	bne.n	80057ee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d01a      	beq.n	8005802 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	3310      	adds	r3, #16
 80057d0:	4618      	mov	r0, r3
 80057d2:	f001 f953 	bl	8006a7c <xTaskRemoveFromEventList>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d012      	beq.n	8005802 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80057dc:	4b0c      	ldr	r3, [pc, #48]	; (8005810 <xQueueGenericReset+0xcc>)
 80057de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	e009      	b.n	8005802 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	3310      	adds	r3, #16
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7ff fef2 	bl	80055dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	3324      	adds	r3, #36	; 0x24
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7ff feed 	bl	80055dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005802:	f002 f887 	bl	8007914 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005806:	2301      	movs	r3, #1
}
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	e000ed04 	.word	0xe000ed04

08005814 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005814:	b580      	push	{r7, lr}
 8005816:	b08e      	sub	sp, #56	; 0x38
 8005818:	af02      	add	r7, sp, #8
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
 8005820:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10a      	bne.n	800583e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582c:	f383 8811 	msr	BASEPRI, r3
 8005830:	f3bf 8f6f 	isb	sy
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800583a:	bf00      	nop
 800583c:	e7fe      	b.n	800583c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10a      	bne.n	800585a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005848:	f383 8811 	msr	BASEPRI, r3
 800584c:	f3bf 8f6f 	isb	sy
 8005850:	f3bf 8f4f 	dsb	sy
 8005854:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005856:	bf00      	nop
 8005858:	e7fe      	b.n	8005858 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <xQueueGenericCreateStatic+0x52>
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <xQueueGenericCreateStatic+0x56>
 8005866:	2301      	movs	r3, #1
 8005868:	e000      	b.n	800586c <xQueueGenericCreateStatic+0x58>
 800586a:	2300      	movs	r3, #0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10a      	bne.n	8005886 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005874:	f383 8811 	msr	BASEPRI, r3
 8005878:	f3bf 8f6f 	isb	sy
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	623b      	str	r3, [r7, #32]
}
 8005882:	bf00      	nop
 8005884:	e7fe      	b.n	8005884 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d102      	bne.n	8005892 <xQueueGenericCreateStatic+0x7e>
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <xQueueGenericCreateStatic+0x82>
 8005892:	2301      	movs	r3, #1
 8005894:	e000      	b.n	8005898 <xQueueGenericCreateStatic+0x84>
 8005896:	2300      	movs	r3, #0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10a      	bne.n	80058b2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800589c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	61fb      	str	r3, [r7, #28]
}
 80058ae:	bf00      	nop
 80058b0:	e7fe      	b.n	80058b0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80058b2:	2350      	movs	r3, #80	; 0x50
 80058b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	2b50      	cmp	r3, #80	; 0x50
 80058ba:	d00a      	beq.n	80058d2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80058bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c0:	f383 8811 	msr	BASEPRI, r3
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	61bb      	str	r3, [r7, #24]
}
 80058ce:	bf00      	nop
 80058d0:	e7fe      	b.n	80058d0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80058d2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80058d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00d      	beq.n	80058fa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80058de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80058ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	4613      	mov	r3, r2
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	68b9      	ldr	r1, [r7, #8]
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 f805 	bl	8005904 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80058fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3730      	adds	r7, #48	; 0x30
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
 8005910:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d103      	bne.n	8005920 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	601a      	str	r2, [r3, #0]
 800591e:	e002      	b.n	8005926 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005932:	2101      	movs	r1, #1
 8005934:	69b8      	ldr	r0, [r7, #24]
 8005936:	f7ff ff05 	bl	8005744 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	78fa      	ldrb	r2, [r7, #3]
 800593e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005942:	bf00      	nop
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
	...

0800594c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b08e      	sub	sp, #56	; 0x38
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
 8005958:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800595a:	2300      	movs	r3, #0
 800595c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10a      	bne.n	800597e <xQueueGenericSend+0x32>
	__asm volatile
 8005968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596c:	f383 8811 	msr	BASEPRI, r3
 8005970:	f3bf 8f6f 	isb	sy
 8005974:	f3bf 8f4f 	dsb	sy
 8005978:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800597a:	bf00      	nop
 800597c:	e7fe      	b.n	800597c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d103      	bne.n	800598c <xQueueGenericSend+0x40>
 8005984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <xQueueGenericSend+0x44>
 800598c:	2301      	movs	r3, #1
 800598e:	e000      	b.n	8005992 <xQueueGenericSend+0x46>
 8005990:	2300      	movs	r3, #0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10a      	bne.n	80059ac <xQueueGenericSend+0x60>
	__asm volatile
 8005996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599a:	f383 8811 	msr	BASEPRI, r3
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80059a8:	bf00      	nop
 80059aa:	e7fe      	b.n	80059aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d103      	bne.n	80059ba <xQueueGenericSend+0x6e>
 80059b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d101      	bne.n	80059be <xQueueGenericSend+0x72>
 80059ba:	2301      	movs	r3, #1
 80059bc:	e000      	b.n	80059c0 <xQueueGenericSend+0x74>
 80059be:	2300      	movs	r3, #0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10a      	bne.n	80059da <xQueueGenericSend+0x8e>
	__asm volatile
 80059c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	623b      	str	r3, [r7, #32]
}
 80059d6:	bf00      	nop
 80059d8:	e7fe      	b.n	80059d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059da:	f001 fa13 	bl	8006e04 <xTaskGetSchedulerState>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d102      	bne.n	80059ea <xQueueGenericSend+0x9e>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <xQueueGenericSend+0xa2>
 80059ea:	2301      	movs	r3, #1
 80059ec:	e000      	b.n	80059f0 <xQueueGenericSend+0xa4>
 80059ee:	2300      	movs	r3, #0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10a      	bne.n	8005a0a <xQueueGenericSend+0xbe>
	__asm volatile
 80059f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f8:	f383 8811 	msr	BASEPRI, r3
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	61fb      	str	r3, [r7, #28]
}
 8005a06:	bf00      	nop
 8005a08:	e7fe      	b.n	8005a08 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a0a:	f001 ff53 	bl	80078b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d302      	bcc.n	8005a20 <xQueueGenericSend+0xd4>
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d129      	bne.n	8005a74 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a20:	683a      	ldr	r2, [r7, #0]
 8005a22:	68b9      	ldr	r1, [r7, #8]
 8005a24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a26:	f000 fa0b 	bl	8005e40 <prvCopyDataToQueue>
 8005a2a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d010      	beq.n	8005a56 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a36:	3324      	adds	r3, #36	; 0x24
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f001 f81f 	bl	8006a7c <xTaskRemoveFromEventList>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d013      	beq.n	8005a6c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a44:	4b3f      	ldr	r3, [pc, #252]	; (8005b44 <xQueueGenericSend+0x1f8>)
 8005a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a4a:	601a      	str	r2, [r3, #0]
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	f3bf 8f6f 	isb	sy
 8005a54:	e00a      	b.n	8005a6c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d007      	beq.n	8005a6c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a5c:	4b39      	ldr	r3, [pc, #228]	; (8005b44 <xQueueGenericSend+0x1f8>)
 8005a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a62:	601a      	str	r2, [r3, #0]
 8005a64:	f3bf 8f4f 	dsb	sy
 8005a68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a6c:	f001 ff52 	bl	8007914 <vPortExitCritical>
				return pdPASS;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e063      	b.n	8005b3c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d103      	bne.n	8005a82 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a7a:	f001 ff4b 	bl	8007914 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	e05c      	b.n	8005b3c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d106      	bne.n	8005a96 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a88:	f107 0314 	add.w	r3, r7, #20
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f001 f859 	bl	8006b44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a92:	2301      	movs	r3, #1
 8005a94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a96:	f001 ff3d 	bl	8007914 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a9a:	f000 fd9f 	bl	80065dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a9e:	f001 ff09 	bl	80078b4 <vPortEnterCritical>
 8005aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005aa8:	b25b      	sxtb	r3, r3
 8005aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aae:	d103      	bne.n	8005ab8 <xQueueGenericSend+0x16c>
 8005ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005abe:	b25b      	sxtb	r3, r3
 8005ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac4:	d103      	bne.n	8005ace <xQueueGenericSend+0x182>
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ace:	f001 ff21 	bl	8007914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ad2:	1d3a      	adds	r2, r7, #4
 8005ad4:	f107 0314 	add.w	r3, r7, #20
 8005ad8:	4611      	mov	r1, r2
 8005ada:	4618      	mov	r0, r3
 8005adc:	f001 f848 	bl	8006b70 <xTaskCheckForTimeOut>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d124      	bne.n	8005b30 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ae6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ae8:	f000 faa2 	bl	8006030 <prvIsQueueFull>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d018      	beq.n	8005b24 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af4:	3310      	adds	r3, #16
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	4611      	mov	r1, r2
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 ff6e 	bl	80069dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b02:	f000 fa2d 	bl	8005f60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b06:	f000 fd77 	bl	80065f8 <xTaskResumeAll>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f47f af7c 	bne.w	8005a0a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005b12:	4b0c      	ldr	r3, [pc, #48]	; (8005b44 <xQueueGenericSend+0x1f8>)
 8005b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b18:	601a      	str	r2, [r3, #0]
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	f3bf 8f6f 	isb	sy
 8005b22:	e772      	b.n	8005a0a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b26:	f000 fa1b 	bl	8005f60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b2a:	f000 fd65 	bl	80065f8 <xTaskResumeAll>
 8005b2e:	e76c      	b.n	8005a0a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b32:	f000 fa15 	bl	8005f60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b36:	f000 fd5f 	bl	80065f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3738      	adds	r7, #56	; 0x38
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	e000ed04 	.word	0xe000ed04

08005b48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b090      	sub	sp, #64	; 0x40
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
 8005b54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10a      	bne.n	8005b76 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b72:	bf00      	nop
 8005b74:	e7fe      	b.n	8005b74 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d103      	bne.n	8005b84 <xQueueGenericSendFromISR+0x3c>
 8005b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d101      	bne.n	8005b88 <xQueueGenericSendFromISR+0x40>
 8005b84:	2301      	movs	r3, #1
 8005b86:	e000      	b.n	8005b8a <xQueueGenericSendFromISR+0x42>
 8005b88:	2300      	movs	r3, #0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10a      	bne.n	8005ba4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ba0:	bf00      	nop
 8005ba2:	e7fe      	b.n	8005ba2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d103      	bne.n	8005bb2 <xQueueGenericSendFromISR+0x6a>
 8005baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d101      	bne.n	8005bb6 <xQueueGenericSendFromISR+0x6e>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e000      	b.n	8005bb8 <xQueueGenericSendFromISR+0x70>
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10a      	bne.n	8005bd2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc0:	f383 8811 	msr	BASEPRI, r3
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	623b      	str	r3, [r7, #32]
}
 8005bce:	bf00      	nop
 8005bd0:	e7fe      	b.n	8005bd0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005bd2:	f001 ff51 	bl	8007a78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005bd6:	f3ef 8211 	mrs	r2, BASEPRI
 8005bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bde:	f383 8811 	msr	BASEPRI, r3
 8005be2:	f3bf 8f6f 	isb	sy
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	61fa      	str	r2, [r7, #28]
 8005bec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005bee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005bf0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d302      	bcc.n	8005c04 <xQueueGenericSendFromISR+0xbc>
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d12f      	bne.n	8005c64 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c12:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	68b9      	ldr	r1, [r7, #8]
 8005c18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005c1a:	f000 f911 	bl	8005e40 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c1e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c26:	d112      	bne.n	8005c4e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d016      	beq.n	8005c5e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c32:	3324      	adds	r3, #36	; 0x24
 8005c34:	4618      	mov	r0, r3
 8005c36:	f000 ff21 	bl	8006a7c <xTaskRemoveFromEventList>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00e      	beq.n	8005c5e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00b      	beq.n	8005c5e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	e007      	b.n	8005c5e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005c52:	3301      	adds	r3, #1
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	b25a      	sxtb	r2, r3
 8005c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005c62:	e001      	b.n	8005c68 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c64:	2300      	movs	r3, #0
 8005c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c6a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c72:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3740      	adds	r7, #64	; 0x40
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
	...

08005c80 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b08c      	sub	sp, #48	; 0x30
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10a      	bne.n	8005cb0 <xQueueReceive+0x30>
	__asm volatile
 8005c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9e:	f383 8811 	msr	BASEPRI, r3
 8005ca2:	f3bf 8f6f 	isb	sy
 8005ca6:	f3bf 8f4f 	dsb	sy
 8005caa:	623b      	str	r3, [r7, #32]
}
 8005cac:	bf00      	nop
 8005cae:	e7fe      	b.n	8005cae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d103      	bne.n	8005cbe <xQueueReceive+0x3e>
 8005cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <xQueueReceive+0x42>
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e000      	b.n	8005cc4 <xQueueReceive+0x44>
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10a      	bne.n	8005cde <xQueueReceive+0x5e>
	__asm volatile
 8005cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ccc:	f383 8811 	msr	BASEPRI, r3
 8005cd0:	f3bf 8f6f 	isb	sy
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	61fb      	str	r3, [r7, #28]
}
 8005cda:	bf00      	nop
 8005cdc:	e7fe      	b.n	8005cdc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cde:	f001 f891 	bl	8006e04 <xTaskGetSchedulerState>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d102      	bne.n	8005cee <xQueueReceive+0x6e>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <xQueueReceive+0x72>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e000      	b.n	8005cf4 <xQueueReceive+0x74>
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d10a      	bne.n	8005d0e <xQueueReceive+0x8e>
	__asm volatile
 8005cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfc:	f383 8811 	msr	BASEPRI, r3
 8005d00:	f3bf 8f6f 	isb	sy
 8005d04:	f3bf 8f4f 	dsb	sy
 8005d08:	61bb      	str	r3, [r7, #24]
}
 8005d0a:	bf00      	nop
 8005d0c:	e7fe      	b.n	8005d0c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d0e:	f001 fdd1 	bl	80078b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d16:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d01f      	beq.n	8005d5e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d1e:	68b9      	ldr	r1, [r7, #8]
 8005d20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d22:	f000 f8f7 	bl	8005f14 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d28:	1e5a      	subs	r2, r3, #1
 8005d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00f      	beq.n	8005d56 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d38:	3310      	adds	r3, #16
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 fe9e 	bl	8006a7c <xTaskRemoveFromEventList>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d007      	beq.n	8005d56 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d46:	4b3d      	ldr	r3, [pc, #244]	; (8005e3c <xQueueReceive+0x1bc>)
 8005d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	f3bf 8f4f 	dsb	sy
 8005d52:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d56:	f001 fddd 	bl	8007914 <vPortExitCritical>
				return pdPASS;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e069      	b.n	8005e32 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d103      	bne.n	8005d6c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d64:	f001 fdd6 	bl	8007914 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	e062      	b.n	8005e32 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d106      	bne.n	8005d80 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d72:	f107 0310 	add.w	r3, r7, #16
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 fee4 	bl	8006b44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d80:	f001 fdc8 	bl	8007914 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d84:	f000 fc2a 	bl	80065dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d88:	f001 fd94 	bl	80078b4 <vPortEnterCritical>
 8005d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d92:	b25b      	sxtb	r3, r3
 8005d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d98:	d103      	bne.n	8005da2 <xQueueReceive+0x122>
 8005d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005da8:	b25b      	sxtb	r3, r3
 8005daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dae:	d103      	bne.n	8005db8 <xQueueReceive+0x138>
 8005db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005db8:	f001 fdac 	bl	8007914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005dbc:	1d3a      	adds	r2, r7, #4
 8005dbe:	f107 0310 	add.w	r3, r7, #16
 8005dc2:	4611      	mov	r1, r2
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 fed3 	bl	8006b70 <xTaskCheckForTimeOut>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d123      	bne.n	8005e18 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dd2:	f000 f917 	bl	8006004 <prvIsQueueEmpty>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d017      	beq.n	8005e0c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dde:	3324      	adds	r3, #36	; 0x24
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	4611      	mov	r1, r2
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 fdf9 	bl	80069dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005dea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dec:	f000 f8b8 	bl	8005f60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005df0:	f000 fc02 	bl	80065f8 <xTaskResumeAll>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d189      	bne.n	8005d0e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005dfa:	4b10      	ldr	r3, [pc, #64]	; (8005e3c <xQueueReceive+0x1bc>)
 8005dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e00:	601a      	str	r2, [r3, #0]
 8005e02:	f3bf 8f4f 	dsb	sy
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	e780      	b.n	8005d0e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005e0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e0e:	f000 f8a7 	bl	8005f60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e12:	f000 fbf1 	bl	80065f8 <xTaskResumeAll>
 8005e16:	e77a      	b.n	8005d0e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e1a:	f000 f8a1 	bl	8005f60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e1e:	f000 fbeb 	bl	80065f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e24:	f000 f8ee 	bl	8006004 <prvIsQueueEmpty>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f43f af6f 	beq.w	8005d0e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3730      	adds	r7, #48	; 0x30
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	e000ed04 	.word	0xe000ed04

08005e40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10d      	bne.n	8005e7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d14d      	bne.n	8005f02 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 ffe8 	bl	8006e40 <xTaskPriorityDisinherit>
 8005e70:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	609a      	str	r2, [r3, #8]
 8005e78:	e043      	b.n	8005f02 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d119      	bne.n	8005eb4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6858      	ldr	r0, [r3, #4]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e88:	461a      	mov	r2, r3
 8005e8a:	68b9      	ldr	r1, [r7, #8]
 8005e8c:	f002 f998 	bl	80081c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e98:	441a      	add	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d32b      	bcc.n	8005f02 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	605a      	str	r2, [r3, #4]
 8005eb2:	e026      	b.n	8005f02 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	68d8      	ldr	r0, [r3, #12]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	68b9      	ldr	r1, [r7, #8]
 8005ec0:	f002 f97e 	bl	80081c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	68da      	ldr	r2, [r3, #12]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ecc:	425b      	negs	r3, r3
 8005ece:	441a      	add	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	68da      	ldr	r2, [r3, #12]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d207      	bcs.n	8005ef0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	689a      	ldr	r2, [r3, #8]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee8:	425b      	negs	r3, r3
 8005eea:	441a      	add	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d105      	bne.n	8005f02 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	3b01      	subs	r3, #1
 8005f00:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	1c5a      	adds	r2, r3, #1
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005f0a:	697b      	ldr	r3, [r7, #20]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3718      	adds	r7, #24
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d018      	beq.n	8005f58 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68da      	ldr	r2, [r3, #12]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	441a      	add	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68da      	ldr	r2, [r3, #12]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d303      	bcc.n	8005f48 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68d9      	ldr	r1, [r3, #12]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f50:	461a      	mov	r2, r3
 8005f52:	6838      	ldr	r0, [r7, #0]
 8005f54:	f002 f934 	bl	80081c0 <memcpy>
	}
}
 8005f58:	bf00      	nop
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f68:	f001 fca4 	bl	80078b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f72:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f74:	e011      	b.n	8005f9a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d012      	beq.n	8005fa4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	3324      	adds	r3, #36	; 0x24
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 fd7a 	bl	8006a7c <xTaskRemoveFromEventList>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f8e:	f000 fe51 	bl	8006c34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005f92:	7bfb      	ldrb	r3, [r7, #15]
 8005f94:	3b01      	subs	r3, #1
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	dce9      	bgt.n	8005f76 <prvUnlockQueue+0x16>
 8005fa2:	e000      	b.n	8005fa6 <prvUnlockQueue+0x46>
					break;
 8005fa4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	22ff      	movs	r2, #255	; 0xff
 8005faa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005fae:	f001 fcb1 	bl	8007914 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005fb2:	f001 fc7f 	bl	80078b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fbc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fbe:	e011      	b.n	8005fe4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d012      	beq.n	8005fee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3310      	adds	r3, #16
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f000 fd55 	bl	8006a7c <xTaskRemoveFromEventList>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005fd8:	f000 fe2c 	bl	8006c34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005fdc:	7bbb      	ldrb	r3, [r7, #14]
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fe4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	dce9      	bgt.n	8005fc0 <prvUnlockQueue+0x60>
 8005fec:	e000      	b.n	8005ff0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005fee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	22ff      	movs	r2, #255	; 0xff
 8005ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005ff8:	f001 fc8c 	bl	8007914 <vPortExitCritical>
}
 8005ffc:	bf00      	nop
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800600c:	f001 fc52 	bl	80078b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006014:	2b00      	cmp	r3, #0
 8006016:	d102      	bne.n	800601e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006018:	2301      	movs	r3, #1
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	e001      	b.n	8006022 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800601e:	2300      	movs	r3, #0
 8006020:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006022:	f001 fc77 	bl	8007914 <vPortExitCritical>

	return xReturn;
 8006026:	68fb      	ldr	r3, [r7, #12]
}
 8006028:	4618      	mov	r0, r3
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006038:	f001 fc3c 	bl	80078b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006044:	429a      	cmp	r2, r3
 8006046:	d102      	bne.n	800604e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006048:	2301      	movs	r3, #1
 800604a:	60fb      	str	r3, [r7, #12]
 800604c:	e001      	b.n	8006052 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800604e:	2300      	movs	r3, #0
 8006050:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006052:	f001 fc5f 	bl	8007914 <vPortExitCritical>

	return xReturn;
 8006056:	68fb      	ldr	r3, [r7, #12]
}
 8006058:	4618      	mov	r0, r3
 800605a:	3710      	adds	r7, #16
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	e014      	b.n	800609a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006070:	4a0f      	ldr	r2, [pc, #60]	; (80060b0 <vQueueAddToRegistry+0x50>)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10b      	bne.n	8006094 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800607c:	490c      	ldr	r1, [pc, #48]	; (80060b0 <vQueueAddToRegistry+0x50>)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006086:	4a0a      	ldr	r2, [pc, #40]	; (80060b0 <vQueueAddToRegistry+0x50>)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	4413      	add	r3, r2
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006092:	e006      	b.n	80060a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	3301      	adds	r3, #1
 8006098:	60fb      	str	r3, [r7, #12]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2b07      	cmp	r3, #7
 800609e:	d9e7      	bls.n	8006070 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80060a0:	bf00      	nop
 80060a2:	bf00      	nop
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	20000a54 	.word	0x20000a54

080060b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80060c4:	f001 fbf6 	bl	80078b4 <vPortEnterCritical>
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060ce:	b25b      	sxtb	r3, r3
 80060d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d4:	d103      	bne.n	80060de <vQueueWaitForMessageRestricted+0x2a>
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060e4:	b25b      	sxtb	r3, r3
 80060e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ea:	d103      	bne.n	80060f4 <vQueueWaitForMessageRestricted+0x40>
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060f4:	f001 fc0e 	bl	8007914 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d106      	bne.n	800610e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	3324      	adds	r3, #36	; 0x24
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	68b9      	ldr	r1, [r7, #8]
 8006108:	4618      	mov	r0, r3
 800610a:	f000 fc8b 	bl	8006a24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800610e:	6978      	ldr	r0, [r7, #20]
 8006110:	f7ff ff26 	bl	8005f60 <prvUnlockQueue>
	}
 8006114:	bf00      	nop
 8006116:	3718      	adds	r7, #24
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800611c:	b580      	push	{r7, lr}
 800611e:	b08e      	sub	sp, #56	; 0x38
 8006120:	af04      	add	r7, sp, #16
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
 8006128:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800612a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10a      	bne.n	8006146 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006134:	f383 8811 	msr	BASEPRI, r3
 8006138:	f3bf 8f6f 	isb	sy
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	623b      	str	r3, [r7, #32]
}
 8006142:	bf00      	nop
 8006144:	e7fe      	b.n	8006144 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10a      	bne.n	8006162 <xTaskCreateStatic+0x46>
	__asm volatile
 800614c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	61fb      	str	r3, [r7, #28]
}
 800615e:	bf00      	nop
 8006160:	e7fe      	b.n	8006160 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006162:	23ac      	movs	r3, #172	; 0xac
 8006164:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	2bac      	cmp	r3, #172	; 0xac
 800616a:	d00a      	beq.n	8006182 <xTaskCreateStatic+0x66>
	__asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	61bb      	str	r3, [r7, #24]
}
 800617e:	bf00      	nop
 8006180:	e7fe      	b.n	8006180 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006182:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006186:	2b00      	cmp	r3, #0
 8006188:	d01e      	beq.n	80061c8 <xTaskCreateStatic+0xac>
 800618a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800618c:	2b00      	cmp	r3, #0
 800618e:	d01b      	beq.n	80061c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006192:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006198:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	2202      	movs	r2, #2
 800619e:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80061a2:	2300      	movs	r3, #0
 80061a4:	9303      	str	r3, [sp, #12]
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	9302      	str	r3, [sp, #8]
 80061aa:	f107 0314 	add.w	r3, r7, #20
 80061ae:	9301      	str	r3, [sp, #4]
 80061b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	68b9      	ldr	r1, [r7, #8]
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 f850 	bl	8006260 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061c2:	f000 f8f7 	bl	80063b4 <prvAddNewTaskToReadyList>
 80061c6:	e001      	b.n	80061cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80061c8:	2300      	movs	r3, #0
 80061ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80061cc:	697b      	ldr	r3, [r7, #20]
	}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3728      	adds	r7, #40	; 0x28
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b08c      	sub	sp, #48	; 0x30
 80061da:	af04      	add	r7, sp, #16
 80061dc:	60f8      	str	r0, [r7, #12]
 80061de:	60b9      	str	r1, [r7, #8]
 80061e0:	603b      	str	r3, [r7, #0]
 80061e2:	4613      	mov	r3, r2
 80061e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80061e6:	88fb      	ldrh	r3, [r7, #6]
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4618      	mov	r0, r3
 80061ec:	f001 fc84 	bl	8007af8 <pvPortMalloc>
 80061f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00e      	beq.n	8006216 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80061f8:	20ac      	movs	r0, #172	; 0xac
 80061fa:	f001 fc7d 	bl	8007af8 <pvPortMalloc>
 80061fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	631a      	str	r2, [r3, #48]	; 0x30
 800620c:	e005      	b.n	800621a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800620e:	6978      	ldr	r0, [r7, #20]
 8006210:	f001 fd42 	bl	8007c98 <vPortFree>
 8006214:	e001      	b.n	800621a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006216:	2300      	movs	r3, #0
 8006218:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d017      	beq.n	8006250 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006228:	88fa      	ldrh	r2, [r7, #6]
 800622a:	2300      	movs	r3, #0
 800622c:	9303      	str	r3, [sp, #12]
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	9302      	str	r3, [sp, #8]
 8006232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006234:	9301      	str	r3, [sp, #4]
 8006236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	68b9      	ldr	r1, [r7, #8]
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 f80e 	bl	8006260 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006244:	69f8      	ldr	r0, [r7, #28]
 8006246:	f000 f8b5 	bl	80063b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800624a:	2301      	movs	r3, #1
 800624c:	61bb      	str	r3, [r7, #24]
 800624e:	e002      	b.n	8006256 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006250:	f04f 33ff 	mov.w	r3, #4294967295
 8006254:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006256:	69bb      	ldr	r3, [r7, #24]
	}
 8006258:	4618      	mov	r0, r3
 800625a:	3720      	adds	r7, #32
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b088      	sub	sp, #32
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]
 800626c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800626e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006270:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	461a      	mov	r2, r3
 8006278:	21a5      	movs	r1, #165	; 0xa5
 800627a:	f001 ff1d 	bl	80080b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800627e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006288:	3b01      	subs	r3, #1
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4413      	add	r3, r2
 800628e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	f023 0307 	bic.w	r3, r3, #7
 8006296:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	f003 0307 	and.w	r3, r3, #7
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00a      	beq.n	80062b8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80062a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a6:	f383 8811 	msr	BASEPRI, r3
 80062aa:	f3bf 8f6f 	isb	sy
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	617b      	str	r3, [r7, #20]
}
 80062b4:	bf00      	nop
 80062b6:	e7fe      	b.n	80062b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d01f      	beq.n	80062fe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062be:	2300      	movs	r3, #0
 80062c0:	61fb      	str	r3, [r7, #28]
 80062c2:	e012      	b.n	80062ea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	4413      	add	r3, r2
 80062ca:	7819      	ldrb	r1, [r3, #0]
 80062cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	4413      	add	r3, r2
 80062d2:	3334      	adds	r3, #52	; 0x34
 80062d4:	460a      	mov	r2, r1
 80062d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	4413      	add	r3, r2
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d006      	beq.n	80062f2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	3301      	adds	r3, #1
 80062e8:	61fb      	str	r3, [r7, #28]
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	2b0f      	cmp	r3, #15
 80062ee:	d9e9      	bls.n	80062c4 <prvInitialiseNewTask+0x64>
 80062f0:	e000      	b.n	80062f4 <prvInitialiseNewTask+0x94>
			{
				break;
 80062f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80062f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062fc:	e003      	b.n	8006306 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80062fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006308:	2b37      	cmp	r3, #55	; 0x37
 800630a:	d901      	bls.n	8006310 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800630c:	2337      	movs	r3, #55	; 0x37
 800630e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006314:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800631a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800631c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631e:	2200      	movs	r2, #0
 8006320:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006324:	3304      	adds	r3, #4
 8006326:	4618      	mov	r0, r3
 8006328:	f7ff f978 	bl	800561c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800632c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632e:	3318      	adds	r3, #24
 8006330:	4618      	mov	r0, r3
 8006332:	f7ff f973 	bl	800561c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800633a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800633c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006344:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800634a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800634c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634e:	2200      	movs	r2, #0
 8006350:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006354:	2200      	movs	r2, #0
 8006356:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635c:	2200      	movs	r2, #0
 800635e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006364:	3358      	adds	r3, #88	; 0x58
 8006366:	224c      	movs	r2, #76	; 0x4c
 8006368:	2100      	movs	r1, #0
 800636a:	4618      	mov	r0, r3
 800636c:	f001 fea4 	bl	80080b8 <memset>
 8006370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006372:	4a0d      	ldr	r2, [pc, #52]	; (80063a8 <prvInitialiseNewTask+0x148>)
 8006374:	65da      	str	r2, [r3, #92]	; 0x5c
 8006376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006378:	4a0c      	ldr	r2, [pc, #48]	; (80063ac <prvInitialiseNewTask+0x14c>)
 800637a:	661a      	str	r2, [r3, #96]	; 0x60
 800637c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637e:	4a0c      	ldr	r2, [pc, #48]	; (80063b0 <prvInitialiseNewTask+0x150>)
 8006380:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006382:	683a      	ldr	r2, [r7, #0]
 8006384:	68f9      	ldr	r1, [r7, #12]
 8006386:	69b8      	ldr	r0, [r7, #24]
 8006388:	f001 f96a 	bl	8007660 <pxPortInitialiseStack>
 800638c:	4602      	mov	r2, r0
 800638e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006390:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800639c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800639e:	bf00      	nop
 80063a0:	3720      	adds	r7, #32
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	2000913c 	.word	0x2000913c
 80063ac:	200091a4 	.word	0x200091a4
 80063b0:	2000920c 	.word	0x2000920c

080063b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80063bc:	f001 fa7a 	bl	80078b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80063c0:	4b2d      	ldr	r3, [pc, #180]	; (8006478 <prvAddNewTaskToReadyList+0xc4>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	3301      	adds	r3, #1
 80063c6:	4a2c      	ldr	r2, [pc, #176]	; (8006478 <prvAddNewTaskToReadyList+0xc4>)
 80063c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80063ca:	4b2c      	ldr	r3, [pc, #176]	; (800647c <prvAddNewTaskToReadyList+0xc8>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d109      	bne.n	80063e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80063d2:	4a2a      	ldr	r2, [pc, #168]	; (800647c <prvAddNewTaskToReadyList+0xc8>)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80063d8:	4b27      	ldr	r3, [pc, #156]	; (8006478 <prvAddNewTaskToReadyList+0xc4>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d110      	bne.n	8006402 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80063e0:	f000 fc4e 	bl	8006c80 <prvInitialiseTaskLists>
 80063e4:	e00d      	b.n	8006402 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80063e6:	4b26      	ldr	r3, [pc, #152]	; (8006480 <prvAddNewTaskToReadyList+0xcc>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d109      	bne.n	8006402 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80063ee:	4b23      	ldr	r3, [pc, #140]	; (800647c <prvAddNewTaskToReadyList+0xc8>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d802      	bhi.n	8006402 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80063fc:	4a1f      	ldr	r2, [pc, #124]	; (800647c <prvAddNewTaskToReadyList+0xc8>)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006402:	4b20      	ldr	r3, [pc, #128]	; (8006484 <prvAddNewTaskToReadyList+0xd0>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	3301      	adds	r3, #1
 8006408:	4a1e      	ldr	r2, [pc, #120]	; (8006484 <prvAddNewTaskToReadyList+0xd0>)
 800640a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800640c:	4b1d      	ldr	r3, [pc, #116]	; (8006484 <prvAddNewTaskToReadyList+0xd0>)
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006418:	4b1b      	ldr	r3, [pc, #108]	; (8006488 <prvAddNewTaskToReadyList+0xd4>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	429a      	cmp	r2, r3
 800641e:	d903      	bls.n	8006428 <prvAddNewTaskToReadyList+0x74>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006424:	4a18      	ldr	r2, [pc, #96]	; (8006488 <prvAddNewTaskToReadyList+0xd4>)
 8006426:	6013      	str	r3, [r2, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800642c:	4613      	mov	r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4a15      	ldr	r2, [pc, #84]	; (800648c <prvAddNewTaskToReadyList+0xd8>)
 8006436:	441a      	add	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	3304      	adds	r3, #4
 800643c:	4619      	mov	r1, r3
 800643e:	4610      	mov	r0, r2
 8006440:	f7ff f8f9 	bl	8005636 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006444:	f001 fa66 	bl	8007914 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006448:	4b0d      	ldr	r3, [pc, #52]	; (8006480 <prvAddNewTaskToReadyList+0xcc>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00e      	beq.n	800646e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006450:	4b0a      	ldr	r3, [pc, #40]	; (800647c <prvAddNewTaskToReadyList+0xc8>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645a:	429a      	cmp	r2, r3
 800645c:	d207      	bcs.n	800646e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800645e:	4b0c      	ldr	r3, [pc, #48]	; (8006490 <prvAddNewTaskToReadyList+0xdc>)
 8006460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006464:	601a      	str	r2, [r3, #0]
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800646e:	bf00      	nop
 8006470:	3708      	adds	r7, #8
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	20000f68 	.word	0x20000f68
 800647c:	20000a94 	.word	0x20000a94
 8006480:	20000f74 	.word	0x20000f74
 8006484:	20000f84 	.word	0x20000f84
 8006488:	20000f70 	.word	0x20000f70
 800648c:	20000a98 	.word	0x20000a98
 8006490:	e000ed04 	.word	0xe000ed04

08006494 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800649c:	2300      	movs	r3, #0
 800649e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d017      	beq.n	80064d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064a6:	4b13      	ldr	r3, [pc, #76]	; (80064f4 <vTaskDelay+0x60>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00a      	beq.n	80064c4 <vTaskDelay+0x30>
	__asm volatile
 80064ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	60bb      	str	r3, [r7, #8]
}
 80064c0:	bf00      	nop
 80064c2:	e7fe      	b.n	80064c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80064c4:	f000 f88a 	bl	80065dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064c8:	2100      	movs	r1, #0
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 fd26 	bl	8006f1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064d0:	f000 f892 	bl	80065f8 <xTaskResumeAll>
 80064d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d107      	bne.n	80064ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80064dc:	4b06      	ldr	r3, [pc, #24]	; (80064f8 <vTaskDelay+0x64>)
 80064de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064e2:	601a      	str	r2, [r3, #0]
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064ec:	bf00      	nop
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	20000f90 	.word	0x20000f90
 80064f8:	e000ed04 	.word	0xe000ed04

080064fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b08a      	sub	sp, #40	; 0x28
 8006500:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006502:	2300      	movs	r3, #0
 8006504:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006506:	2300      	movs	r3, #0
 8006508:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800650a:	463a      	mov	r2, r7
 800650c:	1d39      	adds	r1, r7, #4
 800650e:	f107 0308 	add.w	r3, r7, #8
 8006512:	4618      	mov	r0, r3
 8006514:	f7ff f82e 	bl	8005574 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006518:	6839      	ldr	r1, [r7, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	9202      	str	r2, [sp, #8]
 8006520:	9301      	str	r3, [sp, #4]
 8006522:	2300      	movs	r3, #0
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	2300      	movs	r3, #0
 8006528:	460a      	mov	r2, r1
 800652a:	4924      	ldr	r1, [pc, #144]	; (80065bc <vTaskStartScheduler+0xc0>)
 800652c:	4824      	ldr	r0, [pc, #144]	; (80065c0 <vTaskStartScheduler+0xc4>)
 800652e:	f7ff fdf5 	bl	800611c <xTaskCreateStatic>
 8006532:	4603      	mov	r3, r0
 8006534:	4a23      	ldr	r2, [pc, #140]	; (80065c4 <vTaskStartScheduler+0xc8>)
 8006536:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006538:	4b22      	ldr	r3, [pc, #136]	; (80065c4 <vTaskStartScheduler+0xc8>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d002      	beq.n	8006546 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006540:	2301      	movs	r3, #1
 8006542:	617b      	str	r3, [r7, #20]
 8006544:	e001      	b.n	800654a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006546:	2300      	movs	r3, #0
 8006548:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d102      	bne.n	8006556 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006550:	f000 fd38 	bl	8006fc4 <xTimerCreateTimerTask>
 8006554:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d11b      	bne.n	8006594 <vTaskStartScheduler+0x98>
	__asm volatile
 800655c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006560:	f383 8811 	msr	BASEPRI, r3
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	613b      	str	r3, [r7, #16]
}
 800656e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006570:	4b15      	ldr	r3, [pc, #84]	; (80065c8 <vTaskStartScheduler+0xcc>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3358      	adds	r3, #88	; 0x58
 8006576:	4a15      	ldr	r2, [pc, #84]	; (80065cc <vTaskStartScheduler+0xd0>)
 8006578:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800657a:	4b15      	ldr	r3, [pc, #84]	; (80065d0 <vTaskStartScheduler+0xd4>)
 800657c:	f04f 32ff 	mov.w	r2, #4294967295
 8006580:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006582:	4b14      	ldr	r3, [pc, #80]	; (80065d4 <vTaskStartScheduler+0xd8>)
 8006584:	2201      	movs	r2, #1
 8006586:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006588:	4b13      	ldr	r3, [pc, #76]	; (80065d8 <vTaskStartScheduler+0xdc>)
 800658a:	2200      	movs	r2, #0
 800658c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800658e:	f001 f8ef 	bl	8007770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006592:	e00e      	b.n	80065b2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659a:	d10a      	bne.n	80065b2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800659c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a0:	f383 8811 	msr	BASEPRI, r3
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	60fb      	str	r3, [r7, #12]
}
 80065ae:	bf00      	nop
 80065b0:	e7fe      	b.n	80065b0 <vTaskStartScheduler+0xb4>
}
 80065b2:	bf00      	nop
 80065b4:	3718      	adds	r7, #24
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	080082b0 	.word	0x080082b0
 80065c0:	08006c4d 	.word	0x08006c4d
 80065c4:	20000f8c 	.word	0x20000f8c
 80065c8:	20000a94 	.word	0x20000a94
 80065cc:	20000110 	.word	0x20000110
 80065d0:	20000f88 	.word	0x20000f88
 80065d4:	20000f74 	.word	0x20000f74
 80065d8:	20000f6c 	.word	0x20000f6c

080065dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065dc:	b480      	push	{r7}
 80065de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80065e0:	4b04      	ldr	r3, [pc, #16]	; (80065f4 <vTaskSuspendAll+0x18>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	3301      	adds	r3, #1
 80065e6:	4a03      	ldr	r2, [pc, #12]	; (80065f4 <vTaskSuspendAll+0x18>)
 80065e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80065ea:	bf00      	nop
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr
 80065f4:	20000f90 	.word	0x20000f90

080065f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80065fe:	2300      	movs	r3, #0
 8006600:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006602:	2300      	movs	r3, #0
 8006604:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006606:	4b42      	ldr	r3, [pc, #264]	; (8006710 <xTaskResumeAll+0x118>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10a      	bne.n	8006624 <xTaskResumeAll+0x2c>
	__asm volatile
 800660e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	603b      	str	r3, [r7, #0]
}
 8006620:	bf00      	nop
 8006622:	e7fe      	b.n	8006622 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006624:	f001 f946 	bl	80078b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006628:	4b39      	ldr	r3, [pc, #228]	; (8006710 <xTaskResumeAll+0x118>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	3b01      	subs	r3, #1
 800662e:	4a38      	ldr	r2, [pc, #224]	; (8006710 <xTaskResumeAll+0x118>)
 8006630:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006632:	4b37      	ldr	r3, [pc, #220]	; (8006710 <xTaskResumeAll+0x118>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d162      	bne.n	8006700 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800663a:	4b36      	ldr	r3, [pc, #216]	; (8006714 <xTaskResumeAll+0x11c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d05e      	beq.n	8006700 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006642:	e02f      	b.n	80066a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006644:	4b34      	ldr	r3, [pc, #208]	; (8006718 <xTaskResumeAll+0x120>)
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	3318      	adds	r3, #24
 8006650:	4618      	mov	r0, r3
 8006652:	f7ff f84d 	bl	80056f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	3304      	adds	r3, #4
 800665a:	4618      	mov	r0, r3
 800665c:	f7ff f848 	bl	80056f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006664:	4b2d      	ldr	r3, [pc, #180]	; (800671c <xTaskResumeAll+0x124>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	429a      	cmp	r2, r3
 800666a:	d903      	bls.n	8006674 <xTaskResumeAll+0x7c>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006670:	4a2a      	ldr	r2, [pc, #168]	; (800671c <xTaskResumeAll+0x124>)
 8006672:	6013      	str	r3, [r2, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006678:	4613      	mov	r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	4413      	add	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4a27      	ldr	r2, [pc, #156]	; (8006720 <xTaskResumeAll+0x128>)
 8006682:	441a      	add	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	3304      	adds	r3, #4
 8006688:	4619      	mov	r1, r3
 800668a:	4610      	mov	r0, r2
 800668c:	f7fe ffd3 	bl	8005636 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006694:	4b23      	ldr	r3, [pc, #140]	; (8006724 <xTaskResumeAll+0x12c>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669a:	429a      	cmp	r2, r3
 800669c:	d302      	bcc.n	80066a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800669e:	4b22      	ldr	r3, [pc, #136]	; (8006728 <xTaskResumeAll+0x130>)
 80066a0:	2201      	movs	r2, #1
 80066a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066a4:	4b1c      	ldr	r3, [pc, #112]	; (8006718 <xTaskResumeAll+0x120>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1cb      	bne.n	8006644 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066b2:	f000 fb87 	bl	8006dc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80066b6:	4b1d      	ldr	r3, [pc, #116]	; (800672c <xTaskResumeAll+0x134>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d010      	beq.n	80066e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066c2:	f000 f847 	bl	8006754 <xTaskIncrementTick>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80066cc:	4b16      	ldr	r3, [pc, #88]	; (8006728 <xTaskResumeAll+0x130>)
 80066ce:	2201      	movs	r2, #1
 80066d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	3b01      	subs	r3, #1
 80066d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1f1      	bne.n	80066c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80066de:	4b13      	ldr	r3, [pc, #76]	; (800672c <xTaskResumeAll+0x134>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80066e4:	4b10      	ldr	r3, [pc, #64]	; (8006728 <xTaskResumeAll+0x130>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d009      	beq.n	8006700 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80066ec:	2301      	movs	r3, #1
 80066ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80066f0:	4b0f      	ldr	r3, [pc, #60]	; (8006730 <xTaskResumeAll+0x138>)
 80066f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066f6:	601a      	str	r2, [r3, #0]
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006700:	f001 f908 	bl	8007914 <vPortExitCritical>

	return xAlreadyYielded;
 8006704:	68bb      	ldr	r3, [r7, #8]
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	20000f90 	.word	0x20000f90
 8006714:	20000f68 	.word	0x20000f68
 8006718:	20000f28 	.word	0x20000f28
 800671c:	20000f70 	.word	0x20000f70
 8006720:	20000a98 	.word	0x20000a98
 8006724:	20000a94 	.word	0x20000a94
 8006728:	20000f7c 	.word	0x20000f7c
 800672c:	20000f78 	.word	0x20000f78
 8006730:	e000ed04 	.word	0xe000ed04

08006734 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800673a:	4b05      	ldr	r3, [pc, #20]	; (8006750 <xTaskGetTickCount+0x1c>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006740:	687b      	ldr	r3, [r7, #4]
}
 8006742:	4618      	mov	r0, r3
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	20000f6c 	.word	0x20000f6c

08006754 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b086      	sub	sp, #24
 8006758:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800675a:	2300      	movs	r3, #0
 800675c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800675e:	4b4f      	ldr	r3, [pc, #316]	; (800689c <xTaskIncrementTick+0x148>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	f040 808f 	bne.w	8006886 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006768:	4b4d      	ldr	r3, [pc, #308]	; (80068a0 <xTaskIncrementTick+0x14c>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	3301      	adds	r3, #1
 800676e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006770:	4a4b      	ldr	r2, [pc, #300]	; (80068a0 <xTaskIncrementTick+0x14c>)
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d120      	bne.n	80067be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800677c:	4b49      	ldr	r3, [pc, #292]	; (80068a4 <xTaskIncrementTick+0x150>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00a      	beq.n	800679c <xTaskIncrementTick+0x48>
	__asm volatile
 8006786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678a:	f383 8811 	msr	BASEPRI, r3
 800678e:	f3bf 8f6f 	isb	sy
 8006792:	f3bf 8f4f 	dsb	sy
 8006796:	603b      	str	r3, [r7, #0]
}
 8006798:	bf00      	nop
 800679a:	e7fe      	b.n	800679a <xTaskIncrementTick+0x46>
 800679c:	4b41      	ldr	r3, [pc, #260]	; (80068a4 <xTaskIncrementTick+0x150>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	60fb      	str	r3, [r7, #12]
 80067a2:	4b41      	ldr	r3, [pc, #260]	; (80068a8 <xTaskIncrementTick+0x154>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a3f      	ldr	r2, [pc, #252]	; (80068a4 <xTaskIncrementTick+0x150>)
 80067a8:	6013      	str	r3, [r2, #0]
 80067aa:	4a3f      	ldr	r2, [pc, #252]	; (80068a8 <xTaskIncrementTick+0x154>)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6013      	str	r3, [r2, #0]
 80067b0:	4b3e      	ldr	r3, [pc, #248]	; (80068ac <xTaskIncrementTick+0x158>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	3301      	adds	r3, #1
 80067b6:	4a3d      	ldr	r2, [pc, #244]	; (80068ac <xTaskIncrementTick+0x158>)
 80067b8:	6013      	str	r3, [r2, #0]
 80067ba:	f000 fb03 	bl	8006dc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067be:	4b3c      	ldr	r3, [pc, #240]	; (80068b0 <xTaskIncrementTick+0x15c>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d349      	bcc.n	800685c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067c8:	4b36      	ldr	r3, [pc, #216]	; (80068a4 <xTaskIncrementTick+0x150>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d104      	bne.n	80067dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067d2:	4b37      	ldr	r3, [pc, #220]	; (80068b0 <xTaskIncrementTick+0x15c>)
 80067d4:	f04f 32ff 	mov.w	r2, #4294967295
 80067d8:	601a      	str	r2, [r3, #0]
					break;
 80067da:	e03f      	b.n	800685c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067dc:	4b31      	ldr	r3, [pc, #196]	; (80068a4 <xTaskIncrementTick+0x150>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d203      	bcs.n	80067fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067f4:	4a2e      	ldr	r2, [pc, #184]	; (80068b0 <xTaskIncrementTick+0x15c>)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80067fa:	e02f      	b.n	800685c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	3304      	adds	r3, #4
 8006800:	4618      	mov	r0, r3
 8006802:	f7fe ff75 	bl	80056f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800680a:	2b00      	cmp	r3, #0
 800680c:	d004      	beq.n	8006818 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	3318      	adds	r3, #24
 8006812:	4618      	mov	r0, r3
 8006814:	f7fe ff6c 	bl	80056f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800681c:	4b25      	ldr	r3, [pc, #148]	; (80068b4 <xTaskIncrementTick+0x160>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	429a      	cmp	r2, r3
 8006822:	d903      	bls.n	800682c <xTaskIncrementTick+0xd8>
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006828:	4a22      	ldr	r2, [pc, #136]	; (80068b4 <xTaskIncrementTick+0x160>)
 800682a:	6013      	str	r3, [r2, #0]
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006830:	4613      	mov	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	4a1f      	ldr	r2, [pc, #124]	; (80068b8 <xTaskIncrementTick+0x164>)
 800683a:	441a      	add	r2, r3
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	3304      	adds	r3, #4
 8006840:	4619      	mov	r1, r3
 8006842:	4610      	mov	r0, r2
 8006844:	f7fe fef7 	bl	8005636 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800684c:	4b1b      	ldr	r3, [pc, #108]	; (80068bc <xTaskIncrementTick+0x168>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006852:	429a      	cmp	r2, r3
 8006854:	d3b8      	bcc.n	80067c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006856:	2301      	movs	r3, #1
 8006858:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800685a:	e7b5      	b.n	80067c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800685c:	4b17      	ldr	r3, [pc, #92]	; (80068bc <xTaskIncrementTick+0x168>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006862:	4915      	ldr	r1, [pc, #84]	; (80068b8 <xTaskIncrementTick+0x164>)
 8006864:	4613      	mov	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4413      	add	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	440b      	add	r3, r1
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d901      	bls.n	8006878 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006874:	2301      	movs	r3, #1
 8006876:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006878:	4b11      	ldr	r3, [pc, #68]	; (80068c0 <xTaskIncrementTick+0x16c>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d007      	beq.n	8006890 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006880:	2301      	movs	r3, #1
 8006882:	617b      	str	r3, [r7, #20]
 8006884:	e004      	b.n	8006890 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006886:	4b0f      	ldr	r3, [pc, #60]	; (80068c4 <xTaskIncrementTick+0x170>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	3301      	adds	r3, #1
 800688c:	4a0d      	ldr	r2, [pc, #52]	; (80068c4 <xTaskIncrementTick+0x170>)
 800688e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006890:	697b      	ldr	r3, [r7, #20]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3718      	adds	r7, #24
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	20000f90 	.word	0x20000f90
 80068a0:	20000f6c 	.word	0x20000f6c
 80068a4:	20000f20 	.word	0x20000f20
 80068a8:	20000f24 	.word	0x20000f24
 80068ac:	20000f80 	.word	0x20000f80
 80068b0:	20000f88 	.word	0x20000f88
 80068b4:	20000f70 	.word	0x20000f70
 80068b8:	20000a98 	.word	0x20000a98
 80068bc:	20000a94 	.word	0x20000a94
 80068c0:	20000f7c 	.word	0x20000f7c
 80068c4:	20000f78 	.word	0x20000f78

080068c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b086      	sub	sp, #24
 80068cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068ce:	4b3d      	ldr	r3, [pc, #244]	; (80069c4 <vTaskSwitchContext+0xfc>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068d6:	4b3c      	ldr	r3, [pc, #240]	; (80069c8 <vTaskSwitchContext+0x100>)
 80068d8:	2201      	movs	r2, #1
 80068da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068dc:	e06d      	b.n	80069ba <vTaskSwitchContext+0xf2>
		xYieldPending = pdFALSE;
 80068de:	4b3a      	ldr	r3, [pc, #232]	; (80069c8 <vTaskSwitchContext+0x100>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80068e4:	4b39      	ldr	r3, [pc, #228]	; (80069cc <vTaskSwitchContext+0x104>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ea:	613b      	str	r3, [r7, #16]
 80068ec:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80068f0:	60fb      	str	r3, [r7, #12]
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d111      	bne.n	8006920 <vTaskSwitchContext+0x58>
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	3304      	adds	r3, #4
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	429a      	cmp	r2, r3
 8006906:	d10b      	bne.n	8006920 <vTaskSwitchContext+0x58>
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	3308      	adds	r3, #8
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	429a      	cmp	r2, r3
 8006912:	d105      	bne.n	8006920 <vTaskSwitchContext+0x58>
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	330c      	adds	r3, #12
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	429a      	cmp	r2, r3
 800691e:	d008      	beq.n	8006932 <vTaskSwitchContext+0x6a>
 8006920:	4b2a      	ldr	r3, [pc, #168]	; (80069cc <vTaskSwitchContext+0x104>)
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	4b29      	ldr	r3, [pc, #164]	; (80069cc <vTaskSwitchContext+0x104>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	3334      	adds	r3, #52	; 0x34
 800692a:	4619      	mov	r1, r3
 800692c:	4610      	mov	r0, r2
 800692e:	f7f9 fde4 	bl	80004fa <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006932:	4b27      	ldr	r3, [pc, #156]	; (80069d0 <vTaskSwitchContext+0x108>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	617b      	str	r3, [r7, #20]
 8006938:	e010      	b.n	800695c <vTaskSwitchContext+0x94>
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10a      	bne.n	8006956 <vTaskSwitchContext+0x8e>
	__asm volatile
 8006940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	607b      	str	r3, [r7, #4]
}
 8006952:	bf00      	nop
 8006954:	e7fe      	b.n	8006954 <vTaskSwitchContext+0x8c>
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	3b01      	subs	r3, #1
 800695a:	617b      	str	r3, [r7, #20]
 800695c:	491d      	ldr	r1, [pc, #116]	; (80069d4 <vTaskSwitchContext+0x10c>)
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	4613      	mov	r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	440b      	add	r3, r1
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d0e4      	beq.n	800693a <vTaskSwitchContext+0x72>
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	4613      	mov	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4413      	add	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4a16      	ldr	r2, [pc, #88]	; (80069d4 <vTaskSwitchContext+0x10c>)
 800697c:	4413      	add	r3, r2
 800697e:	60bb      	str	r3, [r7, #8]
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	685a      	ldr	r2, [r3, #4]
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	605a      	str	r2, [r3, #4]
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	3308      	adds	r3, #8
 8006992:	429a      	cmp	r2, r3
 8006994:	d104      	bne.n	80069a0 <vTaskSwitchContext+0xd8>
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	605a      	str	r2, [r3, #4]
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	4a09      	ldr	r2, [pc, #36]	; (80069cc <vTaskSwitchContext+0x104>)
 80069a8:	6013      	str	r3, [r2, #0]
 80069aa:	4a09      	ldr	r2, [pc, #36]	; (80069d0 <vTaskSwitchContext+0x108>)
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80069b0:	4b06      	ldr	r3, [pc, #24]	; (80069cc <vTaskSwitchContext+0x104>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	3358      	adds	r3, #88	; 0x58
 80069b6:	4a08      	ldr	r2, [pc, #32]	; (80069d8 <vTaskSwitchContext+0x110>)
 80069b8:	6013      	str	r3, [r2, #0]
}
 80069ba:	bf00      	nop
 80069bc:	3718      	adds	r7, #24
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	20000f90 	.word	0x20000f90
 80069c8:	20000f7c 	.word	0x20000f7c
 80069cc:	20000a94 	.word	0x20000a94
 80069d0:	20000f70 	.word	0x20000f70
 80069d4:	20000a98 	.word	0x20000a98
 80069d8:	20000110 	.word	0x20000110

080069dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d10a      	bne.n	8006a02 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80069ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f0:	f383 8811 	msr	BASEPRI, r3
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	60fb      	str	r3, [r7, #12]
}
 80069fe:	bf00      	nop
 8006a00:	e7fe      	b.n	8006a00 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a02:	4b07      	ldr	r3, [pc, #28]	; (8006a20 <vTaskPlaceOnEventList+0x44>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	3318      	adds	r3, #24
 8006a08:	4619      	mov	r1, r3
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f7fe fe37 	bl	800567e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a10:	2101      	movs	r1, #1
 8006a12:	6838      	ldr	r0, [r7, #0]
 8006a14:	f000 fa82 	bl	8006f1c <prvAddCurrentTaskToDelayedList>
}
 8006a18:	bf00      	nop
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	20000a94 	.word	0x20000a94

08006a24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b086      	sub	sp, #24
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10a      	bne.n	8006a4c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3a:	f383 8811 	msr	BASEPRI, r3
 8006a3e:	f3bf 8f6f 	isb	sy
 8006a42:	f3bf 8f4f 	dsb	sy
 8006a46:	617b      	str	r3, [r7, #20]
}
 8006a48:	bf00      	nop
 8006a4a:	e7fe      	b.n	8006a4a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a4c:	4b0a      	ldr	r3, [pc, #40]	; (8006a78 <vTaskPlaceOnEventListRestricted+0x54>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	3318      	adds	r3, #24
 8006a52:	4619      	mov	r1, r3
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f7fe fdee 	bl	8005636 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d002      	beq.n	8006a66 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006a60:	f04f 33ff 	mov.w	r3, #4294967295
 8006a64:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a66:	6879      	ldr	r1, [r7, #4]
 8006a68:	68b8      	ldr	r0, [r7, #8]
 8006a6a:	f000 fa57 	bl	8006f1c <prvAddCurrentTaskToDelayedList>
	}
 8006a6e:	bf00      	nop
 8006a70:	3718      	adds	r7, #24
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	20000a94 	.word	0x20000a94

08006a7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b086      	sub	sp, #24
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10a      	bne.n	8006aa8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a96:	f383 8811 	msr	BASEPRI, r3
 8006a9a:	f3bf 8f6f 	isb	sy
 8006a9e:	f3bf 8f4f 	dsb	sy
 8006aa2:	60fb      	str	r3, [r7, #12]
}
 8006aa4:	bf00      	nop
 8006aa6:	e7fe      	b.n	8006aa6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	3318      	adds	r3, #24
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7fe fe1f 	bl	80056f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ab2:	4b1e      	ldr	r3, [pc, #120]	; (8006b2c <xTaskRemoveFromEventList+0xb0>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d11d      	bne.n	8006af6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	3304      	adds	r3, #4
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fe fe16 	bl	80056f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac8:	4b19      	ldr	r3, [pc, #100]	; (8006b30 <xTaskRemoveFromEventList+0xb4>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d903      	bls.n	8006ad8 <xTaskRemoveFromEventList+0x5c>
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad4:	4a16      	ldr	r2, [pc, #88]	; (8006b30 <xTaskRemoveFromEventList+0xb4>)
 8006ad6:	6013      	str	r3, [r2, #0]
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006adc:	4613      	mov	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4a13      	ldr	r2, [pc, #76]	; (8006b34 <xTaskRemoveFromEventList+0xb8>)
 8006ae6:	441a      	add	r2, r3
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	3304      	adds	r3, #4
 8006aec:	4619      	mov	r1, r3
 8006aee:	4610      	mov	r0, r2
 8006af0:	f7fe fda1 	bl	8005636 <vListInsertEnd>
 8006af4:	e005      	b.n	8006b02 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	3318      	adds	r3, #24
 8006afa:	4619      	mov	r1, r3
 8006afc:	480e      	ldr	r0, [pc, #56]	; (8006b38 <xTaskRemoveFromEventList+0xbc>)
 8006afe:	f7fe fd9a 	bl	8005636 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b06:	4b0d      	ldr	r3, [pc, #52]	; (8006b3c <xTaskRemoveFromEventList+0xc0>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d905      	bls.n	8006b1c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b10:	2301      	movs	r3, #1
 8006b12:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b14:	4b0a      	ldr	r3, [pc, #40]	; (8006b40 <xTaskRemoveFromEventList+0xc4>)
 8006b16:	2201      	movs	r2, #1
 8006b18:	601a      	str	r2, [r3, #0]
 8006b1a:	e001      	b.n	8006b20 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006b20:	697b      	ldr	r3, [r7, #20]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3718      	adds	r7, #24
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	20000f90 	.word	0x20000f90
 8006b30:	20000f70 	.word	0x20000f70
 8006b34:	20000a98 	.word	0x20000a98
 8006b38:	20000f28 	.word	0x20000f28
 8006b3c:	20000a94 	.word	0x20000a94
 8006b40:	20000f7c 	.word	0x20000f7c

08006b44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b4c:	4b06      	ldr	r3, [pc, #24]	; (8006b68 <vTaskInternalSetTimeOutState+0x24>)
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b54:	4b05      	ldr	r3, [pc, #20]	; (8006b6c <vTaskInternalSetTimeOutState+0x28>)
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	605a      	str	r2, [r3, #4]
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr
 8006b68:	20000f80 	.word	0x20000f80
 8006b6c:	20000f6c 	.word	0x20000f6c

08006b70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b088      	sub	sp, #32
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d10a      	bne.n	8006b96 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	613b      	str	r3, [r7, #16]
}
 8006b92:	bf00      	nop
 8006b94:	e7fe      	b.n	8006b94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10a      	bne.n	8006bb2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	60fb      	str	r3, [r7, #12]
}
 8006bae:	bf00      	nop
 8006bb0:	e7fe      	b.n	8006bb0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006bb2:	f000 fe7f 	bl	80078b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006bb6:	4b1d      	ldr	r3, [pc, #116]	; (8006c2c <xTaskCheckForTimeOut+0xbc>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	69ba      	ldr	r2, [r7, #24]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bce:	d102      	bne.n	8006bd6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	61fb      	str	r3, [r7, #28]
 8006bd4:	e023      	b.n	8006c1e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	4b15      	ldr	r3, [pc, #84]	; (8006c30 <xTaskCheckForTimeOut+0xc0>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d007      	beq.n	8006bf2 <xTaskCheckForTimeOut+0x82>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d302      	bcc.n	8006bf2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006bec:	2301      	movs	r3, #1
 8006bee:	61fb      	str	r3, [r7, #28]
 8006bf0:	e015      	b.n	8006c1e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d20b      	bcs.n	8006c14 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	1ad2      	subs	r2, r2, r3
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f7ff ff9b 	bl	8006b44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	61fb      	str	r3, [r7, #28]
 8006c12:	e004      	b.n	8006c1e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	2200      	movs	r2, #0
 8006c18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c1e:	f000 fe79 	bl	8007914 <vPortExitCritical>

	return xReturn;
 8006c22:	69fb      	ldr	r3, [r7, #28]
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3720      	adds	r7, #32
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	20000f6c 	.word	0x20000f6c
 8006c30:	20000f80 	.word	0x20000f80

08006c34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c34:	b480      	push	{r7}
 8006c36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c38:	4b03      	ldr	r3, [pc, #12]	; (8006c48 <vTaskMissedYield+0x14>)
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	601a      	str	r2, [r3, #0]
}
 8006c3e:	bf00      	nop
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr
 8006c48:	20000f7c 	.word	0x20000f7c

08006c4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c54:	f000 f854 	bl	8006d00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c58:	4b07      	ldr	r3, [pc, #28]	; (8006c78 <prvIdleTask+0x2c>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d907      	bls.n	8006c70 <prvIdleTask+0x24>
			{
				taskYIELD();
 8006c60:	4b06      	ldr	r3, [pc, #24]	; (8006c7c <prvIdleTask+0x30>)
 8006c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c66:	601a      	str	r2, [r3, #0]
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8006c70:	f7f9 fc3c 	bl	80004ec <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8006c74:	e7ee      	b.n	8006c54 <prvIdleTask+0x8>
 8006c76:	bf00      	nop
 8006c78:	20000a98 	.word	0x20000a98
 8006c7c:	e000ed04 	.word	0xe000ed04

08006c80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c86:	2300      	movs	r3, #0
 8006c88:	607b      	str	r3, [r7, #4]
 8006c8a:	e00c      	b.n	8006ca6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4a12      	ldr	r2, [pc, #72]	; (8006ce0 <prvInitialiseTaskLists+0x60>)
 8006c98:	4413      	add	r3, r2
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fe fc9e 	bl	80055dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	607b      	str	r3, [r7, #4]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2b37      	cmp	r3, #55	; 0x37
 8006caa:	d9ef      	bls.n	8006c8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006cac:	480d      	ldr	r0, [pc, #52]	; (8006ce4 <prvInitialiseTaskLists+0x64>)
 8006cae:	f7fe fc95 	bl	80055dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006cb2:	480d      	ldr	r0, [pc, #52]	; (8006ce8 <prvInitialiseTaskLists+0x68>)
 8006cb4:	f7fe fc92 	bl	80055dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006cb8:	480c      	ldr	r0, [pc, #48]	; (8006cec <prvInitialiseTaskLists+0x6c>)
 8006cba:	f7fe fc8f 	bl	80055dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006cbe:	480c      	ldr	r0, [pc, #48]	; (8006cf0 <prvInitialiseTaskLists+0x70>)
 8006cc0:	f7fe fc8c 	bl	80055dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006cc4:	480b      	ldr	r0, [pc, #44]	; (8006cf4 <prvInitialiseTaskLists+0x74>)
 8006cc6:	f7fe fc89 	bl	80055dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006cca:	4b0b      	ldr	r3, [pc, #44]	; (8006cf8 <prvInitialiseTaskLists+0x78>)
 8006ccc:	4a05      	ldr	r2, [pc, #20]	; (8006ce4 <prvInitialiseTaskLists+0x64>)
 8006cce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006cd0:	4b0a      	ldr	r3, [pc, #40]	; (8006cfc <prvInitialiseTaskLists+0x7c>)
 8006cd2:	4a05      	ldr	r2, [pc, #20]	; (8006ce8 <prvInitialiseTaskLists+0x68>)
 8006cd4:	601a      	str	r2, [r3, #0]
}
 8006cd6:	bf00      	nop
 8006cd8:	3708      	adds	r7, #8
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	20000a98 	.word	0x20000a98
 8006ce4:	20000ef8 	.word	0x20000ef8
 8006ce8:	20000f0c 	.word	0x20000f0c
 8006cec:	20000f28 	.word	0x20000f28
 8006cf0:	20000f3c 	.word	0x20000f3c
 8006cf4:	20000f54 	.word	0x20000f54
 8006cf8:	20000f20 	.word	0x20000f20
 8006cfc:	20000f24 	.word	0x20000f24

08006d00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d06:	e019      	b.n	8006d3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d08:	f000 fdd4 	bl	80078b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d0c:	4b10      	ldr	r3, [pc, #64]	; (8006d50 <prvCheckTasksWaitingTermination+0x50>)
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	3304      	adds	r3, #4
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7fe fce9 	bl	80056f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d1e:	4b0d      	ldr	r3, [pc, #52]	; (8006d54 <prvCheckTasksWaitingTermination+0x54>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	3b01      	subs	r3, #1
 8006d24:	4a0b      	ldr	r2, [pc, #44]	; (8006d54 <prvCheckTasksWaitingTermination+0x54>)
 8006d26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d28:	4b0b      	ldr	r3, [pc, #44]	; (8006d58 <prvCheckTasksWaitingTermination+0x58>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	4a0a      	ldr	r2, [pc, #40]	; (8006d58 <prvCheckTasksWaitingTermination+0x58>)
 8006d30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d32:	f000 fdef 	bl	8007914 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f810 	bl	8006d5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d3c:	4b06      	ldr	r3, [pc, #24]	; (8006d58 <prvCheckTasksWaitingTermination+0x58>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1e1      	bne.n	8006d08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d44:	bf00      	nop
 8006d46:	bf00      	nop
 8006d48:	3708      	adds	r7, #8
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	20000f3c 	.word	0x20000f3c
 8006d54:	20000f68 	.word	0x20000f68
 8006d58:	20000f50 	.word	0x20000f50

08006d5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	3358      	adds	r3, #88	; 0x58
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f001 f9ad 	bl	80080c8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d108      	bne.n	8006d8a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f000 ff8b 	bl	8007c98 <vPortFree>
				vPortFree( pxTCB );
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 ff88 	bl	8007c98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d88:	e018      	b.n	8006dbc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d103      	bne.n	8006d9c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 ff7f 	bl	8007c98 <vPortFree>
	}
 8006d9a:	e00f      	b.n	8006dbc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d00a      	beq.n	8006dbc <prvDeleteTCB+0x60>
	__asm volatile
 8006da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006daa:	f383 8811 	msr	BASEPRI, r3
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	f3bf 8f4f 	dsb	sy
 8006db6:	60fb      	str	r3, [r7, #12]
}
 8006db8:	bf00      	nop
 8006dba:	e7fe      	b.n	8006dba <prvDeleteTCB+0x5e>
	}
 8006dbc:	bf00      	nop
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dca:	4b0c      	ldr	r3, [pc, #48]	; (8006dfc <prvResetNextTaskUnblockTime+0x38>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d104      	bne.n	8006dde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006dd4:	4b0a      	ldr	r3, [pc, #40]	; (8006e00 <prvResetNextTaskUnblockTime+0x3c>)
 8006dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006dda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ddc:	e008      	b.n	8006df0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dde:	4b07      	ldr	r3, [pc, #28]	; (8006dfc <prvResetNextTaskUnblockTime+0x38>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	4a04      	ldr	r2, [pc, #16]	; (8006e00 <prvResetNextTaskUnblockTime+0x3c>)
 8006dee:	6013      	str	r3, [r2, #0]
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	20000f20 	.word	0x20000f20
 8006e00:	20000f88 	.word	0x20000f88

08006e04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e0a:	4b0b      	ldr	r3, [pc, #44]	; (8006e38 <xTaskGetSchedulerState+0x34>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d102      	bne.n	8006e18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e12:	2301      	movs	r3, #1
 8006e14:	607b      	str	r3, [r7, #4]
 8006e16:	e008      	b.n	8006e2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e18:	4b08      	ldr	r3, [pc, #32]	; (8006e3c <xTaskGetSchedulerState+0x38>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d102      	bne.n	8006e26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006e20:	2302      	movs	r3, #2
 8006e22:	607b      	str	r3, [r7, #4]
 8006e24:	e001      	b.n	8006e2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e26:	2300      	movs	r3, #0
 8006e28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e2a:	687b      	ldr	r3, [r7, #4]
	}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr
 8006e38:	20000f74 	.word	0x20000f74
 8006e3c:	20000f90 	.word	0x20000f90

08006e40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b086      	sub	sp, #24
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d056      	beq.n	8006f04 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e56:	4b2e      	ldr	r3, [pc, #184]	; (8006f10 <xTaskPriorityDisinherit+0xd0>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d00a      	beq.n	8006e76 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e64:	f383 8811 	msr	BASEPRI, r3
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	60fb      	str	r3, [r7, #12]
}
 8006e72:	bf00      	nop
 8006e74:	e7fe      	b.n	8006e74 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10a      	bne.n	8006e94 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	60bb      	str	r3, [r7, #8]
}
 8006e90:	bf00      	nop
 8006e92:	e7fe      	b.n	8006e92 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e98:	1e5a      	subs	r2, r3, #1
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d02c      	beq.n	8006f04 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d128      	bne.n	8006f04 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	3304      	adds	r3, #4
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7fe fc1a 	bl	80056f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed4:	4b0f      	ldr	r3, [pc, #60]	; (8006f14 <xTaskPriorityDisinherit+0xd4>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d903      	bls.n	8006ee4 <xTaskPriorityDisinherit+0xa4>
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee0:	4a0c      	ldr	r2, [pc, #48]	; (8006f14 <xTaskPriorityDisinherit+0xd4>)
 8006ee2:	6013      	str	r3, [r2, #0]
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee8:	4613      	mov	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4a09      	ldr	r2, [pc, #36]	; (8006f18 <xTaskPriorityDisinherit+0xd8>)
 8006ef2:	441a      	add	r2, r3
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	3304      	adds	r3, #4
 8006ef8:	4619      	mov	r1, r3
 8006efa:	4610      	mov	r0, r2
 8006efc:	f7fe fb9b 	bl	8005636 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f00:	2301      	movs	r3, #1
 8006f02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f04:	697b      	ldr	r3, [r7, #20]
	}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3718      	adds	r7, #24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	20000a94 	.word	0x20000a94
 8006f14:	20000f70 	.word	0x20000f70
 8006f18:	20000a98 	.word	0x20000a98

08006f1c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f26:	4b21      	ldr	r3, [pc, #132]	; (8006fac <prvAddCurrentTaskToDelayedList+0x90>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f2c:	4b20      	ldr	r3, [pc, #128]	; (8006fb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	3304      	adds	r3, #4
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7fe fbdc 	bl	80056f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f3e:	d10a      	bne.n	8006f56 <prvAddCurrentTaskToDelayedList+0x3a>
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d007      	beq.n	8006f56 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f46:	4b1a      	ldr	r3, [pc, #104]	; (8006fb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	3304      	adds	r3, #4
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	4819      	ldr	r0, [pc, #100]	; (8006fb4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006f50:	f7fe fb71 	bl	8005636 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f54:	e026      	b.n	8006fa4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f5e:	4b14      	ldr	r3, [pc, #80]	; (8006fb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d209      	bcs.n	8006f82 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f6e:	4b12      	ldr	r3, [pc, #72]	; (8006fb8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	4b0f      	ldr	r3, [pc, #60]	; (8006fb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	3304      	adds	r3, #4
 8006f78:	4619      	mov	r1, r3
 8006f7a:	4610      	mov	r0, r2
 8006f7c:	f7fe fb7f 	bl	800567e <vListInsert>
}
 8006f80:	e010      	b.n	8006fa4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f82:	4b0e      	ldr	r3, [pc, #56]	; (8006fbc <prvAddCurrentTaskToDelayedList+0xa0>)
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	4b0a      	ldr	r3, [pc, #40]	; (8006fb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3304      	adds	r3, #4
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	4610      	mov	r0, r2
 8006f90:	f7fe fb75 	bl	800567e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f94:	4b0a      	ldr	r3, [pc, #40]	; (8006fc0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d202      	bcs.n	8006fa4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006f9e:	4a08      	ldr	r2, [pc, #32]	; (8006fc0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	6013      	str	r3, [r2, #0]
}
 8006fa4:	bf00      	nop
 8006fa6:	3710      	adds	r7, #16
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	20000f6c 	.word	0x20000f6c
 8006fb0:	20000a94 	.word	0x20000a94
 8006fb4:	20000f54 	.word	0x20000f54
 8006fb8:	20000f24 	.word	0x20000f24
 8006fbc:	20000f20 	.word	0x20000f20
 8006fc0:	20000f88 	.word	0x20000f88

08006fc4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b08a      	sub	sp, #40	; 0x28
 8006fc8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006fce:	f000 fb07 	bl	80075e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006fd2:	4b1c      	ldr	r3, [pc, #112]	; (8007044 <xTimerCreateTimerTask+0x80>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d021      	beq.n	800701e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006fe2:	1d3a      	adds	r2, r7, #4
 8006fe4:	f107 0108 	add.w	r1, r7, #8
 8006fe8:	f107 030c 	add.w	r3, r7, #12
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7fe fadb 	bl	80055a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006ff2:	6879      	ldr	r1, [r7, #4]
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	9202      	str	r2, [sp, #8]
 8006ffa:	9301      	str	r3, [sp, #4]
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	2300      	movs	r3, #0
 8007002:	460a      	mov	r2, r1
 8007004:	4910      	ldr	r1, [pc, #64]	; (8007048 <xTimerCreateTimerTask+0x84>)
 8007006:	4811      	ldr	r0, [pc, #68]	; (800704c <xTimerCreateTimerTask+0x88>)
 8007008:	f7ff f888 	bl	800611c <xTaskCreateStatic>
 800700c:	4603      	mov	r3, r0
 800700e:	4a10      	ldr	r2, [pc, #64]	; (8007050 <xTimerCreateTimerTask+0x8c>)
 8007010:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007012:	4b0f      	ldr	r3, [pc, #60]	; (8007050 <xTimerCreateTimerTask+0x8c>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d001      	beq.n	800701e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800701a:	2301      	movs	r3, #1
 800701c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10a      	bne.n	800703a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007028:	f383 8811 	msr	BASEPRI, r3
 800702c:	f3bf 8f6f 	isb	sy
 8007030:	f3bf 8f4f 	dsb	sy
 8007034:	613b      	str	r3, [r7, #16]
}
 8007036:	bf00      	nop
 8007038:	e7fe      	b.n	8007038 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800703a:	697b      	ldr	r3, [r7, #20]
}
 800703c:	4618      	mov	r0, r3
 800703e:	3718      	adds	r7, #24
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	20000fc4 	.word	0x20000fc4
 8007048:	080082b8 	.word	0x080082b8
 800704c:	08007189 	.word	0x08007189
 8007050:	20000fc8 	.word	0x20000fc8

08007054 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b08a      	sub	sp, #40	; 0x28
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
 8007060:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007062:	2300      	movs	r3, #0
 8007064:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d10a      	bne.n	8007082 <xTimerGenericCommand+0x2e>
	__asm volatile
 800706c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007070:	f383 8811 	msr	BASEPRI, r3
 8007074:	f3bf 8f6f 	isb	sy
 8007078:	f3bf 8f4f 	dsb	sy
 800707c:	623b      	str	r3, [r7, #32]
}
 800707e:	bf00      	nop
 8007080:	e7fe      	b.n	8007080 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007082:	4b1a      	ldr	r3, [pc, #104]	; (80070ec <xTimerGenericCommand+0x98>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d02a      	beq.n	80070e0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	2b05      	cmp	r3, #5
 800709a:	dc18      	bgt.n	80070ce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800709c:	f7ff feb2 	bl	8006e04 <xTaskGetSchedulerState>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d109      	bne.n	80070ba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80070a6:	4b11      	ldr	r3, [pc, #68]	; (80070ec <xTimerGenericCommand+0x98>)
 80070a8:	6818      	ldr	r0, [r3, #0]
 80070aa:	f107 0110 	add.w	r1, r7, #16
 80070ae:	2300      	movs	r3, #0
 80070b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070b2:	f7fe fc4b 	bl	800594c <xQueueGenericSend>
 80070b6:	6278      	str	r0, [r7, #36]	; 0x24
 80070b8:	e012      	b.n	80070e0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80070ba:	4b0c      	ldr	r3, [pc, #48]	; (80070ec <xTimerGenericCommand+0x98>)
 80070bc:	6818      	ldr	r0, [r3, #0]
 80070be:	f107 0110 	add.w	r1, r7, #16
 80070c2:	2300      	movs	r3, #0
 80070c4:	2200      	movs	r2, #0
 80070c6:	f7fe fc41 	bl	800594c <xQueueGenericSend>
 80070ca:	6278      	str	r0, [r7, #36]	; 0x24
 80070cc:	e008      	b.n	80070e0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80070ce:	4b07      	ldr	r3, [pc, #28]	; (80070ec <xTimerGenericCommand+0x98>)
 80070d0:	6818      	ldr	r0, [r3, #0]
 80070d2:	f107 0110 	add.w	r1, r7, #16
 80070d6:	2300      	movs	r3, #0
 80070d8:	683a      	ldr	r2, [r7, #0]
 80070da:	f7fe fd35 	bl	8005b48 <xQueueGenericSendFromISR>
 80070de:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80070e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3728      	adds	r7, #40	; 0x28
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	20000fc4 	.word	0x20000fc4

080070f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b088      	sub	sp, #32
 80070f4:	af02      	add	r7, sp, #8
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070fa:	4b22      	ldr	r3, [pc, #136]	; (8007184 <prvProcessExpiredTimer+0x94>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	3304      	adds	r3, #4
 8007108:	4618      	mov	r0, r3
 800710a:	f7fe faf1 	bl	80056f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007114:	f003 0304 	and.w	r3, r3, #4
 8007118:	2b00      	cmp	r3, #0
 800711a:	d022      	beq.n	8007162 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	699a      	ldr	r2, [r3, #24]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	18d1      	adds	r1, r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	683a      	ldr	r2, [r7, #0]
 8007128:	6978      	ldr	r0, [r7, #20]
 800712a:	f000 f8d1 	bl	80072d0 <prvInsertTimerInActiveList>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d01f      	beq.n	8007174 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007134:	2300      	movs	r3, #0
 8007136:	9300      	str	r3, [sp, #0]
 8007138:	2300      	movs	r3, #0
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	2100      	movs	r1, #0
 800713e:	6978      	ldr	r0, [r7, #20]
 8007140:	f7ff ff88 	bl	8007054 <xTimerGenericCommand>
 8007144:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d113      	bne.n	8007174 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800714c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007150:	f383 8811 	msr	BASEPRI, r3
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	60fb      	str	r3, [r7, #12]
}
 800715e:	bf00      	nop
 8007160:	e7fe      	b.n	8007160 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007168:	f023 0301 	bic.w	r3, r3, #1
 800716c:	b2da      	uxtb	r2, r3
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	6a1b      	ldr	r3, [r3, #32]
 8007178:	6978      	ldr	r0, [r7, #20]
 800717a:	4798      	blx	r3
}
 800717c:	bf00      	nop
 800717e:	3718      	adds	r7, #24
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	20000fbc 	.word	0x20000fbc

08007188 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007190:	f107 0308 	add.w	r3, r7, #8
 8007194:	4618      	mov	r0, r3
 8007196:	f000 f857 	bl	8007248 <prvGetNextExpireTime>
 800719a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	4619      	mov	r1, r3
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f000 f803 	bl	80071ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80071a6:	f000 f8d5 	bl	8007354 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071aa:	e7f1      	b.n	8007190 <prvTimerTask+0x8>

080071ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80071b6:	f7ff fa11 	bl	80065dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80071ba:	f107 0308 	add.w	r3, r7, #8
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 f866 	bl	8007290 <prvSampleTimeNow>
 80071c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d130      	bne.n	800722e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d10a      	bne.n	80071e8 <prvProcessTimerOrBlockTask+0x3c>
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d806      	bhi.n	80071e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80071da:	f7ff fa0d 	bl	80065f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80071de:	68f9      	ldr	r1, [r7, #12]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f7ff ff85 	bl	80070f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80071e6:	e024      	b.n	8007232 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d008      	beq.n	8007200 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80071ee:	4b13      	ldr	r3, [pc, #76]	; (800723c <prvProcessTimerOrBlockTask+0x90>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d101      	bne.n	80071fc <prvProcessTimerOrBlockTask+0x50>
 80071f8:	2301      	movs	r3, #1
 80071fa:	e000      	b.n	80071fe <prvProcessTimerOrBlockTask+0x52>
 80071fc:	2300      	movs	r3, #0
 80071fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007200:	4b0f      	ldr	r3, [pc, #60]	; (8007240 <prvProcessTimerOrBlockTask+0x94>)
 8007202:	6818      	ldr	r0, [r3, #0]
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	4619      	mov	r1, r3
 800720e:	f7fe ff51 	bl	80060b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007212:	f7ff f9f1 	bl	80065f8 <xTaskResumeAll>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d10a      	bne.n	8007232 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800721c:	4b09      	ldr	r3, [pc, #36]	; (8007244 <prvProcessTimerOrBlockTask+0x98>)
 800721e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007222:	601a      	str	r2, [r3, #0]
 8007224:	f3bf 8f4f 	dsb	sy
 8007228:	f3bf 8f6f 	isb	sy
}
 800722c:	e001      	b.n	8007232 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800722e:	f7ff f9e3 	bl	80065f8 <xTaskResumeAll>
}
 8007232:	bf00      	nop
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	20000fc0 	.word	0x20000fc0
 8007240:	20000fc4 	.word	0x20000fc4
 8007244:	e000ed04 	.word	0xe000ed04

08007248 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007250:	4b0e      	ldr	r3, [pc, #56]	; (800728c <prvGetNextExpireTime+0x44>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d101      	bne.n	800725e <prvGetNextExpireTime+0x16>
 800725a:	2201      	movs	r2, #1
 800725c:	e000      	b.n	8007260 <prvGetNextExpireTime+0x18>
 800725e:	2200      	movs	r2, #0
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d105      	bne.n	8007278 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800726c:	4b07      	ldr	r3, [pc, #28]	; (800728c <prvGetNextExpireTime+0x44>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	60fb      	str	r3, [r7, #12]
 8007276:	e001      	b.n	800727c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007278:	2300      	movs	r3, #0
 800727a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800727c:	68fb      	ldr	r3, [r7, #12]
}
 800727e:	4618      	mov	r0, r3
 8007280:	3714      	adds	r7, #20
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop
 800728c:	20000fbc 	.word	0x20000fbc

08007290 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007298:	f7ff fa4c 	bl	8006734 <xTaskGetTickCount>
 800729c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800729e:	4b0b      	ldr	r3, [pc, #44]	; (80072cc <prvSampleTimeNow+0x3c>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d205      	bcs.n	80072b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80072a8:	f000 f936 	bl	8007518 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	601a      	str	r2, [r3, #0]
 80072b2:	e002      	b.n	80072ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80072ba:	4a04      	ldr	r2, [pc, #16]	; (80072cc <prvSampleTimeNow+0x3c>)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80072c0:	68fb      	ldr	r3, [r7, #12]
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	20000fcc 	.word	0x20000fcc

080072d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]
 80072dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80072de:	2300      	movs	r3, #0
 80072e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	68ba      	ldr	r2, [r7, #8]
 80072e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80072ee:	68ba      	ldr	r2, [r7, #8]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d812      	bhi.n	800731c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	1ad2      	subs	r2, r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	429a      	cmp	r2, r3
 8007302:	d302      	bcc.n	800730a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007304:	2301      	movs	r3, #1
 8007306:	617b      	str	r3, [r7, #20]
 8007308:	e01b      	b.n	8007342 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800730a:	4b10      	ldr	r3, [pc, #64]	; (800734c <prvInsertTimerInActiveList+0x7c>)
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	3304      	adds	r3, #4
 8007312:	4619      	mov	r1, r3
 8007314:	4610      	mov	r0, r2
 8007316:	f7fe f9b2 	bl	800567e <vListInsert>
 800731a:	e012      	b.n	8007342 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	429a      	cmp	r2, r3
 8007322:	d206      	bcs.n	8007332 <prvInsertTimerInActiveList+0x62>
 8007324:	68ba      	ldr	r2, [r7, #8]
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	429a      	cmp	r2, r3
 800732a:	d302      	bcc.n	8007332 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800732c:	2301      	movs	r3, #1
 800732e:	617b      	str	r3, [r7, #20]
 8007330:	e007      	b.n	8007342 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007332:	4b07      	ldr	r3, [pc, #28]	; (8007350 <prvInsertTimerInActiveList+0x80>)
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	3304      	adds	r3, #4
 800733a:	4619      	mov	r1, r3
 800733c:	4610      	mov	r0, r2
 800733e:	f7fe f99e 	bl	800567e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007342:	697b      	ldr	r3, [r7, #20]
}
 8007344:	4618      	mov	r0, r3
 8007346:	3718      	adds	r7, #24
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	20000fc0 	.word	0x20000fc0
 8007350:	20000fbc 	.word	0x20000fbc

08007354 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b08e      	sub	sp, #56	; 0x38
 8007358:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800735a:	e0ca      	b.n	80074f2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	da18      	bge.n	8007394 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007362:	1d3b      	adds	r3, r7, #4
 8007364:	3304      	adds	r3, #4
 8007366:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10a      	bne.n	8007384 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800736e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007372:	f383 8811 	msr	BASEPRI, r3
 8007376:	f3bf 8f6f 	isb	sy
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	61fb      	str	r3, [r7, #28]
}
 8007380:	bf00      	nop
 8007382:	e7fe      	b.n	8007382 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800738a:	6850      	ldr	r0, [r2, #4]
 800738c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800738e:	6892      	ldr	r2, [r2, #8]
 8007390:	4611      	mov	r1, r2
 8007392:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	f2c0 80ab 	blt.w	80074f2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80073a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a2:	695b      	ldr	r3, [r3, #20]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d004      	beq.n	80073b2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073aa:	3304      	adds	r3, #4
 80073ac:	4618      	mov	r0, r3
 80073ae:	f7fe f99f 	bl	80056f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80073b2:	463b      	mov	r3, r7
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7ff ff6b 	bl	8007290 <prvSampleTimeNow>
 80073ba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b09      	cmp	r3, #9
 80073c0:	f200 8096 	bhi.w	80074f0 <prvProcessReceivedCommands+0x19c>
 80073c4:	a201      	add	r2, pc, #4	; (adr r2, 80073cc <prvProcessReceivedCommands+0x78>)
 80073c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ca:	bf00      	nop
 80073cc:	080073f5 	.word	0x080073f5
 80073d0:	080073f5 	.word	0x080073f5
 80073d4:	080073f5 	.word	0x080073f5
 80073d8:	08007469 	.word	0x08007469
 80073dc:	0800747d 	.word	0x0800747d
 80073e0:	080074c7 	.word	0x080074c7
 80073e4:	080073f5 	.word	0x080073f5
 80073e8:	080073f5 	.word	0x080073f5
 80073ec:	08007469 	.word	0x08007469
 80073f0:	0800747d 	.word	0x0800747d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80073f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073fa:	f043 0301 	orr.w	r3, r3, #1
 80073fe:	b2da      	uxtb	r2, r3
 8007400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007402:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007406:	68ba      	ldr	r2, [r7, #8]
 8007408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	18d1      	adds	r1, r2, r3
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007414:	f7ff ff5c 	bl	80072d0 <prvInsertTimerInActiveList>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d069      	beq.n	80074f2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800741e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007420:	6a1b      	ldr	r3, [r3, #32]
 8007422:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007424:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007428:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800742c:	f003 0304 	and.w	r3, r3, #4
 8007430:	2b00      	cmp	r3, #0
 8007432:	d05e      	beq.n	80074f2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	441a      	add	r2, r3
 800743c:	2300      	movs	r3, #0
 800743e:	9300      	str	r3, [sp, #0]
 8007440:	2300      	movs	r3, #0
 8007442:	2100      	movs	r1, #0
 8007444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007446:	f7ff fe05 	bl	8007054 <xTimerGenericCommand>
 800744a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800744c:	6a3b      	ldr	r3, [r7, #32]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d14f      	bne.n	80074f2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007456:	f383 8811 	msr	BASEPRI, r3
 800745a:	f3bf 8f6f 	isb	sy
 800745e:	f3bf 8f4f 	dsb	sy
 8007462:	61bb      	str	r3, [r7, #24]
}
 8007464:	bf00      	nop
 8007466:	e7fe      	b.n	8007466 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800746e:	f023 0301 	bic.w	r3, r3, #1
 8007472:	b2da      	uxtb	r2, r3
 8007474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007476:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800747a:	e03a      	b.n	80074f2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800747c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007482:	f043 0301 	orr.w	r3, r3, #1
 8007486:	b2da      	uxtb	r2, r3
 8007488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007492:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d10a      	bne.n	80074b2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800749c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a0:	f383 8811 	msr	BASEPRI, r3
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	617b      	str	r3, [r7, #20]
}
 80074ae:	bf00      	nop
 80074b0:	e7fe      	b.n	80074b0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80074b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b4:	699a      	ldr	r2, [r3, #24]
 80074b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b8:	18d1      	adds	r1, r2, r3
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074c0:	f7ff ff06 	bl	80072d0 <prvInsertTimerInActiveList>
					break;
 80074c4:	e015      	b.n	80074f2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80074c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074cc:	f003 0302 	and.w	r3, r3, #2
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d103      	bne.n	80074dc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80074d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074d6:	f000 fbdf 	bl	8007c98 <vPortFree>
 80074da:	e00a      	b.n	80074f2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074e2:	f023 0301 	bic.w	r3, r3, #1
 80074e6:	b2da      	uxtb	r2, r3
 80074e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80074ee:	e000      	b.n	80074f2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80074f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80074f2:	4b08      	ldr	r3, [pc, #32]	; (8007514 <prvProcessReceivedCommands+0x1c0>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	1d39      	adds	r1, r7, #4
 80074f8:	2200      	movs	r2, #0
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fe fbc0 	bl	8005c80 <xQueueReceive>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	f47f af2a 	bne.w	800735c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007508:	bf00      	nop
 800750a:	bf00      	nop
 800750c:	3730      	adds	r7, #48	; 0x30
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	20000fc4 	.word	0x20000fc4

08007518 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b088      	sub	sp, #32
 800751c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800751e:	e048      	b.n	80075b2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007520:	4b2d      	ldr	r3, [pc, #180]	; (80075d8 <prvSwitchTimerLists+0xc0>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800752a:	4b2b      	ldr	r3, [pc, #172]	; (80075d8 <prvSwitchTimerLists+0xc0>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	3304      	adds	r3, #4
 8007538:	4618      	mov	r0, r3
 800753a:	f7fe f8d9 	bl	80056f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6a1b      	ldr	r3, [r3, #32]
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800754c:	f003 0304 	and.w	r3, r3, #4
 8007550:	2b00      	cmp	r3, #0
 8007552:	d02e      	beq.n	80075b2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	699b      	ldr	r3, [r3, #24]
 8007558:	693a      	ldr	r2, [r7, #16]
 800755a:	4413      	add	r3, r2
 800755c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	429a      	cmp	r2, r3
 8007564:	d90e      	bls.n	8007584 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	68ba      	ldr	r2, [r7, #8]
 800756a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007572:	4b19      	ldr	r3, [pc, #100]	; (80075d8 <prvSwitchTimerLists+0xc0>)
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	3304      	adds	r3, #4
 800757a:	4619      	mov	r1, r3
 800757c:	4610      	mov	r0, r2
 800757e:	f7fe f87e 	bl	800567e <vListInsert>
 8007582:	e016      	b.n	80075b2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007584:	2300      	movs	r3, #0
 8007586:	9300      	str	r3, [sp, #0]
 8007588:	2300      	movs	r3, #0
 800758a:	693a      	ldr	r2, [r7, #16]
 800758c:	2100      	movs	r1, #0
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f7ff fd60 	bl	8007054 <xTimerGenericCommand>
 8007594:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d10a      	bne.n	80075b2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800759c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a0:	f383 8811 	msr	BASEPRI, r3
 80075a4:	f3bf 8f6f 	isb	sy
 80075a8:	f3bf 8f4f 	dsb	sy
 80075ac:	603b      	str	r3, [r7, #0]
}
 80075ae:	bf00      	nop
 80075b0:	e7fe      	b.n	80075b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075b2:	4b09      	ldr	r3, [pc, #36]	; (80075d8 <prvSwitchTimerLists+0xc0>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1b1      	bne.n	8007520 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80075bc:	4b06      	ldr	r3, [pc, #24]	; (80075d8 <prvSwitchTimerLists+0xc0>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80075c2:	4b06      	ldr	r3, [pc, #24]	; (80075dc <prvSwitchTimerLists+0xc4>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a04      	ldr	r2, [pc, #16]	; (80075d8 <prvSwitchTimerLists+0xc0>)
 80075c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80075ca:	4a04      	ldr	r2, [pc, #16]	; (80075dc <prvSwitchTimerLists+0xc4>)
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	6013      	str	r3, [r2, #0]
}
 80075d0:	bf00      	nop
 80075d2:	3718      	adds	r7, #24
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	20000fbc 	.word	0x20000fbc
 80075dc:	20000fc0 	.word	0x20000fc0

080075e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80075e6:	f000 f965 	bl	80078b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80075ea:	4b15      	ldr	r3, [pc, #84]	; (8007640 <prvCheckForValidListAndQueue+0x60>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d120      	bne.n	8007634 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80075f2:	4814      	ldr	r0, [pc, #80]	; (8007644 <prvCheckForValidListAndQueue+0x64>)
 80075f4:	f7fd fff2 	bl	80055dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80075f8:	4813      	ldr	r0, [pc, #76]	; (8007648 <prvCheckForValidListAndQueue+0x68>)
 80075fa:	f7fd ffef 	bl	80055dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80075fe:	4b13      	ldr	r3, [pc, #76]	; (800764c <prvCheckForValidListAndQueue+0x6c>)
 8007600:	4a10      	ldr	r2, [pc, #64]	; (8007644 <prvCheckForValidListAndQueue+0x64>)
 8007602:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007604:	4b12      	ldr	r3, [pc, #72]	; (8007650 <prvCheckForValidListAndQueue+0x70>)
 8007606:	4a10      	ldr	r2, [pc, #64]	; (8007648 <prvCheckForValidListAndQueue+0x68>)
 8007608:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800760a:	2300      	movs	r3, #0
 800760c:	9300      	str	r3, [sp, #0]
 800760e:	4b11      	ldr	r3, [pc, #68]	; (8007654 <prvCheckForValidListAndQueue+0x74>)
 8007610:	4a11      	ldr	r2, [pc, #68]	; (8007658 <prvCheckForValidListAndQueue+0x78>)
 8007612:	2110      	movs	r1, #16
 8007614:	200a      	movs	r0, #10
 8007616:	f7fe f8fd 	bl	8005814 <xQueueGenericCreateStatic>
 800761a:	4603      	mov	r3, r0
 800761c:	4a08      	ldr	r2, [pc, #32]	; (8007640 <prvCheckForValidListAndQueue+0x60>)
 800761e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007620:	4b07      	ldr	r3, [pc, #28]	; (8007640 <prvCheckForValidListAndQueue+0x60>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d005      	beq.n	8007634 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007628:	4b05      	ldr	r3, [pc, #20]	; (8007640 <prvCheckForValidListAndQueue+0x60>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	490b      	ldr	r1, [pc, #44]	; (800765c <prvCheckForValidListAndQueue+0x7c>)
 800762e:	4618      	mov	r0, r3
 8007630:	f7fe fd16 	bl	8006060 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007634:	f000 f96e 	bl	8007914 <vPortExitCritical>
}
 8007638:	bf00      	nop
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	20000fc4 	.word	0x20000fc4
 8007644:	20000f94 	.word	0x20000f94
 8007648:	20000fa8 	.word	0x20000fa8
 800764c:	20000fbc 	.word	0x20000fbc
 8007650:	20000fc0 	.word	0x20000fc0
 8007654:	20001070 	.word	0x20001070
 8007658:	20000fd0 	.word	0x20000fd0
 800765c:	080082c0 	.word	0x080082c0

08007660 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	3b04      	subs	r3, #4
 8007670:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007678:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	3b04      	subs	r3, #4
 800767e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	f023 0201 	bic.w	r2, r3, #1
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	3b04      	subs	r3, #4
 800768e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007690:	4a0c      	ldr	r2, [pc, #48]	; (80076c4 <pxPortInitialiseStack+0x64>)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	3b14      	subs	r3, #20
 800769a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	3b04      	subs	r3, #4
 80076a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f06f 0202 	mvn.w	r2, #2
 80076ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	3b20      	subs	r3, #32
 80076b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80076b6:	68fb      	ldr	r3, [r7, #12]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3714      	adds	r7, #20
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr
 80076c4:	080076c9 	.word	0x080076c9

080076c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80076ce:	2300      	movs	r3, #0
 80076d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80076d2:	4b12      	ldr	r3, [pc, #72]	; (800771c <prvTaskExitError+0x54>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076da:	d00a      	beq.n	80076f2 <prvTaskExitError+0x2a>
	__asm volatile
 80076dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e0:	f383 8811 	msr	BASEPRI, r3
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	f3bf 8f4f 	dsb	sy
 80076ec:	60fb      	str	r3, [r7, #12]
}
 80076ee:	bf00      	nop
 80076f0:	e7fe      	b.n	80076f0 <prvTaskExitError+0x28>
	__asm volatile
 80076f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	60bb      	str	r3, [r7, #8]
}
 8007704:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007706:	bf00      	nop
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d0fc      	beq.n	8007708 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800770e:	bf00      	nop
 8007710:	bf00      	nop
 8007712:	3714      	adds	r7, #20
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	20000048 	.word	0x20000048

08007720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007720:	4b07      	ldr	r3, [pc, #28]	; (8007740 <pxCurrentTCBConst2>)
 8007722:	6819      	ldr	r1, [r3, #0]
 8007724:	6808      	ldr	r0, [r1, #0]
 8007726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800772a:	f380 8809 	msr	PSP, r0
 800772e:	f3bf 8f6f 	isb	sy
 8007732:	f04f 0000 	mov.w	r0, #0
 8007736:	f380 8811 	msr	BASEPRI, r0
 800773a:	4770      	bx	lr
 800773c:	f3af 8000 	nop.w

08007740 <pxCurrentTCBConst2>:
 8007740:	20000a94 	.word	0x20000a94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007744:	bf00      	nop
 8007746:	bf00      	nop

08007748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007748:	4808      	ldr	r0, [pc, #32]	; (800776c <prvPortStartFirstTask+0x24>)
 800774a:	6800      	ldr	r0, [r0, #0]
 800774c:	6800      	ldr	r0, [r0, #0]
 800774e:	f380 8808 	msr	MSP, r0
 8007752:	f04f 0000 	mov.w	r0, #0
 8007756:	f380 8814 	msr	CONTROL, r0
 800775a:	b662      	cpsie	i
 800775c:	b661      	cpsie	f
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	df00      	svc	0
 8007768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800776a:	bf00      	nop
 800776c:	e000ed08 	.word	0xe000ed08

08007770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007776:	4b46      	ldr	r3, [pc, #280]	; (8007890 <xPortStartScheduler+0x120>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a46      	ldr	r2, [pc, #280]	; (8007894 <xPortStartScheduler+0x124>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d10a      	bne.n	8007796 <xPortStartScheduler+0x26>
	__asm volatile
 8007780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007784:	f383 8811 	msr	BASEPRI, r3
 8007788:	f3bf 8f6f 	isb	sy
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	613b      	str	r3, [r7, #16]
}
 8007792:	bf00      	nop
 8007794:	e7fe      	b.n	8007794 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007796:	4b3e      	ldr	r3, [pc, #248]	; (8007890 <xPortStartScheduler+0x120>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a3f      	ldr	r2, [pc, #252]	; (8007898 <xPortStartScheduler+0x128>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d10a      	bne.n	80077b6 <xPortStartScheduler+0x46>
	__asm volatile
 80077a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a4:	f383 8811 	msr	BASEPRI, r3
 80077a8:	f3bf 8f6f 	isb	sy
 80077ac:	f3bf 8f4f 	dsb	sy
 80077b0:	60fb      	str	r3, [r7, #12]
}
 80077b2:	bf00      	nop
 80077b4:	e7fe      	b.n	80077b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80077b6:	4b39      	ldr	r3, [pc, #228]	; (800789c <xPortStartScheduler+0x12c>)
 80077b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	22ff      	movs	r2, #255	; 0xff
 80077c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80077d0:	78fb      	ldrb	r3, [r7, #3]
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80077d8:	b2da      	uxtb	r2, r3
 80077da:	4b31      	ldr	r3, [pc, #196]	; (80078a0 <xPortStartScheduler+0x130>)
 80077dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80077de:	4b31      	ldr	r3, [pc, #196]	; (80078a4 <xPortStartScheduler+0x134>)
 80077e0:	2207      	movs	r2, #7
 80077e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077e4:	e009      	b.n	80077fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80077e6:	4b2f      	ldr	r3, [pc, #188]	; (80078a4 <xPortStartScheduler+0x134>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	4a2d      	ldr	r2, [pc, #180]	; (80078a4 <xPortStartScheduler+0x134>)
 80077ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80077f0:	78fb      	ldrb	r3, [r7, #3]
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	005b      	lsls	r3, r3, #1
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077fa:	78fb      	ldrb	r3, [r7, #3]
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007802:	2b80      	cmp	r3, #128	; 0x80
 8007804:	d0ef      	beq.n	80077e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007806:	4b27      	ldr	r3, [pc, #156]	; (80078a4 <xPortStartScheduler+0x134>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f1c3 0307 	rsb	r3, r3, #7
 800780e:	2b04      	cmp	r3, #4
 8007810:	d00a      	beq.n	8007828 <xPortStartScheduler+0xb8>
	__asm volatile
 8007812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007816:	f383 8811 	msr	BASEPRI, r3
 800781a:	f3bf 8f6f 	isb	sy
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	60bb      	str	r3, [r7, #8]
}
 8007824:	bf00      	nop
 8007826:	e7fe      	b.n	8007826 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007828:	4b1e      	ldr	r3, [pc, #120]	; (80078a4 <xPortStartScheduler+0x134>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	021b      	lsls	r3, r3, #8
 800782e:	4a1d      	ldr	r2, [pc, #116]	; (80078a4 <xPortStartScheduler+0x134>)
 8007830:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007832:	4b1c      	ldr	r3, [pc, #112]	; (80078a4 <xPortStartScheduler+0x134>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800783a:	4a1a      	ldr	r2, [pc, #104]	; (80078a4 <xPortStartScheduler+0x134>)
 800783c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	b2da      	uxtb	r2, r3
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007846:	4b18      	ldr	r3, [pc, #96]	; (80078a8 <xPortStartScheduler+0x138>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a17      	ldr	r2, [pc, #92]	; (80078a8 <xPortStartScheduler+0x138>)
 800784c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007850:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007852:	4b15      	ldr	r3, [pc, #84]	; (80078a8 <xPortStartScheduler+0x138>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a14      	ldr	r2, [pc, #80]	; (80078a8 <xPortStartScheduler+0x138>)
 8007858:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800785c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800785e:	f000 f8dd 	bl	8007a1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007862:	4b12      	ldr	r3, [pc, #72]	; (80078ac <xPortStartScheduler+0x13c>)
 8007864:	2200      	movs	r2, #0
 8007866:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007868:	f000 f8fc 	bl	8007a64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800786c:	4b10      	ldr	r3, [pc, #64]	; (80078b0 <xPortStartScheduler+0x140>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a0f      	ldr	r2, [pc, #60]	; (80078b0 <xPortStartScheduler+0x140>)
 8007872:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007876:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007878:	f7ff ff66 	bl	8007748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800787c:	f7ff f824 	bl	80068c8 <vTaskSwitchContext>
	prvTaskExitError();
 8007880:	f7ff ff22 	bl	80076c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3718      	adds	r7, #24
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	e000ed00 	.word	0xe000ed00
 8007894:	410fc271 	.word	0x410fc271
 8007898:	410fc270 	.word	0x410fc270
 800789c:	e000e400 	.word	0xe000e400
 80078a0:	200010c0 	.word	0x200010c0
 80078a4:	200010c4 	.word	0x200010c4
 80078a8:	e000ed20 	.word	0xe000ed20
 80078ac:	20000048 	.word	0x20000048
 80078b0:	e000ef34 	.word	0xe000ef34

080078b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
	__asm volatile
 80078ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078be:	f383 8811 	msr	BASEPRI, r3
 80078c2:	f3bf 8f6f 	isb	sy
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	607b      	str	r3, [r7, #4]
}
 80078cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80078ce:	4b0f      	ldr	r3, [pc, #60]	; (800790c <vPortEnterCritical+0x58>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	3301      	adds	r3, #1
 80078d4:	4a0d      	ldr	r2, [pc, #52]	; (800790c <vPortEnterCritical+0x58>)
 80078d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80078d8:	4b0c      	ldr	r3, [pc, #48]	; (800790c <vPortEnterCritical+0x58>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d10f      	bne.n	8007900 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80078e0:	4b0b      	ldr	r3, [pc, #44]	; (8007910 <vPortEnterCritical+0x5c>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00a      	beq.n	8007900 <vPortEnterCritical+0x4c>
	__asm volatile
 80078ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ee:	f383 8811 	msr	BASEPRI, r3
 80078f2:	f3bf 8f6f 	isb	sy
 80078f6:	f3bf 8f4f 	dsb	sy
 80078fa:	603b      	str	r3, [r7, #0]
}
 80078fc:	bf00      	nop
 80078fe:	e7fe      	b.n	80078fe <vPortEnterCritical+0x4a>
	}
}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr
 800790c:	20000048 	.word	0x20000048
 8007910:	e000ed04 	.word	0xe000ed04

08007914 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800791a:	4b12      	ldr	r3, [pc, #72]	; (8007964 <vPortExitCritical+0x50>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10a      	bne.n	8007938 <vPortExitCritical+0x24>
	__asm volatile
 8007922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007926:	f383 8811 	msr	BASEPRI, r3
 800792a:	f3bf 8f6f 	isb	sy
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	607b      	str	r3, [r7, #4]
}
 8007934:	bf00      	nop
 8007936:	e7fe      	b.n	8007936 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007938:	4b0a      	ldr	r3, [pc, #40]	; (8007964 <vPortExitCritical+0x50>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3b01      	subs	r3, #1
 800793e:	4a09      	ldr	r2, [pc, #36]	; (8007964 <vPortExitCritical+0x50>)
 8007940:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007942:	4b08      	ldr	r3, [pc, #32]	; (8007964 <vPortExitCritical+0x50>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d105      	bne.n	8007956 <vPortExitCritical+0x42>
 800794a:	2300      	movs	r3, #0
 800794c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	f383 8811 	msr	BASEPRI, r3
}
 8007954:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007956:	bf00      	nop
 8007958:	370c      	adds	r7, #12
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	20000048 	.word	0x20000048
	...

08007970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007970:	f3ef 8009 	mrs	r0, PSP
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	4b15      	ldr	r3, [pc, #84]	; (80079d0 <pxCurrentTCBConst>)
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	f01e 0f10 	tst.w	lr, #16
 8007980:	bf08      	it	eq
 8007982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800798a:	6010      	str	r0, [r2, #0]
 800798c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007990:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007994:	f380 8811 	msr	BASEPRI, r0
 8007998:	f3bf 8f4f 	dsb	sy
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	f7fe ff92 	bl	80068c8 <vTaskSwitchContext>
 80079a4:	f04f 0000 	mov.w	r0, #0
 80079a8:	f380 8811 	msr	BASEPRI, r0
 80079ac:	bc09      	pop	{r0, r3}
 80079ae:	6819      	ldr	r1, [r3, #0]
 80079b0:	6808      	ldr	r0, [r1, #0]
 80079b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b6:	f01e 0f10 	tst.w	lr, #16
 80079ba:	bf08      	it	eq
 80079bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80079c0:	f380 8809 	msr	PSP, r0
 80079c4:	f3bf 8f6f 	isb	sy
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	f3af 8000 	nop.w

080079d0 <pxCurrentTCBConst>:
 80079d0:	20000a94 	.word	0x20000a94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80079d4:	bf00      	nop
 80079d6:	bf00      	nop

080079d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
	__asm volatile
 80079de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	607b      	str	r3, [r7, #4]
}
 80079f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80079f2:	f7fe feaf 	bl	8006754 <xTaskIncrementTick>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d003      	beq.n	8007a04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80079fc:	4b06      	ldr	r3, [pc, #24]	; (8007a18 <xPortSysTickHandler+0x40>)
 80079fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a02:	601a      	str	r2, [r3, #0]
 8007a04:	2300      	movs	r3, #0
 8007a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	f383 8811 	msr	BASEPRI, r3
}
 8007a0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a10:	bf00      	nop
 8007a12:	3708      	adds	r7, #8
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	e000ed04 	.word	0xe000ed04

08007a1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a20:	4b0b      	ldr	r3, [pc, #44]	; (8007a50 <vPortSetupTimerInterrupt+0x34>)
 8007a22:	2200      	movs	r2, #0
 8007a24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a26:	4b0b      	ldr	r3, [pc, #44]	; (8007a54 <vPortSetupTimerInterrupt+0x38>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a2c:	4b0a      	ldr	r3, [pc, #40]	; (8007a58 <vPortSetupTimerInterrupt+0x3c>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a0a      	ldr	r2, [pc, #40]	; (8007a5c <vPortSetupTimerInterrupt+0x40>)
 8007a32:	fba2 2303 	umull	r2, r3, r2, r3
 8007a36:	099b      	lsrs	r3, r3, #6
 8007a38:	4a09      	ldr	r2, [pc, #36]	; (8007a60 <vPortSetupTimerInterrupt+0x44>)
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a3e:	4b04      	ldr	r3, [pc, #16]	; (8007a50 <vPortSetupTimerInterrupt+0x34>)
 8007a40:	2207      	movs	r2, #7
 8007a42:	601a      	str	r2, [r3, #0]
}
 8007a44:	bf00      	nop
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	e000e010 	.word	0xe000e010
 8007a54:	e000e018 	.word	0xe000e018
 8007a58:	20000000 	.word	0x20000000
 8007a5c:	10624dd3 	.word	0x10624dd3
 8007a60:	e000e014 	.word	0xe000e014

08007a64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007a64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007a74 <vPortEnableVFP+0x10>
 8007a68:	6801      	ldr	r1, [r0, #0]
 8007a6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007a6e:	6001      	str	r1, [r0, #0]
 8007a70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007a72:	bf00      	nop
 8007a74:	e000ed88 	.word	0xe000ed88

08007a78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007a7e:	f3ef 8305 	mrs	r3, IPSR
 8007a82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2b0f      	cmp	r3, #15
 8007a88:	d914      	bls.n	8007ab4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007a8a:	4a17      	ldr	r2, [pc, #92]	; (8007ae8 <vPortValidateInterruptPriority+0x70>)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	4413      	add	r3, r2
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007a94:	4b15      	ldr	r3, [pc, #84]	; (8007aec <vPortValidateInterruptPriority+0x74>)
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	7afa      	ldrb	r2, [r7, #11]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d20a      	bcs.n	8007ab4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa2:	f383 8811 	msr	BASEPRI, r3
 8007aa6:	f3bf 8f6f 	isb	sy
 8007aaa:	f3bf 8f4f 	dsb	sy
 8007aae:	607b      	str	r3, [r7, #4]
}
 8007ab0:	bf00      	nop
 8007ab2:	e7fe      	b.n	8007ab2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ab4:	4b0e      	ldr	r3, [pc, #56]	; (8007af0 <vPortValidateInterruptPriority+0x78>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007abc:	4b0d      	ldr	r3, [pc, #52]	; (8007af4 <vPortValidateInterruptPriority+0x7c>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d90a      	bls.n	8007ada <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac8:	f383 8811 	msr	BASEPRI, r3
 8007acc:	f3bf 8f6f 	isb	sy
 8007ad0:	f3bf 8f4f 	dsb	sy
 8007ad4:	603b      	str	r3, [r7, #0]
}
 8007ad6:	bf00      	nop
 8007ad8:	e7fe      	b.n	8007ad8 <vPortValidateInterruptPriority+0x60>
	}
 8007ada:	bf00      	nop
 8007adc:	3714      	adds	r7, #20
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	e000e3f0 	.word	0xe000e3f0
 8007aec:	200010c0 	.word	0x200010c0
 8007af0:	e000ed0c 	.word	0xe000ed0c
 8007af4:	200010c4 	.word	0x200010c4

08007af8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b08a      	sub	sp, #40	; 0x28
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b00:	2300      	movs	r3, #0
 8007b02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b04:	f7fe fd6a 	bl	80065dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b08:	4b5d      	ldr	r3, [pc, #372]	; (8007c80 <pvPortMalloc+0x188>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d101      	bne.n	8007b14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b10:	f000 f924 	bl	8007d5c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b14:	4b5b      	ldr	r3, [pc, #364]	; (8007c84 <pvPortMalloc+0x18c>)
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f040 8093 	bne.w	8007c48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d01d      	beq.n	8007b64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007b28:	2208      	movs	r2, #8
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f003 0307 	and.w	r3, r3, #7
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d014      	beq.n	8007b64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f023 0307 	bic.w	r3, r3, #7
 8007b40:	3308      	adds	r3, #8
 8007b42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f003 0307 	and.w	r3, r3, #7
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00a      	beq.n	8007b64 <pvPortMalloc+0x6c>
	__asm volatile
 8007b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	617b      	str	r3, [r7, #20]
}
 8007b60:	bf00      	nop
 8007b62:	e7fe      	b.n	8007b62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d06e      	beq.n	8007c48 <pvPortMalloc+0x150>
 8007b6a:	4b47      	ldr	r3, [pc, #284]	; (8007c88 <pvPortMalloc+0x190>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d869      	bhi.n	8007c48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007b74:	4b45      	ldr	r3, [pc, #276]	; (8007c8c <pvPortMalloc+0x194>)
 8007b76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007b78:	4b44      	ldr	r3, [pc, #272]	; (8007c8c <pvPortMalloc+0x194>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b7e:	e004      	b.n	8007b8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d903      	bls.n	8007b9c <pvPortMalloc+0xa4>
 8007b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1f1      	bne.n	8007b80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007b9c:	4b38      	ldr	r3, [pc, #224]	; (8007c80 <pvPortMalloc+0x188>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d050      	beq.n	8007c48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ba6:	6a3b      	ldr	r3, [r7, #32]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2208      	movs	r2, #8
 8007bac:	4413      	add	r3, r2
 8007bae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	6a3b      	ldr	r3, [r7, #32]
 8007bb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bba:	685a      	ldr	r2, [r3, #4]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	1ad2      	subs	r2, r2, r3
 8007bc0:	2308      	movs	r3, #8
 8007bc2:	005b      	lsls	r3, r3, #1
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d91f      	bls.n	8007c08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4413      	add	r3, r2
 8007bce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	f003 0307 	and.w	r3, r3, #7
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00a      	beq.n	8007bf0 <pvPortMalloc+0xf8>
	__asm volatile
 8007bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bde:	f383 8811 	msr	BASEPRI, r3
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	f3bf 8f4f 	dsb	sy
 8007bea:	613b      	str	r3, [r7, #16]
}
 8007bec:	bf00      	nop
 8007bee:	e7fe      	b.n	8007bee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf2:	685a      	ldr	r2, [r3, #4]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	1ad2      	subs	r2, r2, r3
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c02:	69b8      	ldr	r0, [r7, #24]
 8007c04:	f000 f90c 	bl	8007e20 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c08:	4b1f      	ldr	r3, [pc, #124]	; (8007c88 <pvPortMalloc+0x190>)
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	4a1d      	ldr	r2, [pc, #116]	; (8007c88 <pvPortMalloc+0x190>)
 8007c14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c16:	4b1c      	ldr	r3, [pc, #112]	; (8007c88 <pvPortMalloc+0x190>)
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	4b1d      	ldr	r3, [pc, #116]	; (8007c90 <pvPortMalloc+0x198>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d203      	bcs.n	8007c2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c22:	4b19      	ldr	r3, [pc, #100]	; (8007c88 <pvPortMalloc+0x190>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a1a      	ldr	r2, [pc, #104]	; (8007c90 <pvPortMalloc+0x198>)
 8007c28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	4b15      	ldr	r3, [pc, #84]	; (8007c84 <pvPortMalloc+0x18c>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	431a      	orrs	r2, r3
 8007c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007c3e:	4b15      	ldr	r3, [pc, #84]	; (8007c94 <pvPortMalloc+0x19c>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	3301      	adds	r3, #1
 8007c44:	4a13      	ldr	r2, [pc, #76]	; (8007c94 <pvPortMalloc+0x19c>)
 8007c46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c48:	f7fe fcd6 	bl	80065f8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d101      	bne.n	8007c56 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8007c52:	f7f8 fc5d 	bl	8000510 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	f003 0307 	and.w	r3, r3, #7
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00a      	beq.n	8007c76 <pvPortMalloc+0x17e>
	__asm volatile
 8007c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	60fb      	str	r3, [r7, #12]
}
 8007c72:	bf00      	nop
 8007c74:	e7fe      	b.n	8007c74 <pvPortMalloc+0x17c>
	return pvReturn;
 8007c76:	69fb      	ldr	r3, [r7, #28]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3728      	adds	r7, #40	; 0x28
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	200090d0 	.word	0x200090d0
 8007c84:	200090e4 	.word	0x200090e4
 8007c88:	200090d4 	.word	0x200090d4
 8007c8c:	200090c8 	.word	0x200090c8
 8007c90:	200090d8 	.word	0x200090d8
 8007c94:	200090dc 	.word	0x200090dc

08007c98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d04d      	beq.n	8007d46 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007caa:	2308      	movs	r3, #8
 8007cac:	425b      	negs	r3, r3
 8007cae:	697a      	ldr	r2, [r7, #20]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	685a      	ldr	r2, [r3, #4]
 8007cbc:	4b24      	ldr	r3, [pc, #144]	; (8007d50 <vPortFree+0xb8>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10a      	bne.n	8007cdc <vPortFree+0x44>
	__asm volatile
 8007cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cca:	f383 8811 	msr	BASEPRI, r3
 8007cce:	f3bf 8f6f 	isb	sy
 8007cd2:	f3bf 8f4f 	dsb	sy
 8007cd6:	60fb      	str	r3, [r7, #12]
}
 8007cd8:	bf00      	nop
 8007cda:	e7fe      	b.n	8007cda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00a      	beq.n	8007cfa <vPortFree+0x62>
	__asm volatile
 8007ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce8:	f383 8811 	msr	BASEPRI, r3
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	60bb      	str	r3, [r7, #8]
}
 8007cf6:	bf00      	nop
 8007cf8:	e7fe      	b.n	8007cf8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	685a      	ldr	r2, [r3, #4]
 8007cfe:	4b14      	ldr	r3, [pc, #80]	; (8007d50 <vPortFree+0xb8>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4013      	ands	r3, r2
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d01e      	beq.n	8007d46 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d11a      	bne.n	8007d46 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	685a      	ldr	r2, [r3, #4]
 8007d14:	4b0e      	ldr	r3, [pc, #56]	; (8007d50 <vPortFree+0xb8>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	43db      	mvns	r3, r3
 8007d1a:	401a      	ands	r2, r3
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d20:	f7fe fc5c 	bl	80065dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	685a      	ldr	r2, [r3, #4]
 8007d28:	4b0a      	ldr	r3, [pc, #40]	; (8007d54 <vPortFree+0xbc>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	4a09      	ldr	r2, [pc, #36]	; (8007d54 <vPortFree+0xbc>)
 8007d30:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d32:	6938      	ldr	r0, [r7, #16]
 8007d34:	f000 f874 	bl	8007e20 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007d38:	4b07      	ldr	r3, [pc, #28]	; (8007d58 <vPortFree+0xc0>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	4a06      	ldr	r2, [pc, #24]	; (8007d58 <vPortFree+0xc0>)
 8007d40:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007d42:	f7fe fc59 	bl	80065f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d46:	bf00      	nop
 8007d48:	3718      	adds	r7, #24
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	200090e4 	.word	0x200090e4
 8007d54:	200090d4 	.word	0x200090d4
 8007d58:	200090e0 	.word	0x200090e0

08007d5c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d66:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d68:	4b27      	ldr	r3, [pc, #156]	; (8007e08 <prvHeapInit+0xac>)
 8007d6a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f003 0307 	and.w	r3, r3, #7
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00c      	beq.n	8007d90 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	3307      	adds	r3, #7
 8007d7a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f023 0307 	bic.w	r3, r3, #7
 8007d82:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	4a1f      	ldr	r2, [pc, #124]	; (8007e08 <prvHeapInit+0xac>)
 8007d8c:	4413      	add	r3, r2
 8007d8e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007d94:	4a1d      	ldr	r2, [pc, #116]	; (8007e0c <prvHeapInit+0xb0>)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007d9a:	4b1c      	ldr	r3, [pc, #112]	; (8007e0c <prvHeapInit+0xb0>)
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	4413      	add	r3, r2
 8007da6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007da8:	2208      	movs	r2, #8
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	1a9b      	subs	r3, r3, r2
 8007dae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f023 0307 	bic.w	r3, r3, #7
 8007db6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	4a15      	ldr	r2, [pc, #84]	; (8007e10 <prvHeapInit+0xb4>)
 8007dbc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007dbe:	4b14      	ldr	r3, [pc, #80]	; (8007e10 <prvHeapInit+0xb4>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007dc6:	4b12      	ldr	r3, [pc, #72]	; (8007e10 <prvHeapInit+0xb4>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	1ad2      	subs	r2, r2, r3
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ddc:	4b0c      	ldr	r3, [pc, #48]	; (8007e10 <prvHeapInit+0xb4>)
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	4a0a      	ldr	r2, [pc, #40]	; (8007e14 <prvHeapInit+0xb8>)
 8007dea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	4a09      	ldr	r2, [pc, #36]	; (8007e18 <prvHeapInit+0xbc>)
 8007df2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007df4:	4b09      	ldr	r3, [pc, #36]	; (8007e1c <prvHeapInit+0xc0>)
 8007df6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007dfa:	601a      	str	r2, [r3, #0]
}
 8007dfc:	bf00      	nop
 8007dfe:	3714      	adds	r7, #20
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr
 8007e08:	200010c8 	.word	0x200010c8
 8007e0c:	200090c8 	.word	0x200090c8
 8007e10:	200090d0 	.word	0x200090d0
 8007e14:	200090d8 	.word	0x200090d8
 8007e18:	200090d4 	.word	0x200090d4
 8007e1c:	200090e4 	.word	0x200090e4

08007e20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e20:	b480      	push	{r7}
 8007e22:	b085      	sub	sp, #20
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e28:	4b28      	ldr	r3, [pc, #160]	; (8007ecc <prvInsertBlockIntoFreeList+0xac>)
 8007e2a:	60fb      	str	r3, [r7, #12]
 8007e2c:	e002      	b.n	8007e34 <prvInsertBlockIntoFreeList+0x14>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	60fb      	str	r3, [r7, #12]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d8f7      	bhi.n	8007e2e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	68ba      	ldr	r2, [r7, #8]
 8007e48:	4413      	add	r3, r2
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d108      	bne.n	8007e62 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	685a      	ldr	r2, [r3, #4]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	441a      	add	r2, r3
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	68ba      	ldr	r2, [r7, #8]
 8007e6c:	441a      	add	r2, r3
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d118      	bne.n	8007ea8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	4b15      	ldr	r3, [pc, #84]	; (8007ed0 <prvInsertBlockIntoFreeList+0xb0>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d00d      	beq.n	8007e9e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	685a      	ldr	r2, [r3, #4]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	441a      	add	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	601a      	str	r2, [r3, #0]
 8007e9c:	e008      	b.n	8007eb0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007e9e:	4b0c      	ldr	r3, [pc, #48]	; (8007ed0 <prvInsertBlockIntoFreeList+0xb0>)
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	601a      	str	r2, [r3, #0]
 8007ea6:	e003      	b.n	8007eb0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d002      	beq.n	8007ebe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ebe:	bf00      	nop
 8007ec0:	3714      	adds	r7, #20
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop
 8007ecc:	200090c8 	.word	0x200090c8
 8007ed0:	200090d0 	.word	0x200090d0

08007ed4 <cbuff_init>:

extern UART_HandleTypeDef huart1;


CBUFF_RETURN_STATUS cbuff_init(CIRCULAR_BUFFER *cb, CBUFF_UINT8 *data, CBUFF_UINT32 size)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]
    if((cb == NULL) || (data == NULL))
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d002      	beq.n	8007eec <cbuff_init+0x18>
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d101      	bne.n	8007ef0 <cbuff_init+0x1c>
    {
        return CBUFF_PARAM_NOT_PROVIDED_FAILURE;
 8007eec:	2301      	movs	r3, #1
 8007eee:	e01a      	b.n	8007f26 <cbuff_init+0x52>
    }

    cb->buffer = data;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	68ba      	ldr	r2, [r7, #8]
 8007ef4:	601a      	str	r2, [r3, #0]
    cb->size = size;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	609a      	str	r2, [r3, #8]
    cb->buffer_end = (CBUFF_UINT8 *)cb->buffer + size;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	441a      	add	r2, r3
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	605a      	str	r2, [r3, #4]
    cb->count = 0;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	60da      	str	r2, [r3, #12]
    cb->read = cb->buffer;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	611a      	str	r2, [r3, #16]
    cb->write = cb->buffer;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	615a      	str	r2, [r3, #20]

    cbuff_discard(cb);
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f000 f805 	bl	8007f2e <cbuff_discard>

    return CBUFF_SUCCESS;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3710      	adds	r7, #16
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <cbuff_discard>:


static CBUFF_RETURN_STATUS cbuff_discard(CIRCULAR_BUFFER *cb)
{
 8007f2e:	b480      	push	{r7}
 8007f30:	b083      	sub	sp, #12
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
//     while (index < cb->size)
//     {
//         *(cb + index) = 0;
//         index++;
//     }
    return CBUFF_SUCCESS;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <uartwrpr_rx>:

static void uartwrpr_rx(CIRCULAR_BUFFER *cb, uint16_t nbytes)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	807b      	strh	r3, [r7, #2]
	uint8_t data_at_tail = 0;
 8007f50:	2300      	movs	r3, #0
 8007f52:	73fb      	strb	r3, [r7, #15]
	uint8_t data_at_front = 0;
 8007f54:	2300      	movs	r3, #0
 8007f56:	73bb      	strb	r3, [r7, #14]

	if (cb->count + nbytes <= cb->size)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	68da      	ldr	r2, [r3, #12]
 8007f5c:	887b      	ldrh	r3, [r7, #2]
 8007f5e:	441a      	add	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d849      	bhi.n	8007ffc <uartwrpr_rx+0xb8>
	{
		if ((uint8_t *)cb->write + nbytes > (uint8_t *)cb->buffer_end)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	695a      	ldr	r2, [r3, #20]
 8007f6c:	887b      	ldrh	r3, [r7, #2]
 8007f6e:	441a      	add	r2, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d927      	bls.n	8007fc8 <uartwrpr_rx+0x84>
		{
			data_at_tail = (uint8_t *)cb->buffer_end - (uint8_t *)cb->write;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	685a      	ldr	r2, [r3, #4]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	695b      	ldr	r3, [r3, #20]
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	73fb      	strb	r3, [r7, #15]
			data_at_front = nbytes - data_at_tail;
 8007f84:	887b      	ldrh	r3, [r7, #2]
 8007f86:	b2da      	uxtb	r2, r3
 8007f88:	7bfb      	ldrb	r3, [r7, #15]
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	73bb      	strb	r3, [r7, #14]
			memcpy (cb->write, uartrxDataBuffer, data_at_tail);  // copy data in that remaining space
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	695b      	ldr	r3, [r3, #20]
 8007f92:	7bfa      	ldrb	r2, [r7, #15]
 8007f94:	491e      	ldr	r1, [pc, #120]	; (8008010 <uartwrpr_rx+0xcc>)
 8007f96:	4618      	mov	r0, r3
 8007f98:	f000 f912 	bl	80081c0 <memcpy>
			cb->write = cb->buffer;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	615a      	str	r2, [r3, #20]
			memcpy (cb->write, (uint8_t *)uartrxDataBuffer + data_at_tail, (nbytes - data_at_tail));  // copy data in that remaining space
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6958      	ldr	r0, [r3, #20]
 8007fa8:	7bfb      	ldrb	r3, [r7, #15]
 8007faa:	4a19      	ldr	r2, [pc, #100]	; (8008010 <uartwrpr_rx+0xcc>)
 8007fac:	1899      	adds	r1, r3, r2
 8007fae:	887a      	ldrh	r2, [r7, #2]
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
 8007fb2:	1ad3      	subs	r3, r2, r3
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	f000 f903 	bl	80081c0 <memcpy>
			cb->write = (uint8_t *)cb->write + data_at_front;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	695a      	ldr	r2, [r3, #20]
 8007fbe:	7bbb      	ldrb	r3, [r7, #14]
 8007fc0:	441a      	add	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	615a      	str	r2, [r3, #20]
 8007fc6:	e00c      	b.n	8007fe2 <uartwrpr_rx+0x9e>
		}
		else
		{
			memcpy (cb->write, uartrxDataBuffer, nbytes);  // copy data in that remaining space
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	695b      	ldr	r3, [r3, #20]
 8007fcc:	887a      	ldrh	r2, [r7, #2]
 8007fce:	4910      	ldr	r1, [pc, #64]	; (8008010 <uartwrpr_rx+0xcc>)
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f000 f8f5 	bl	80081c0 <memcpy>
			cb->write = (uint8_t *)cb->write + nbytes;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	695a      	ldr	r2, [r3, #20]
 8007fda:	887b      	ldrh	r3, [r7, #2]
 8007fdc:	441a      	add	r2, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	615a      	str	r2, [r3, #20]
		}
		
		HAL_UART_Transmit(&huart1, uarttxDataBuffer[MSSG_RECEIVED], uartdataTxBuffSize, 10);
 8007fe2:	230a      	movs	r3, #10
 8007fe4:	223c      	movs	r2, #60	; 0x3c
 8007fe6:	490b      	ldr	r1, [pc, #44]	; (8008014 <uartwrpr_rx+0xd0>)
 8007fe8:	480b      	ldr	r0, [pc, #44]	; (8008018 <uartwrpr_rx+0xd4>)
 8007fea:	f7fb fde2 	bl	8003bb2 <HAL_UART_Transmit>
		cb->count = cb->count + nbytes;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	68da      	ldr	r2, [r3, #12]
 8007ff2:	887b      	ldrh	r3, [r7, #2]
 8007ff4:	441a      	add	r2, r3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	60da      	str	r2, [r3, #12]
	else
	{
		HAL_UART_Transmit(&huart1, uarttxDataBuffer[MSSG_NOT_RECEIVED], uartdataTxBuffSize, 10);
	}
	
}
 8007ffa:	e005      	b.n	8008008 <uartwrpr_rx+0xc4>
		HAL_UART_Transmit(&huart1, uarttxDataBuffer[MSSG_NOT_RECEIVED], uartdataTxBuffSize, 10);
 8007ffc:	230a      	movs	r3, #10
 8007ffe:	223c      	movs	r2, #60	; 0x3c
 8008000:	4906      	ldr	r1, [pc, #24]	; (800801c <uartwrpr_rx+0xd8>)
 8008002:	4805      	ldr	r0, [pc, #20]	; (8008018 <uartwrpr_rx+0xd4>)
 8008004:	f7fb fdd5 	bl	8003bb2 <HAL_UART_Transmit>
}
 8008008:	bf00      	nop
 800800a:	3710      	adds	r7, #16
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	20009118 	.word	0x20009118
 8008014:	2000004c 	.word	0x2000004c
 8008018:	200001c0 	.word	0x200001c0
 800801c:	20000088 	.word	0x20000088

08008020 <uartInit>:
{
	
}

void uartInit(void)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	af00      	add	r7, sp, #0
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uartrxDataBuffer, uartdataRxBuffSize);
 8008024:	2214      	movs	r2, #20
 8008026:	4908      	ldr	r1, [pc, #32]	; (8008048 <uartInit+0x28>)
 8008028:	4808      	ldr	r0, [pc, #32]	; (800804c <uartInit+0x2c>)
 800802a:	f7fb fe54 	bl	8003cd6 <HAL_UARTEx_ReceiveToIdle_DMA>

    cbuff_init(&uartRXCBuffDescriptor, uartrxDataBuffer, uartdataRxBuffSize);
 800802e:	2214      	movs	r2, #20
 8008030:	4905      	ldr	r1, [pc, #20]	; (8008048 <uartInit+0x28>)
 8008032:	4807      	ldr	r0, [pc, #28]	; (8008050 <uartInit+0x30>)
 8008034:	f7ff ff4e 	bl	8007ed4 <cbuff_init>
	cbuff_init(&uartMainRxBuffDescriptor, uartMainRxBuff, uartdataMainRxBuffSize);
 8008038:	220f      	movs	r2, #15
 800803a:	4906      	ldr	r1, [pc, #24]	; (8008054 <uartInit+0x34>)
 800803c:	4806      	ldr	r0, [pc, #24]	; (8008058 <uartInit+0x38>)
 800803e:	f7ff ff49 	bl	8007ed4 <cbuff_init>
}
 8008042:	bf00      	nop
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	20009118 	.word	0x20009118
 800804c:	200001c0 	.word	0x200001c0
 8008050:	200090e8 	.word	0x200090e8
 8008054:	2000912c 	.word	0x2000912c
 8008058:	20009100 	.word	0x20009100

0800805c <HAL_UARTEx_RxEventCallback>:
    
}


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	460b      	mov	r3, r1
 8008066:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8008068:	2200      	movs	r2, #0
 800806a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800806e:	480e      	ldr	r0, [pc, #56]	; (80080a8 <HAL_UARTEx_RxEventCallback+0x4c>)
 8008070:	f7fa f8c4 	bl	80021fc <HAL_GPIO_WritePin>

	if (huart->Instance == USART1)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a0c      	ldr	r2, [pc, #48]	; (80080ac <HAL_UARTEx_RxEventCallback+0x50>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d104      	bne.n	8008088 <HAL_UARTEx_RxEventCallback+0x2c>
	{
		uartwrpr_rx(&uartMainRxBuffDescriptor, Size);
 800807e:	887b      	ldrh	r3, [r7, #2]
 8008080:	4619      	mov	r1, r3
 8008082:	480b      	ldr	r0, [pc, #44]	; (80080b0 <HAL_UARTEx_RxEventCallback+0x54>)
 8008084:	f7ff ff5e 	bl	8007f44 <uartwrpr_rx>
	}

	HAL_UARTEx_ReceiveToIdle_DMA(huart, uartrxDataBuffer, uartdataRxBuffSize);
 8008088:	2214      	movs	r2, #20
 800808a:	490a      	ldr	r1, [pc, #40]	; (80080b4 <HAL_UARTEx_RxEventCallback+0x58>)
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f7fb fe22 	bl	8003cd6 <HAL_UARTEx_ReceiveToIdle_DMA>

	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8008092:	2201      	movs	r2, #1
 8008094:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008098:	4803      	ldr	r0, [pc, #12]	; (80080a8 <HAL_UARTEx_RxEventCallback+0x4c>)
 800809a:	f7fa f8af 	bl	80021fc <HAL_GPIO_WritePin>
}
 800809e:	bf00      	nop
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	40021800 	.word	0x40021800
 80080ac:	40011000 	.word	0x40011000
 80080b0:	20009100 	.word	0x20009100
 80080b4:	20009118 	.word	0x20009118

080080b8 <memset>:
 80080b8:	4402      	add	r2, r0
 80080ba:	4603      	mov	r3, r0
 80080bc:	4293      	cmp	r3, r2
 80080be:	d100      	bne.n	80080c2 <memset+0xa>
 80080c0:	4770      	bx	lr
 80080c2:	f803 1b01 	strb.w	r1, [r3], #1
 80080c6:	e7f9      	b.n	80080bc <memset+0x4>

080080c8 <_reclaim_reent>:
 80080c8:	4b29      	ldr	r3, [pc, #164]	; (8008170 <_reclaim_reent+0xa8>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4283      	cmp	r3, r0
 80080ce:	b570      	push	{r4, r5, r6, lr}
 80080d0:	4604      	mov	r4, r0
 80080d2:	d04b      	beq.n	800816c <_reclaim_reent+0xa4>
 80080d4:	69c3      	ldr	r3, [r0, #28]
 80080d6:	b143      	cbz	r3, 80080ea <_reclaim_reent+0x22>
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d144      	bne.n	8008168 <_reclaim_reent+0xa0>
 80080de:	69e3      	ldr	r3, [r4, #28]
 80080e0:	6819      	ldr	r1, [r3, #0]
 80080e2:	b111      	cbz	r1, 80080ea <_reclaim_reent+0x22>
 80080e4:	4620      	mov	r0, r4
 80080e6:	f000 f879 	bl	80081dc <_free_r>
 80080ea:	6961      	ldr	r1, [r4, #20]
 80080ec:	b111      	cbz	r1, 80080f4 <_reclaim_reent+0x2c>
 80080ee:	4620      	mov	r0, r4
 80080f0:	f000 f874 	bl	80081dc <_free_r>
 80080f4:	69e1      	ldr	r1, [r4, #28]
 80080f6:	b111      	cbz	r1, 80080fe <_reclaim_reent+0x36>
 80080f8:	4620      	mov	r0, r4
 80080fa:	f000 f86f 	bl	80081dc <_free_r>
 80080fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008100:	b111      	cbz	r1, 8008108 <_reclaim_reent+0x40>
 8008102:	4620      	mov	r0, r4
 8008104:	f000 f86a 	bl	80081dc <_free_r>
 8008108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800810a:	b111      	cbz	r1, 8008112 <_reclaim_reent+0x4a>
 800810c:	4620      	mov	r0, r4
 800810e:	f000 f865 	bl	80081dc <_free_r>
 8008112:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008114:	b111      	cbz	r1, 800811c <_reclaim_reent+0x54>
 8008116:	4620      	mov	r0, r4
 8008118:	f000 f860 	bl	80081dc <_free_r>
 800811c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800811e:	b111      	cbz	r1, 8008126 <_reclaim_reent+0x5e>
 8008120:	4620      	mov	r0, r4
 8008122:	f000 f85b 	bl	80081dc <_free_r>
 8008126:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008128:	b111      	cbz	r1, 8008130 <_reclaim_reent+0x68>
 800812a:	4620      	mov	r0, r4
 800812c:	f000 f856 	bl	80081dc <_free_r>
 8008130:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008132:	b111      	cbz	r1, 800813a <_reclaim_reent+0x72>
 8008134:	4620      	mov	r0, r4
 8008136:	f000 f851 	bl	80081dc <_free_r>
 800813a:	6a23      	ldr	r3, [r4, #32]
 800813c:	b1b3      	cbz	r3, 800816c <_reclaim_reent+0xa4>
 800813e:	4620      	mov	r0, r4
 8008140:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008144:	4718      	bx	r3
 8008146:	5949      	ldr	r1, [r1, r5]
 8008148:	b941      	cbnz	r1, 800815c <_reclaim_reent+0x94>
 800814a:	3504      	adds	r5, #4
 800814c:	69e3      	ldr	r3, [r4, #28]
 800814e:	2d80      	cmp	r5, #128	; 0x80
 8008150:	68d9      	ldr	r1, [r3, #12]
 8008152:	d1f8      	bne.n	8008146 <_reclaim_reent+0x7e>
 8008154:	4620      	mov	r0, r4
 8008156:	f000 f841 	bl	80081dc <_free_r>
 800815a:	e7c0      	b.n	80080de <_reclaim_reent+0x16>
 800815c:	680e      	ldr	r6, [r1, #0]
 800815e:	4620      	mov	r0, r4
 8008160:	f000 f83c 	bl	80081dc <_free_r>
 8008164:	4631      	mov	r1, r6
 8008166:	e7ef      	b.n	8008148 <_reclaim_reent+0x80>
 8008168:	2500      	movs	r5, #0
 800816a:	e7ef      	b.n	800814c <_reclaim_reent+0x84>
 800816c:	bd70      	pop	{r4, r5, r6, pc}
 800816e:	bf00      	nop
 8008170:	20000110 	.word	0x20000110

08008174 <__libc_init_array>:
 8008174:	b570      	push	{r4, r5, r6, lr}
 8008176:	4d0d      	ldr	r5, [pc, #52]	; (80081ac <__libc_init_array+0x38>)
 8008178:	4c0d      	ldr	r4, [pc, #52]	; (80081b0 <__libc_init_array+0x3c>)
 800817a:	1b64      	subs	r4, r4, r5
 800817c:	10a4      	asrs	r4, r4, #2
 800817e:	2600      	movs	r6, #0
 8008180:	42a6      	cmp	r6, r4
 8008182:	d109      	bne.n	8008198 <__libc_init_array+0x24>
 8008184:	4d0b      	ldr	r5, [pc, #44]	; (80081b4 <__libc_init_array+0x40>)
 8008186:	4c0c      	ldr	r4, [pc, #48]	; (80081b8 <__libc_init_array+0x44>)
 8008188:	f000 f880 	bl	800828c <_init>
 800818c:	1b64      	subs	r4, r4, r5
 800818e:	10a4      	asrs	r4, r4, #2
 8008190:	2600      	movs	r6, #0
 8008192:	42a6      	cmp	r6, r4
 8008194:	d105      	bne.n	80081a2 <__libc_init_array+0x2e>
 8008196:	bd70      	pop	{r4, r5, r6, pc}
 8008198:	f855 3b04 	ldr.w	r3, [r5], #4
 800819c:	4798      	blx	r3
 800819e:	3601      	adds	r6, #1
 80081a0:	e7ee      	b.n	8008180 <__libc_init_array+0xc>
 80081a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80081a6:	4798      	blx	r3
 80081a8:	3601      	adds	r6, #1
 80081aa:	e7f2      	b.n	8008192 <__libc_init_array+0x1e>
 80081ac:	08008314 	.word	0x08008314
 80081b0:	08008314 	.word	0x08008314
 80081b4:	08008314 	.word	0x08008314
 80081b8:	08008318 	.word	0x08008318

080081bc <__retarget_lock_acquire_recursive>:
 80081bc:	4770      	bx	lr

080081be <__retarget_lock_release_recursive>:
 80081be:	4770      	bx	lr

080081c0 <memcpy>:
 80081c0:	440a      	add	r2, r1
 80081c2:	4291      	cmp	r1, r2
 80081c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80081c8:	d100      	bne.n	80081cc <memcpy+0xc>
 80081ca:	4770      	bx	lr
 80081cc:	b510      	push	{r4, lr}
 80081ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081d6:	4291      	cmp	r1, r2
 80081d8:	d1f9      	bne.n	80081ce <memcpy+0xe>
 80081da:	bd10      	pop	{r4, pc}

080081dc <_free_r>:
 80081dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081de:	2900      	cmp	r1, #0
 80081e0:	d044      	beq.n	800826c <_free_r+0x90>
 80081e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081e6:	9001      	str	r0, [sp, #4]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f1a1 0404 	sub.w	r4, r1, #4
 80081ee:	bfb8      	it	lt
 80081f0:	18e4      	addlt	r4, r4, r3
 80081f2:	f000 f83f 	bl	8008274 <__malloc_lock>
 80081f6:	4a1e      	ldr	r2, [pc, #120]	; (8008270 <_free_r+0x94>)
 80081f8:	9801      	ldr	r0, [sp, #4]
 80081fa:	6813      	ldr	r3, [r2, #0]
 80081fc:	b933      	cbnz	r3, 800820c <_free_r+0x30>
 80081fe:	6063      	str	r3, [r4, #4]
 8008200:	6014      	str	r4, [r2, #0]
 8008202:	b003      	add	sp, #12
 8008204:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008208:	f000 b83a 	b.w	8008280 <__malloc_unlock>
 800820c:	42a3      	cmp	r3, r4
 800820e:	d908      	bls.n	8008222 <_free_r+0x46>
 8008210:	6825      	ldr	r5, [r4, #0]
 8008212:	1961      	adds	r1, r4, r5
 8008214:	428b      	cmp	r3, r1
 8008216:	bf01      	itttt	eq
 8008218:	6819      	ldreq	r1, [r3, #0]
 800821a:	685b      	ldreq	r3, [r3, #4]
 800821c:	1949      	addeq	r1, r1, r5
 800821e:	6021      	streq	r1, [r4, #0]
 8008220:	e7ed      	b.n	80081fe <_free_r+0x22>
 8008222:	461a      	mov	r2, r3
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	b10b      	cbz	r3, 800822c <_free_r+0x50>
 8008228:	42a3      	cmp	r3, r4
 800822a:	d9fa      	bls.n	8008222 <_free_r+0x46>
 800822c:	6811      	ldr	r1, [r2, #0]
 800822e:	1855      	adds	r5, r2, r1
 8008230:	42a5      	cmp	r5, r4
 8008232:	d10b      	bne.n	800824c <_free_r+0x70>
 8008234:	6824      	ldr	r4, [r4, #0]
 8008236:	4421      	add	r1, r4
 8008238:	1854      	adds	r4, r2, r1
 800823a:	42a3      	cmp	r3, r4
 800823c:	6011      	str	r1, [r2, #0]
 800823e:	d1e0      	bne.n	8008202 <_free_r+0x26>
 8008240:	681c      	ldr	r4, [r3, #0]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	6053      	str	r3, [r2, #4]
 8008246:	440c      	add	r4, r1
 8008248:	6014      	str	r4, [r2, #0]
 800824a:	e7da      	b.n	8008202 <_free_r+0x26>
 800824c:	d902      	bls.n	8008254 <_free_r+0x78>
 800824e:	230c      	movs	r3, #12
 8008250:	6003      	str	r3, [r0, #0]
 8008252:	e7d6      	b.n	8008202 <_free_r+0x26>
 8008254:	6825      	ldr	r5, [r4, #0]
 8008256:	1961      	adds	r1, r4, r5
 8008258:	428b      	cmp	r3, r1
 800825a:	bf04      	itt	eq
 800825c:	6819      	ldreq	r1, [r3, #0]
 800825e:	685b      	ldreq	r3, [r3, #4]
 8008260:	6063      	str	r3, [r4, #4]
 8008262:	bf04      	itt	eq
 8008264:	1949      	addeq	r1, r1, r5
 8008266:	6021      	streq	r1, [r4, #0]
 8008268:	6054      	str	r4, [r2, #4]
 800826a:	e7ca      	b.n	8008202 <_free_r+0x26>
 800826c:	b003      	add	sp, #12
 800826e:	bd30      	pop	{r4, r5, pc}
 8008270:	20009278 	.word	0x20009278

08008274 <__malloc_lock>:
 8008274:	4801      	ldr	r0, [pc, #4]	; (800827c <__malloc_lock+0x8>)
 8008276:	f7ff bfa1 	b.w	80081bc <__retarget_lock_acquire_recursive>
 800827a:	bf00      	nop
 800827c:	20009274 	.word	0x20009274

08008280 <__malloc_unlock>:
 8008280:	4801      	ldr	r0, [pc, #4]	; (8008288 <__malloc_unlock+0x8>)
 8008282:	f7ff bf9c 	b.w	80081be <__retarget_lock_release_recursive>
 8008286:	bf00      	nop
 8008288:	20009274 	.word	0x20009274

0800828c <_init>:
 800828c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800828e:	bf00      	nop
 8008290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008292:	bc08      	pop	{r3}
 8008294:	469e      	mov	lr, r3
 8008296:	4770      	bx	lr

08008298 <_fini>:
 8008298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829a:	bf00      	nop
 800829c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800829e:	bc08      	pop	{r3}
 80082a0:	469e      	mov	lr, r3
 80082a2:	4770      	bx	lr
