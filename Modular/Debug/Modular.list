
Modular.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3ac  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800e55c  0800e55c  0001e55c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e5cc  0800e5cc  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800e5cc  0800e5cc  0001e5cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e5d4  0800e5d4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e5d4  0800e5d4  0001e5d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e5d8  0800e5d8  0001e5d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800e5dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00009960  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200099e0  200099e0  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002f613  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000067b6  00000000  00000000  0004f706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002610  00000000  00000000  00055ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001d71  00000000  00000000  000584d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002c696  00000000  00000000  0005a241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00030ade  00000000  00000000  000868d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f6bd5  00000000  00000000  000b73b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000a4fc  00000000  00000000  001adf8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  001b8488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e544 	.word	0x0800e544

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	0800e544 	.word	0x0800e544

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr

080004fa <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80004fa:	b480      	push	{r7}
 80004fc:	b083      	sub	sp, #12
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
 8000502:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr

08000510 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
	...

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000524:	f001 f9ec 	bl	8001900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000528:	f000 f828 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052c:	f000 faf0 	bl	8000b10 <MX_GPIO_Init>
  MX_CRC_Init();
 8000530:	f000 f88e 	bl	8000650 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000534:	f000 f8a0 	bl	8000678 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000538:	f000 fa9a 	bl	8000a70 <MX_FMC_Init>
  MX_I2C3_Init();
 800053c:	f000 f8ce 	bl	80006dc <MX_I2C3_Init>
  MX_LTDC_Init();
 8000540:	f000 f90c 	bl	800075c <MX_LTDC_Init>
  MX_SPI5_Init();
 8000544:	f000 f98a 	bl	800085c <MX_SPI5_Init>
  MX_TIM1_Init();
 8000548:	f000 f9be 	bl	80008c8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800054c:	f000 fa66 	bl	8000a1c <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000550:	f000 fa0a 	bl	8000968 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000554:	f00a fbaa 	bl	800acac <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000558:	4a05      	ldr	r2, [pc, #20]	; (8000570 <main+0x50>)
 800055a:	2100      	movs	r1, #0
 800055c:	4805      	ldr	r0, [pc, #20]	; (8000574 <main+0x54>)
 800055e:	f00a fbef 	bl	800ad40 <osThreadNew>
 8000562:	4603      	mov	r3, r0
 8000564:	4a04      	ldr	r2, [pc, #16]	; (8000578 <main+0x58>)
 8000566:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000568:	f00a fbc4 	bl	800acf4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800056c:	e7fe      	b.n	800056c <main+0x4c>
 800056e:	bf00      	nop
 8000570:	0800e590 	.word	0x0800e590
 8000574:	08000e1d 	.word	0x08000e1d
 8000578:	20000340 	.word	0x20000340

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	2230      	movs	r2, #48	; 0x30
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f00d fee6 	bl	800e35c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	4b28      	ldr	r3, [pc, #160]	; (8000648 <SystemClock_Config+0xcc>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a27      	ldr	r2, [pc, #156]	; (8000648 <SystemClock_Config+0xcc>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	4b25      	ldr	r3, [pc, #148]	; (8000648 <SystemClock_Config+0xcc>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	4b22      	ldr	r3, [pc, #136]	; (800064c <SystemClock_Config+0xd0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005c8:	4a20      	ldr	r2, [pc, #128]	; (800064c <SystemClock_Config+0xd0>)
 80005ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b1e      	ldr	r3, [pc, #120]	; (800064c <SystemClock_Config+0xd0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005dc:	2301      	movs	r3, #1
 80005de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005f0:	2304      	movs	r3, #4
 80005f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005f4:	2348      	movs	r3, #72	; 0x48
 80005f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005fc:	2303      	movs	r3, #3
 80005fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f107 0320 	add.w	r3, r7, #32
 8000604:	4618      	mov	r0, r3
 8000606:	f004 f887 	bl	8004718 <HAL_RCC_OscConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000610:	f000 fc70 	bl	8000ef4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	230f      	movs	r3, #15
 8000616:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000618:	2302      	movs	r3, #2
 800061a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000624:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	2102      	movs	r1, #2
 8000630:	4618      	mov	r0, r3
 8000632:	f004 fae9 	bl	8004c08 <HAL_RCC_ClockConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800063c:	f000 fc5a 	bl	8000ef4 <Error_Handler>
  }
}
 8000640:	bf00      	nop
 8000642:	3750      	adds	r7, #80	; 0x50
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_CRC_Init+0x20>)
 8000656:	4a07      	ldr	r2, [pc, #28]	; (8000674 <MX_CRC_Init+0x24>)
 8000658:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_CRC_Init+0x20>)
 800065c:	f001 fa98 	bl	8001b90 <HAL_CRC_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000666:	f000 fc45 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	2000009c 	.word	0x2000009c
 8000674:	40023000 	.word	0x40023000

08000678 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <MX_DMA2D_Init+0x5c>)
 800067e:	4a16      	ldr	r2, [pc, #88]	; (80006d8 <MX_DMA2D_Init+0x60>)
 8000680:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000682:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_DMA2D_Init+0x5c>)
 8000684:	2200      	movs	r2, #0
 8000686:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_DMA2D_Init+0x5c>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_DMA2D_Init+0x5c>)
 8000690:	2200      	movs	r2, #0
 8000692:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_DMA2D_Init+0x5c>)
 8000696:	2200      	movs	r2, #0
 8000698:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_DMA2D_Init+0x5c>)
 800069c:	2200      	movs	r2, #0
 800069e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_DMA2D_Init+0x5c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_DMA2D_Init+0x5c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006ac:	4809      	ldr	r0, [pc, #36]	; (80006d4 <MX_DMA2D_Init+0x5c>)
 80006ae:	f001 fb1d 	bl	8001cec <HAL_DMA2D_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80006b8:	f000 fc1c 	bl	8000ef4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80006bc:	2101      	movs	r1, #1
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_DMA2D_Init+0x5c>)
 80006c0:	f001 fc6e 	bl	8001fa0 <HAL_DMA2D_ConfigLayer>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80006ca:	f000 fc13 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	200000a4 	.word	0x200000a4
 80006d8:	4002b000 	.word	0x4002b000

080006dc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80006e0:	4b1b      	ldr	r3, [pc, #108]	; (8000750 <MX_I2C3_Init+0x74>)
 80006e2:	4a1c      	ldr	r2, [pc, #112]	; (8000754 <MX_I2C3_Init+0x78>)
 80006e4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80006e6:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <MX_I2C3_Init+0x74>)
 80006e8:	4a1b      	ldr	r2, [pc, #108]	; (8000758 <MX_I2C3_Init+0x7c>)
 80006ea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ec:	4b18      	ldr	r3, [pc, #96]	; (8000750 <MX_I2C3_Init+0x74>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80006f2:	4b17      	ldr	r3, [pc, #92]	; (8000750 <MX_I2C3_Init+0x74>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f8:	4b15      	ldr	r3, [pc, #84]	; (8000750 <MX_I2C3_Init+0x74>)
 80006fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006fe:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000700:	4b13      	ldr	r3, [pc, #76]	; (8000750 <MX_I2C3_Init+0x74>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000706:	4b12      	ldr	r3, [pc, #72]	; (8000750 <MX_I2C3_Init+0x74>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800070c:	4b10      	ldr	r3, [pc, #64]	; (8000750 <MX_I2C3_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_I2C3_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000718:	480d      	ldr	r0, [pc, #52]	; (8000750 <MX_I2C3_Init+0x74>)
 800071a:	f003 fad5 	bl	8003cc8 <HAL_I2C_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000724:	f000 fbe6 	bl	8000ef4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000728:	2100      	movs	r1, #0
 800072a:	4809      	ldr	r0, [pc, #36]	; (8000750 <MX_I2C3_Init+0x74>)
 800072c:	f003 fc10 	bl	8003f50 <HAL_I2CEx_ConfigAnalogFilter>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000736:	f000 fbdd 	bl	8000ef4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800073a:	2100      	movs	r1, #0
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <MX_I2C3_Init+0x74>)
 800073e:	f003 fc43 	bl	8003fc8 <HAL_I2CEx_ConfigDigitalFilter>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000748:	f000 fbd4 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	200000e4 	.word	0x200000e4
 8000754:	40005c00 	.word	0x40005c00
 8000758:	000186a0 	.word	0x000186a0

0800075c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08e      	sub	sp, #56	; 0x38
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2234      	movs	r2, #52	; 0x34
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f00d fdf7 	bl	800e35c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800076e:	4b39      	ldr	r3, [pc, #228]	; (8000854 <MX_LTDC_Init+0xf8>)
 8000770:	4a39      	ldr	r2, [pc, #228]	; (8000858 <MX_LTDC_Init+0xfc>)
 8000772:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000774:	4b37      	ldr	r3, [pc, #220]	; (8000854 <MX_LTDC_Init+0xf8>)
 8000776:	2200      	movs	r2, #0
 8000778:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800077a:	4b36      	ldr	r3, [pc, #216]	; (8000854 <MX_LTDC_Init+0xf8>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000780:	4b34      	ldr	r3, [pc, #208]	; (8000854 <MX_LTDC_Init+0xf8>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000786:	4b33      	ldr	r3, [pc, #204]	; (8000854 <MX_LTDC_Init+0xf8>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 800078c:	4b31      	ldr	r3, [pc, #196]	; (8000854 <MX_LTDC_Init+0xf8>)
 800078e:	2209      	movs	r2, #9
 8000790:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000792:	4b30      	ldr	r3, [pc, #192]	; (8000854 <MX_LTDC_Init+0xf8>)
 8000794:	2201      	movs	r2, #1
 8000796:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000798:	4b2e      	ldr	r3, [pc, #184]	; (8000854 <MX_LTDC_Init+0xf8>)
 800079a:	221d      	movs	r2, #29
 800079c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800079e:	4b2d      	ldr	r3, [pc, #180]	; (8000854 <MX_LTDC_Init+0xf8>)
 80007a0:	2203      	movs	r2, #3
 80007a2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80007a4:	4b2b      	ldr	r3, [pc, #172]	; (8000854 <MX_LTDC_Init+0xf8>)
 80007a6:	f240 120d 	movw	r2, #269	; 0x10d
 80007aa:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80007ac:	4b29      	ldr	r3, [pc, #164]	; (8000854 <MX_LTDC_Init+0xf8>)
 80007ae:	f240 1243 	movw	r2, #323	; 0x143
 80007b2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80007b4:	4b27      	ldr	r3, [pc, #156]	; (8000854 <MX_LTDC_Init+0xf8>)
 80007b6:	f240 1217 	movw	r2, #279	; 0x117
 80007ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80007bc:	4b25      	ldr	r3, [pc, #148]	; (8000854 <MX_LTDC_Init+0xf8>)
 80007be:	f240 1247 	movw	r2, #327	; 0x147
 80007c2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <MX_LTDC_Init+0xf8>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80007cc:	4b21      	ldr	r3, [pc, #132]	; (8000854 <MX_LTDC_Init+0xf8>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80007d4:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <MX_LTDC_Init+0xf8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80007dc:	481d      	ldr	r0, [pc, #116]	; (8000854 <MX_LTDC_Init+0xf8>)
 80007de:	f003 fc33 	bl	8004048 <HAL_LTDC_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80007e8:	f000 fb84 	bl	8000ef4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80007f0:	23f0      	movs	r3, #240	; 0xf0
 80007f2:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80007f8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80007fc:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80007fe:	2302      	movs	r3, #2
 8000800:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000802:	23ff      	movs	r3, #255	; 0xff
 8000804:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800080a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800080e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000810:	2307      	movs	r3, #7
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000814:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 800081a:	23f0      	movs	r3, #240	; 0xf0
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 800081e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000822:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2200      	movs	r2, #0
 800083a:	4619      	mov	r1, r3
 800083c:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_LTDC_Init+0xf8>)
 800083e:	f003 fd95 	bl	800436c <HAL_LTDC_ConfigLayer>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000848:	f000 fb54 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	3738      	adds	r7, #56	; 0x38
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000138 	.word	0x20000138
 8000858:	40016800 	.word	0x40016800

0800085c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000860:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <MX_SPI5_Init+0x64>)
 8000862:	4a18      	ldr	r2, [pc, #96]	; (80008c4 <MX_SPI5_Init+0x68>)
 8000864:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000866:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <MX_SPI5_Init+0x64>)
 8000868:	f44f 7282 	mov.w	r2, #260	; 0x104
 800086c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_SPI5_Init+0x64>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_SPI5_Init+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_SPI5_Init+0x64>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_SPI5_Init+0x64>)
 8000882:	2200      	movs	r2, #0
 8000884:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_SPI5_Init+0x64>)
 8000888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800088c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_SPI5_Init+0x64>)
 8000890:	2218      	movs	r2, #24
 8000892:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000894:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <MX_SPI5_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_SPI5_Init+0x64>)
 800089c:	2200      	movs	r2, #0
 800089e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <MX_SPI5_Init+0x64>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_SPI5_Init+0x64>)
 80008a8:	220a      	movs	r2, #10
 80008aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_SPI5_Init+0x64>)
 80008ae:	f004 fdf1 	bl	8005494 <HAL_SPI_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80008b8:	f000 fb1c 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	200001e0 	.word	0x200001e0
 80008c4:	40015000 	.word	0x40015000

080008c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ce:	f107 0308 	add.w	r3, r7, #8
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008dc:	463b      	mov	r3, r7
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008e4:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <MX_TIM1_Init+0x98>)
 80008e6:	4a1f      	ldr	r2, [pc, #124]	; (8000964 <MX_TIM1_Init+0x9c>)
 80008e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008ea:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <MX_TIM1_Init+0x98>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f0:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <MX_TIM1_Init+0x98>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008f6:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <MX_TIM1_Init+0x98>)
 80008f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fe:	4b18      	ldr	r3, [pc, #96]	; (8000960 <MX_TIM1_Init+0x98>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000904:	4b16      	ldr	r3, [pc, #88]	; (8000960 <MX_TIM1_Init+0x98>)
 8000906:	2200      	movs	r2, #0
 8000908:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <MX_TIM1_Init+0x98>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000910:	4813      	ldr	r0, [pc, #76]	; (8000960 <MX_TIM1_Init+0x98>)
 8000912:	f004 fe48 	bl	80055a6 <HAL_TIM_Base_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800091c:	f000 faea 	bl	8000ef4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000924:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000926:	f107 0308 	add.w	r3, r7, #8
 800092a:	4619      	mov	r1, r3
 800092c:	480c      	ldr	r0, [pc, #48]	; (8000960 <MX_TIM1_Init+0x98>)
 800092e:	f005 f913 	bl	8005b58 <HAL_TIM_ConfigClockSource>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000938:	f000 fadc 	bl	8000ef4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093c:	2300      	movs	r3, #0
 800093e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000944:	463b      	mov	r3, r7
 8000946:	4619      	mov	r1, r3
 8000948:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_TIM1_Init+0x98>)
 800094a:	f005 fcdf 	bl	800630c <HAL_TIMEx_MasterConfigSynchronization>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000954:	f000 face 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	3718      	adds	r7, #24
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000238 	.word	0x20000238
 8000964:	40010000 	.word	0x40010000

08000968 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800096e:	f107 0320 	add.w	r3, r7, #32
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]
 8000986:	615a      	str	r2, [r3, #20]
 8000988:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800098a:	4b22      	ldr	r3, [pc, #136]	; (8000a14 <MX_TIM4_Init+0xac>)
 800098c:	4a22      	ldr	r2, [pc, #136]	; (8000a18 <MX_TIM4_Init+0xb0>)
 800098e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000990:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <MX_TIM4_Init+0xac>)
 8000992:	2200      	movs	r2, #0
 8000994:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000996:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <MX_TIM4_Init+0xac>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800099c:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <MX_TIM4_Init+0xac>)
 800099e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a4:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <MX_TIM4_Init+0xac>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009aa:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <MX_TIM4_Init+0xac>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009b0:	4818      	ldr	r0, [pc, #96]	; (8000a14 <MX_TIM4_Init+0xac>)
 80009b2:	f004 feb7 	bl	8005724 <HAL_TIM_PWM_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80009bc:	f000 fa9a 	bl	8000ef4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009c8:	f107 0320 	add.w	r3, r7, #32
 80009cc:	4619      	mov	r1, r3
 80009ce:	4811      	ldr	r0, [pc, #68]	; (8000a14 <MX_TIM4_Init+0xac>)
 80009d0:	f005 fc9c 	bl	800630c <HAL_TIMEx_MasterConfigSynchronization>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80009da:	f000 fa8b 	bl	8000ef4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009de:	2360      	movs	r3, #96	; 0x60
 80009e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	2204      	movs	r2, #4
 80009f2:	4619      	mov	r1, r3
 80009f4:	4807      	ldr	r0, [pc, #28]	; (8000a14 <MX_TIM4_Init+0xac>)
 80009f6:	f004 ffed 	bl	80059d4 <HAL_TIM_PWM_ConfigChannel>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000a00:	f000 fa78 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a04:	4803      	ldr	r0, [pc, #12]	; (8000a14 <MX_TIM4_Init+0xac>)
 8000a06:	f000 fd17 	bl	8001438 <HAL_TIM_MspPostInit>

}
 8000a0a:	bf00      	nop
 8000a0c:	3728      	adds	r7, #40	; 0x28
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000280 	.word	0x20000280
 8000a18:	40000800 	.word	0x40000800

08000a1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a22:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <MX_USART1_UART_Init+0x50>)
 8000a24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a42:	220c      	movs	r2, #12
 8000a44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a54:	f005 fcea 	bl	800642c <HAL_UART_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a5e:	f000 fa49 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200002c8 	.word	0x200002c8
 8000a6c:	40011000 	.word	0x40011000

08000a70 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
 8000a84:	615a      	str	r2, [r3, #20]
 8000a86:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a88:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <MX_FMC_Init+0x98>)
 8000a8a:	4a20      	ldr	r2, [pc, #128]	; (8000b0c <MX_FMC_Init+0x9c>)
 8000a8c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <MX_FMC_Init+0x98>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a94:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <MX_FMC_Init+0x98>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a9a:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <MX_FMC_Init+0x98>)
 8000a9c:	2204      	movs	r2, #4
 8000a9e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000aa0:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <MX_FMC_Init+0x98>)
 8000aa2:	2210      	movs	r2, #16
 8000aa4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000aa6:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <MX_FMC_Init+0x98>)
 8000aa8:	2240      	movs	r2, #64	; 0x40
 8000aaa:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000aac:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <MX_FMC_Init+0x98>)
 8000aae:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000ab2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_FMC_Init+0x98>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000aba:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <MX_FMC_Init+0x98>)
 8000abc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ac0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_FMC_Init+0x98>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_FMC_Init+0x98>)
 8000aca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ace:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000ad4:	2307      	movs	r3, #7
 8000ad6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000ad8:	2304      	movs	r3, #4
 8000ada:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000adc:	2307      	movs	r3, #7
 8000ade:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	4619      	mov	r1, r3
 8000af0:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_FMC_Init+0x98>)
 8000af2:	f004 fc9b 	bl	800542c <HAL_SDRAM_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000afc:	f000 f9fa 	bl	8000ef4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b00:	bf00      	nop
 8000b02:	3720      	adds	r7, #32
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	2000030c 	.word	0x2000030c
 8000b0c:	a0000140 	.word	0xa0000140

08000b10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08e      	sub	sp, #56	; 0x38
 8000b14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
 8000b24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
 8000b2a:	4b9f      	ldr	r3, [pc, #636]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a9e      	ldr	r2, [pc, #632]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000b30:	f043 0310 	orr.w	r3, r3, #16
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b9c      	ldr	r3, [pc, #624]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0310 	and.w	r3, r3, #16
 8000b3e:	623b      	str	r3, [r7, #32]
 8000b40:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
 8000b46:	4b98      	ldr	r3, [pc, #608]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a97      	ldr	r2, [pc, #604]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000b4c:	f043 0304 	orr.w	r3, r3, #4
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b95      	ldr	r3, [pc, #596]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0304 	and.w	r3, r3, #4
 8000b5a:	61fb      	str	r3, [r7, #28]
 8000b5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61bb      	str	r3, [r7, #24]
 8000b62:	4b91      	ldr	r3, [pc, #580]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a90      	ldr	r2, [pc, #576]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000b68:	f043 0320 	orr.w	r3, r3, #32
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b8e      	ldr	r3, [pc, #568]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0320 	and.w	r3, r3, #32
 8000b76:	61bb      	str	r3, [r7, #24]
 8000b78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	4b8a      	ldr	r3, [pc, #552]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a89      	ldr	r2, [pc, #548]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b87      	ldr	r3, [pc, #540]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b83      	ldr	r3, [pc, #524]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a82      	ldr	r2, [pc, #520]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b80      	ldr	r3, [pc, #512]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b7c      	ldr	r3, [pc, #496]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a7b      	ldr	r2, [pc, #492]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b79      	ldr	r3, [pc, #484]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	4b75      	ldr	r3, [pc, #468]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a74      	ldr	r2, [pc, #464]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b72      	ldr	r3, [pc, #456]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	4b6e      	ldr	r3, [pc, #440]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a6d      	ldr	r2, [pc, #436]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000bf4:	f043 0308 	orr.w	r3, r3, #8
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b6b      	ldr	r3, [pc, #428]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0308 	and.w	r3, r3, #8
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SMZL_DIR_Pin|SMZR_DIR_Pin|SMZR_STEP_Pin|SMX_STEP_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2178      	movs	r1, #120	; 0x78
 8000c0a:	4868      	ldr	r0, [pc, #416]	; (8000dac <MX_GPIO_Init+0x29c>)
 8000c0c:	f001 fc06 	bl	800241c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SMX_DIR_Pin|NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	f242 0116 	movw	r1, #8214	; 0x2016
 8000c16:	4866      	ldr	r0, [pc, #408]	; (8000db0 <MX_GPIO_Init+0x2a0>)
 8000c18:	f001 fc00 	bl	800241c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SMZL_STEP_GPIO_Port, SMZL_STEP_Pin, GPIO_PIN_RESET);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2140      	movs	r1, #64	; 0x40
 8000c20:	4864      	ldr	r0, [pc, #400]	; (8000db4 <MX_GPIO_Init+0x2a4>)
 8000c22:	f001 fbfb 	bl	800241c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SRVO1_Pin|ACP_RST_Pin, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	21a0      	movs	r1, #160	; 0xa0
 8000c2a:	4863      	ldr	r0, [pc, #396]	; (8000db8 <MX_GPIO_Init+0x2a8>)
 8000c2c:	f001 fbf6 	bl	800241c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000c30:	2200      	movs	r2, #0
 8000c32:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000c36:	4861      	ldr	r0, [pc, #388]	; (8000dbc <MX_GPIO_Init+0x2ac>)
 8000c38:	f001 fbf0 	bl	800241c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000c42:	485f      	ldr	r0, [pc, #380]	; (8000dc0 <MX_GPIO_Init+0x2b0>)
 8000c44:	f001 fbea 	bl	800241c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TOP_XEL_Pin */
  GPIO_InitStruct.Pin = TOP_XEL_Pin;
 8000c48:	2304      	movs	r3, #4
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c4c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c52:	2302      	movs	r3, #2
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TOP_XEL_GPIO_Port, &GPIO_InitStruct);
 8000c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4853      	ldr	r0, [pc, #332]	; (8000dac <MX_GPIO_Init+0x29c>)
 8000c5e:	f001 fa31 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMZL_DIR_Pin SMZR_DIR_Pin SMZR_STEP_Pin SMX_STEP_Pin */
  GPIO_InitStruct.Pin = SMZL_DIR_Pin|SMZR_DIR_Pin|SMZR_STEP_Pin|SMX_STEP_Pin;
 8000c62:	2378      	movs	r3, #120	; 0x78
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c76:	4619      	mov	r1, r3
 8000c78:	484c      	ldr	r0, [pc, #304]	; (8000dac <MX_GPIO_Init+0x29c>)
 8000c7a:	f001 fa23 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMX_DIR_Pin NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = SMX_DIR_Pin|NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000c7e:	f242 0316 	movw	r3, #8214	; 0x2016
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c94:	4619      	mov	r1, r3
 8000c96:	4846      	ldr	r0, [pc, #280]	; (8000db0 <MX_GPIO_Init+0x2a0>)
 8000c98:	f001 fa14 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMZL_STEP_Pin */
  GPIO_InitStruct.Pin = SMZL_STEP_Pin;
 8000c9c:	2340      	movs	r3, #64	; 0x40
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SMZL_STEP_GPIO_Port, &GPIO_InitStruct);
 8000cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4840      	ldr	r0, [pc, #256]	; (8000db4 <MX_GPIO_Init+0x2a4>)
 8000cb4:	f001 fa06 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SNSOR_INFRR_Pin */
  GPIO_InitStruct.Pin = SNSOR_INFRR_Pin;
 8000cb8:	2308      	movs	r3, #8
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SNSOR_INFRR_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4839      	ldr	r0, [pc, #228]	; (8000db0 <MX_GPIO_Init+0x2a0>)
 8000ccc:	f001 f9fa 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|TP_INT1_Pin;
 8000cd0:	f248 0303 	movw	r3, #32771	; 0x8003
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cd6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4834      	ldr	r0, [pc, #208]	; (8000db8 <MX_GPIO_Init+0x2a8>)
 8000ce8:	f001 f9ec 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SRVO1_Pin ACP_RST_Pin */
  GPIO_InitStruct.Pin = SRVO1_Pin|ACP_RST_Pin;
 8000cec:	23a0      	movs	r3, #160	; 0xa0
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d00:	4619      	mov	r1, r3
 8000d02:	482d      	ldr	r0, [pc, #180]	; (8000db8 <MX_GPIO_Init+0x2a8>)
 8000d04:	f001 f9de 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000d08:	2320      	movs	r3, #32
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d0c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4824      	ldr	r0, [pc, #144]	; (8000db0 <MX_GPIO_Init+0x2a0>)
 8000d1e:	f001 f9d1 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d22:	2304      	movs	r3, #4
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d26:	2300      	movs	r3, #0
 8000d28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d32:	4619      	mov	r1, r3
 8000d34:	4823      	ldr	r0, [pc, #140]	; (8000dc4 <MX_GPIO_Init+0x2b4>)
 8000d36:	f001 f9c5 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000d3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	481b      	ldr	r0, [pc, #108]	; (8000dbc <MX_GPIO_Init+0x2ac>)
 8000d50:	f001 f9b8 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000d54:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4813      	ldr	r0, [pc, #76]	; (8000dbc <MX_GPIO_Init+0x2ac>)
 8000d6e:	f001 f9a9 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000d72:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d88:	4619      	mov	r1, r3
 8000d8a:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <MX_GPIO_Init+0x2b0>)
 8000d8c:	f001 f99a 	bl	80020c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2105      	movs	r1, #5
 8000d94:	2008      	movs	r0, #8
 8000d96:	f000 fed1 	bl	8001b3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000d9a:	2008      	movs	r0, #8
 8000d9c:	f000 feea 	bl	8001b74 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000da0:	bf00      	nop
 8000da2:	3738      	adds	r7, #56	; 0x38
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40021000 	.word	0x40021000
 8000db0:	40020800 	.word	0x40020800
 8000db4:	40021400 	.word	0x40021400
 8000db8:	40020000 	.word	0x40020000
 8000dbc:	40020c00 	.word	0x40020c00
 8000dc0:	40021800 	.word	0x40021800
 8000dc4:	40020400 	.word	0x40020400

08000dc8 <Task_action>:

/* USER CODE BEGIN 4 */
void Task_action(unsigned message)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	//uint8_t data[] = {message, '\n', '\r'};
	//HAL_UART_Transmit(&huart1, data, 3, 2);
	switch (message) {
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d008      	beq.n	8000de8 <Task_action+0x20>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d10b      	bne.n	8000df4 <Task_action+0x2c>
		case Verde:
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000ddc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000de0:	4807      	ldr	r0, [pc, #28]	; (8000e00 <Task_action+0x38>)
 8000de2:	f001 fb34 	bl	800244e <HAL_GPIO_TogglePin>
			break;
 8000de6:	e006      	b.n	8000df6 <Task_action+0x2e>
		case Rojo:
			HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000de8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dec:	4804      	ldr	r0, [pc, #16]	; (8000e00 <Task_action+0x38>)
 8000dee:	f001 fb2e 	bl	800244e <HAL_GPIO_TogglePin>
			break;
 8000df2:	e000      	b.n	8000df6 <Task_action+0x2e>
		default:
			break;
 8000df4:	bf00      	nop
	}
	//osDelay(100);
	//HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40021800 	.word	0x40021800

08000e04 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	80fb      	strh	r3, [r7, #6]
    
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000e24:	f00c fed6 	bl	800dbd4 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(SMZR_DIR_GPIO_Port, SMZR_DIR_Pin, GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2110      	movs	r1, #16
 8000e2c:	4826      	ldr	r0, [pc, #152]	; (8000ec8 <StartDefaultTask+0xac>)
 8000e2e:	f001 faf5 	bl	800241c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SMZL_DIR_GPIO_Port, SMZL_DIR_Pin, GPIO_PIN_RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2108      	movs	r1, #8
 8000e36:	4824      	ldr	r0, [pc, #144]	; (8000ec8 <StartDefaultTask+0xac>)
 8000e38:	f001 faf0 	bl	800241c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SMX_DIR_GPIO_Port, SMX_DIR_Pin, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e42:	4822      	ldr	r0, [pc, #136]	; (8000ecc <StartDefaultTask+0xb0>)
 8000e44:	f001 faea 	bl	800241c <HAL_GPIO_WritePin>
	  Task_action(Verde);
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f7ff ffbd 	bl	8000dc8 <Task_action>
	  for (int var = 0; var < 100; ++var) {
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	e005      	b.n	8000e60 <StartDefaultTask+0x44>
		  smMotorSteps(200);
 8000e54:	20c8      	movs	r0, #200	; 0xc8
 8000e56:	f007 fc4b 	bl	80086f0 <smMotorSteps>
	  for (int var = 0; var < 100; ++var) {
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2b63      	cmp	r3, #99	; 0x63
 8000e64:	ddf6      	ble.n	8000e54 <StartDefaultTask+0x38>
	  }
	  Task_action(Verde);
 8000e66:	2001      	movs	r0, #1
 8000e68:	f7ff ffae 	bl	8000dc8 <Task_action>
	  Mian();
 8000e6c:	f007 fc7c 	bl	8008768 <Mian>
	  osDelay(500);
 8000e70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e74:	f009 fff6 	bl	800ae64 <osDelay>

	  HAL_GPIO_WritePin(SMZR_DIR_GPIO_Port, SMZR_DIR_Pin, GPIO_PIN_SET);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	2110      	movs	r1, #16
 8000e7c:	4812      	ldr	r0, [pc, #72]	; (8000ec8 <StartDefaultTask+0xac>)
 8000e7e:	f001 facd 	bl	800241c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SMZL_DIR_GPIO_Port, SMZL_DIR_Pin, GPIO_PIN_SET);
 8000e82:	2201      	movs	r2, #1
 8000e84:	2108      	movs	r1, #8
 8000e86:	4810      	ldr	r0, [pc, #64]	; (8000ec8 <StartDefaultTask+0xac>)
 8000e88:	f001 fac8 	bl	800241c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SMX_DIR_GPIO_Port, SMX_DIR_Pin, GPIO_PIN_SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e92:	480e      	ldr	r0, [pc, #56]	; (8000ecc <StartDefaultTask+0xb0>)
 8000e94:	f001 fac2 	bl	800241c <HAL_GPIO_WritePin>
	  Task_action(Rojo);
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f7ff ff95 	bl	8000dc8 <Task_action>
	  for (int var = 0; var < 100; ++var) {
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	e005      	b.n	8000eb0 <StartDefaultTask+0x94>
		  smMotorSteps(200);
 8000ea4:	20c8      	movs	r0, #200	; 0xc8
 8000ea6:	f007 fc23 	bl	80086f0 <smMotorSteps>
	  for (int var = 0; var < 100; ++var) {
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	3301      	adds	r3, #1
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	2b63      	cmp	r3, #99	; 0x63
 8000eb4:	ddf6      	ble.n	8000ea4 <StartDefaultTask+0x88>
	  }
	  Task_action(Rojo);
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f7ff ff86 	bl	8000dc8 <Task_action>
	  osDelay(500);
 8000ebc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ec0:	f009 ffd0 	bl	800ae64 <osDelay>
	  HAL_GPIO_WritePin(SMZR_DIR_GPIO_Port, SMZR_DIR_Pin, GPIO_PIN_RESET);
 8000ec4:	e7b0      	b.n	8000e28 <StartDefaultTask+0xc>
 8000ec6:	bf00      	nop
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	40020800 	.word	0x40020800

08000ed0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d101      	bne.n	8000ee6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ee2:	f000 fd2f 	bl	8001944 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40001000 	.word	0x40001000

08000ef4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef8:	b672      	cpsid	i
}
 8000efa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000efc:	e7fe      	b.n	8000efc <Error_Handler+0x8>
	...

08000f00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_MspInit+0x54>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	4a11      	ldr	r2, [pc, #68]	; (8000f54 <HAL_MspInit+0x54>)
 8000f10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f14:	6453      	str	r3, [r2, #68]	; 0x44
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <HAL_MspInit+0x54>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	603b      	str	r3, [r7, #0]
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <HAL_MspInit+0x54>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <HAL_MspInit+0x54>)
 8000f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f30:	6413      	str	r3, [r2, #64]	; 0x40
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <HAL_MspInit+0x54>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3a:	603b      	str	r3, [r7, #0]
 8000f3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	210f      	movs	r1, #15
 8000f42:	f06f 0001 	mvn.w	r0, #1
 8000f46:	f000 fdf9 	bl	8001b3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800

08000f58 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <HAL_CRC_MspInit+0x3c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d10d      	bne.n	8000f86 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_CRC_MspInit+0x40>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a09      	ldr	r2, [pc, #36]	; (8000f98 <HAL_CRC_MspInit+0x40>)
 8000f74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <HAL_CRC_MspInit+0x40>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f86:	bf00      	nop
 8000f88:	3714      	adds	r7, #20
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40023000 	.word	0x40023000
 8000f98:	40023800 	.word	0x40023800

08000f9c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <HAL_DMA2D_MspInit+0x48>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d115      	bne.n	8000fda <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <HAL_DMA2D_MspInit+0x4c>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a0c      	ldr	r2, [pc, #48]	; (8000fe8 <HAL_DMA2D_MspInit+0x4c>)
 8000fb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <HAL_DMA2D_MspInit+0x4c>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2105      	movs	r1, #5
 8000fce:	205a      	movs	r0, #90	; 0x5a
 8000fd0:	f000 fdb4 	bl	8001b3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000fd4:	205a      	movs	r0, #90	; 0x5a
 8000fd6:	f000 fdcd 	bl	8001b74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	4002b000 	.word	0x4002b000
 8000fe8:	40023800 	.word	0x40023800

08000fec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	; 0x28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a29      	ldr	r2, [pc, #164]	; (80010b0 <HAL_I2C_MspInit+0xc4>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d14b      	bne.n	80010a6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <HAL_I2C_MspInit+0xc8>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a27      	ldr	r2, [pc, #156]	; (80010b4 <HAL_I2C_MspInit+0xc8>)
 8001018:	f043 0304 	orr.w	r3, r3, #4
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b25      	ldr	r3, [pc, #148]	; (80010b4 <HAL_I2C_MspInit+0xc8>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0304 	and.w	r3, r3, #4
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <HAL_I2C_MspInit+0xc8>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a20      	ldr	r2, [pc, #128]	; (80010b4 <HAL_I2C_MspInit+0xc8>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <HAL_I2C_MspInit+0xc8>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001046:	f44f 7300 	mov.w	r3, #512	; 0x200
 800104a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800104c:	2312      	movs	r3, #18
 800104e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001050:	2301      	movs	r3, #1
 8001052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001058:	2304      	movs	r3, #4
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4619      	mov	r1, r3
 8001062:	4815      	ldr	r0, [pc, #84]	; (80010b8 <HAL_I2C_MspInit+0xcc>)
 8001064:	f001 f82e 	bl	80020c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001068:	f44f 7380 	mov.w	r3, #256	; 0x100
 800106c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800106e:	2312      	movs	r3, #18
 8001070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001072:	2301      	movs	r3, #1
 8001074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800107a:	2304      	movs	r3, #4
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4619      	mov	r1, r3
 8001084:	480d      	ldr	r0, [pc, #52]	; (80010bc <HAL_I2C_MspInit+0xd0>)
 8001086:	f001 f81d 	bl	80020c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <HAL_I2C_MspInit+0xc8>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	4a08      	ldr	r2, [pc, #32]	; (80010b4 <HAL_I2C_MspInit+0xc8>)
 8001094:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001098:	6413      	str	r3, [r2, #64]	; 0x40
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_I2C_MspInit+0xc8>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80010a6:	bf00      	nop
 80010a8:	3728      	adds	r7, #40	; 0x28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40005c00 	.word	0x40005c00
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020800 	.word	0x40020800
 80010bc:	40020000 	.word	0x40020000

080010c0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b09a      	sub	sp, #104	; 0x68
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010dc:	2230      	movs	r2, #48	; 0x30
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f00d f93b 	bl	800e35c <memset>
  if(hltdc->Instance==LTDC)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a85      	ldr	r2, [pc, #532]	; (8001300 <HAL_LTDC_MspInit+0x240>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	f040 8102 	bne.w	80012f6 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80010f2:	2308      	movs	r3, #8
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80010f6:	2332      	movs	r3, #50	; 0x32
 80010f8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80010fa:	2302      	movs	r3, #2
 80010fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80010fe:	2300      	movs	r3, #0
 8001100:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001106:	4618      	mov	r0, r3
 8001108:	f003 ffd0 	bl	80050ac <HAL_RCCEx_PeriphCLKConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001112:	f7ff feef 	bl	8000ef4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	623b      	str	r3, [r7, #32]
 800111a:	4b7a      	ldr	r3, [pc, #488]	; (8001304 <HAL_LTDC_MspInit+0x244>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	4a79      	ldr	r2, [pc, #484]	; (8001304 <HAL_LTDC_MspInit+0x244>)
 8001120:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001124:	6453      	str	r3, [r2, #68]	; 0x44
 8001126:	4b77      	ldr	r3, [pc, #476]	; (8001304 <HAL_LTDC_MspInit+0x244>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800112e:	623b      	str	r3, [r7, #32]
 8001130:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
 8001136:	4b73      	ldr	r3, [pc, #460]	; (8001304 <HAL_LTDC_MspInit+0x244>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a72      	ldr	r2, [pc, #456]	; (8001304 <HAL_LTDC_MspInit+0x244>)
 800113c:	f043 0320 	orr.w	r3, r3, #32
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b70      	ldr	r3, [pc, #448]	; (8001304 <HAL_LTDC_MspInit+0x244>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0320 	and.w	r3, r3, #32
 800114a:	61fb      	str	r3, [r7, #28]
 800114c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	61bb      	str	r3, [r7, #24]
 8001152:	4b6c      	ldr	r3, [pc, #432]	; (8001304 <HAL_LTDC_MspInit+0x244>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a6b      	ldr	r2, [pc, #428]	; (8001304 <HAL_LTDC_MspInit+0x244>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b69      	ldr	r3, [pc, #420]	; (8001304 <HAL_LTDC_MspInit+0x244>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	61bb      	str	r3, [r7, #24]
 8001168:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	4b65      	ldr	r3, [pc, #404]	; (8001304 <HAL_LTDC_MspInit+0x244>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a64      	ldr	r2, [pc, #400]	; (8001304 <HAL_LTDC_MspInit+0x244>)
 8001174:	f043 0302 	orr.w	r3, r3, #2
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b62      	ldr	r3, [pc, #392]	; (8001304 <HAL_LTDC_MspInit+0x244>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	4b5e      	ldr	r3, [pc, #376]	; (8001304 <HAL_LTDC_MspInit+0x244>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a5d      	ldr	r2, [pc, #372]	; (8001304 <HAL_LTDC_MspInit+0x244>)
 8001190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b5b      	ldr	r3, [pc, #364]	; (8001304 <HAL_LTDC_MspInit+0x244>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	4b57      	ldr	r3, [pc, #348]	; (8001304 <HAL_LTDC_MspInit+0x244>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a56      	ldr	r2, [pc, #344]	; (8001304 <HAL_LTDC_MspInit+0x244>)
 80011ac:	f043 0304 	orr.w	r3, r3, #4
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b54      	ldr	r3, [pc, #336]	; (8001304 <HAL_LTDC_MspInit+0x244>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0304 	and.w	r3, r3, #4
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	4b50      	ldr	r3, [pc, #320]	; (8001304 <HAL_LTDC_MspInit+0x244>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a4f      	ldr	r2, [pc, #316]	; (8001304 <HAL_LTDC_MspInit+0x244>)
 80011c8:	f043 0308 	orr.w	r3, r3, #8
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b4d      	ldr	r3, [pc, #308]	; (8001304 <HAL_LTDC_MspInit+0x244>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0308 	and.w	r3, r3, #8
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80011da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011de:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011ec:	230e      	movs	r3, #14
 80011ee:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011f4:	4619      	mov	r1, r3
 80011f6:	4844      	ldr	r0, [pc, #272]	; (8001308 <HAL_LTDC_MspInit+0x248>)
 80011f8:	f000 ff64 	bl	80020c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80011fc:	f641 0358 	movw	r3, #6232	; 0x1858
 8001200:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800120e:	230e      	movs	r3, #14
 8001210:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001212:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001216:	4619      	mov	r1, r3
 8001218:	483c      	ldr	r0, [pc, #240]	; (800130c <HAL_LTDC_MspInit+0x24c>)
 800121a:	f000 ff53 	bl	80020c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800121e:	2303      	movs	r3, #3
 8001220:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001222:	2302      	movs	r3, #2
 8001224:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2300      	movs	r3, #0
 800122c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800122e:	2309      	movs	r3, #9
 8001230:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001232:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001236:	4619      	mov	r1, r3
 8001238:	4835      	ldr	r0, [pc, #212]	; (8001310 <HAL_LTDC_MspInit+0x250>)
 800123a:	f000 ff43 	bl	80020c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800123e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001242:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2300      	movs	r3, #0
 800124e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001250:	230e      	movs	r3, #14
 8001252:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001254:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001258:	4619      	mov	r1, r3
 800125a:	482d      	ldr	r0, [pc, #180]	; (8001310 <HAL_LTDC_MspInit+0x250>)
 800125c:	f000 ff32 	bl	80020c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001260:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001264:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001272:	230e      	movs	r3, #14
 8001274:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001276:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800127a:	4619      	mov	r1, r3
 800127c:	4825      	ldr	r0, [pc, #148]	; (8001314 <HAL_LTDC_MspInit+0x254>)
 800127e:	f000 ff21 	bl	80020c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001282:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001286:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2300      	movs	r3, #0
 8001292:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001294:	230e      	movs	r3, #14
 8001296:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001298:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800129c:	4619      	mov	r1, r3
 800129e:	481e      	ldr	r0, [pc, #120]	; (8001318 <HAL_LTDC_MspInit+0x258>)
 80012a0:	f000 ff10 	bl	80020c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80012a4:	2348      	movs	r3, #72	; 0x48
 80012a6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	2302      	movs	r3, #2
 80012aa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012b4:	230e      	movs	r3, #14
 80012b6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012bc:	4619      	mov	r1, r3
 80012be:	4817      	ldr	r0, [pc, #92]	; (800131c <HAL_LTDC_MspInit+0x25c>)
 80012c0:	f000 ff00 	bl	80020c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80012c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012c8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80012d6:	2309      	movs	r3, #9
 80012d8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012de:	4619      	mov	r1, r3
 80012e0:	480c      	ldr	r0, [pc, #48]	; (8001314 <HAL_LTDC_MspInit+0x254>)
 80012e2:	f000 feef 	bl	80020c4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2105      	movs	r1, #5
 80012ea:	2058      	movs	r0, #88	; 0x58
 80012ec:	f000 fc26 	bl	8001b3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80012f0:	2058      	movs	r0, #88	; 0x58
 80012f2:	f000 fc3f 	bl	8001b74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80012f6:	bf00      	nop
 80012f8:	3768      	adds	r7, #104	; 0x68
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40016800 	.word	0x40016800
 8001304:	40023800 	.word	0x40023800
 8001308:	40021400 	.word	0x40021400
 800130c:	40020000 	.word	0x40020000
 8001310:	40020400 	.word	0x40020400
 8001314:	40021800 	.word	0x40021800
 8001318:	40020800 	.word	0x40020800
 800131c:	40020c00 	.word	0x40020c00

08001320 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a19      	ldr	r2, [pc, #100]	; (80013a4 <HAL_SPI_MspInit+0x84>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d12c      	bne.n	800139c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <HAL_SPI_MspInit+0x88>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	4a17      	ldr	r2, [pc, #92]	; (80013a8 <HAL_SPI_MspInit+0x88>)
 800134c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001350:	6453      	str	r3, [r2, #68]	; 0x44
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <HAL_SPI_MspInit+0x88>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <HAL_SPI_MspInit+0x88>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a10      	ldr	r2, [pc, #64]	; (80013a8 <HAL_SPI_MspInit+0x88>)
 8001368:	f043 0320 	orr.w	r3, r3, #32
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <HAL_SPI_MspInit+0x88>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0320 	and.w	r3, r3, #32
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800137a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800137e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	2302      	movs	r3, #2
 8001382:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800138c:	2305      	movs	r3, #5
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	4619      	mov	r1, r3
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <HAL_SPI_MspInit+0x8c>)
 8001398:	f000 fe94 	bl	80020c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800139c:	bf00      	nop
 800139e:	3728      	adds	r7, #40	; 0x28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40015000 	.word	0x40015000
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40021400 	.word	0x40021400

080013b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0b      	ldr	r2, [pc, #44]	; (80013ec <HAL_TIM_Base_MspInit+0x3c>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d10d      	bne.n	80013de <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <HAL_TIM_Base_MspInit+0x40>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	4a09      	ldr	r2, [pc, #36]	; (80013f0 <HAL_TIM_Base_MspInit+0x40>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6453      	str	r3, [r2, #68]	; 0x44
 80013d2:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <HAL_TIM_Base_MspInit+0x40>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80013de:	bf00      	nop
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40010000 	.word	0x40010000
 80013f0:	40023800 	.word	0x40023800

080013f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a0b      	ldr	r2, [pc, #44]	; (8001430 <HAL_TIM_PWM_MspInit+0x3c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d10d      	bne.n	8001422 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <HAL_TIM_PWM_MspInit+0x40>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	4a09      	ldr	r2, [pc, #36]	; (8001434 <HAL_TIM_PWM_MspInit+0x40>)
 8001410:	f043 0304 	orr.w	r3, r3, #4
 8001414:	6413      	str	r3, [r2, #64]	; 0x40
 8001416:	4b07      	ldr	r3, [pc, #28]	; (8001434 <HAL_TIM_PWM_MspInit+0x40>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001422:	bf00      	nop
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40000800 	.word	0x40000800
 8001434:	40023800 	.word	0x40023800

08001438 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a12      	ldr	r2, [pc, #72]	; (80014a0 <HAL_TIM_MspPostInit+0x68>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d11d      	bne.n	8001496 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <HAL_TIM_MspPostInit+0x6c>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a10      	ldr	r2, [pc, #64]	; (80014a4 <HAL_TIM_MspPostInit+0x6c>)
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <HAL_TIM_MspPostInit+0x6c>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = SRVO2_Pin;
 8001476:	2380      	movs	r3, #128	; 0x80
 8001478:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001486:	2302      	movs	r3, #2
 8001488:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SRVO2_GPIO_Port, &GPIO_InitStruct);
 800148a:	f107 030c 	add.w	r3, r7, #12
 800148e:	4619      	mov	r1, r3
 8001490:	4805      	ldr	r0, [pc, #20]	; (80014a8 <HAL_TIM_MspPostInit+0x70>)
 8001492:	f000 fe17 	bl	80020c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001496:	bf00      	nop
 8001498:	3720      	adds	r7, #32
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40000800 	.word	0x40000800
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020400 	.word	0x40020400

080014ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a1d      	ldr	r2, [pc, #116]	; (8001540 <HAL_UART_MspInit+0x94>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d134      	bne.n	8001538 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <HAL_UART_MspInit+0x98>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	4a1b      	ldr	r2, [pc, #108]	; (8001544 <HAL_UART_MspInit+0x98>)
 80014d8:	f043 0310 	orr.w	r3, r3, #16
 80014dc:	6453      	str	r3, [r2, #68]	; 0x44
 80014de:	4b19      	ldr	r3, [pc, #100]	; (8001544 <HAL_UART_MspInit+0x98>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	f003 0310 	and.w	r3, r3, #16
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_UART_MspInit+0x98>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a14      	ldr	r2, [pc, #80]	; (8001544 <HAL_UART_MspInit+0x98>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_UART_MspInit+0x98>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001506:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800150a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001514:	2303      	movs	r3, #3
 8001516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001518:	2307      	movs	r3, #7
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4619      	mov	r1, r3
 8001522:	4809      	ldr	r0, [pc, #36]	; (8001548 <HAL_UART_MspInit+0x9c>)
 8001524:	f000 fdce 	bl	80020c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001528:	2200      	movs	r2, #0
 800152a:	2105      	movs	r1, #5
 800152c:	2025      	movs	r0, #37	; 0x25
 800152e:	f000 fb05 	bl	8001b3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001532:	2025      	movs	r0, #37	; 0x25
 8001534:	f000 fb1e 	bl	8001b74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001538:	bf00      	nop
 800153a:	3728      	adds	r7, #40	; 0x28
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40011000 	.word	0x40011000
 8001544:	40023800 	.word	0x40023800
 8001548:	40020000 	.word	0x40020000

0800154c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001560:	4b3b      	ldr	r3, [pc, #236]	; (8001650 <HAL_FMC_MspInit+0x104>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d16f      	bne.n	8001648 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001568:	4b39      	ldr	r3, [pc, #228]	; (8001650 <HAL_FMC_MspInit+0x104>)
 800156a:	2201      	movs	r2, #1
 800156c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	603b      	str	r3, [r7, #0]
 8001572:	4b38      	ldr	r3, [pc, #224]	; (8001654 <HAL_FMC_MspInit+0x108>)
 8001574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001576:	4a37      	ldr	r2, [pc, #220]	; (8001654 <HAL_FMC_MspInit+0x108>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6393      	str	r3, [r2, #56]	; 0x38
 800157e:	4b35      	ldr	r3, [pc, #212]	; (8001654 <HAL_FMC_MspInit+0x108>)
 8001580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	603b      	str	r3, [r7, #0]
 8001588:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800158a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800158e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800159c:	230c      	movs	r3, #12
 800159e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	4619      	mov	r1, r3
 80015a4:	482c      	ldr	r0, [pc, #176]	; (8001658 <HAL_FMC_MspInit+0x10c>)
 80015a6:	f000 fd8d 	bl	80020c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80015aa:	2301      	movs	r3, #1
 80015ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ae:	2302      	movs	r3, #2
 80015b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b6:	2303      	movs	r3, #3
 80015b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015ba:	230c      	movs	r3, #12
 80015bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	4619      	mov	r1, r3
 80015c2:	4826      	ldr	r0, [pc, #152]	; (800165c <HAL_FMC_MspInit+0x110>)
 80015c4:	f000 fd7e 	bl	80020c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80015c8:	f248 1333 	movw	r3, #33075	; 0x8133
 80015cc:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d6:	2303      	movs	r3, #3
 80015d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015da:	230c      	movs	r3, #12
 80015dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	4619      	mov	r1, r3
 80015e2:	481f      	ldr	r0, [pc, #124]	; (8001660 <HAL_FMC_MspInit+0x114>)
 80015e4:	f000 fd6e 	bl	80020c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80015e8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80015ec:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f6:	2303      	movs	r3, #3
 80015f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015fa:	230c      	movs	r3, #12
 80015fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	4619      	mov	r1, r3
 8001602:	4818      	ldr	r0, [pc, #96]	; (8001664 <HAL_FMC_MspInit+0x118>)
 8001604:	f000 fd5e 	bl	80020c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001608:	f24c 7303 	movw	r3, #50947	; 0xc703
 800160c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001616:	2303      	movs	r3, #3
 8001618:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800161a:	230c      	movs	r3, #12
 800161c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	4619      	mov	r1, r3
 8001622:	4811      	ldr	r0, [pc, #68]	; (8001668 <HAL_FMC_MspInit+0x11c>)
 8001624:	f000 fd4e 	bl	80020c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001628:	2360      	movs	r3, #96	; 0x60
 800162a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001634:	2303      	movs	r3, #3
 8001636:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001638:	230c      	movs	r3, #12
 800163a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	4619      	mov	r1, r3
 8001640:	480a      	ldr	r0, [pc, #40]	; (800166c <HAL_FMC_MspInit+0x120>)
 8001642:	f000 fd3f 	bl	80020c4 <HAL_GPIO_Init>
 8001646:	e000      	b.n	800164a <HAL_FMC_MspInit+0xfe>
    return;
 8001648:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000344 	.word	0x20000344
 8001654:	40023800 	.word	0x40023800
 8001658:	40021400 	.word	0x40021400
 800165c:	40020800 	.word	0x40020800
 8001660:	40021800 	.word	0x40021800
 8001664:	40021000 	.word	0x40021000
 8001668:	40020c00 	.word	0x40020c00
 800166c:	40020400 	.word	0x40020400

08001670 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001678:	f7ff ff68 	bl	800154c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08e      	sub	sp, #56	; 0x38
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800168c:	2300      	movs	r3, #0
 800168e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001690:	2300      	movs	r3, #0
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	4b33      	ldr	r3, [pc, #204]	; (8001768 <HAL_InitTick+0xe4>)
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	4a32      	ldr	r2, [pc, #200]	; (8001768 <HAL_InitTick+0xe4>)
 800169e:	f043 0310 	orr.w	r3, r3, #16
 80016a2:	6413      	str	r3, [r2, #64]	; 0x40
 80016a4:	4b30      	ldr	r3, [pc, #192]	; (8001768 <HAL_InitTick+0xe4>)
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	f003 0310 	and.w	r3, r3, #16
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016b0:	f107 0210 	add.w	r2, r7, #16
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	4611      	mov	r1, r2
 80016ba:	4618      	mov	r0, r3
 80016bc:	f003 fcc4 	bl	8005048 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016c0:	6a3b      	ldr	r3, [r7, #32]
 80016c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d103      	bne.n	80016d2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016ca:	f003 fc95 	bl	8004ff8 <HAL_RCC_GetPCLK1Freq>
 80016ce:	6378      	str	r0, [r7, #52]	; 0x34
 80016d0:	e004      	b.n	80016dc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016d2:	f003 fc91 	bl	8004ff8 <HAL_RCC_GetPCLK1Freq>
 80016d6:	4603      	mov	r3, r0
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016de:	4a23      	ldr	r2, [pc, #140]	; (800176c <HAL_InitTick+0xe8>)
 80016e0:	fba2 2303 	umull	r2, r3, r2, r3
 80016e4:	0c9b      	lsrs	r3, r3, #18
 80016e6:	3b01      	subs	r3, #1
 80016e8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016ea:	4b21      	ldr	r3, [pc, #132]	; (8001770 <HAL_InitTick+0xec>)
 80016ec:	4a21      	ldr	r2, [pc, #132]	; (8001774 <HAL_InitTick+0xf0>)
 80016ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016f0:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <HAL_InitTick+0xec>)
 80016f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016f6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016f8:	4a1d      	ldr	r2, [pc, #116]	; (8001770 <HAL_InitTick+0xec>)
 80016fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016fc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016fe:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <HAL_InitTick+0xec>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001704:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <HAL_InitTick+0xec>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800170a:	4b19      	ldr	r3, [pc, #100]	; (8001770 <HAL_InitTick+0xec>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001710:	4817      	ldr	r0, [pc, #92]	; (8001770 <HAL_InitTick+0xec>)
 8001712:	f003 ff48 	bl	80055a6 <HAL_TIM_Base_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800171c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001720:	2b00      	cmp	r3, #0
 8001722:	d11b      	bne.n	800175c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001724:	4812      	ldr	r0, [pc, #72]	; (8001770 <HAL_InitTick+0xec>)
 8001726:	f003 ff8d 	bl	8005644 <HAL_TIM_Base_Start_IT>
 800172a:	4603      	mov	r3, r0
 800172c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001730:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001734:	2b00      	cmp	r3, #0
 8001736:	d111      	bne.n	800175c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001738:	2036      	movs	r0, #54	; 0x36
 800173a:	f000 fa1b 	bl	8001b74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b0f      	cmp	r3, #15
 8001742:	d808      	bhi.n	8001756 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001744:	2200      	movs	r2, #0
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	2036      	movs	r0, #54	; 0x36
 800174a:	f000 f9f7 	bl	8001b3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800174e:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <HAL_InitTick+0xf4>)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	e002      	b.n	800175c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800175c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001760:	4618      	mov	r0, r3
 8001762:	3738      	adds	r7, #56	; 0x38
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40023800 	.word	0x40023800
 800176c:	431bde83 	.word	0x431bde83
 8001770:	20000348 	.word	0x20000348
 8001774:	40001000 	.word	0x40001000
 8001778:	20000004 	.word	0x20000004

0800177c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <NMI_Handler+0x4>

08001782 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001786:	e7fe      	b.n	8001786 <HardFault_Handler+0x4>

08001788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800178c:	e7fe      	b.n	800178c <MemManage_Handler+0x4>

0800178e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001792:	e7fe      	b.n	8001792 <BusFault_Handler+0x4>

08001794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <UsageFault_Handler+0x4>

0800179a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOP_XEL_Pin);
 80017ac:	2004      	movs	r0, #4
 80017ae:	f000 fe69 	bl	8002484 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017bc:	4802      	ldr	r0, [pc, #8]	; (80017c8 <USART1_IRQHandler+0x10>)
 80017be:	f004 ffb7 	bl	8006730 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200002c8 	.word	0x200002c8

080017cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017d0:	4802      	ldr	r0, [pc, #8]	; (80017dc <TIM6_DAC_IRQHandler+0x10>)
 80017d2:	f003 fff6 	bl	80057c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000348 	.word	0x20000348

080017e0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80017e4:	4802      	ldr	r0, [pc, #8]	; (80017f0 <OTG_HS_IRQHandler+0x10>)
 80017e6:	f001 f8cf 	bl	8002988 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20009594 	.word	0x20009594

080017f4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80017f8:	4802      	ldr	r0, [pc, #8]	; (8001804 <LTDC_IRQHandler+0x10>)
 80017fa:	f002 fcf5 	bl	80041e8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000138 	.word	0x20000138

08001808 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800180c:	4802      	ldr	r0, [pc, #8]	; (8001818 <DMA2D_IRQHandler+0x10>)
 800180e:	f000 fab6 	bl	8001d7e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200000a4 	.word	0x200000a4

0800181c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001824:	4a14      	ldr	r2, [pc, #80]	; (8001878 <_sbrk+0x5c>)
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <_sbrk+0x60>)
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <_sbrk+0x64>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <_sbrk+0x64>)
 800183a:	4a12      	ldr	r2, [pc, #72]	; (8001884 <_sbrk+0x68>)
 800183c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	429a      	cmp	r2, r3
 800184a:	d207      	bcs.n	800185c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800184c:	f00c fdf4 	bl	800e438 <__errno>
 8001850:	4603      	mov	r3, r0
 8001852:	220c      	movs	r2, #12
 8001854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	e009      	b.n	8001870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001862:	4b07      	ldr	r3, [pc, #28]	; (8001880 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <_sbrk+0x64>)
 800186c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800186e:	68fb      	ldr	r3, [r7, #12]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20030000 	.word	0x20030000
 800187c:	00000400 	.word	0x00000400
 8001880:	20000390 	.word	0x20000390
 8001884:	200099e0 	.word	0x200099e0

08001888 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <SystemInit+0x20>)
 800188e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001892:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <SystemInit+0x20>)
 8001894:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001898:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80018ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018e4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018b0:	480d      	ldr	r0, [pc, #52]	; (80018e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018b2:	490e      	ldr	r1, [pc, #56]	; (80018ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018b4:	4a0e      	ldr	r2, [pc, #56]	; (80018f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b8:	e002      	b.n	80018c0 <LoopCopyDataInit>

080018ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018be:	3304      	adds	r3, #4

080018c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c4:	d3f9      	bcc.n	80018ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018c6:	4a0b      	ldr	r2, [pc, #44]	; (80018f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018c8:	4c0b      	ldr	r4, [pc, #44]	; (80018f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018cc:	e001      	b.n	80018d2 <LoopFillZerobss>

080018ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d0:	3204      	adds	r2, #4

080018d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d4:	d3fb      	bcc.n	80018ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018d6:	f7ff ffd7 	bl	8001888 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018da:	f00c fdb3 	bl	800e444 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018de:	f7fe fe1f 	bl	8000520 <main>
  bx  lr    
 80018e2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80018e4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80018e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018ec:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80018f0:	0800e5dc 	.word	0x0800e5dc
  ldr r2, =_sbss
 80018f4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80018f8:	200099e0 	.word	0x200099e0

080018fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018fc:	e7fe      	b.n	80018fc <ADC_IRQHandler>
	...

08001900 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001904:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <HAL_Init+0x40>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0d      	ldr	r2, [pc, #52]	; (8001940 <HAL_Init+0x40>)
 800190a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800190e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <HAL_Init+0x40>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <HAL_Init+0x40>)
 8001916:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800191a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <HAL_Init+0x40>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a07      	ldr	r2, [pc, #28]	; (8001940 <HAL_Init+0x40>)
 8001922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001926:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001928:	2003      	movs	r0, #3
 800192a:	f000 f8fc 	bl	8001b26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800192e:	200f      	movs	r0, #15
 8001930:	f7ff fea8 	bl	8001684 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001934:	f7ff fae4 	bl	8000f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40023c00 	.word	0x40023c00

08001944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_IncTick+0x20>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_IncTick+0x24>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4413      	add	r3, r2
 8001954:	4a04      	ldr	r2, [pc, #16]	; (8001968 <HAL_IncTick+0x24>)
 8001956:	6013      	str	r3, [r2, #0]
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000008 	.word	0x20000008
 8001968:	20000394 	.word	0x20000394

0800196c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return uwTick;
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <HAL_GetTick+0x14>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	20000394 	.word	0x20000394

08001984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800198c:	f7ff ffee 	bl	800196c <HAL_GetTick>
 8001990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800199c:	d005      	beq.n	80019aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800199e:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <HAL_Delay+0x44>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4413      	add	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019aa:	bf00      	nop
 80019ac:	f7ff ffde 	bl	800196c <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d8f7      	bhi.n	80019ac <HAL_Delay+0x28>
  {
  }
}
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000008 	.word	0x20000008

080019cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019e8:	4013      	ands	r3, r2
 80019ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fe:	4a04      	ldr	r2, [pc, #16]	; (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	60d3      	str	r3, [r2, #12]
}
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a18:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <__NVIC_GetPriorityGrouping+0x18>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	f003 0307 	and.w	r3, r3, #7
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	db0b      	blt.n	8001a5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	f003 021f 	and.w	r2, r3, #31
 8001a48:	4907      	ldr	r1, [pc, #28]	; (8001a68 <__NVIC_EnableIRQ+0x38>)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	095b      	lsrs	r3, r3, #5
 8001a50:	2001      	movs	r0, #1
 8001a52:	fa00 f202 	lsl.w	r2, r0, r2
 8001a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000e100 	.word	0xe000e100

08001a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	6039      	str	r1, [r7, #0]
 8001a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	db0a      	blt.n	8001a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	490c      	ldr	r1, [pc, #48]	; (8001ab8 <__NVIC_SetPriority+0x4c>)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	0112      	lsls	r2, r2, #4
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	440b      	add	r3, r1
 8001a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a94:	e00a      	b.n	8001aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	4908      	ldr	r1, [pc, #32]	; (8001abc <__NVIC_SetPriority+0x50>)
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	3b04      	subs	r3, #4
 8001aa4:	0112      	lsls	r2, r2, #4
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	761a      	strb	r2, [r3, #24]
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000e100 	.word	0xe000e100
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b089      	sub	sp, #36	; 0x24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f1c3 0307 	rsb	r3, r3, #7
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	bf28      	it	cs
 8001ade:	2304      	movcs	r3, #4
 8001ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	2b06      	cmp	r3, #6
 8001ae8:	d902      	bls.n	8001af0 <NVIC_EncodePriority+0x30>
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3b03      	subs	r3, #3
 8001aee:	e000      	b.n	8001af2 <NVIC_EncodePriority+0x32>
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af4:	f04f 32ff 	mov.w	r2, #4294967295
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43da      	mvns	r2, r3
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	401a      	ands	r2, r3
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b08:	f04f 31ff 	mov.w	r1, #4294967295
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b12:	43d9      	mvns	r1, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	4313      	orrs	r3, r2
         );
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3724      	adds	r7, #36	; 0x24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff ff4c 	bl	80019cc <__NVIC_SetPriorityGrouping>
}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
 8001b48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b4e:	f7ff ff61 	bl	8001a14 <__NVIC_GetPriorityGrouping>
 8001b52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	68b9      	ldr	r1, [r7, #8]
 8001b58:	6978      	ldr	r0, [r7, #20]
 8001b5a:	f7ff ffb1 	bl	8001ac0 <NVIC_EncodePriority>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b64:	4611      	mov	r1, r2
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff ff80 	bl	8001a6c <__NVIC_SetPriority>
}
 8001b6c:	bf00      	nop
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff ff54 	bl	8001a30 <__NVIC_EnableIRQ>
}
 8001b88:	bf00      	nop
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00e      	b.n	8001bc0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	795b      	ldrb	r3, [r3, #5]
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d105      	bne.n	8001bb8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff f9d0 	bl	8000f58 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001bd6:	f7ff fec9 	bl	800196c <HAL_GetTick>
 8001bda:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d008      	beq.n	8001bfa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2280      	movs	r2, #128	; 0x80
 8001bec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e052      	b.n	8001ca0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0216 	bic.w	r2, r2, #22
 8001c08:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	695a      	ldr	r2, [r3, #20]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c18:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d103      	bne.n	8001c2a <HAL_DMA_Abort+0x62>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d007      	beq.n	8001c3a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0208 	bic.w	r2, r2, #8
 8001c38:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 0201 	bic.w	r2, r2, #1
 8001c48:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c4a:	e013      	b.n	8001c74 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c4c:	f7ff fe8e 	bl	800196c <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b05      	cmp	r3, #5
 8001c58:	d90c      	bls.n	8001c74 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2203      	movs	r2, #3
 8001c64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e015      	b.n	8001ca0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1e4      	bne.n	8001c4c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c86:	223f      	movs	r2, #63	; 0x3f
 8001c88:	409a      	lsls	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d004      	beq.n	8001cc6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2280      	movs	r2, #128	; 0x80
 8001cc0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e00c      	b.n	8001ce0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2205      	movs	r2, #5
 8001cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 0201 	bic.w	r2, r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e03b      	b.n	8001d76 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d106      	bne.n	8001d18 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff f942 	bl	8000f9c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d3c:	f023 0107 	bic.w	r1, r3, #7
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d56:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	68d1      	ldr	r1, [r2, #12]
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	6812      	ldr	r2, [r2, #0]
 8001d62:	430b      	orrs	r3, r1
 8001d64:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b084      	sub	sp, #16
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d026      	beq.n	8001dee <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d021      	beq.n	8001dee <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001db8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dbe:	f043 0201 	orr.w	r2, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2204      	movs	r2, #4
 8001dd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f003 0320 	and.w	r3, r3, #32
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d026      	beq.n	8001e46 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d021      	beq.n	8001e46 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e10:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2220      	movs	r2, #32
 8001e18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1e:	f043 0202 	orr.w	r2, r3, #2
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2204      	movs	r2, #4
 8001e2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f003 0308 	and.w	r3, r3, #8
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d026      	beq.n	8001e9e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d021      	beq.n	8001e9e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e68:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2208      	movs	r2, #8
 8001e70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e76:	f043 0204 	orr.w	r2, r3, #4
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2204      	movs	r2, #4
 8001e82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d013      	beq.n	8001ed0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00e      	beq.n	8001ed0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ec0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2204      	movs	r2, #4
 8001ec8:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f853 	bl	8001f76 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d024      	beq.n	8001f24 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d01f      	beq.n	8001f24 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ef2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2202      	movs	r2, #2
 8001efa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f003 0310 	and.w	r3, r3, #16
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d01f      	beq.n	8001f6e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d01a      	beq.n	8001f6e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f46:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2210      	movs	r2, #16
 8001f4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f80e 	bl	8001f8a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001f6e:	bf00      	nop
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b087      	sub	sp, #28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d101      	bne.n	8001fc0 <HAL_DMA2D_ConfigLayer+0x20>
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	e079      	b.n	80020b4 <HAL_DMA2D_ConfigLayer+0x114>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2202      	movs	r2, #2
 8001fcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	011b      	lsls	r3, r3, #4
 8001fd4:	3318      	adds	r3, #24
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	4413      	add	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	041b      	lsls	r3, r3, #16
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001fea:	4b35      	ldr	r3, [pc, #212]	; (80020c0 <HAL_DMA2D_ConfigLayer+0x120>)
 8001fec:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b0a      	cmp	r3, #10
 8001ff4:	d003      	beq.n	8001ffe <HAL_DMA2D_ConfigLayer+0x5e>
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b09      	cmp	r3, #9
 8001ffc:	d107      	bne.n	800200e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	4313      	orrs	r3, r2
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	e005      	b.n	800201a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	061b      	lsls	r3, r3, #24
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	4313      	orrs	r3, r2
 8002018:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d120      	bne.n	8002062 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	43db      	mvns	r3, r3
 800202a:	ea02 0103 	and.w	r1, r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	430a      	orrs	r2, r1
 8002036:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b0a      	cmp	r3, #10
 8002048:	d003      	beq.n	8002052 <HAL_DMA2D_ConfigLayer+0xb2>
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b09      	cmp	r3, #9
 8002050:	d127      	bne.n	80020a2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800205e:	629a      	str	r2, [r3, #40]	; 0x28
 8002060:	e01f      	b.n	80020a2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	69da      	ldr	r2, [r3, #28]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	43db      	mvns	r3, r3
 800206c:	ea02 0103 	and.w	r1, r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	430a      	orrs	r2, r1
 8002078:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	6812      	ldr	r2, [r2, #0]
 8002082:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b0a      	cmp	r3, #10
 800208a:	d003      	beq.n	8002094 <HAL_DMA2D_ConfigLayer+0xf4>
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b09      	cmp	r3, #9
 8002092:	d106      	bne.n	80020a2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80020a0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	371c      	adds	r7, #28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	ff03000f 	.word	0xff03000f

080020c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b089      	sub	sp, #36	; 0x24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
 80020de:	e177      	b.n	80023d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020e0:	2201      	movs	r2, #1
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	4013      	ands	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	f040 8166 	bne.w	80023ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	2b01      	cmp	r3, #1
 8002108:	d005      	beq.n	8002116 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002112:	2b02      	cmp	r3, #2
 8002114:	d130      	bne.n	8002178 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	2203      	movs	r2, #3
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800214c:	2201      	movs	r2, #1
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f003 0201 	and.w	r2, r3, #1
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	2b03      	cmp	r3, #3
 8002182:	d017      	beq.n	80021b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	2203      	movs	r2, #3
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d123      	bne.n	8002208 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	08da      	lsrs	r2, r3, #3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3208      	adds	r2, #8
 80021c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	220f      	movs	r2, #15
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	08da      	lsrs	r2, r3, #3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3208      	adds	r2, #8
 8002202:	69b9      	ldr	r1, [r7, #24]
 8002204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	2203      	movs	r2, #3
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0203 	and.w	r2, r3, #3
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 80c0 	beq.w	80023ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	4b66      	ldr	r3, [pc, #408]	; (80023e8 <HAL_GPIO_Init+0x324>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	4a65      	ldr	r2, [pc, #404]	; (80023e8 <HAL_GPIO_Init+0x324>)
 8002254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002258:	6453      	str	r3, [r2, #68]	; 0x44
 800225a:	4b63      	ldr	r3, [pc, #396]	; (80023e8 <HAL_GPIO_Init+0x324>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002266:	4a61      	ldr	r2, [pc, #388]	; (80023ec <HAL_GPIO_Init+0x328>)
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	089b      	lsrs	r3, r3, #2
 800226c:	3302      	adds	r3, #2
 800226e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	220f      	movs	r2, #15
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a58      	ldr	r2, [pc, #352]	; (80023f0 <HAL_GPIO_Init+0x32c>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d037      	beq.n	8002302 <HAL_GPIO_Init+0x23e>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a57      	ldr	r2, [pc, #348]	; (80023f4 <HAL_GPIO_Init+0x330>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d031      	beq.n	80022fe <HAL_GPIO_Init+0x23a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a56      	ldr	r2, [pc, #344]	; (80023f8 <HAL_GPIO_Init+0x334>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d02b      	beq.n	80022fa <HAL_GPIO_Init+0x236>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a55      	ldr	r2, [pc, #340]	; (80023fc <HAL_GPIO_Init+0x338>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d025      	beq.n	80022f6 <HAL_GPIO_Init+0x232>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a54      	ldr	r2, [pc, #336]	; (8002400 <HAL_GPIO_Init+0x33c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d01f      	beq.n	80022f2 <HAL_GPIO_Init+0x22e>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a53      	ldr	r2, [pc, #332]	; (8002404 <HAL_GPIO_Init+0x340>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d019      	beq.n	80022ee <HAL_GPIO_Init+0x22a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a52      	ldr	r2, [pc, #328]	; (8002408 <HAL_GPIO_Init+0x344>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d013      	beq.n	80022ea <HAL_GPIO_Init+0x226>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a51      	ldr	r2, [pc, #324]	; (800240c <HAL_GPIO_Init+0x348>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d00d      	beq.n	80022e6 <HAL_GPIO_Init+0x222>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a50      	ldr	r2, [pc, #320]	; (8002410 <HAL_GPIO_Init+0x34c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d007      	beq.n	80022e2 <HAL_GPIO_Init+0x21e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a4f      	ldr	r2, [pc, #316]	; (8002414 <HAL_GPIO_Init+0x350>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d101      	bne.n	80022de <HAL_GPIO_Init+0x21a>
 80022da:	2309      	movs	r3, #9
 80022dc:	e012      	b.n	8002304 <HAL_GPIO_Init+0x240>
 80022de:	230a      	movs	r3, #10
 80022e0:	e010      	b.n	8002304 <HAL_GPIO_Init+0x240>
 80022e2:	2308      	movs	r3, #8
 80022e4:	e00e      	b.n	8002304 <HAL_GPIO_Init+0x240>
 80022e6:	2307      	movs	r3, #7
 80022e8:	e00c      	b.n	8002304 <HAL_GPIO_Init+0x240>
 80022ea:	2306      	movs	r3, #6
 80022ec:	e00a      	b.n	8002304 <HAL_GPIO_Init+0x240>
 80022ee:	2305      	movs	r3, #5
 80022f0:	e008      	b.n	8002304 <HAL_GPIO_Init+0x240>
 80022f2:	2304      	movs	r3, #4
 80022f4:	e006      	b.n	8002304 <HAL_GPIO_Init+0x240>
 80022f6:	2303      	movs	r3, #3
 80022f8:	e004      	b.n	8002304 <HAL_GPIO_Init+0x240>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e002      	b.n	8002304 <HAL_GPIO_Init+0x240>
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <HAL_GPIO_Init+0x240>
 8002302:	2300      	movs	r3, #0
 8002304:	69fa      	ldr	r2, [r7, #28]
 8002306:	f002 0203 	and.w	r2, r2, #3
 800230a:	0092      	lsls	r2, r2, #2
 800230c:	4093      	lsls	r3, r2
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002314:	4935      	ldr	r1, [pc, #212]	; (80023ec <HAL_GPIO_Init+0x328>)
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	089b      	lsrs	r3, r3, #2
 800231a:	3302      	adds	r3, #2
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002322:	4b3d      	ldr	r3, [pc, #244]	; (8002418 <HAL_GPIO_Init+0x354>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	43db      	mvns	r3, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4013      	ands	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002346:	4a34      	ldr	r2, [pc, #208]	; (8002418 <HAL_GPIO_Init+0x354>)
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800234c:	4b32      	ldr	r3, [pc, #200]	; (8002418 <HAL_GPIO_Init+0x354>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	43db      	mvns	r3, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4013      	ands	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002370:	4a29      	ldr	r2, [pc, #164]	; (8002418 <HAL_GPIO_Init+0x354>)
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002376:	4b28      	ldr	r3, [pc, #160]	; (8002418 <HAL_GPIO_Init+0x354>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	43db      	mvns	r3, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4013      	ands	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800239a:	4a1f      	ldr	r2, [pc, #124]	; (8002418 <HAL_GPIO_Init+0x354>)
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023a0:	4b1d      	ldr	r3, [pc, #116]	; (8002418 <HAL_GPIO_Init+0x354>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023c4:	4a14      	ldr	r2, [pc, #80]	; (8002418 <HAL_GPIO_Init+0x354>)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	3301      	adds	r3, #1
 80023ce:	61fb      	str	r3, [r7, #28]
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	2b0f      	cmp	r3, #15
 80023d4:	f67f ae84 	bls.w	80020e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023d8:	bf00      	nop
 80023da:	bf00      	nop
 80023dc:	3724      	adds	r7, #36	; 0x24
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	40023800 	.word	0x40023800
 80023ec:	40013800 	.word	0x40013800
 80023f0:	40020000 	.word	0x40020000
 80023f4:	40020400 	.word	0x40020400
 80023f8:	40020800 	.word	0x40020800
 80023fc:	40020c00 	.word	0x40020c00
 8002400:	40021000 	.word	0x40021000
 8002404:	40021400 	.word	0x40021400
 8002408:	40021800 	.word	0x40021800
 800240c:	40021c00 	.word	0x40021c00
 8002410:	40022000 	.word	0x40022000
 8002414:	40022400 	.word	0x40022400
 8002418:	40013c00 	.word	0x40013c00

0800241c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	807b      	strh	r3, [r7, #2]
 8002428:	4613      	mov	r3, r2
 800242a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800242c:	787b      	ldrb	r3, [r7, #1]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002432:	887a      	ldrh	r2, [r7, #2]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002438:	e003      	b.n	8002442 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800243a:	887b      	ldrh	r3, [r7, #2]
 800243c:	041a      	lsls	r2, r3, #16
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	619a      	str	r2, [r3, #24]
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800244e:	b480      	push	{r7}
 8002450:	b085      	sub	sp, #20
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	460b      	mov	r3, r1
 8002458:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002460:	887a      	ldrh	r2, [r7, #2]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	4013      	ands	r3, r2
 8002466:	041a      	lsls	r2, r3, #16
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	43d9      	mvns	r1, r3
 800246c:	887b      	ldrh	r3, [r7, #2]
 800246e:	400b      	ands	r3, r1
 8002470:	431a      	orrs	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	619a      	str	r2, [r3, #24]
}
 8002476:	bf00      	nop
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
	...

08002484 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800248e:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002490:	695a      	ldr	r2, [r3, #20]
 8002492:	88fb      	ldrh	r3, [r7, #6]
 8002494:	4013      	ands	r3, r2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d006      	beq.n	80024a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800249a:	4a05      	ldr	r2, [pc, #20]	; (80024b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800249c:	88fb      	ldrh	r3, [r7, #6]
 800249e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024a0:	88fb      	ldrh	r3, [r7, #6]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe fcae 	bl	8000e04 <HAL_GPIO_EXTI_Callback>
  }
}
 80024a8:	bf00      	nop
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40013c00 	.word	0x40013c00

080024b4 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80024b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024b6:	b08f      	sub	sp, #60	; 0x3c
 80024b8:	af0a      	add	r7, sp, #40	; 0x28
 80024ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e054      	b.n	8002570 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d106      	bne.n	80024e6 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f00b fbcb 	bl	800dc7c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2203      	movs	r2, #3
 80024ea:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d102      	bne.n	8002500 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f005 f97f 	bl	8007808 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	603b      	str	r3, [r7, #0]
 8002510:	687e      	ldr	r6, [r7, #4]
 8002512:	466d      	mov	r5, sp
 8002514:	f106 0410 	add.w	r4, r6, #16
 8002518:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800251a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800251c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800251e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002520:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002524:	e885 0003 	stmia.w	r5, {r0, r1}
 8002528:	1d33      	adds	r3, r6, #4
 800252a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800252c:	6838      	ldr	r0, [r7, #0]
 800252e:	f005 f8f9 	bl	8007724 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2101      	movs	r1, #1
 8002538:	4618      	mov	r0, r3
 800253a:	f005 f976 	bl	800782a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	687e      	ldr	r6, [r7, #4]
 8002546:	466d      	mov	r5, sp
 8002548:	f106 0410 	add.w	r4, r6, #16
 800254c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800254e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002550:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002552:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002554:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002558:	e885 0003 	stmia.w	r5, {r0, r1}
 800255c:	1d33      	adds	r3, r6, #4
 800255e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002560:	6838      	ldr	r0, [r7, #0]
 8002562:	f005 faff 	bl	8007b64 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002578 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002578:	b590      	push	{r4, r7, lr}
 800257a:	b089      	sub	sp, #36	; 0x24
 800257c:	af04      	add	r7, sp, #16
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	4608      	mov	r0, r1
 8002582:	4611      	mov	r1, r2
 8002584:	461a      	mov	r2, r3
 8002586:	4603      	mov	r3, r0
 8002588:	70fb      	strb	r3, [r7, #3]
 800258a:	460b      	mov	r3, r1
 800258c:	70bb      	strb	r3, [r7, #2]
 800258e:	4613      	mov	r3, r2
 8002590:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002598:	2b01      	cmp	r3, #1
 800259a:	d101      	bne.n	80025a0 <HAL_HCD_HC_Init+0x28>
 800259c:	2302      	movs	r3, #2
 800259e:	e076      	b.n	800268e <HAL_HCD_HC_Init+0x116>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	212c      	movs	r1, #44	; 0x2c
 80025ae:	fb01 f303 	mul.w	r3, r1, r3
 80025b2:	4413      	add	r3, r2
 80025b4:	333d      	adds	r3, #61	; 0x3d
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80025ba:	78fb      	ldrb	r3, [r7, #3]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	212c      	movs	r1, #44	; 0x2c
 80025c0:	fb01 f303 	mul.w	r3, r1, r3
 80025c4:	4413      	add	r3, r2
 80025c6:	3338      	adds	r3, #56	; 0x38
 80025c8:	787a      	ldrb	r2, [r7, #1]
 80025ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80025cc:	78fb      	ldrb	r3, [r7, #3]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	212c      	movs	r1, #44	; 0x2c
 80025d2:	fb01 f303 	mul.w	r3, r1, r3
 80025d6:	4413      	add	r3, r2
 80025d8:	3340      	adds	r3, #64	; 0x40
 80025da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80025dc:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80025de:	78fb      	ldrb	r3, [r7, #3]
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	212c      	movs	r1, #44	; 0x2c
 80025e4:	fb01 f303 	mul.w	r3, r1, r3
 80025e8:	4413      	add	r3, r2
 80025ea:	3339      	adds	r3, #57	; 0x39
 80025ec:	78fa      	ldrb	r2, [r7, #3]
 80025ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80025f0:	78fb      	ldrb	r3, [r7, #3]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	212c      	movs	r1, #44	; 0x2c
 80025f6:	fb01 f303 	mul.w	r3, r1, r3
 80025fa:	4413      	add	r3, r2
 80025fc:	333f      	adds	r3, #63	; 0x3f
 80025fe:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002602:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002604:	78fb      	ldrb	r3, [r7, #3]
 8002606:	78ba      	ldrb	r2, [r7, #2]
 8002608:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800260c:	b2d0      	uxtb	r0, r2
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	212c      	movs	r1, #44	; 0x2c
 8002612:	fb01 f303 	mul.w	r3, r1, r3
 8002616:	4413      	add	r3, r2
 8002618:	333a      	adds	r3, #58	; 0x3a
 800261a:	4602      	mov	r2, r0
 800261c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800261e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002622:	2b00      	cmp	r3, #0
 8002624:	da09      	bge.n	800263a <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002626:	78fb      	ldrb	r3, [r7, #3]
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	212c      	movs	r1, #44	; 0x2c
 800262c:	fb01 f303 	mul.w	r3, r1, r3
 8002630:	4413      	add	r3, r2
 8002632:	333b      	adds	r3, #59	; 0x3b
 8002634:	2201      	movs	r2, #1
 8002636:	701a      	strb	r2, [r3, #0]
 8002638:	e008      	b.n	800264c <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800263a:	78fb      	ldrb	r3, [r7, #3]
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	212c      	movs	r1, #44	; 0x2c
 8002640:	fb01 f303 	mul.w	r3, r1, r3
 8002644:	4413      	add	r3, r2
 8002646:	333b      	adds	r3, #59	; 0x3b
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800264c:	78fb      	ldrb	r3, [r7, #3]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	212c      	movs	r1, #44	; 0x2c
 8002652:	fb01 f303 	mul.w	r3, r1, r3
 8002656:	4413      	add	r3, r2
 8002658:	333c      	adds	r3, #60	; 0x3c
 800265a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800265e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6818      	ldr	r0, [r3, #0]
 8002664:	787c      	ldrb	r4, [r7, #1]
 8002666:	78ba      	ldrb	r2, [r7, #2]
 8002668:	78f9      	ldrb	r1, [r7, #3]
 800266a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800266c:	9302      	str	r3, [sp, #8]
 800266e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002672:	9301      	str	r3, [sp, #4]
 8002674:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	4623      	mov	r3, r4
 800267c:	f005 fbf8 	bl	8007e70 <USB_HC_Init>
 8002680:	4603      	mov	r3, r0
 8002682:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800268c:	7bfb      	ldrb	r3, [r7, #15]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	bd90      	pop	{r4, r7, pc}

08002696 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b084      	sub	sp, #16
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
 800269e:	460b      	mov	r3, r1
 80026a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d101      	bne.n	80026b4 <HAL_HCD_HC_Halt+0x1e>
 80026b0:	2302      	movs	r3, #2
 80026b2:	e00f      	b.n	80026d4 <HAL_HCD_HC_Halt+0x3e>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	78fa      	ldrb	r2, [r7, #3]
 80026c2:	4611      	mov	r1, r2
 80026c4:	4618      	mov	r0, r3
 80026c6:	f005 fe48 	bl	800835a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	4608      	mov	r0, r1
 80026e6:	4611      	mov	r1, r2
 80026e8:	461a      	mov	r2, r3
 80026ea:	4603      	mov	r3, r0
 80026ec:	70fb      	strb	r3, [r7, #3]
 80026ee:	460b      	mov	r3, r1
 80026f0:	70bb      	strb	r3, [r7, #2]
 80026f2:	4613      	mov	r3, r2
 80026f4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80026f6:	78fb      	ldrb	r3, [r7, #3]
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	212c      	movs	r1, #44	; 0x2c
 80026fc:	fb01 f303 	mul.w	r3, r1, r3
 8002700:	4413      	add	r3, r2
 8002702:	333b      	adds	r3, #59	; 0x3b
 8002704:	78ba      	ldrb	r2, [r7, #2]
 8002706:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002708:	78fb      	ldrb	r3, [r7, #3]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	212c      	movs	r1, #44	; 0x2c
 800270e:	fb01 f303 	mul.w	r3, r1, r3
 8002712:	4413      	add	r3, r2
 8002714:	333f      	adds	r3, #63	; 0x3f
 8002716:	787a      	ldrb	r2, [r7, #1]
 8002718:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800271a:	7c3b      	ldrb	r3, [r7, #16]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d112      	bne.n	8002746 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	212c      	movs	r1, #44	; 0x2c
 8002726:	fb01 f303 	mul.w	r3, r1, r3
 800272a:	4413      	add	r3, r2
 800272c:	3342      	adds	r3, #66	; 0x42
 800272e:	2203      	movs	r2, #3
 8002730:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002732:	78fb      	ldrb	r3, [r7, #3]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	212c      	movs	r1, #44	; 0x2c
 8002738:	fb01 f303 	mul.w	r3, r1, r3
 800273c:	4413      	add	r3, r2
 800273e:	333d      	adds	r3, #61	; 0x3d
 8002740:	7f3a      	ldrb	r2, [r7, #28]
 8002742:	701a      	strb	r2, [r3, #0]
 8002744:	e008      	b.n	8002758 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002746:	78fb      	ldrb	r3, [r7, #3]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	212c      	movs	r1, #44	; 0x2c
 800274c:	fb01 f303 	mul.w	r3, r1, r3
 8002750:	4413      	add	r3, r2
 8002752:	3342      	adds	r3, #66	; 0x42
 8002754:	2202      	movs	r2, #2
 8002756:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002758:	787b      	ldrb	r3, [r7, #1]
 800275a:	2b03      	cmp	r3, #3
 800275c:	f200 80c6 	bhi.w	80028ec <HAL_HCD_HC_SubmitRequest+0x210>
 8002760:	a201      	add	r2, pc, #4	; (adr r2, 8002768 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002766:	bf00      	nop
 8002768:	08002779 	.word	0x08002779
 800276c:	080028d9 	.word	0x080028d9
 8002770:	080027dd 	.word	0x080027dd
 8002774:	0800285b 	.word	0x0800285b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002778:	7c3b      	ldrb	r3, [r7, #16]
 800277a:	2b01      	cmp	r3, #1
 800277c:	f040 80b8 	bne.w	80028f0 <HAL_HCD_HC_SubmitRequest+0x214>
 8002780:	78bb      	ldrb	r3, [r7, #2]
 8002782:	2b00      	cmp	r3, #0
 8002784:	f040 80b4 	bne.w	80028f0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002788:	8b3b      	ldrh	r3, [r7, #24]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d108      	bne.n	80027a0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800278e:	78fb      	ldrb	r3, [r7, #3]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	212c      	movs	r1, #44	; 0x2c
 8002794:	fb01 f303 	mul.w	r3, r1, r3
 8002798:	4413      	add	r3, r2
 800279a:	3355      	adds	r3, #85	; 0x55
 800279c:	2201      	movs	r2, #1
 800279e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	212c      	movs	r1, #44	; 0x2c
 80027a6:	fb01 f303 	mul.w	r3, r1, r3
 80027aa:	4413      	add	r3, r2
 80027ac:	3355      	adds	r3, #85	; 0x55
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d109      	bne.n	80027c8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027b4:	78fb      	ldrb	r3, [r7, #3]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	212c      	movs	r1, #44	; 0x2c
 80027ba:	fb01 f303 	mul.w	r3, r1, r3
 80027be:	4413      	add	r3, r2
 80027c0:	3342      	adds	r3, #66	; 0x42
 80027c2:	2200      	movs	r2, #0
 80027c4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80027c6:	e093      	b.n	80028f0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027c8:	78fb      	ldrb	r3, [r7, #3]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	212c      	movs	r1, #44	; 0x2c
 80027ce:	fb01 f303 	mul.w	r3, r1, r3
 80027d2:	4413      	add	r3, r2
 80027d4:	3342      	adds	r3, #66	; 0x42
 80027d6:	2202      	movs	r2, #2
 80027d8:	701a      	strb	r2, [r3, #0]
      break;
 80027da:	e089      	b.n	80028f0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80027dc:	78bb      	ldrb	r3, [r7, #2]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d11d      	bne.n	800281e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80027e2:	78fb      	ldrb	r3, [r7, #3]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	212c      	movs	r1, #44	; 0x2c
 80027e8:	fb01 f303 	mul.w	r3, r1, r3
 80027ec:	4413      	add	r3, r2
 80027ee:	3355      	adds	r3, #85	; 0x55
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d109      	bne.n	800280a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027f6:	78fb      	ldrb	r3, [r7, #3]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	212c      	movs	r1, #44	; 0x2c
 80027fc:	fb01 f303 	mul.w	r3, r1, r3
 8002800:	4413      	add	r3, r2
 8002802:	3342      	adds	r3, #66	; 0x42
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002808:	e073      	b.n	80028f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800280a:	78fb      	ldrb	r3, [r7, #3]
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	212c      	movs	r1, #44	; 0x2c
 8002810:	fb01 f303 	mul.w	r3, r1, r3
 8002814:	4413      	add	r3, r2
 8002816:	3342      	adds	r3, #66	; 0x42
 8002818:	2202      	movs	r2, #2
 800281a:	701a      	strb	r2, [r3, #0]
      break;
 800281c:	e069      	b.n	80028f2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800281e:	78fb      	ldrb	r3, [r7, #3]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	212c      	movs	r1, #44	; 0x2c
 8002824:	fb01 f303 	mul.w	r3, r1, r3
 8002828:	4413      	add	r3, r2
 800282a:	3354      	adds	r3, #84	; 0x54
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d109      	bne.n	8002846 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002832:	78fb      	ldrb	r3, [r7, #3]
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	212c      	movs	r1, #44	; 0x2c
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	4413      	add	r3, r2
 800283e:	3342      	adds	r3, #66	; 0x42
 8002840:	2200      	movs	r2, #0
 8002842:	701a      	strb	r2, [r3, #0]
      break;
 8002844:	e055      	b.n	80028f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002846:	78fb      	ldrb	r3, [r7, #3]
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	212c      	movs	r1, #44	; 0x2c
 800284c:	fb01 f303 	mul.w	r3, r1, r3
 8002850:	4413      	add	r3, r2
 8002852:	3342      	adds	r3, #66	; 0x42
 8002854:	2202      	movs	r2, #2
 8002856:	701a      	strb	r2, [r3, #0]
      break;
 8002858:	e04b      	b.n	80028f2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800285a:	78bb      	ldrb	r3, [r7, #2]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d11d      	bne.n	800289c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002860:	78fb      	ldrb	r3, [r7, #3]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	212c      	movs	r1, #44	; 0x2c
 8002866:	fb01 f303 	mul.w	r3, r1, r3
 800286a:	4413      	add	r3, r2
 800286c:	3355      	adds	r3, #85	; 0x55
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d109      	bne.n	8002888 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002874:	78fb      	ldrb	r3, [r7, #3]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	212c      	movs	r1, #44	; 0x2c
 800287a:	fb01 f303 	mul.w	r3, r1, r3
 800287e:	4413      	add	r3, r2
 8002880:	3342      	adds	r3, #66	; 0x42
 8002882:	2200      	movs	r2, #0
 8002884:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002886:	e034      	b.n	80028f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002888:	78fb      	ldrb	r3, [r7, #3]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	212c      	movs	r1, #44	; 0x2c
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	4413      	add	r3, r2
 8002894:	3342      	adds	r3, #66	; 0x42
 8002896:	2202      	movs	r2, #2
 8002898:	701a      	strb	r2, [r3, #0]
      break;
 800289a:	e02a      	b.n	80028f2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800289c:	78fb      	ldrb	r3, [r7, #3]
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	212c      	movs	r1, #44	; 0x2c
 80028a2:	fb01 f303 	mul.w	r3, r1, r3
 80028a6:	4413      	add	r3, r2
 80028a8:	3354      	adds	r3, #84	; 0x54
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d109      	bne.n	80028c4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028b0:	78fb      	ldrb	r3, [r7, #3]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	212c      	movs	r1, #44	; 0x2c
 80028b6:	fb01 f303 	mul.w	r3, r1, r3
 80028ba:	4413      	add	r3, r2
 80028bc:	3342      	adds	r3, #66	; 0x42
 80028be:	2200      	movs	r2, #0
 80028c0:	701a      	strb	r2, [r3, #0]
      break;
 80028c2:	e016      	b.n	80028f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028c4:	78fb      	ldrb	r3, [r7, #3]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	212c      	movs	r1, #44	; 0x2c
 80028ca:	fb01 f303 	mul.w	r3, r1, r3
 80028ce:	4413      	add	r3, r2
 80028d0:	3342      	adds	r3, #66	; 0x42
 80028d2:	2202      	movs	r2, #2
 80028d4:	701a      	strb	r2, [r3, #0]
      break;
 80028d6:	e00c      	b.n	80028f2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028d8:	78fb      	ldrb	r3, [r7, #3]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	212c      	movs	r1, #44	; 0x2c
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	3342      	adds	r3, #66	; 0x42
 80028e6:	2200      	movs	r2, #0
 80028e8:	701a      	strb	r2, [r3, #0]
      break;
 80028ea:	e002      	b.n	80028f2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80028ec:	bf00      	nop
 80028ee:	e000      	b.n	80028f2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80028f0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80028f2:	78fb      	ldrb	r3, [r7, #3]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	212c      	movs	r1, #44	; 0x2c
 80028f8:	fb01 f303 	mul.w	r3, r1, r3
 80028fc:	4413      	add	r3, r2
 80028fe:	3344      	adds	r3, #68	; 0x44
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	8b3a      	ldrh	r2, [r7, #24]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	202c      	movs	r0, #44	; 0x2c
 800290c:	fb00 f303 	mul.w	r3, r0, r3
 8002910:	440b      	add	r3, r1
 8002912:	334c      	adds	r3, #76	; 0x4c
 8002914:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002916:	78fb      	ldrb	r3, [r7, #3]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	212c      	movs	r1, #44	; 0x2c
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	4413      	add	r3, r2
 8002922:	3360      	adds	r3, #96	; 0x60
 8002924:	2200      	movs	r2, #0
 8002926:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002928:	78fb      	ldrb	r3, [r7, #3]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	212c      	movs	r1, #44	; 0x2c
 800292e:	fb01 f303 	mul.w	r3, r1, r3
 8002932:	4413      	add	r3, r2
 8002934:	3350      	adds	r3, #80	; 0x50
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800293a:	78fb      	ldrb	r3, [r7, #3]
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	212c      	movs	r1, #44	; 0x2c
 8002940:	fb01 f303 	mul.w	r3, r1, r3
 8002944:	4413      	add	r3, r2
 8002946:	3339      	adds	r3, #57	; 0x39
 8002948:	78fa      	ldrb	r2, [r7, #3]
 800294a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800294c:	78fb      	ldrb	r3, [r7, #3]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	212c      	movs	r1, #44	; 0x2c
 8002952:	fb01 f303 	mul.w	r3, r1, r3
 8002956:	4413      	add	r3, r2
 8002958:	3361      	adds	r3, #97	; 0x61
 800295a:	2200      	movs	r2, #0
 800295c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6818      	ldr	r0, [r3, #0]
 8002962:	78fb      	ldrb	r3, [r7, #3]
 8002964:	222c      	movs	r2, #44	; 0x2c
 8002966:	fb02 f303 	mul.w	r3, r2, r3
 800296a:	3338      	adds	r3, #56	; 0x38
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	18d1      	adds	r1, r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	b2db      	uxtb	r3, r3
 8002976:	461a      	mov	r2, r3
 8002978:	f005 fb9c 	bl	80080b4 <USB_HC_StartXfer>
 800297c:	4603      	mov	r3, r0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop

08002988 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f005 f89d 	bl	8007ade <USB_GetMode>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	f040 80f6 	bne.w	8002b98 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f005 f881 	bl	8007ab8 <USB_ReadInterrupts>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 80ec 	beq.w	8002b96 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f005 f878 	bl	8007ab8 <USB_ReadInterrupts>
 80029c8:	4603      	mov	r3, r0
 80029ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029d2:	d104      	bne.n	80029de <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80029dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f005 f868 	bl	8007ab8 <USB_ReadInterrupts>
 80029e8:	4603      	mov	r3, r0
 80029ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029f2:	d104      	bne.n	80029fe <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80029fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f005 f858 	bl	8007ab8 <USB_ReadInterrupts>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a12:	d104      	bne.n	8002a1e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a1c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f005 f848 	bl	8007ab8 <USB_ReadInterrupts>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d103      	bne.n	8002a3a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2202      	movs	r2, #2
 8002a38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f005 f83a 	bl	8007ab8 <USB_ReadInterrupts>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a4e:	d11c      	bne.n	8002a8a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002a58:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10f      	bne.n	8002a8a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002a6a:	2110      	movs	r1, #16
 8002a6c:	6938      	ldr	r0, [r7, #16]
 8002a6e:	f004 ff29 	bl	80078c4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002a72:	6938      	ldr	r0, [r7, #16]
 8002a74:	f004 ff5a 	bl	800792c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f005 f930 	bl	8007ce4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f00b f973 	bl	800dd70 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f005 f812 	bl	8007ab8 <USB_ReadInterrupts>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a9e:	d102      	bne.n	8002aa6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f001 f89e 	bl	8003be2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f005 f804 	bl	8007ab8 <USB_ReadInterrupts>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d106      	bne.n	8002ac8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f00b f93c 	bl	800dd38 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2208      	movs	r2, #8
 8002ac6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f004 fff3 	bl	8007ab8 <USB_ReadInterrupts>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	f003 0310 	and.w	r3, r3, #16
 8002ad8:	2b10      	cmp	r3, #16
 8002ada:	d101      	bne.n	8002ae0 <HAL_HCD_IRQHandler+0x158>
 8002adc:	2301      	movs	r3, #1
 8002ade:	e000      	b.n	8002ae2 <HAL_HCD_IRQHandler+0x15a>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d012      	beq.n	8002b0c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	699a      	ldr	r2, [r3, #24]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0210 	bic.w	r2, r2, #16
 8002af4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 ffa1 	bl	8003a3e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699a      	ldr	r2, [r3, #24]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0210 	orr.w	r2, r2, #16
 8002b0a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f004 ffd1 	bl	8007ab8 <USB_ReadInterrupts>
 8002b16:	4603      	mov	r3, r0
 8002b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b20:	d13a      	bne.n	8002b98 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f005 fc06 	bl	8008338 <USB_HC_ReadInterrupt>
 8002b2c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	e025      	b.n	8002b80 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d018      	beq.n	8002b7a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b5e:	d106      	bne.n	8002b6e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	4619      	mov	r1, r3
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f8ab 	bl	8002cc2 <HCD_HC_IN_IRQHandler>
 8002b6c:	e005      	b.n	8002b7a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	4619      	mov	r1, r3
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 fbf9 	bl	800336c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d3d4      	bcc.n	8002b34 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b92:	615a      	str	r2, [r3, #20]
 8002b94:	e000      	b.n	8002b98 <HAL_HCD_IRQHandler+0x210>
      return;
 8002b96:	bf00      	nop
    }
  }
}
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d101      	bne.n	8002bb4 <HAL_HCD_Start+0x16>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e013      	b.n	8002bdc <HAL_HCD_Start+0x3e>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f005 f8f2 	bl	8007dac <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f004 fe0a 	bl	80077e6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d101      	bne.n	8002bfa <HAL_HCD_Stop+0x16>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e00d      	b.n	8002c16 <HAL_HCD_Stop+0x32>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f005 fce0 	bl	80085cc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f005 f894 	bl	8007d58 <USB_ResetPort>
 8002c30:	4603      	mov	r3, r0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	460b      	mov	r3, r1
 8002c44:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002c46:	78fb      	ldrb	r3, [r7, #3]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	212c      	movs	r1, #44	; 0x2c
 8002c4c:	fb01 f303 	mul.w	r3, r1, r3
 8002c50:	4413      	add	r3, r2
 8002c52:	3360      	adds	r3, #96	; 0x60
 8002c54:	781b      	ldrb	r3, [r3, #0]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002c6e:	78fb      	ldrb	r3, [r7, #3]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	212c      	movs	r1, #44	; 0x2c
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	3350      	adds	r3, #80	; 0x50
 8002c7c:	681b      	ldr	r3, [r3, #0]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f005 f8d8 	bl	8007e4c <USB_GetCurrentFrame>
 8002c9c:	4603      	mov	r3, r0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f005 f8b3 	bl	8007e1e <USB_GetHostSpeed>
 8002cb8:	4603      	mov	r3, r0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b086      	sub	sp, #24
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	015a      	lsls	r2, r3, #5
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 0304 	and.w	r3, r3, #4
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d11a      	bne.n	8002d28 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	015a      	lsls	r2, r3, #5
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfe:	461a      	mov	r2, r3
 8002d00:	2304      	movs	r3, #4
 8002d02:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	212c      	movs	r1, #44	; 0x2c
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	3361      	adds	r3, #97	; 0x61
 8002d12:	2206      	movs	r2, #6
 8002d14:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	4611      	mov	r1, r2
 8002d20:	4618      	mov	r0, r3
 8002d22:	f005 fb1a 	bl	800835a <USB_HC_Halt>
 8002d26:	e0af      	b.n	8002e88 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	015a      	lsls	r2, r3, #5
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	4413      	add	r3, r2
 8002d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d3e:	d11b      	bne.n	8002d78 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	015a      	lsls	r2, r3, #5
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	4413      	add	r3, r2
 8002d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d52:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	212c      	movs	r1, #44	; 0x2c
 8002d5a:	fb01 f303 	mul.w	r3, r1, r3
 8002d5e:	4413      	add	r3, r2
 8002d60:	3361      	adds	r3, #97	; 0x61
 8002d62:	2207      	movs	r2, #7
 8002d64:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	4611      	mov	r1, r2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f005 faf2 	bl	800835a <USB_HC_Halt>
 8002d76:	e087      	b.n	8002e88 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	015a      	lsls	r2, r3, #5
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	4413      	add	r3, r2
 8002d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 0320 	and.w	r3, r3, #32
 8002d8a:	2b20      	cmp	r3, #32
 8002d8c:	d109      	bne.n	8002da2 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	015a      	lsls	r2, r3, #5
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	4413      	add	r3, r2
 8002d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	2320      	movs	r3, #32
 8002d9e:	6093      	str	r3, [r2, #8]
 8002da0:	e072      	b.n	8002e88 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d11a      	bne.n	8002dee <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	2308      	movs	r3, #8
 8002dc8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	212c      	movs	r1, #44	; 0x2c
 8002dd0:	fb01 f303 	mul.w	r3, r1, r3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3361      	adds	r3, #97	; 0x61
 8002dd8:	2205      	movs	r2, #5
 8002dda:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	4611      	mov	r1, r2
 8002de6:	4618      	mov	r0, r3
 8002de8:	f005 fab7 	bl	800835a <USB_HC_Halt>
 8002dec:	e04c      	b.n	8002e88 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	015a      	lsls	r2, r3, #5
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4413      	add	r3, r2
 8002df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e04:	d11b      	bne.n	8002e3e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	015a      	lsls	r2, r3, #5
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e12:	461a      	mov	r2, r3
 8002e14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e18:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	212c      	movs	r1, #44	; 0x2c
 8002e20:	fb01 f303 	mul.w	r3, r1, r3
 8002e24:	4413      	add	r3, r2
 8002e26:	3361      	adds	r3, #97	; 0x61
 8002e28:	2208      	movs	r2, #8
 8002e2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	b2d2      	uxtb	r2, r2
 8002e34:	4611      	mov	r1, r2
 8002e36:	4618      	mov	r0, r3
 8002e38:	f005 fa8f 	bl	800835a <USB_HC_Halt>
 8002e3c:	e024      	b.n	8002e88 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e50:	2b80      	cmp	r3, #128	; 0x80
 8002e52:	d119      	bne.n	8002e88 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e60:	461a      	mov	r2, r3
 8002e62:	2380      	movs	r3, #128	; 0x80
 8002e64:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	212c      	movs	r1, #44	; 0x2c
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	3361      	adds	r3, #97	; 0x61
 8002e74:	2206      	movs	r2, #6
 8002e76:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	4611      	mov	r1, r2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f005 fa69 	bl	800835a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e9e:	d112      	bne.n	8002ec6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f005 fa55 	bl	800835a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	015a      	lsls	r2, r3, #5
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ec2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002ec4:	e24e      	b.n	8003364 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	015a      	lsls	r2, r3, #5
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4413      	add	r3, r2
 8002ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	f040 80df 	bne.w	800309c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d019      	beq.n	8002f1a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	212c      	movs	r1, #44	; 0x2c
 8002eec:	fb01 f303 	mul.w	r3, r1, r3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	3348      	adds	r3, #72	; 0x48
 8002ef4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	0159      	lsls	r1, r3, #5
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	440b      	add	r3, r1
 8002efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002f08:	1ad2      	subs	r2, r2, r3
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	202c      	movs	r0, #44	; 0x2c
 8002f10:	fb00 f303 	mul.w	r3, r0, r3
 8002f14:	440b      	add	r3, r1
 8002f16:	3350      	adds	r3, #80	; 0x50
 8002f18:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	212c      	movs	r1, #44	; 0x2c
 8002f20:	fb01 f303 	mul.w	r3, r1, r3
 8002f24:	4413      	add	r3, r2
 8002f26:	3361      	adds	r3, #97	; 0x61
 8002f28:	2201      	movs	r2, #1
 8002f2a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	212c      	movs	r1, #44	; 0x2c
 8002f32:	fb01 f303 	mul.w	r3, r1, r3
 8002f36:	4413      	add	r3, r2
 8002f38:	335c      	adds	r3, #92	; 0x5c
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	015a      	lsls	r2, r3, #5
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	4413      	add	r3, r2
 8002f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	212c      	movs	r1, #44	; 0x2c
 8002f56:	fb01 f303 	mul.w	r3, r1, r3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	333f      	adds	r3, #63	; 0x3f
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d009      	beq.n	8002f78 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	212c      	movs	r1, #44	; 0x2c
 8002f6a:	fb01 f303 	mul.w	r3, r1, r3
 8002f6e:	4413      	add	r3, r2
 8002f70:	333f      	adds	r3, #63	; 0x3f
 8002f72:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d111      	bne.n	8002f9c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	4611      	mov	r1, r2
 8002f82:	4618      	mov	r0, r3
 8002f84:	f005 f9e9 	bl	800835a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	015a      	lsls	r2, r3, #5
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4413      	add	r3, r2
 8002f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f94:	461a      	mov	r2, r3
 8002f96:	2310      	movs	r3, #16
 8002f98:	6093      	str	r3, [r2, #8]
 8002f9a:	e03a      	b.n	8003012 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	212c      	movs	r1, #44	; 0x2c
 8002fa2:	fb01 f303 	mul.w	r3, r1, r3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	333f      	adds	r3, #63	; 0x3f
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d009      	beq.n	8002fc4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	212c      	movs	r1, #44	; 0x2c
 8002fb6:	fb01 f303 	mul.w	r3, r1, r3
 8002fba:	4413      	add	r3, r2
 8002fbc:	333f      	adds	r3, #63	; 0x3f
 8002fbe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d126      	bne.n	8003012 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	0151      	lsls	r1, r2, #5
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	440a      	add	r2, r1
 8002fda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002fe2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	212c      	movs	r1, #44	; 0x2c
 8002fea:	fb01 f303 	mul.w	r3, r1, r3
 8002fee:	4413      	add	r3, r2
 8002ff0:	3360      	adds	r3, #96	; 0x60
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	b2d9      	uxtb	r1, r3
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	202c      	movs	r0, #44	; 0x2c
 8003000:	fb00 f303 	mul.w	r3, r0, r3
 8003004:	4413      	add	r3, r2
 8003006:	3360      	adds	r3, #96	; 0x60
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f00a febd 	bl	800dd8c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d12b      	bne.n	8003072 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	212c      	movs	r1, #44	; 0x2c
 8003020:	fb01 f303 	mul.w	r3, r1, r3
 8003024:	4413      	add	r3, r2
 8003026:	3348      	adds	r3, #72	; 0x48
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	202c      	movs	r0, #44	; 0x2c
 8003030:	fb00 f202 	mul.w	r2, r0, r2
 8003034:	440a      	add	r2, r1
 8003036:	3240      	adds	r2, #64	; 0x40
 8003038:	8812      	ldrh	r2, [r2, #0]
 800303a:	fbb3 f3f2 	udiv	r3, r3, r2
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 818e 	beq.w	8003364 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	212c      	movs	r1, #44	; 0x2c
 800304e:	fb01 f303 	mul.w	r3, r1, r3
 8003052:	4413      	add	r3, r2
 8003054:	3354      	adds	r3, #84	; 0x54
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	f083 0301 	eor.w	r3, r3, #1
 800305c:	b2d8      	uxtb	r0, r3
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	212c      	movs	r1, #44	; 0x2c
 8003064:	fb01 f303 	mul.w	r3, r1, r3
 8003068:	4413      	add	r3, r2
 800306a:	3354      	adds	r3, #84	; 0x54
 800306c:	4602      	mov	r2, r0
 800306e:	701a      	strb	r2, [r3, #0]
}
 8003070:	e178      	b.n	8003364 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	212c      	movs	r1, #44	; 0x2c
 8003078:	fb01 f303 	mul.w	r3, r1, r3
 800307c:	4413      	add	r3, r2
 800307e:	3354      	adds	r3, #84	; 0x54
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	f083 0301 	eor.w	r3, r3, #1
 8003086:	b2d8      	uxtb	r0, r3
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	212c      	movs	r1, #44	; 0x2c
 800308e:	fb01 f303 	mul.w	r3, r1, r3
 8003092:	4413      	add	r3, r2
 8003094:	3354      	adds	r3, #84	; 0x54
 8003096:	4602      	mov	r2, r0
 8003098:	701a      	strb	r2, [r3, #0]
}
 800309a:	e163      	b.n	8003364 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	015a      	lsls	r2, r3, #5
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	4413      	add	r3, r2
 80030a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	f040 80f6 	bne.w	80032a0 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	212c      	movs	r1, #44	; 0x2c
 80030ba:	fb01 f303 	mul.w	r3, r1, r3
 80030be:	4413      	add	r3, r2
 80030c0:	3361      	adds	r3, #97	; 0x61
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d109      	bne.n	80030dc <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	212c      	movs	r1, #44	; 0x2c
 80030ce:	fb01 f303 	mul.w	r3, r1, r3
 80030d2:	4413      	add	r3, r2
 80030d4:	3360      	adds	r3, #96	; 0x60
 80030d6:	2201      	movs	r2, #1
 80030d8:	701a      	strb	r2, [r3, #0]
 80030da:	e0c9      	b.n	8003270 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	212c      	movs	r1, #44	; 0x2c
 80030e2:	fb01 f303 	mul.w	r3, r1, r3
 80030e6:	4413      	add	r3, r2
 80030e8:	3361      	adds	r3, #97	; 0x61
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b05      	cmp	r3, #5
 80030ee:	d109      	bne.n	8003104 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	212c      	movs	r1, #44	; 0x2c
 80030f6:	fb01 f303 	mul.w	r3, r1, r3
 80030fa:	4413      	add	r3, r2
 80030fc:	3360      	adds	r3, #96	; 0x60
 80030fe:	2205      	movs	r2, #5
 8003100:	701a      	strb	r2, [r3, #0]
 8003102:	e0b5      	b.n	8003270 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	212c      	movs	r1, #44	; 0x2c
 800310a:	fb01 f303 	mul.w	r3, r1, r3
 800310e:	4413      	add	r3, r2
 8003110:	3361      	adds	r3, #97	; 0x61
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2b06      	cmp	r3, #6
 8003116:	d009      	beq.n	800312c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	212c      	movs	r1, #44	; 0x2c
 800311e:	fb01 f303 	mul.w	r3, r1, r3
 8003122:	4413      	add	r3, r2
 8003124:	3361      	adds	r3, #97	; 0x61
 8003126:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003128:	2b08      	cmp	r3, #8
 800312a:	d150      	bne.n	80031ce <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	212c      	movs	r1, #44	; 0x2c
 8003132:	fb01 f303 	mul.w	r3, r1, r3
 8003136:	4413      	add	r3, r2
 8003138:	335c      	adds	r3, #92	; 0x5c
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	202c      	movs	r0, #44	; 0x2c
 8003144:	fb00 f303 	mul.w	r3, r0, r3
 8003148:	440b      	add	r3, r1
 800314a:	335c      	adds	r3, #92	; 0x5c
 800314c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	212c      	movs	r1, #44	; 0x2c
 8003154:	fb01 f303 	mul.w	r3, r1, r3
 8003158:	4413      	add	r3, r2
 800315a:	335c      	adds	r3, #92	; 0x5c
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2b02      	cmp	r3, #2
 8003160:	d912      	bls.n	8003188 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	212c      	movs	r1, #44	; 0x2c
 8003168:	fb01 f303 	mul.w	r3, r1, r3
 800316c:	4413      	add	r3, r2
 800316e:	335c      	adds	r3, #92	; 0x5c
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	212c      	movs	r1, #44	; 0x2c
 800317a:	fb01 f303 	mul.w	r3, r1, r3
 800317e:	4413      	add	r3, r2
 8003180:	3360      	adds	r3, #96	; 0x60
 8003182:	2204      	movs	r2, #4
 8003184:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003186:	e073      	b.n	8003270 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	212c      	movs	r1, #44	; 0x2c
 800318e:	fb01 f303 	mul.w	r3, r1, r3
 8003192:	4413      	add	r3, r2
 8003194:	3360      	adds	r3, #96	; 0x60
 8003196:	2202      	movs	r2, #2
 8003198:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	015a      	lsls	r2, r3, #5
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031b0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031b8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	015a      	lsls	r2, r3, #5
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c6:	461a      	mov	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031cc:	e050      	b.n	8003270 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	212c      	movs	r1, #44	; 0x2c
 80031d4:	fb01 f303 	mul.w	r3, r1, r3
 80031d8:	4413      	add	r3, r2
 80031da:	3361      	adds	r3, #97	; 0x61
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2b03      	cmp	r3, #3
 80031e0:	d122      	bne.n	8003228 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	212c      	movs	r1, #44	; 0x2c
 80031e8:	fb01 f303 	mul.w	r3, r1, r3
 80031ec:	4413      	add	r3, r2
 80031ee:	3360      	adds	r3, #96	; 0x60
 80031f0:	2202      	movs	r2, #2
 80031f2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	015a      	lsls	r2, r3, #5
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	4413      	add	r3, r2
 80031fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800320a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003212:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	4413      	add	r3, r2
 800321c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003220:	461a      	mov	r2, r3
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	e023      	b.n	8003270 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	212c      	movs	r1, #44	; 0x2c
 800322e:	fb01 f303 	mul.w	r3, r1, r3
 8003232:	4413      	add	r3, r2
 8003234:	3361      	adds	r3, #97	; 0x61
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b07      	cmp	r3, #7
 800323a:	d119      	bne.n	8003270 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	212c      	movs	r1, #44	; 0x2c
 8003242:	fb01 f303 	mul.w	r3, r1, r3
 8003246:	4413      	add	r3, r2
 8003248:	335c      	adds	r3, #92	; 0x5c
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	1c5a      	adds	r2, r3, #1
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	202c      	movs	r0, #44	; 0x2c
 8003254:	fb00 f303 	mul.w	r3, r0, r3
 8003258:	440b      	add	r3, r1
 800325a:	335c      	adds	r3, #92	; 0x5c
 800325c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	212c      	movs	r1, #44	; 0x2c
 8003264:	fb01 f303 	mul.w	r3, r1, r3
 8003268:	4413      	add	r3, r2
 800326a:	3360      	adds	r3, #96	; 0x60
 800326c:	2204      	movs	r2, #4
 800326e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	4413      	add	r3, r2
 8003278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800327c:	461a      	mov	r2, r3
 800327e:	2302      	movs	r3, #2
 8003280:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	b2d9      	uxtb	r1, r3
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	202c      	movs	r0, #44	; 0x2c
 800328c:	fb00 f303 	mul.w	r3, r0, r3
 8003290:	4413      	add	r3, r2
 8003292:	3360      	adds	r3, #96	; 0x60
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	461a      	mov	r2, r3
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f00a fd77 	bl	800dd8c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800329e:	e061      	b.n	8003364 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	015a      	lsls	r2, r3, #5
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	4413      	add	r3, r2
 80032a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 0310 	and.w	r3, r3, #16
 80032b2:	2b10      	cmp	r3, #16
 80032b4:	d156      	bne.n	8003364 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	212c      	movs	r1, #44	; 0x2c
 80032bc:	fb01 f303 	mul.w	r3, r1, r3
 80032c0:	4413      	add	r3, r2
 80032c2:	333f      	adds	r3, #63	; 0x3f
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d111      	bne.n	80032ee <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	212c      	movs	r1, #44	; 0x2c
 80032d0:	fb01 f303 	mul.w	r3, r1, r3
 80032d4:	4413      	add	r3, r2
 80032d6:	335c      	adds	r3, #92	; 0x5c
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	4611      	mov	r1, r2
 80032e6:	4618      	mov	r0, r3
 80032e8:	f005 f837 	bl	800835a <USB_HC_Halt>
 80032ec:	e031      	b.n	8003352 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	212c      	movs	r1, #44	; 0x2c
 80032f4:	fb01 f303 	mul.w	r3, r1, r3
 80032f8:	4413      	add	r3, r2
 80032fa:	333f      	adds	r3, #63	; 0x3f
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d009      	beq.n	8003316 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	212c      	movs	r1, #44	; 0x2c
 8003308:	fb01 f303 	mul.w	r3, r1, r3
 800330c:	4413      	add	r3, r2
 800330e:	333f      	adds	r3, #63	; 0x3f
 8003310:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003312:	2b02      	cmp	r3, #2
 8003314:	d11d      	bne.n	8003352 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	212c      	movs	r1, #44	; 0x2c
 800331c:	fb01 f303 	mul.w	r3, r1, r3
 8003320:	4413      	add	r3, r2
 8003322:	335c      	adds	r3, #92	; 0x5c
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d110      	bne.n	8003352 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	212c      	movs	r1, #44	; 0x2c
 8003336:	fb01 f303 	mul.w	r3, r1, r3
 800333a:	4413      	add	r3, r2
 800333c:	3361      	adds	r3, #97	; 0x61
 800333e:	2203      	movs	r2, #3
 8003340:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	b2d2      	uxtb	r2, r2
 800334a:	4611      	mov	r1, r2
 800334c:	4618      	mov	r0, r3
 800334e:	f005 f804 	bl	800835a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	015a      	lsls	r2, r3, #5
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	4413      	add	r3, r2
 800335a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335e:	461a      	mov	r2, r3
 8003360:	2310      	movs	r3, #16
 8003362:	6093      	str	r3, [r2, #8]
}
 8003364:	bf00      	nop
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003382:	78fb      	ldrb	r3, [r7, #3]
 8003384:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	015a      	lsls	r2, r3, #5
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	4413      	add	r3, r2
 800338e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b04      	cmp	r3, #4
 800339a:	d11a      	bne.n	80033d2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	015a      	lsls	r2, r3, #5
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	4413      	add	r3, r2
 80033a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a8:	461a      	mov	r2, r3
 80033aa:	2304      	movs	r3, #4
 80033ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	212c      	movs	r1, #44	; 0x2c
 80033b4:	fb01 f303 	mul.w	r3, r1, r3
 80033b8:	4413      	add	r3, r2
 80033ba:	3361      	adds	r3, #97	; 0x61
 80033bc:	2206      	movs	r2, #6
 80033be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	4611      	mov	r1, r2
 80033ca:	4618      	mov	r0, r3
 80033cc:	f004 ffc5 	bl	800835a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80033d0:	e331      	b.n	8003a36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	015a      	lsls	r2, r3, #5
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	4413      	add	r3, r2
 80033da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 0320 	and.w	r3, r3, #32
 80033e4:	2b20      	cmp	r3, #32
 80033e6:	d12e      	bne.n	8003446 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f4:	461a      	mov	r2, r3
 80033f6:	2320      	movs	r3, #32
 80033f8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	212c      	movs	r1, #44	; 0x2c
 8003400:	fb01 f303 	mul.w	r3, r1, r3
 8003404:	4413      	add	r3, r2
 8003406:	333d      	adds	r3, #61	; 0x3d
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b01      	cmp	r3, #1
 800340c:	f040 8313 	bne.w	8003a36 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	212c      	movs	r1, #44	; 0x2c
 8003416:	fb01 f303 	mul.w	r3, r1, r3
 800341a:	4413      	add	r3, r2
 800341c:	333d      	adds	r3, #61	; 0x3d
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	212c      	movs	r1, #44	; 0x2c
 8003428:	fb01 f303 	mul.w	r3, r1, r3
 800342c:	4413      	add	r3, r2
 800342e:	3360      	adds	r3, #96	; 0x60
 8003430:	2202      	movs	r2, #2
 8003432:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	4611      	mov	r1, r2
 800343e:	4618      	mov	r0, r3
 8003440:	f004 ff8b 	bl	800835a <USB_HC_Halt>
}
 8003444:	e2f7      	b.n	8003a36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	4413      	add	r3, r2
 800344e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800345c:	d112      	bne.n	8003484 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	4413      	add	r3, r2
 8003466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800346a:	461a      	mov	r2, r3
 800346c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003470:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	4611      	mov	r1, r2
 800347c:	4618      	mov	r0, r3
 800347e:	f004 ff6c 	bl	800835a <USB_HC_Halt>
}
 8003482:	e2d8      	b.n	8003a36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	015a      	lsls	r2, r3, #5
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	4413      	add	r3, r2
 800348c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b01      	cmp	r3, #1
 8003498:	d140      	bne.n	800351c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	212c      	movs	r1, #44	; 0x2c
 80034a0:	fb01 f303 	mul.w	r3, r1, r3
 80034a4:	4413      	add	r3, r2
 80034a6:	335c      	adds	r3, #92	; 0x5c
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	015a      	lsls	r2, r3, #5
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034be:	2b40      	cmp	r3, #64	; 0x40
 80034c0:	d111      	bne.n	80034e6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	212c      	movs	r1, #44	; 0x2c
 80034c8:	fb01 f303 	mul.w	r3, r1, r3
 80034cc:	4413      	add	r3, r2
 80034ce:	333d      	adds	r3, #61	; 0x3d
 80034d0:	2201      	movs	r2, #1
 80034d2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	015a      	lsls	r2, r3, #5
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	4413      	add	r3, r2
 80034dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e0:	461a      	mov	r2, r3
 80034e2:	2340      	movs	r3, #64	; 0x40
 80034e4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	015a      	lsls	r2, r3, #5
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	4413      	add	r3, r2
 80034ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f2:	461a      	mov	r2, r3
 80034f4:	2301      	movs	r3, #1
 80034f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	212c      	movs	r1, #44	; 0x2c
 80034fe:	fb01 f303 	mul.w	r3, r1, r3
 8003502:	4413      	add	r3, r2
 8003504:	3361      	adds	r3, #97	; 0x61
 8003506:	2201      	movs	r2, #1
 8003508:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	4611      	mov	r1, r2
 8003514:	4618      	mov	r0, r3
 8003516:	f004 ff20 	bl	800835a <USB_HC_Halt>
}
 800351a:	e28c      	b.n	8003a36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	4413      	add	r3, r2
 8003524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352e:	2b40      	cmp	r3, #64	; 0x40
 8003530:	d12c      	bne.n	800358c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	212c      	movs	r1, #44	; 0x2c
 8003538:	fb01 f303 	mul.w	r3, r1, r3
 800353c:	4413      	add	r3, r2
 800353e:	3361      	adds	r3, #97	; 0x61
 8003540:	2204      	movs	r2, #4
 8003542:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	212c      	movs	r1, #44	; 0x2c
 800354a:	fb01 f303 	mul.w	r3, r1, r3
 800354e:	4413      	add	r3, r2
 8003550:	333d      	adds	r3, #61	; 0x3d
 8003552:	2201      	movs	r2, #1
 8003554:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	212c      	movs	r1, #44	; 0x2c
 800355c:	fb01 f303 	mul.w	r3, r1, r3
 8003560:	4413      	add	r3, r2
 8003562:	335c      	adds	r3, #92	; 0x5c
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	4611      	mov	r1, r2
 8003572:	4618      	mov	r0, r3
 8003574:	f004 fef1 	bl	800835a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	4413      	add	r3, r2
 8003580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003584:	461a      	mov	r2, r3
 8003586:	2340      	movs	r3, #64	; 0x40
 8003588:	6093      	str	r3, [r2, #8]
}
 800358a:	e254      	b.n	8003a36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	4413      	add	r3, r2
 8003594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b08      	cmp	r3, #8
 80035a0:	d11a      	bne.n	80035d8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	015a      	lsls	r2, r3, #5
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	4413      	add	r3, r2
 80035aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ae:	461a      	mov	r2, r3
 80035b0:	2308      	movs	r3, #8
 80035b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	212c      	movs	r1, #44	; 0x2c
 80035ba:	fb01 f303 	mul.w	r3, r1, r3
 80035be:	4413      	add	r3, r2
 80035c0:	3361      	adds	r3, #97	; 0x61
 80035c2:	2205      	movs	r2, #5
 80035c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	4611      	mov	r1, r2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f004 fec2 	bl	800835a <USB_HC_Halt>
}
 80035d6:	e22e      	b.n	8003a36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 0310 	and.w	r3, r3, #16
 80035ea:	2b10      	cmp	r3, #16
 80035ec:	d140      	bne.n	8003670 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	212c      	movs	r1, #44	; 0x2c
 80035f4:	fb01 f303 	mul.w	r3, r1, r3
 80035f8:	4413      	add	r3, r2
 80035fa:	335c      	adds	r3, #92	; 0x5c
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	212c      	movs	r1, #44	; 0x2c
 8003606:	fb01 f303 	mul.w	r3, r1, r3
 800360a:	4413      	add	r3, r2
 800360c:	3361      	adds	r3, #97	; 0x61
 800360e:	2203      	movs	r2, #3
 8003610:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	212c      	movs	r1, #44	; 0x2c
 8003618:	fb01 f303 	mul.w	r3, r1, r3
 800361c:	4413      	add	r3, r2
 800361e:	333d      	adds	r3, #61	; 0x3d
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d112      	bne.n	800364c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	212c      	movs	r1, #44	; 0x2c
 800362c:	fb01 f303 	mul.w	r3, r1, r3
 8003630:	4413      	add	r3, r2
 8003632:	333c      	adds	r3, #60	; 0x3c
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d108      	bne.n	800364c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	212c      	movs	r1, #44	; 0x2c
 8003640:	fb01 f303 	mul.w	r3, r1, r3
 8003644:	4413      	add	r3, r2
 8003646:	333d      	adds	r3, #61	; 0x3d
 8003648:	2201      	movs	r2, #1
 800364a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	4611      	mov	r1, r2
 8003656:	4618      	mov	r0, r3
 8003658:	f004 fe7f 	bl	800835a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	015a      	lsls	r2, r3, #5
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	4413      	add	r3, r2
 8003664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003668:	461a      	mov	r2, r3
 800366a:	2310      	movs	r3, #16
 800366c:	6093      	str	r3, [r2, #8]
}
 800366e:	e1e2      	b.n	8003a36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	015a      	lsls	r2, r3, #5
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	4413      	add	r3, r2
 8003678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003682:	2b80      	cmp	r3, #128	; 0x80
 8003684:	d164      	bne.n	8003750 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d111      	bne.n	80036b2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	212c      	movs	r1, #44	; 0x2c
 8003694:	fb01 f303 	mul.w	r3, r1, r3
 8003698:	4413      	add	r3, r2
 800369a:	3361      	adds	r3, #97	; 0x61
 800369c:	2206      	movs	r2, #6
 800369e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	4611      	mov	r1, r2
 80036aa:	4618      	mov	r0, r3
 80036ac:	f004 fe55 	bl	800835a <USB_HC_Halt>
 80036b0:	e044      	b.n	800373c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	212c      	movs	r1, #44	; 0x2c
 80036b8:	fb01 f303 	mul.w	r3, r1, r3
 80036bc:	4413      	add	r3, r2
 80036be:	335c      	adds	r3, #92	; 0x5c
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	1c5a      	adds	r2, r3, #1
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	202c      	movs	r0, #44	; 0x2c
 80036ca:	fb00 f303 	mul.w	r3, r0, r3
 80036ce:	440b      	add	r3, r1
 80036d0:	335c      	adds	r3, #92	; 0x5c
 80036d2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	212c      	movs	r1, #44	; 0x2c
 80036da:	fb01 f303 	mul.w	r3, r1, r3
 80036de:	4413      	add	r3, r2
 80036e0:	335c      	adds	r3, #92	; 0x5c
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d920      	bls.n	800372a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	212c      	movs	r1, #44	; 0x2c
 80036ee:	fb01 f303 	mul.w	r3, r1, r3
 80036f2:	4413      	add	r3, r2
 80036f4:	335c      	adds	r3, #92	; 0x5c
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	212c      	movs	r1, #44	; 0x2c
 8003700:	fb01 f303 	mul.w	r3, r1, r3
 8003704:	4413      	add	r3, r2
 8003706:	3360      	adds	r3, #96	; 0x60
 8003708:	2204      	movs	r2, #4
 800370a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	b2d9      	uxtb	r1, r3
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	202c      	movs	r0, #44	; 0x2c
 8003716:	fb00 f303 	mul.w	r3, r0, r3
 800371a:	4413      	add	r3, r2
 800371c:	3360      	adds	r3, #96	; 0x60
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	461a      	mov	r2, r3
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f00a fb32 	bl	800dd8c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003728:	e008      	b.n	800373c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	212c      	movs	r1, #44	; 0x2c
 8003730:	fb01 f303 	mul.w	r3, r1, r3
 8003734:	4413      	add	r3, r2
 8003736:	3360      	adds	r3, #96	; 0x60
 8003738:	2202      	movs	r2, #2
 800373a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	4413      	add	r3, r2
 8003744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003748:	461a      	mov	r2, r3
 800374a:	2380      	movs	r3, #128	; 0x80
 800374c:	6093      	str	r3, [r2, #8]
}
 800374e:	e172      	b.n	8003a36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	4413      	add	r3, r2
 8003758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003766:	d11b      	bne.n	80037a0 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	212c      	movs	r1, #44	; 0x2c
 800376e:	fb01 f303 	mul.w	r3, r1, r3
 8003772:	4413      	add	r3, r2
 8003774:	3361      	adds	r3, #97	; 0x61
 8003776:	2208      	movs	r2, #8
 8003778:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	4611      	mov	r1, r2
 8003784:	4618      	mov	r0, r3
 8003786:	f004 fde8 	bl	800835a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	015a      	lsls	r2, r3, #5
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	4413      	add	r3, r2
 8003792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003796:	461a      	mov	r2, r3
 8003798:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800379c:	6093      	str	r3, [r2, #8]
}
 800379e:	e14a      	b.n	8003a36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	f040 813f 	bne.w	8003a36 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	212c      	movs	r1, #44	; 0x2c
 80037be:	fb01 f303 	mul.w	r3, r1, r3
 80037c2:	4413      	add	r3, r2
 80037c4:	3361      	adds	r3, #97	; 0x61
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d17d      	bne.n	80038c8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	212c      	movs	r1, #44	; 0x2c
 80037d2:	fb01 f303 	mul.w	r3, r1, r3
 80037d6:	4413      	add	r3, r2
 80037d8:	3360      	adds	r3, #96	; 0x60
 80037da:	2201      	movs	r2, #1
 80037dc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	212c      	movs	r1, #44	; 0x2c
 80037e4:	fb01 f303 	mul.w	r3, r1, r3
 80037e8:	4413      	add	r3, r2
 80037ea:	333f      	adds	r3, #63	; 0x3f
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d00a      	beq.n	8003808 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	212c      	movs	r1, #44	; 0x2c
 80037f8:	fb01 f303 	mul.w	r3, r1, r3
 80037fc:	4413      	add	r3, r2
 80037fe:	333f      	adds	r3, #63	; 0x3f
 8003800:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003802:	2b03      	cmp	r3, #3
 8003804:	f040 8100 	bne.w	8003a08 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d113      	bne.n	8003838 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	212c      	movs	r1, #44	; 0x2c
 8003816:	fb01 f303 	mul.w	r3, r1, r3
 800381a:	4413      	add	r3, r2
 800381c:	3355      	adds	r3, #85	; 0x55
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	f083 0301 	eor.w	r3, r3, #1
 8003824:	b2d8      	uxtb	r0, r3
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	212c      	movs	r1, #44	; 0x2c
 800382c:	fb01 f303 	mul.w	r3, r1, r3
 8003830:	4413      	add	r3, r2
 8003832:	3355      	adds	r3, #85	; 0x55
 8003834:	4602      	mov	r2, r0
 8003836:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	2b01      	cmp	r3, #1
 800383e:	f040 80e3 	bne.w	8003a08 <HCD_HC_OUT_IRQHandler+0x69c>
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	212c      	movs	r1, #44	; 0x2c
 8003848:	fb01 f303 	mul.w	r3, r1, r3
 800384c:	4413      	add	r3, r2
 800384e:	334c      	adds	r3, #76	; 0x4c
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 80d8 	beq.w	8003a08 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	212c      	movs	r1, #44	; 0x2c
 800385e:	fb01 f303 	mul.w	r3, r1, r3
 8003862:	4413      	add	r3, r2
 8003864:	334c      	adds	r3, #76	; 0x4c
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	202c      	movs	r0, #44	; 0x2c
 800386e:	fb00 f202 	mul.w	r2, r0, r2
 8003872:	440a      	add	r2, r1
 8003874:	3240      	adds	r2, #64	; 0x40
 8003876:	8812      	ldrh	r2, [r2, #0]
 8003878:	4413      	add	r3, r2
 800387a:	3b01      	subs	r3, #1
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	202c      	movs	r0, #44	; 0x2c
 8003882:	fb00 f202 	mul.w	r2, r0, r2
 8003886:	440a      	add	r2, r1
 8003888:	3240      	adds	r2, #64	; 0x40
 800388a:	8812      	ldrh	r2, [r2, #0]
 800388c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003890:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 80b5 	beq.w	8003a08 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	212c      	movs	r1, #44	; 0x2c
 80038a4:	fb01 f303 	mul.w	r3, r1, r3
 80038a8:	4413      	add	r3, r2
 80038aa:	3355      	adds	r3, #85	; 0x55
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	f083 0301 	eor.w	r3, r3, #1
 80038b2:	b2d8      	uxtb	r0, r3
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	212c      	movs	r1, #44	; 0x2c
 80038ba:	fb01 f303 	mul.w	r3, r1, r3
 80038be:	4413      	add	r3, r2
 80038c0:	3355      	adds	r3, #85	; 0x55
 80038c2:	4602      	mov	r2, r0
 80038c4:	701a      	strb	r2, [r3, #0]
 80038c6:	e09f      	b.n	8003a08 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	212c      	movs	r1, #44	; 0x2c
 80038ce:	fb01 f303 	mul.w	r3, r1, r3
 80038d2:	4413      	add	r3, r2
 80038d4:	3361      	adds	r3, #97	; 0x61
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b03      	cmp	r3, #3
 80038da:	d109      	bne.n	80038f0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	212c      	movs	r1, #44	; 0x2c
 80038e2:	fb01 f303 	mul.w	r3, r1, r3
 80038e6:	4413      	add	r3, r2
 80038e8:	3360      	adds	r3, #96	; 0x60
 80038ea:	2202      	movs	r2, #2
 80038ec:	701a      	strb	r2, [r3, #0]
 80038ee:	e08b      	b.n	8003a08 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	212c      	movs	r1, #44	; 0x2c
 80038f6:	fb01 f303 	mul.w	r3, r1, r3
 80038fa:	4413      	add	r3, r2
 80038fc:	3361      	adds	r3, #97	; 0x61
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b04      	cmp	r3, #4
 8003902:	d109      	bne.n	8003918 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	212c      	movs	r1, #44	; 0x2c
 800390a:	fb01 f303 	mul.w	r3, r1, r3
 800390e:	4413      	add	r3, r2
 8003910:	3360      	adds	r3, #96	; 0x60
 8003912:	2202      	movs	r2, #2
 8003914:	701a      	strb	r2, [r3, #0]
 8003916:	e077      	b.n	8003a08 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	212c      	movs	r1, #44	; 0x2c
 800391e:	fb01 f303 	mul.w	r3, r1, r3
 8003922:	4413      	add	r3, r2
 8003924:	3361      	adds	r3, #97	; 0x61
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	2b05      	cmp	r3, #5
 800392a:	d109      	bne.n	8003940 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	212c      	movs	r1, #44	; 0x2c
 8003932:	fb01 f303 	mul.w	r3, r1, r3
 8003936:	4413      	add	r3, r2
 8003938:	3360      	adds	r3, #96	; 0x60
 800393a:	2205      	movs	r2, #5
 800393c:	701a      	strb	r2, [r3, #0]
 800393e:	e063      	b.n	8003a08 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	212c      	movs	r1, #44	; 0x2c
 8003946:	fb01 f303 	mul.w	r3, r1, r3
 800394a:	4413      	add	r3, r2
 800394c:	3361      	adds	r3, #97	; 0x61
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b06      	cmp	r3, #6
 8003952:	d009      	beq.n	8003968 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	212c      	movs	r1, #44	; 0x2c
 800395a:	fb01 f303 	mul.w	r3, r1, r3
 800395e:	4413      	add	r3, r2
 8003960:	3361      	adds	r3, #97	; 0x61
 8003962:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003964:	2b08      	cmp	r3, #8
 8003966:	d14f      	bne.n	8003a08 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	212c      	movs	r1, #44	; 0x2c
 800396e:	fb01 f303 	mul.w	r3, r1, r3
 8003972:	4413      	add	r3, r2
 8003974:	335c      	adds	r3, #92	; 0x5c
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	202c      	movs	r0, #44	; 0x2c
 8003980:	fb00 f303 	mul.w	r3, r0, r3
 8003984:	440b      	add	r3, r1
 8003986:	335c      	adds	r3, #92	; 0x5c
 8003988:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	212c      	movs	r1, #44	; 0x2c
 8003990:	fb01 f303 	mul.w	r3, r1, r3
 8003994:	4413      	add	r3, r2
 8003996:	335c      	adds	r3, #92	; 0x5c
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b02      	cmp	r3, #2
 800399c:	d912      	bls.n	80039c4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	212c      	movs	r1, #44	; 0x2c
 80039a4:	fb01 f303 	mul.w	r3, r1, r3
 80039a8:	4413      	add	r3, r2
 80039aa:	335c      	adds	r3, #92	; 0x5c
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	212c      	movs	r1, #44	; 0x2c
 80039b6:	fb01 f303 	mul.w	r3, r1, r3
 80039ba:	4413      	add	r3, r2
 80039bc:	3360      	adds	r3, #96	; 0x60
 80039be:	2204      	movs	r2, #4
 80039c0:	701a      	strb	r2, [r3, #0]
 80039c2:	e021      	b.n	8003a08 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	212c      	movs	r1, #44	; 0x2c
 80039ca:	fb01 f303 	mul.w	r3, r1, r3
 80039ce:	4413      	add	r3, r2
 80039d0:	3360      	adds	r3, #96	; 0x60
 80039d2:	2202      	movs	r2, #2
 80039d4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	015a      	lsls	r2, r3, #5
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	4413      	add	r3, r2
 80039de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80039ec:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039f4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	015a      	lsls	r2, r3, #5
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	4413      	add	r3, r2
 80039fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a02:	461a      	mov	r2, r3
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a14:	461a      	mov	r2, r3
 8003a16:	2302      	movs	r3, #2
 8003a18:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	b2d9      	uxtb	r1, r3
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	202c      	movs	r0, #44	; 0x2c
 8003a24:	fb00 f303 	mul.w	r3, r0, r3
 8003a28:	4413      	add	r3, r2
 8003a2a:	3360      	adds	r3, #96	; 0x60
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f00a f9ab 	bl	800dd8c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003a36:	bf00      	nop
 8003a38:	3720      	adds	r7, #32
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b08a      	sub	sp, #40	; 0x28
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	0c5b      	lsrs	r3, r3, #17
 8003a64:	f003 030f 	and.w	r3, r3, #15
 8003a68:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	091b      	lsrs	r3, r3, #4
 8003a6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a72:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d004      	beq.n	8003a84 <HCD_RXQLVL_IRQHandler+0x46>
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	2b05      	cmp	r3, #5
 8003a7e:	f000 80a9 	beq.w	8003bd4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003a82:	e0aa      	b.n	8003bda <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 80a6 	beq.w	8003bd8 <HCD_RXQLVL_IRQHandler+0x19a>
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	212c      	movs	r1, #44	; 0x2c
 8003a92:	fb01 f303 	mul.w	r3, r1, r3
 8003a96:	4413      	add	r3, r2
 8003a98:	3344      	adds	r3, #68	; 0x44
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 809b 	beq.w	8003bd8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	212c      	movs	r1, #44	; 0x2c
 8003aa8:	fb01 f303 	mul.w	r3, r1, r3
 8003aac:	4413      	add	r3, r2
 8003aae:	3350      	adds	r3, #80	; 0x50
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	441a      	add	r2, r3
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	202c      	movs	r0, #44	; 0x2c
 8003abc:	fb00 f303 	mul.w	r3, r0, r3
 8003ac0:	440b      	add	r3, r1
 8003ac2:	334c      	adds	r3, #76	; 0x4c
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d87a      	bhi.n	8003bc0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6818      	ldr	r0, [r3, #0]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	212c      	movs	r1, #44	; 0x2c
 8003ad4:	fb01 f303 	mul.w	r3, r1, r3
 8003ad8:	4413      	add	r3, r2
 8003ada:	3344      	adds	r3, #68	; 0x44
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	b292      	uxth	r2, r2
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	f003 ff90 	bl	8007a08 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	212c      	movs	r1, #44	; 0x2c
 8003aee:	fb01 f303 	mul.w	r3, r1, r3
 8003af2:	4413      	add	r3, r2
 8003af4:	3344      	adds	r3, #68	; 0x44
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	441a      	add	r2, r3
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	202c      	movs	r0, #44	; 0x2c
 8003b02:	fb00 f303 	mul.w	r3, r0, r3
 8003b06:	440b      	add	r3, r1
 8003b08:	3344      	adds	r3, #68	; 0x44
 8003b0a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	212c      	movs	r1, #44	; 0x2c
 8003b12:	fb01 f303 	mul.w	r3, r1, r3
 8003b16:	4413      	add	r3, r2
 8003b18:	3350      	adds	r3, #80	; 0x50
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	441a      	add	r2, r3
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	202c      	movs	r0, #44	; 0x2c
 8003b26:	fb00 f303 	mul.w	r3, r0, r3
 8003b2a:	440b      	add	r3, r1
 8003b2c:	3350      	adds	r3, #80	; 0x50
 8003b2e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	0cdb      	lsrs	r3, r3, #19
 8003b40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b44:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	212c      	movs	r1, #44	; 0x2c
 8003b4c:	fb01 f303 	mul.w	r3, r1, r3
 8003b50:	4413      	add	r3, r2
 8003b52:	3340      	adds	r3, #64	; 0x40
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	461a      	mov	r2, r3
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d13c      	bne.n	8003bd8 <HCD_RXQLVL_IRQHandler+0x19a>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d039      	beq.n	8003bd8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b7a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b82:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b90:	461a      	mov	r2, r3
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	212c      	movs	r1, #44	; 0x2c
 8003b9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ba0:	4413      	add	r3, r2
 8003ba2:	3354      	adds	r3, #84	; 0x54
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	f083 0301 	eor.w	r3, r3, #1
 8003baa:	b2d8      	uxtb	r0, r3
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	212c      	movs	r1, #44	; 0x2c
 8003bb2:	fb01 f303 	mul.w	r3, r1, r3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	3354      	adds	r3, #84	; 0x54
 8003bba:	4602      	mov	r2, r0
 8003bbc:	701a      	strb	r2, [r3, #0]
      break;
 8003bbe:	e00b      	b.n	8003bd8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	212c      	movs	r1, #44	; 0x2c
 8003bc6:	fb01 f303 	mul.w	r3, r1, r3
 8003bca:	4413      	add	r3, r2
 8003bcc:	3360      	adds	r3, #96	; 0x60
 8003bce:	2204      	movs	r2, #4
 8003bd0:	701a      	strb	r2, [r3, #0]
      break;
 8003bd2:	e001      	b.n	8003bd8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003bd4:	bf00      	nop
 8003bd6:	e000      	b.n	8003bda <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003bd8:	bf00      	nop
  }
}
 8003bda:	bf00      	nop
 8003bdc:	3728      	adds	r7, #40	; 0x28
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b086      	sub	sp, #24
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003c0e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d10b      	bne.n	8003c32 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d102      	bne.n	8003c2a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f00a f895 	bl	800dd54 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f043 0302 	orr.w	r3, r3, #2
 8003c30:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	2b08      	cmp	r3, #8
 8003c3a:	d132      	bne.n	8003ca2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	f043 0308 	orr.w	r3, r3, #8
 8003c42:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d126      	bne.n	8003c9c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d113      	bne.n	8003c7e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003c5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c60:	d106      	bne.n	8003c70 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2102      	movs	r1, #2
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f004 f83b 	bl	8007ce4 <USB_InitFSLSPClkSel>
 8003c6e:	e011      	b.n	8003c94 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2101      	movs	r1, #1
 8003c76:	4618      	mov	r0, r3
 8003c78:	f004 f834 	bl	8007ce4 <USB_InitFSLSPClkSel>
 8003c7c:	e00a      	b.n	8003c94 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d106      	bne.n	8003c94 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003c92:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f00a f88b 	bl	800ddb0 <HAL_HCD_PortEnabled_Callback>
 8003c9a:	e002      	b.n	8003ca2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f00a f895 	bl	800ddcc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f003 0320 	and.w	r3, r3, #32
 8003ca8:	2b20      	cmp	r3, #32
 8003caa:	d103      	bne.n	8003cb4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	f043 0320 	orr.w	r3, r3, #32
 8003cb2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003cba:	461a      	mov	r2, r3
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	6013      	str	r3, [r2, #0]
}
 8003cc0:	bf00      	nop
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e12b      	b.n	8003f32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d106      	bne.n	8003cf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7fd f97c 	bl	8000fec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2224      	movs	r2, #36	; 0x24
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 0201 	bic.w	r2, r2, #1
 8003d0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d2c:	f001 f964 	bl	8004ff8 <HAL_RCC_GetPCLK1Freq>
 8003d30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	4a81      	ldr	r2, [pc, #516]	; (8003f3c <HAL_I2C_Init+0x274>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d807      	bhi.n	8003d4c <HAL_I2C_Init+0x84>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	4a80      	ldr	r2, [pc, #512]	; (8003f40 <HAL_I2C_Init+0x278>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	bf94      	ite	ls
 8003d44:	2301      	movls	r3, #1
 8003d46:	2300      	movhi	r3, #0
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	e006      	b.n	8003d5a <HAL_I2C_Init+0x92>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	4a7d      	ldr	r2, [pc, #500]	; (8003f44 <HAL_I2C_Init+0x27c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	bf94      	ite	ls
 8003d54:	2301      	movls	r3, #1
 8003d56:	2300      	movhi	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e0e7      	b.n	8003f32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	4a78      	ldr	r2, [pc, #480]	; (8003f48 <HAL_I2C_Init+0x280>)
 8003d66:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6a:	0c9b      	lsrs	r3, r3, #18
 8003d6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	4a6a      	ldr	r2, [pc, #424]	; (8003f3c <HAL_I2C_Init+0x274>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d802      	bhi.n	8003d9c <HAL_I2C_Init+0xd4>
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	e009      	b.n	8003db0 <HAL_I2C_Init+0xe8>
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003da2:	fb02 f303 	mul.w	r3, r2, r3
 8003da6:	4a69      	ldr	r2, [pc, #420]	; (8003f4c <HAL_I2C_Init+0x284>)
 8003da8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dac:	099b      	lsrs	r3, r3, #6
 8003dae:	3301      	adds	r3, #1
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6812      	ldr	r2, [r2, #0]
 8003db4:	430b      	orrs	r3, r1
 8003db6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003dc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	495c      	ldr	r1, [pc, #368]	; (8003f3c <HAL_I2C_Init+0x274>)
 8003dcc:	428b      	cmp	r3, r1
 8003dce:	d819      	bhi.n	8003e04 <HAL_I2C_Init+0x13c>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	1e59      	subs	r1, r3, #1
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dde:	1c59      	adds	r1, r3, #1
 8003de0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003de4:	400b      	ands	r3, r1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00a      	beq.n	8003e00 <HAL_I2C_Init+0x138>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	1e59      	subs	r1, r3, #1
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003df8:	3301      	adds	r3, #1
 8003dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dfe:	e051      	b.n	8003ea4 <HAL_I2C_Init+0x1dc>
 8003e00:	2304      	movs	r3, #4
 8003e02:	e04f      	b.n	8003ea4 <HAL_I2C_Init+0x1dc>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d111      	bne.n	8003e30 <HAL_I2C_Init+0x168>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	1e58      	subs	r0, r3, #1
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6859      	ldr	r1, [r3, #4]
 8003e14:	460b      	mov	r3, r1
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	440b      	add	r3, r1
 8003e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e1e:	3301      	adds	r3, #1
 8003e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	bf0c      	ite	eq
 8003e28:	2301      	moveq	r3, #1
 8003e2a:	2300      	movne	r3, #0
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	e012      	b.n	8003e56 <HAL_I2C_Init+0x18e>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	1e58      	subs	r0, r3, #1
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6859      	ldr	r1, [r3, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	0099      	lsls	r1, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e46:	3301      	adds	r3, #1
 8003e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	bf0c      	ite	eq
 8003e50:	2301      	moveq	r3, #1
 8003e52:	2300      	movne	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_I2C_Init+0x196>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e022      	b.n	8003ea4 <HAL_I2C_Init+0x1dc>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10e      	bne.n	8003e84 <HAL_I2C_Init+0x1bc>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	1e58      	subs	r0, r3, #1
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6859      	ldr	r1, [r3, #4]
 8003e6e:	460b      	mov	r3, r1
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	440b      	add	r3, r1
 8003e74:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e78:	3301      	adds	r3, #1
 8003e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e82:	e00f      	b.n	8003ea4 <HAL_I2C_Init+0x1dc>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	1e58      	subs	r0, r3, #1
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6859      	ldr	r1, [r3, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	440b      	add	r3, r1
 8003e92:	0099      	lsls	r1, r3, #2
 8003e94:	440b      	add	r3, r1
 8003e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ea0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ea4:	6879      	ldr	r1, [r7, #4]
 8003ea6:	6809      	ldr	r1, [r1, #0]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69da      	ldr	r2, [r3, #28]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ed2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6911      	ldr	r1, [r2, #16]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	68d2      	ldr	r2, [r2, #12]
 8003ede:	4311      	orrs	r1, r2
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6812      	ldr	r2, [r2, #0]
 8003ee4:	430b      	orrs	r3, r1
 8003ee6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	695a      	ldr	r2, [r3, #20]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f042 0201 	orr.w	r2, r2, #1
 8003f12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	000186a0 	.word	0x000186a0
 8003f40:	001e847f 	.word	0x001e847f
 8003f44:	003d08ff 	.word	0x003d08ff
 8003f48:	431bde83 	.word	0x431bde83
 8003f4c:	10624dd3 	.word	0x10624dd3

08003f50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b20      	cmp	r3, #32
 8003f64:	d129      	bne.n	8003fba <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2224      	movs	r2, #36	; 0x24
 8003f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0201 	bic.w	r2, r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0210 	bic.w	r2, r2, #16
 8003f8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f042 0201 	orr.w	r2, r2, #1
 8003fac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	e000      	b.n	8003fbc <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003fba:	2302      	movs	r3, #2
  }
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b20      	cmp	r3, #32
 8003fe0:	d12a      	bne.n	8004038 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2224      	movs	r2, #36	; 0x24
 8003fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0201 	bic.w	r2, r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004002:	89fb      	ldrh	r3, [r7, #14]
 8004004:	f023 030f 	bic.w	r3, r3, #15
 8004008:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	b29a      	uxth	r2, r3
 800400e:	89fb      	ldrh	r3, [r7, #14]
 8004010:	4313      	orrs	r3, r2
 8004012:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	89fa      	ldrh	r2, [r7, #14]
 800401a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 0201 	orr.w	r2, r2, #1
 800402a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004034:	2300      	movs	r3, #0
 8004036:	e000      	b.n	800403a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004038:	2302      	movs	r3, #2
  }
}
 800403a:	4618      	mov	r0, r3
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
	...

08004048 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e0bf      	b.n	80041da <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d106      	bne.n	8004074 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7fd f826 	bl	80010c0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800408a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6999      	ldr	r1, [r3, #24]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80040a0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6899      	ldr	r1, [r3, #8]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	4b4a      	ldr	r3, [pc, #296]	; (80041e4 <HAL_LTDC_Init+0x19c>)
 80040bc:	400b      	ands	r3, r1
 80040be:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	041b      	lsls	r3, r3, #16
 80040c6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6899      	ldr	r1, [r3, #8]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699a      	ldr	r2, [r3, #24]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	431a      	orrs	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68d9      	ldr	r1, [r3, #12]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	4b3e      	ldr	r3, [pc, #248]	; (80041e4 <HAL_LTDC_Init+0x19c>)
 80040ea:	400b      	ands	r3, r1
 80040ec:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	041b      	lsls	r3, r3, #16
 80040f4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68d9      	ldr	r1, [r3, #12]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a1a      	ldr	r2, [r3, #32]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6919      	ldr	r1, [r3, #16]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	4b33      	ldr	r3, [pc, #204]	; (80041e4 <HAL_LTDC_Init+0x19c>)
 8004118:	400b      	ands	r3, r1
 800411a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	041b      	lsls	r3, r3, #16
 8004122:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6919      	ldr	r1, [r3, #16]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	431a      	orrs	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6959      	ldr	r1, [r3, #20]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	4b27      	ldr	r3, [pc, #156]	; (80041e4 <HAL_LTDC_Init+0x19c>)
 8004146:	400b      	ands	r3, r1
 8004148:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414e:	041b      	lsls	r3, r3, #16
 8004150:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6959      	ldr	r1, [r3, #20]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800416e:	021b      	lsls	r3, r3, #8
 8004170:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004178:	041b      	lsls	r3, r3, #16
 800417a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800418a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800419e:	431a      	orrs	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f042 0206 	orr.w	r2, r2, #6
 80041b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699a      	ldr	r2, [r3, #24]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0201 	orr.w	r2, r2, #1
 80041c6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	f000f800 	.word	0xf000f800

080041e8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041fe:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f003 0304 	and.w	r3, r3, #4
 8004206:	2b00      	cmp	r3, #0
 8004208:	d023      	beq.n	8004252 <HAL_LTDC_IRQHandler+0x6a>
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	d01e      	beq.n	8004252 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0204 	bic.w	r2, r2, #4
 8004222:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2204      	movs	r2, #4
 800422a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004232:	f043 0201 	orr.w	r2, r3, #1
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2204      	movs	r2, #4
 8004240:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f86f 	bl	8004330 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d023      	beq.n	80042a4 <HAL_LTDC_IRQHandler+0xbc>
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d01e      	beq.n	80042a4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 0202 	bic.w	r2, r2, #2
 8004274:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2202      	movs	r2, #2
 800427c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004284:	f043 0202 	orr.w	r2, r3, #2
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2204      	movs	r2, #4
 8004292:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f846 	bl	8004330 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d01b      	beq.n	80042e6 <HAL_LTDC_IRQHandler+0xfe>
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d016      	beq.n	80042e6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0201 	bic.w	r2, r2, #1
 80042c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2201      	movs	r2, #1
 80042ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 f82f 	bl	8004344 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d01b      	beq.n	8004328 <HAL_LTDC_IRQHandler+0x140>
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d016      	beq.n	8004328 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 0208 	bic.w	r2, r2, #8
 8004308:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2208      	movs	r2, #8
 8004310:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f818 	bl	8004358 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004328:	bf00      	nop
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800436c:	b5b0      	push	{r4, r5, r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_LTDC_ConfigLayer+0x1a>
 8004382:	2302      	movs	r3, #2
 8004384:	e02c      	b.n	80043e0 <HAL_LTDC_ConfigLayer+0x74>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2202      	movs	r2, #2
 8004392:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2134      	movs	r1, #52	; 0x34
 800439c:	fb01 f303 	mul.w	r3, r1, r3
 80043a0:	4413      	add	r3, r2
 80043a2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	4614      	mov	r4, r2
 80043aa:	461d      	mov	r5, r3
 80043ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043b8:	682b      	ldr	r3, [r5, #0]
 80043ba:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	68b9      	ldr	r1, [r7, #8]
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 f811 	bl	80043e8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2201      	movs	r2, #1
 80043cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bdb0      	pop	{r4, r5, r7, pc}

080043e8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b089      	sub	sp, #36	; 0x24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	0c1b      	lsrs	r3, r3, #16
 8004400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004404:	4413      	add	r3, r2
 8004406:	041b      	lsls	r3, r3, #16
 8004408:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	461a      	mov	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	01db      	lsls	r3, r3, #7
 8004414:	4413      	add	r3, r2
 8004416:	3384      	adds	r3, #132	; 0x84
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	6812      	ldr	r2, [r2, #0]
 800441e:	4611      	mov	r1, r2
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	01d2      	lsls	r2, r2, #7
 8004424:	440a      	add	r2, r1
 8004426:	3284      	adds	r2, #132	; 0x84
 8004428:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800442c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	0c1b      	lsrs	r3, r3, #16
 800443a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800443e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004440:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4619      	mov	r1, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	01db      	lsls	r3, r3, #7
 800444c:	440b      	add	r3, r1
 800444e:	3384      	adds	r3, #132	; 0x84
 8004450:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004456:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	68da      	ldr	r2, [r3, #12]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004466:	4413      	add	r3, r2
 8004468:	041b      	lsls	r3, r3, #16
 800446a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	461a      	mov	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	01db      	lsls	r3, r3, #7
 8004476:	4413      	add	r3, r2
 8004478:	3384      	adds	r3, #132	; 0x84
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	6812      	ldr	r2, [r2, #0]
 8004480:	4611      	mov	r1, r2
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	01d2      	lsls	r2, r2, #7
 8004486:	440a      	add	r2, r1
 8004488:	3284      	adds	r2, #132	; 0x84
 800448a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800448e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800449e:	4413      	add	r3, r2
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4619      	mov	r1, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	01db      	lsls	r3, r3, #7
 80044ac:	440b      	add	r3, r1
 80044ae:	3384      	adds	r3, #132	; 0x84
 80044b0:	4619      	mov	r1, r3
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	461a      	mov	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	01db      	lsls	r3, r3, #7
 80044c2:	4413      	add	r3, r2
 80044c4:	3384      	adds	r3, #132	; 0x84
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	6812      	ldr	r2, [r2, #0]
 80044cc:	4611      	mov	r1, r2
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	01d2      	lsls	r2, r2, #7
 80044d2:	440a      	add	r2, r1
 80044d4:	3284      	adds	r2, #132	; 0x84
 80044d6:	f023 0307 	bic.w	r3, r3, #7
 80044da:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	461a      	mov	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	01db      	lsls	r3, r3, #7
 80044e6:	4413      	add	r3, r2
 80044e8:	3384      	adds	r3, #132	; 0x84
 80044ea:	461a      	mov	r2, r3
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80044f8:	021b      	lsls	r3, r3, #8
 80044fa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004502:	041b      	lsls	r3, r3, #16
 8004504:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	061b      	lsls	r3, r3, #24
 800450c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	461a      	mov	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	01db      	lsls	r3, r3, #7
 8004518:	4413      	add	r3, r2
 800451a:	3384      	adds	r3, #132	; 0x84
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	01db      	lsls	r3, r3, #7
 8004528:	4413      	add	r3, r2
 800452a:	3384      	adds	r3, #132	; 0x84
 800452c:	461a      	mov	r2, r3
 800452e:	2300      	movs	r3, #0
 8004530:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004538:	461a      	mov	r2, r3
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	431a      	orrs	r2, r3
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	431a      	orrs	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4619      	mov	r1, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	01db      	lsls	r3, r3, #7
 800454c:	440b      	add	r3, r1
 800454e:	3384      	adds	r3, #132	; 0x84
 8004550:	4619      	mov	r1, r3
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	4313      	orrs	r3, r2
 8004556:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	461a      	mov	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	01db      	lsls	r3, r3, #7
 8004562:	4413      	add	r3, r2
 8004564:	3384      	adds	r3, #132	; 0x84
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	6812      	ldr	r2, [r2, #0]
 800456c:	4611      	mov	r1, r2
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	01d2      	lsls	r2, r2, #7
 8004572:	440a      	add	r2, r1
 8004574:	3284      	adds	r2, #132	; 0x84
 8004576:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800457a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	461a      	mov	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	01db      	lsls	r3, r3, #7
 8004586:	4413      	add	r3, r2
 8004588:	3384      	adds	r3, #132	; 0x84
 800458a:	461a      	mov	r2, r3
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	01db      	lsls	r3, r3, #7
 800459c:	4413      	add	r3, r2
 800459e:	3384      	adds	r3, #132	; 0x84
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	6812      	ldr	r2, [r2, #0]
 80045a6:	4611      	mov	r1, r2
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	01d2      	lsls	r2, r2, #7
 80045ac:	440a      	add	r2, r1
 80045ae:	3284      	adds	r2, #132	; 0x84
 80045b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80045b4:	f023 0307 	bic.w	r3, r3, #7
 80045b8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	69da      	ldr	r2, [r3, #28]
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	68f9      	ldr	r1, [r7, #12]
 80045c4:	6809      	ldr	r1, [r1, #0]
 80045c6:	4608      	mov	r0, r1
 80045c8:	6879      	ldr	r1, [r7, #4]
 80045ca:	01c9      	lsls	r1, r1, #7
 80045cc:	4401      	add	r1, r0
 80045ce:	3184      	adds	r1, #132	; 0x84
 80045d0:	4313      	orrs	r3, r2
 80045d2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	461a      	mov	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	01db      	lsls	r3, r3, #7
 80045de:	4413      	add	r3, r2
 80045e0:	3384      	adds	r3, #132	; 0x84
 80045e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	461a      	mov	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	01db      	lsls	r3, r3, #7
 80045ee:	4413      	add	r3, r2
 80045f0:	3384      	adds	r3, #132	; 0x84
 80045f2:	461a      	mov	r2, r3
 80045f4:	2300      	movs	r3, #0
 80045f6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	461a      	mov	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	01db      	lsls	r3, r3, #7
 8004602:	4413      	add	r3, r2
 8004604:	3384      	adds	r3, #132	; 0x84
 8004606:	461a      	mov	r2, r3
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d102      	bne.n	800461c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004616:	2304      	movs	r3, #4
 8004618:	61fb      	str	r3, [r7, #28]
 800461a:	e01b      	b.n	8004654 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d102      	bne.n	800462a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004624:	2303      	movs	r3, #3
 8004626:	61fb      	str	r3, [r7, #28]
 8004628:	e014      	b.n	8004654 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2b04      	cmp	r3, #4
 8004630:	d00b      	beq.n	800464a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004636:	2b02      	cmp	r3, #2
 8004638:	d007      	beq.n	800464a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800463e:	2b03      	cmp	r3, #3
 8004640:	d003      	beq.n	800464a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004646:	2b07      	cmp	r3, #7
 8004648:	d102      	bne.n	8004650 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800464a:	2302      	movs	r3, #2
 800464c:	61fb      	str	r3, [r7, #28]
 800464e:	e001      	b.n	8004654 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004650:	2301      	movs	r3, #1
 8004652:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	461a      	mov	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	01db      	lsls	r3, r3, #7
 800465e:	4413      	add	r3, r2
 8004660:	3384      	adds	r3, #132	; 0x84
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	6812      	ldr	r2, [r2, #0]
 8004668:	4611      	mov	r1, r2
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	01d2      	lsls	r2, r2, #7
 800466e:	440a      	add	r2, r1
 8004670:	3284      	adds	r2, #132	; 0x84
 8004672:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004676:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467c:	69fa      	ldr	r2, [r7, #28]
 800467e:	fb02 f303 	mul.w	r3, r2, r3
 8004682:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	6859      	ldr	r1, [r3, #4]
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	1acb      	subs	r3, r1, r3
 800468e:	69f9      	ldr	r1, [r7, #28]
 8004690:	fb01 f303 	mul.w	r3, r1, r3
 8004694:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004696:	68f9      	ldr	r1, [r7, #12]
 8004698:	6809      	ldr	r1, [r1, #0]
 800469a:	4608      	mov	r0, r1
 800469c:	6879      	ldr	r1, [r7, #4]
 800469e:	01c9      	lsls	r1, r1, #7
 80046a0:	4401      	add	r1, r0
 80046a2:	3184      	adds	r1, #132	; 0x84
 80046a4:	4313      	orrs	r3, r2
 80046a6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	461a      	mov	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	01db      	lsls	r3, r3, #7
 80046b2:	4413      	add	r3, r2
 80046b4:	3384      	adds	r3, #132	; 0x84
 80046b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	6812      	ldr	r2, [r2, #0]
 80046bc:	4611      	mov	r1, r2
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	01d2      	lsls	r2, r2, #7
 80046c2:	440a      	add	r2, r1
 80046c4:	3284      	adds	r2, #132	; 0x84
 80046c6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80046ca:	f023 0307 	bic.w	r3, r3, #7
 80046ce:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	461a      	mov	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	01db      	lsls	r3, r3, #7
 80046da:	4413      	add	r3, r2
 80046dc:	3384      	adds	r3, #132	; 0x84
 80046de:	461a      	mov	r2, r3
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	461a      	mov	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	01db      	lsls	r3, r3, #7
 80046f0:	4413      	add	r3, r2
 80046f2:	3384      	adds	r3, #132	; 0x84
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	6812      	ldr	r2, [r2, #0]
 80046fa:	4611      	mov	r1, r2
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	01d2      	lsls	r2, r2, #7
 8004700:	440a      	add	r2, r1
 8004702:	3284      	adds	r2, #132	; 0x84
 8004704:	f043 0301 	orr.w	r3, r3, #1
 8004708:	6013      	str	r3, [r2, #0]
}
 800470a:	bf00      	nop
 800470c:	3724      	adds	r7, #36	; 0x24
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
	...

08004718 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e267      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d075      	beq.n	8004822 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004736:	4b88      	ldr	r3, [pc, #544]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 030c 	and.w	r3, r3, #12
 800473e:	2b04      	cmp	r3, #4
 8004740:	d00c      	beq.n	800475c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004742:	4b85      	ldr	r3, [pc, #532]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800474a:	2b08      	cmp	r3, #8
 800474c:	d112      	bne.n	8004774 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800474e:	4b82      	ldr	r3, [pc, #520]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004756:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800475a:	d10b      	bne.n	8004774 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800475c:	4b7e      	ldr	r3, [pc, #504]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d05b      	beq.n	8004820 <HAL_RCC_OscConfig+0x108>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d157      	bne.n	8004820 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e242      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800477c:	d106      	bne.n	800478c <HAL_RCC_OscConfig+0x74>
 800477e:	4b76      	ldr	r3, [pc, #472]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a75      	ldr	r2, [pc, #468]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 8004784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	e01d      	b.n	80047c8 <HAL_RCC_OscConfig+0xb0>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004794:	d10c      	bne.n	80047b0 <HAL_RCC_OscConfig+0x98>
 8004796:	4b70      	ldr	r3, [pc, #448]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a6f      	ldr	r2, [pc, #444]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 800479c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	4b6d      	ldr	r3, [pc, #436]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a6c      	ldr	r2, [pc, #432]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 80047a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ac:	6013      	str	r3, [r2, #0]
 80047ae:	e00b      	b.n	80047c8 <HAL_RCC_OscConfig+0xb0>
 80047b0:	4b69      	ldr	r3, [pc, #420]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a68      	ldr	r2, [pc, #416]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 80047b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ba:	6013      	str	r3, [r2, #0]
 80047bc:	4b66      	ldr	r3, [pc, #408]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a65      	ldr	r2, [pc, #404]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 80047c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d013      	beq.n	80047f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d0:	f7fd f8cc 	bl	800196c <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047d6:	e008      	b.n	80047ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047d8:	f7fd f8c8 	bl	800196c <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b64      	cmp	r3, #100	; 0x64
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e207      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ea:	4b5b      	ldr	r3, [pc, #364]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0f0      	beq.n	80047d8 <HAL_RCC_OscConfig+0xc0>
 80047f6:	e014      	b.n	8004822 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f8:	f7fd f8b8 	bl	800196c <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004800:	f7fd f8b4 	bl	800196c <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b64      	cmp	r3, #100	; 0x64
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e1f3      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004812:	4b51      	ldr	r3, [pc, #324]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1f0      	bne.n	8004800 <HAL_RCC_OscConfig+0xe8>
 800481e:	e000      	b.n	8004822 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d063      	beq.n	80048f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800482e:	4b4a      	ldr	r3, [pc, #296]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 030c 	and.w	r3, r3, #12
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00b      	beq.n	8004852 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800483a:	4b47      	ldr	r3, [pc, #284]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004842:	2b08      	cmp	r3, #8
 8004844:	d11c      	bne.n	8004880 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004846:	4b44      	ldr	r3, [pc, #272]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d116      	bne.n	8004880 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004852:	4b41      	ldr	r3, [pc, #260]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d005      	beq.n	800486a <HAL_RCC_OscConfig+0x152>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d001      	beq.n	800486a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e1c7      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800486a:	4b3b      	ldr	r3, [pc, #236]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	4937      	ldr	r1, [pc, #220]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 800487a:	4313      	orrs	r3, r2
 800487c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800487e:	e03a      	b.n	80048f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d020      	beq.n	80048ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004888:	4b34      	ldr	r3, [pc, #208]	; (800495c <HAL_RCC_OscConfig+0x244>)
 800488a:	2201      	movs	r2, #1
 800488c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488e:	f7fd f86d 	bl	800196c <HAL_GetTick>
 8004892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004894:	e008      	b.n	80048a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004896:	f7fd f869 	bl	800196c <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e1a8      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048a8:	4b2b      	ldr	r3, [pc, #172]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d0f0      	beq.n	8004896 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b4:	4b28      	ldr	r3, [pc, #160]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	4925      	ldr	r1, [pc, #148]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	600b      	str	r3, [r1, #0]
 80048c8:	e015      	b.n	80048f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048ca:	4b24      	ldr	r3, [pc, #144]	; (800495c <HAL_RCC_OscConfig+0x244>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d0:	f7fd f84c 	bl	800196c <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048d8:	f7fd f848 	bl	800196c <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e187      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ea:	4b1b      	ldr	r3, [pc, #108]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1f0      	bne.n	80048d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0308 	and.w	r3, r3, #8
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d036      	beq.n	8004970 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d016      	beq.n	8004938 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800490a:	4b15      	ldr	r3, [pc, #84]	; (8004960 <HAL_RCC_OscConfig+0x248>)
 800490c:	2201      	movs	r2, #1
 800490e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004910:	f7fd f82c 	bl	800196c <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004918:	f7fd f828 	bl	800196c <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e167      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800492a:	4b0b      	ldr	r3, [pc, #44]	; (8004958 <HAL_RCC_OscConfig+0x240>)
 800492c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d0f0      	beq.n	8004918 <HAL_RCC_OscConfig+0x200>
 8004936:	e01b      	b.n	8004970 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004938:	4b09      	ldr	r3, [pc, #36]	; (8004960 <HAL_RCC_OscConfig+0x248>)
 800493a:	2200      	movs	r2, #0
 800493c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800493e:	f7fd f815 	bl	800196c <HAL_GetTick>
 8004942:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004944:	e00e      	b.n	8004964 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004946:	f7fd f811 	bl	800196c <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d907      	bls.n	8004964 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e150      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
 8004958:	40023800 	.word	0x40023800
 800495c:	42470000 	.word	0x42470000
 8004960:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004964:	4b88      	ldr	r3, [pc, #544]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1ea      	bne.n	8004946 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 8097 	beq.w	8004aac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800497e:	2300      	movs	r3, #0
 8004980:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004982:	4b81      	ldr	r3, [pc, #516]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10f      	bne.n	80049ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800498e:	2300      	movs	r3, #0
 8004990:	60bb      	str	r3, [r7, #8]
 8004992:	4b7d      	ldr	r3, [pc, #500]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004996:	4a7c      	ldr	r2, [pc, #496]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800499c:	6413      	str	r3, [r2, #64]	; 0x40
 800499e:	4b7a      	ldr	r3, [pc, #488]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049a6:	60bb      	str	r3, [r7, #8]
 80049a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049aa:	2301      	movs	r3, #1
 80049ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ae:	4b77      	ldr	r3, [pc, #476]	; (8004b8c <HAL_RCC_OscConfig+0x474>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d118      	bne.n	80049ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049ba:	4b74      	ldr	r3, [pc, #464]	; (8004b8c <HAL_RCC_OscConfig+0x474>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a73      	ldr	r2, [pc, #460]	; (8004b8c <HAL_RCC_OscConfig+0x474>)
 80049c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049c6:	f7fc ffd1 	bl	800196c <HAL_GetTick>
 80049ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049cc:	e008      	b.n	80049e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ce:	f7fc ffcd 	bl	800196c <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e10c      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e0:	4b6a      	ldr	r3, [pc, #424]	; (8004b8c <HAL_RCC_OscConfig+0x474>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0f0      	beq.n	80049ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d106      	bne.n	8004a02 <HAL_RCC_OscConfig+0x2ea>
 80049f4:	4b64      	ldr	r3, [pc, #400]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 80049f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f8:	4a63      	ldr	r2, [pc, #396]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 80049fa:	f043 0301 	orr.w	r3, r3, #1
 80049fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004a00:	e01c      	b.n	8004a3c <HAL_RCC_OscConfig+0x324>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	2b05      	cmp	r3, #5
 8004a08:	d10c      	bne.n	8004a24 <HAL_RCC_OscConfig+0x30c>
 8004a0a:	4b5f      	ldr	r3, [pc, #380]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0e:	4a5e      	ldr	r2, [pc, #376]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004a10:	f043 0304 	orr.w	r3, r3, #4
 8004a14:	6713      	str	r3, [r2, #112]	; 0x70
 8004a16:	4b5c      	ldr	r3, [pc, #368]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1a:	4a5b      	ldr	r2, [pc, #364]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004a1c:	f043 0301 	orr.w	r3, r3, #1
 8004a20:	6713      	str	r3, [r2, #112]	; 0x70
 8004a22:	e00b      	b.n	8004a3c <HAL_RCC_OscConfig+0x324>
 8004a24:	4b58      	ldr	r3, [pc, #352]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a28:	4a57      	ldr	r2, [pc, #348]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004a2a:	f023 0301 	bic.w	r3, r3, #1
 8004a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a30:	4b55      	ldr	r3, [pc, #340]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a34:	4a54      	ldr	r2, [pc, #336]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004a36:	f023 0304 	bic.w	r3, r3, #4
 8004a3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d015      	beq.n	8004a70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a44:	f7fc ff92 	bl	800196c <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a4a:	e00a      	b.n	8004a62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a4c:	f7fc ff8e 	bl	800196c <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e0cb      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a62:	4b49      	ldr	r3, [pc, #292]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0ee      	beq.n	8004a4c <HAL_RCC_OscConfig+0x334>
 8004a6e:	e014      	b.n	8004a9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a70:	f7fc ff7c 	bl	800196c <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a76:	e00a      	b.n	8004a8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a78:	f7fc ff78 	bl	800196c <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e0b5      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a8e:	4b3e      	ldr	r3, [pc, #248]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1ee      	bne.n	8004a78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a9a:	7dfb      	ldrb	r3, [r7, #23]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d105      	bne.n	8004aac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aa0:	4b39      	ldr	r3, [pc, #228]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa4:	4a38      	ldr	r2, [pc, #224]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004aa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aaa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 80a1 	beq.w	8004bf8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ab6:	4b34      	ldr	r3, [pc, #208]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 030c 	and.w	r3, r3, #12
 8004abe:	2b08      	cmp	r3, #8
 8004ac0:	d05c      	beq.n	8004b7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d141      	bne.n	8004b4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aca:	4b31      	ldr	r3, [pc, #196]	; (8004b90 <HAL_RCC_OscConfig+0x478>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad0:	f7fc ff4c 	bl	800196c <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ad8:	f7fc ff48 	bl	800196c <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e087      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aea:	4b27      	ldr	r3, [pc, #156]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1f0      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	69da      	ldr	r2, [r3, #28]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b04:	019b      	lsls	r3, r3, #6
 8004b06:	431a      	orrs	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0c:	085b      	lsrs	r3, r3, #1
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	041b      	lsls	r3, r3, #16
 8004b12:	431a      	orrs	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b18:	061b      	lsls	r3, r3, #24
 8004b1a:	491b      	ldr	r1, [pc, #108]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b20:	4b1b      	ldr	r3, [pc, #108]	; (8004b90 <HAL_RCC_OscConfig+0x478>)
 8004b22:	2201      	movs	r2, #1
 8004b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b26:	f7fc ff21 	bl	800196c <HAL_GetTick>
 8004b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b2c:	e008      	b.n	8004b40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b2e:	f7fc ff1d 	bl	800196c <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e05c      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b40:	4b11      	ldr	r3, [pc, #68]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0f0      	beq.n	8004b2e <HAL_RCC_OscConfig+0x416>
 8004b4c:	e054      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b4e:	4b10      	ldr	r3, [pc, #64]	; (8004b90 <HAL_RCC_OscConfig+0x478>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b54:	f7fc ff0a 	bl	800196c <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b5c:	f7fc ff06 	bl	800196c <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e045      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b6e:	4b06      	ldr	r3, [pc, #24]	; (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1f0      	bne.n	8004b5c <HAL_RCC_OscConfig+0x444>
 8004b7a:	e03d      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d107      	bne.n	8004b94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e038      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
 8004b88:	40023800 	.word	0x40023800
 8004b8c:	40007000 	.word	0x40007000
 8004b90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b94:	4b1b      	ldr	r3, [pc, #108]	; (8004c04 <HAL_RCC_OscConfig+0x4ec>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d028      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d121      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d11a      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d111      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bda:	085b      	lsrs	r3, r3, #1
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d107      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d001      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e000      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3718      	adds	r7, #24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	40023800 	.word	0x40023800

08004c08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e0cc      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c1c:	4b68      	ldr	r3, [pc, #416]	; (8004dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 030f 	and.w	r3, r3, #15
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d90c      	bls.n	8004c44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c2a:	4b65      	ldr	r3, [pc, #404]	; (8004dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c32:	4b63      	ldr	r3, [pc, #396]	; (8004dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 030f 	and.w	r3, r3, #15
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d001      	beq.n	8004c44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e0b8      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d020      	beq.n	8004c92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d005      	beq.n	8004c68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c5c:	4b59      	ldr	r3, [pc, #356]	; (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	4a58      	ldr	r2, [pc, #352]	; (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0308 	and.w	r3, r3, #8
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d005      	beq.n	8004c80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c74:	4b53      	ldr	r3, [pc, #332]	; (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	4a52      	ldr	r2, [pc, #328]	; (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c80:	4b50      	ldr	r3, [pc, #320]	; (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	494d      	ldr	r1, [pc, #308]	; (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d044      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d107      	bne.n	8004cb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ca6:	4b47      	ldr	r3, [pc, #284]	; (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d119      	bne.n	8004ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e07f      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d003      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	d107      	bne.n	8004cd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cc6:	4b3f      	ldr	r3, [pc, #252]	; (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d109      	bne.n	8004ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e06f      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cd6:	4b3b      	ldr	r3, [pc, #236]	; (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e067      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ce6:	4b37      	ldr	r3, [pc, #220]	; (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f023 0203 	bic.w	r2, r3, #3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	4934      	ldr	r1, [pc, #208]	; (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cf8:	f7fc fe38 	bl	800196c <HAL_GetTick>
 8004cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cfe:	e00a      	b.n	8004d16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d00:	f7fc fe34 	bl	800196c <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e04f      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d16:	4b2b      	ldr	r3, [pc, #172]	; (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f003 020c 	and.w	r2, r3, #12
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d1eb      	bne.n	8004d00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d28:	4b25      	ldr	r3, [pc, #148]	; (8004dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 030f 	and.w	r3, r3, #15
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d20c      	bcs.n	8004d50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d36:	4b22      	ldr	r3, [pc, #136]	; (8004dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d3e:	4b20      	ldr	r3, [pc, #128]	; (8004dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 030f 	and.w	r3, r3, #15
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d001      	beq.n	8004d50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e032      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0304 	and.w	r3, r3, #4
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d008      	beq.n	8004d6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d5c:	4b19      	ldr	r3, [pc, #100]	; (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	4916      	ldr	r1, [pc, #88]	; (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0308 	and.w	r3, r3, #8
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d009      	beq.n	8004d8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d7a:	4b12      	ldr	r3, [pc, #72]	; (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	490e      	ldr	r1, [pc, #56]	; (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d8e:	f000 f821 	bl	8004dd4 <HAL_RCC_GetSysClockFreq>
 8004d92:	4602      	mov	r2, r0
 8004d94:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	091b      	lsrs	r3, r3, #4
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	490a      	ldr	r1, [pc, #40]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004da0:	5ccb      	ldrb	r3, [r1, r3]
 8004da2:	fa22 f303 	lsr.w	r3, r2, r3
 8004da6:	4a09      	ldr	r2, [pc, #36]	; (8004dcc <HAL_RCC_ClockConfig+0x1c4>)
 8004da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004daa:	4b09      	ldr	r3, [pc, #36]	; (8004dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fc fc68 	bl	8001684 <HAL_InitTick>

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	40023c00 	.word	0x40023c00
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	0800e5b4 	.word	0x0800e5b4
 8004dcc:	20000000 	.word	0x20000000
 8004dd0:	20000004 	.word	0x20000004

08004dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dd8:	b094      	sub	sp, #80	; 0x50
 8004dda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	647b      	str	r3, [r7, #68]	; 0x44
 8004de0:	2300      	movs	r3, #0
 8004de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004de4:	2300      	movs	r3, #0
 8004de6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004de8:	2300      	movs	r3, #0
 8004dea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dec:	4b79      	ldr	r3, [pc, #484]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f003 030c 	and.w	r3, r3, #12
 8004df4:	2b08      	cmp	r3, #8
 8004df6:	d00d      	beq.n	8004e14 <HAL_RCC_GetSysClockFreq+0x40>
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	f200 80e1 	bhi.w	8004fc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d002      	beq.n	8004e08 <HAL_RCC_GetSysClockFreq+0x34>
 8004e02:	2b04      	cmp	r3, #4
 8004e04:	d003      	beq.n	8004e0e <HAL_RCC_GetSysClockFreq+0x3a>
 8004e06:	e0db      	b.n	8004fc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e08:	4b73      	ldr	r3, [pc, #460]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e0a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004e0c:	e0db      	b.n	8004fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e0e:	4b73      	ldr	r3, [pc, #460]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x208>)
 8004e10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e12:	e0d8      	b.n	8004fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e14:	4b6f      	ldr	r3, [pc, #444]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e1c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e1e:	4b6d      	ldr	r3, [pc, #436]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d063      	beq.n	8004ef2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e2a:	4b6a      	ldr	r3, [pc, #424]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	099b      	lsrs	r3, r3, #6
 8004e30:	2200      	movs	r2, #0
 8004e32:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e3c:	633b      	str	r3, [r7, #48]	; 0x30
 8004e3e:	2300      	movs	r3, #0
 8004e40:	637b      	str	r3, [r7, #52]	; 0x34
 8004e42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004e46:	4622      	mov	r2, r4
 8004e48:	462b      	mov	r3, r5
 8004e4a:	f04f 0000 	mov.w	r0, #0
 8004e4e:	f04f 0100 	mov.w	r1, #0
 8004e52:	0159      	lsls	r1, r3, #5
 8004e54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e58:	0150      	lsls	r0, r2, #5
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	4621      	mov	r1, r4
 8004e60:	1a51      	subs	r1, r2, r1
 8004e62:	6139      	str	r1, [r7, #16]
 8004e64:	4629      	mov	r1, r5
 8004e66:	eb63 0301 	sbc.w	r3, r3, r1
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	f04f 0200 	mov.w	r2, #0
 8004e70:	f04f 0300 	mov.w	r3, #0
 8004e74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e78:	4659      	mov	r1, fp
 8004e7a:	018b      	lsls	r3, r1, #6
 8004e7c:	4651      	mov	r1, sl
 8004e7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e82:	4651      	mov	r1, sl
 8004e84:	018a      	lsls	r2, r1, #6
 8004e86:	4651      	mov	r1, sl
 8004e88:	ebb2 0801 	subs.w	r8, r2, r1
 8004e8c:	4659      	mov	r1, fp
 8004e8e:	eb63 0901 	sbc.w	r9, r3, r1
 8004e92:	f04f 0200 	mov.w	r2, #0
 8004e96:	f04f 0300 	mov.w	r3, #0
 8004e9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ea2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ea6:	4690      	mov	r8, r2
 8004ea8:	4699      	mov	r9, r3
 8004eaa:	4623      	mov	r3, r4
 8004eac:	eb18 0303 	adds.w	r3, r8, r3
 8004eb0:	60bb      	str	r3, [r7, #8]
 8004eb2:	462b      	mov	r3, r5
 8004eb4:	eb49 0303 	adc.w	r3, r9, r3
 8004eb8:	60fb      	str	r3, [r7, #12]
 8004eba:	f04f 0200 	mov.w	r2, #0
 8004ebe:	f04f 0300 	mov.w	r3, #0
 8004ec2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ec6:	4629      	mov	r1, r5
 8004ec8:	024b      	lsls	r3, r1, #9
 8004eca:	4621      	mov	r1, r4
 8004ecc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ed0:	4621      	mov	r1, r4
 8004ed2:	024a      	lsls	r2, r1, #9
 8004ed4:	4610      	mov	r0, r2
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eda:	2200      	movs	r2, #0
 8004edc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ede:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ee0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ee4:	f7fb f984 	bl	80001f0 <__aeabi_uldivmod>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	4613      	mov	r3, r2
 8004eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ef0:	e058      	b.n	8004fa4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ef2:	4b38      	ldr	r3, [pc, #224]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	099b      	lsrs	r3, r3, #6
 8004ef8:	2200      	movs	r2, #0
 8004efa:	4618      	mov	r0, r3
 8004efc:	4611      	mov	r1, r2
 8004efe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f02:	623b      	str	r3, [r7, #32]
 8004f04:	2300      	movs	r3, #0
 8004f06:	627b      	str	r3, [r7, #36]	; 0x24
 8004f08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f0c:	4642      	mov	r2, r8
 8004f0e:	464b      	mov	r3, r9
 8004f10:	f04f 0000 	mov.w	r0, #0
 8004f14:	f04f 0100 	mov.w	r1, #0
 8004f18:	0159      	lsls	r1, r3, #5
 8004f1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f1e:	0150      	lsls	r0, r2, #5
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4641      	mov	r1, r8
 8004f26:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f2a:	4649      	mov	r1, r9
 8004f2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f30:	f04f 0200 	mov.w	r2, #0
 8004f34:	f04f 0300 	mov.w	r3, #0
 8004f38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f44:	ebb2 040a 	subs.w	r4, r2, sl
 8004f48:	eb63 050b 	sbc.w	r5, r3, fp
 8004f4c:	f04f 0200 	mov.w	r2, #0
 8004f50:	f04f 0300 	mov.w	r3, #0
 8004f54:	00eb      	lsls	r3, r5, #3
 8004f56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f5a:	00e2      	lsls	r2, r4, #3
 8004f5c:	4614      	mov	r4, r2
 8004f5e:	461d      	mov	r5, r3
 8004f60:	4643      	mov	r3, r8
 8004f62:	18e3      	adds	r3, r4, r3
 8004f64:	603b      	str	r3, [r7, #0]
 8004f66:	464b      	mov	r3, r9
 8004f68:	eb45 0303 	adc.w	r3, r5, r3
 8004f6c:	607b      	str	r3, [r7, #4]
 8004f6e:	f04f 0200 	mov.w	r2, #0
 8004f72:	f04f 0300 	mov.w	r3, #0
 8004f76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f7a:	4629      	mov	r1, r5
 8004f7c:	028b      	lsls	r3, r1, #10
 8004f7e:	4621      	mov	r1, r4
 8004f80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f84:	4621      	mov	r1, r4
 8004f86:	028a      	lsls	r2, r1, #10
 8004f88:	4610      	mov	r0, r2
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f8e:	2200      	movs	r2, #0
 8004f90:	61bb      	str	r3, [r7, #24]
 8004f92:	61fa      	str	r2, [r7, #28]
 8004f94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f98:	f7fb f92a 	bl	80001f0 <__aeabi_uldivmod>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fa4:	4b0b      	ldr	r3, [pc, #44]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	0c1b      	lsrs	r3, r3, #16
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	3301      	adds	r3, #1
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004fb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fbe:	e002      	b.n	8004fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fc0:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004fc2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3750      	adds	r7, #80	; 0x50
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fd2:	bf00      	nop
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	00f42400 	.word	0x00f42400
 8004fdc:	007a1200 	.word	0x007a1200

08004fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fe4:	4b03      	ldr	r3, [pc, #12]	; (8004ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	20000000 	.word	0x20000000

08004ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ffc:	f7ff fff0 	bl	8004fe0 <HAL_RCC_GetHCLKFreq>
 8005000:	4602      	mov	r2, r0
 8005002:	4b05      	ldr	r3, [pc, #20]	; (8005018 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	0a9b      	lsrs	r3, r3, #10
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	4903      	ldr	r1, [pc, #12]	; (800501c <HAL_RCC_GetPCLK1Freq+0x24>)
 800500e:	5ccb      	ldrb	r3, [r1, r3]
 8005010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005014:	4618      	mov	r0, r3
 8005016:	bd80      	pop	{r7, pc}
 8005018:	40023800 	.word	0x40023800
 800501c:	0800e5c4 	.word	0x0800e5c4

08005020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005024:	f7ff ffdc 	bl	8004fe0 <HAL_RCC_GetHCLKFreq>
 8005028:	4602      	mov	r2, r0
 800502a:	4b05      	ldr	r3, [pc, #20]	; (8005040 <HAL_RCC_GetPCLK2Freq+0x20>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	0b5b      	lsrs	r3, r3, #13
 8005030:	f003 0307 	and.w	r3, r3, #7
 8005034:	4903      	ldr	r1, [pc, #12]	; (8005044 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005036:	5ccb      	ldrb	r3, [r1, r3]
 8005038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800503c:	4618      	mov	r0, r3
 800503e:	bd80      	pop	{r7, pc}
 8005040:	40023800 	.word	0x40023800
 8005044:	0800e5c4 	.word	0x0800e5c4

08005048 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	220f      	movs	r2, #15
 8005056:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005058:	4b12      	ldr	r3, [pc, #72]	; (80050a4 <HAL_RCC_GetClockConfig+0x5c>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f003 0203 	and.w	r2, r3, #3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005064:	4b0f      	ldr	r3, [pc, #60]	; (80050a4 <HAL_RCC_GetClockConfig+0x5c>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005070:	4b0c      	ldr	r3, [pc, #48]	; (80050a4 <HAL_RCC_GetClockConfig+0x5c>)
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800507c:	4b09      	ldr	r3, [pc, #36]	; (80050a4 <HAL_RCC_GetClockConfig+0x5c>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	08db      	lsrs	r3, r3, #3
 8005082:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800508a:	4b07      	ldr	r3, [pc, #28]	; (80050a8 <HAL_RCC_GetClockConfig+0x60>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 020f 	and.w	r2, r3, #15
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	601a      	str	r2, [r3, #0]
}
 8005096:	bf00      	nop
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	40023800 	.word	0x40023800
 80050a8:	40023c00 	.word	0x40023c00

080050ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050b4:	2300      	movs	r3, #0
 80050b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10b      	bne.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d105      	bne.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d075      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80050e0:	4b91      	ldr	r3, [pc, #580]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80050e2:	2200      	movs	r2, #0
 80050e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050e6:	f7fc fc41 	bl	800196c <HAL_GetTick>
 80050ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050ec:	e008      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80050ee:	f7fc fc3d 	bl	800196c <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d901      	bls.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e189      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005100:	4b8a      	ldr	r3, [pc, #552]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1f0      	bne.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b00      	cmp	r3, #0
 8005116:	d009      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	019a      	lsls	r2, r3, #6
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	071b      	lsls	r3, r3, #28
 8005124:	4981      	ldr	r1, [pc, #516]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005126:	4313      	orrs	r3, r2
 8005128:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d01f      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005138:	4b7c      	ldr	r3, [pc, #496]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800513a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800513e:	0f1b      	lsrs	r3, r3, #28
 8005140:	f003 0307 	and.w	r3, r3, #7
 8005144:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	019a      	lsls	r2, r3, #6
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	061b      	lsls	r3, r3, #24
 8005152:	431a      	orrs	r2, r3
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	071b      	lsls	r3, r3, #28
 8005158:	4974      	ldr	r1, [pc, #464]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800515a:	4313      	orrs	r3, r2
 800515c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005160:	4b72      	ldr	r3, [pc, #456]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005162:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005166:	f023 021f 	bic.w	r2, r3, #31
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	3b01      	subs	r3, #1
 8005170:	496e      	ldr	r1, [pc, #440]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005172:	4313      	orrs	r3, r2
 8005174:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00d      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	019a      	lsls	r2, r3, #6
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	061b      	lsls	r3, r3, #24
 8005190:	431a      	orrs	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	071b      	lsls	r3, r3, #28
 8005198:	4964      	ldr	r1, [pc, #400]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800519a:	4313      	orrs	r3, r2
 800519c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051a0:	4b61      	ldr	r3, [pc, #388]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80051a2:	2201      	movs	r2, #1
 80051a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051a6:	f7fc fbe1 	bl	800196c <HAL_GetTick>
 80051aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051ac:	e008      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051ae:	f7fc fbdd 	bl	800196c <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d901      	bls.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e129      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051c0:	4b5a      	ldr	r3, [pc, #360]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d0f0      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d105      	bne.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d079      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80051e4:	4b52      	ldr	r3, [pc, #328]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051ea:	f7fc fbbf 	bl	800196c <HAL_GetTick>
 80051ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051f0:	e008      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80051f2:	f7fc fbbb 	bl	800196c <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d901      	bls.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e107      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005204:	4b49      	ldr	r3, [pc, #292]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800520c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005210:	d0ef      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0304 	and.w	r3, r3, #4
 800521a:	2b00      	cmp	r3, #0
 800521c:	d020      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800521e:	4b43      	ldr	r3, [pc, #268]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005224:	0f1b      	lsrs	r3, r3, #28
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	019a      	lsls	r2, r3, #6
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	061b      	lsls	r3, r3, #24
 8005238:	431a      	orrs	r2, r3
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	071b      	lsls	r3, r3, #28
 800523e:	493b      	ldr	r1, [pc, #236]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005240:	4313      	orrs	r3, r2
 8005242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005246:	4b39      	ldr	r3, [pc, #228]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800524c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	3b01      	subs	r3, #1
 8005256:	021b      	lsls	r3, r3, #8
 8005258:	4934      	ldr	r1, [pc, #208]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800525a:	4313      	orrs	r3, r2
 800525c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0308 	and.w	r3, r3, #8
 8005268:	2b00      	cmp	r3, #0
 800526a:	d01e      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800526c:	4b2f      	ldr	r3, [pc, #188]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800526e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005272:	0e1b      	lsrs	r3, r3, #24
 8005274:	f003 030f 	and.w	r3, r3, #15
 8005278:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	019a      	lsls	r2, r3, #6
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	061b      	lsls	r3, r3, #24
 8005284:	431a      	orrs	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	071b      	lsls	r3, r3, #28
 800528c:	4927      	ldr	r1, [pc, #156]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800528e:	4313      	orrs	r3, r2
 8005290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005294:	4b25      	ldr	r3, [pc, #148]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005296:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800529a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a2:	4922      	ldr	r1, [pc, #136]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80052aa:	4b21      	ldr	r3, [pc, #132]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80052ac:	2201      	movs	r2, #1
 80052ae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052b0:	f7fc fb5c 	bl	800196c <HAL_GetTick>
 80052b4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052b6:	e008      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80052b8:	f7fc fb58 	bl	800196c <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d901      	bls.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e0a4      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052ca:	4b18      	ldr	r3, [pc, #96]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052d6:	d1ef      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0320 	and.w	r3, r3, #32
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f000 808b 	beq.w	80053fc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80052e6:	2300      	movs	r3, #0
 80052e8:	60fb      	str	r3, [r7, #12]
 80052ea:	4b10      	ldr	r3, [pc, #64]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	4a0f      	ldr	r2, [pc, #60]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052f4:	6413      	str	r3, [r2, #64]	; 0x40
 80052f6:	4b0d      	ldr	r3, [pc, #52]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005302:	4b0c      	ldr	r3, [pc, #48]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a0b      	ldr	r2, [pc, #44]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800530c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800530e:	f7fc fb2d 	bl	800196c <HAL_GetTick>
 8005312:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005314:	e010      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005316:	f7fc fb29 	bl	800196c <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d909      	bls.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e075      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005328:	42470068 	.word	0x42470068
 800532c:	40023800 	.word	0x40023800
 8005330:	42470070 	.word	0x42470070
 8005334:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005338:	4b38      	ldr	r3, [pc, #224]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0e8      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005344:	4b36      	ldr	r3, [pc, #216]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005348:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800534c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d02f      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005358:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	429a      	cmp	r2, r3
 8005360:	d028      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005362:	4b2f      	ldr	r3, [pc, #188]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800536a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800536c:	4b2d      	ldr	r3, [pc, #180]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800536e:	2201      	movs	r2, #1
 8005370:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005372:	4b2c      	ldr	r3, [pc, #176]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005374:	2200      	movs	r2, #0
 8005376:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005378:	4a29      	ldr	r2, [pc, #164]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800537e:	4b28      	ldr	r3, [pc, #160]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b01      	cmp	r3, #1
 8005388:	d114      	bne.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800538a:	f7fc faef 	bl	800196c <HAL_GetTick>
 800538e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005390:	e00a      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005392:	f7fc faeb 	bl	800196c <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d901      	bls.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e035      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053a8:	4b1d      	ldr	r3, [pc, #116]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d0ee      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053c0:	d10d      	bne.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x332>
 80053c2:	4b17      	ldr	r3, [pc, #92]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80053d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053d6:	4912      	ldr	r1, [pc, #72]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	608b      	str	r3, [r1, #8]
 80053dc:	e005      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80053de:	4b10      	ldr	r3, [pc, #64]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	4a0f      	ldr	r2, [pc, #60]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053e4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80053e8:	6093      	str	r3, [r2, #8]
 80053ea:	4b0d      	ldr	r3, [pc, #52]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053f6:	490a      	ldr	r1, [pc, #40]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0310 	and.w	r3, r3, #16
 8005404:	2b00      	cmp	r3, #0
 8005406:	d004      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800540e:	4b06      	ldr	r3, [pc, #24]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005410:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3718      	adds	r7, #24
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	40007000 	.word	0x40007000
 8005420:	40023800 	.word	0x40023800
 8005424:	42470e40 	.word	0x42470e40
 8005428:	424711e0 	.word	0x424711e0

0800542c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e025      	b.n	800548c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	d106      	bne.n	800545a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f7fc f90b 	bl	8001670 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2202      	movs	r2, #2
 800545e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	3304      	adds	r3, #4
 800546a:	4619      	mov	r1, r3
 800546c:	4610      	mov	r0, r2
 800546e:	f002 f893 	bl	8007598 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6818      	ldr	r0, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	461a      	mov	r2, r3
 800547c:	6839      	ldr	r1, [r7, #0]
 800547e:	f002 f8e8 	bl	8007652 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3708      	adds	r7, #8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e07b      	b.n	800559e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d108      	bne.n	80054c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054b6:	d009      	beq.n	80054cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	61da      	str	r2, [r3, #28]
 80054be:	e005      	b.n	80054cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d106      	bne.n	80054ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7fb ff1a 	bl	8001320 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005502:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005514:	431a      	orrs	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800551e:	431a      	orrs	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	431a      	orrs	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	431a      	orrs	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800553c:	431a      	orrs	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005546:	431a      	orrs	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005550:	ea42 0103 	orr.w	r1, r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005558:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	0c1b      	lsrs	r3, r3, #16
 800556a:	f003 0104 	and.w	r1, r3, #4
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005572:	f003 0210 	and.w	r2, r3, #16
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	69da      	ldr	r2, [r3, #28]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800558c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b082      	sub	sp, #8
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e041      	b.n	800563c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d106      	bne.n	80055d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f7fb feef 	bl	80013b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2202      	movs	r2, #2
 80055d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	3304      	adds	r3, #4
 80055e2:	4619      	mov	r1, r3
 80055e4:	4610      	mov	r0, r2
 80055e6:	f000 fba7 	bl	8005d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b01      	cmp	r3, #1
 8005656:	d001      	beq.n	800565c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e04e      	b.n	80056fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2202      	movs	r2, #2
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f042 0201 	orr.w	r2, r2, #1
 8005672:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a23      	ldr	r2, [pc, #140]	; (8005708 <HAL_TIM_Base_Start_IT+0xc4>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d022      	beq.n	80056c4 <HAL_TIM_Base_Start_IT+0x80>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005686:	d01d      	beq.n	80056c4 <HAL_TIM_Base_Start_IT+0x80>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a1f      	ldr	r2, [pc, #124]	; (800570c <HAL_TIM_Base_Start_IT+0xc8>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d018      	beq.n	80056c4 <HAL_TIM_Base_Start_IT+0x80>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a1e      	ldr	r2, [pc, #120]	; (8005710 <HAL_TIM_Base_Start_IT+0xcc>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d013      	beq.n	80056c4 <HAL_TIM_Base_Start_IT+0x80>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a1c      	ldr	r2, [pc, #112]	; (8005714 <HAL_TIM_Base_Start_IT+0xd0>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d00e      	beq.n	80056c4 <HAL_TIM_Base_Start_IT+0x80>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a1b      	ldr	r2, [pc, #108]	; (8005718 <HAL_TIM_Base_Start_IT+0xd4>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d009      	beq.n	80056c4 <HAL_TIM_Base_Start_IT+0x80>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a19      	ldr	r2, [pc, #100]	; (800571c <HAL_TIM_Base_Start_IT+0xd8>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d004      	beq.n	80056c4 <HAL_TIM_Base_Start_IT+0x80>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a18      	ldr	r2, [pc, #96]	; (8005720 <HAL_TIM_Base_Start_IT+0xdc>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d111      	bne.n	80056e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f003 0307 	and.w	r3, r3, #7
 80056ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2b06      	cmp	r3, #6
 80056d4:	d010      	beq.n	80056f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f042 0201 	orr.w	r2, r2, #1
 80056e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056e6:	e007      	b.n	80056f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f042 0201 	orr.w	r2, r2, #1
 80056f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	40010000 	.word	0x40010000
 800570c:	40000400 	.word	0x40000400
 8005710:	40000800 	.word	0x40000800
 8005714:	40000c00 	.word	0x40000c00
 8005718:	40010400 	.word	0x40010400
 800571c:	40014000 	.word	0x40014000
 8005720:	40001800 	.word	0x40001800

08005724 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e041      	b.n	80057ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d106      	bne.n	8005750 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7fb fe52 	bl	80013f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	3304      	adds	r3, #4
 8005760:	4619      	mov	r1, r3
 8005762:	4610      	mov	r0, r2
 8005764:	f000 fae8 	bl	8005d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b082      	sub	sp, #8
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d122      	bne.n	800581e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d11b      	bne.n	800581e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f06f 0202 	mvn.w	r2, #2
 80057ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	f003 0303 	and.w	r3, r3, #3
 8005800:	2b00      	cmp	r3, #0
 8005802:	d003      	beq.n	800580c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 fa78 	bl	8005cfa <HAL_TIM_IC_CaptureCallback>
 800580a:	e005      	b.n	8005818 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 fa6a 	bl	8005ce6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fa7b 	bl	8005d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	f003 0304 	and.w	r3, r3, #4
 8005828:	2b04      	cmp	r3, #4
 800582a:	d122      	bne.n	8005872 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f003 0304 	and.w	r3, r3, #4
 8005836:	2b04      	cmp	r3, #4
 8005838:	d11b      	bne.n	8005872 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f06f 0204 	mvn.w	r2, #4
 8005842:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2202      	movs	r2, #2
 8005848:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005854:	2b00      	cmp	r3, #0
 8005856:	d003      	beq.n	8005860 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 fa4e 	bl	8005cfa <HAL_TIM_IC_CaptureCallback>
 800585e:	e005      	b.n	800586c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 fa40 	bl	8005ce6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 fa51 	bl	8005d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	f003 0308 	and.w	r3, r3, #8
 800587c:	2b08      	cmp	r3, #8
 800587e:	d122      	bne.n	80058c6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	f003 0308 	and.w	r3, r3, #8
 800588a:	2b08      	cmp	r3, #8
 800588c:	d11b      	bne.n	80058c6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f06f 0208 	mvn.w	r2, #8
 8005896:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2204      	movs	r2, #4
 800589c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	69db      	ldr	r3, [r3, #28]
 80058a4:	f003 0303 	and.w	r3, r3, #3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d003      	beq.n	80058b4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fa24 	bl	8005cfa <HAL_TIM_IC_CaptureCallback>
 80058b2:	e005      	b.n	80058c0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 fa16 	bl	8005ce6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 fa27 	bl	8005d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	f003 0310 	and.w	r3, r3, #16
 80058d0:	2b10      	cmp	r3, #16
 80058d2:	d122      	bne.n	800591a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f003 0310 	and.w	r3, r3, #16
 80058de:	2b10      	cmp	r3, #16
 80058e0:	d11b      	bne.n	800591a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f06f 0210 	mvn.w	r2, #16
 80058ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2208      	movs	r2, #8
 80058f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	69db      	ldr	r3, [r3, #28]
 80058f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d003      	beq.n	8005908 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f9fa 	bl	8005cfa <HAL_TIM_IC_CaptureCallback>
 8005906:	e005      	b.n	8005914 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f9ec 	bl	8005ce6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f9fd 	bl	8005d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	2b01      	cmp	r3, #1
 8005926:	d10e      	bne.n	8005946 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b01      	cmp	r3, #1
 8005934:	d107      	bne.n	8005946 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f06f 0201 	mvn.w	r2, #1
 800593e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f7fb fac5 	bl	8000ed0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005950:	2b80      	cmp	r3, #128	; 0x80
 8005952:	d10e      	bne.n	8005972 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800595e:	2b80      	cmp	r3, #128	; 0x80
 8005960:	d107      	bne.n	8005972 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800596a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 fd53 	bl	8006418 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597c:	2b40      	cmp	r3, #64	; 0x40
 800597e:	d10e      	bne.n	800599e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598a:	2b40      	cmp	r3, #64	; 0x40
 800598c:	d107      	bne.n	800599e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f9c2 	bl	8005d22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	f003 0320 	and.w	r3, r3, #32
 80059a8:	2b20      	cmp	r3, #32
 80059aa:	d10e      	bne.n	80059ca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	f003 0320 	and.w	r3, r3, #32
 80059b6:	2b20      	cmp	r3, #32
 80059b8:	d107      	bne.n	80059ca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f06f 0220 	mvn.w	r2, #32
 80059c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 fd1d 	bl	8006404 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059ca:	bf00      	nop
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
	...

080059d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059e0:	2300      	movs	r3, #0
 80059e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d101      	bne.n	80059f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059ee:	2302      	movs	r3, #2
 80059f0:	e0ae      	b.n	8005b50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b0c      	cmp	r3, #12
 80059fe:	f200 809f 	bhi.w	8005b40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005a02:	a201      	add	r2, pc, #4	; (adr r2, 8005a08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a08:	08005a3d 	.word	0x08005a3d
 8005a0c:	08005b41 	.word	0x08005b41
 8005a10:	08005b41 	.word	0x08005b41
 8005a14:	08005b41 	.word	0x08005b41
 8005a18:	08005a7d 	.word	0x08005a7d
 8005a1c:	08005b41 	.word	0x08005b41
 8005a20:	08005b41 	.word	0x08005b41
 8005a24:	08005b41 	.word	0x08005b41
 8005a28:	08005abf 	.word	0x08005abf
 8005a2c:	08005b41 	.word	0x08005b41
 8005a30:	08005b41 	.word	0x08005b41
 8005a34:	08005b41 	.word	0x08005b41
 8005a38:	08005aff 	.word	0x08005aff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68b9      	ldr	r1, [r7, #8]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 fa18 	bl	8005e78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	699a      	ldr	r2, [r3, #24]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f042 0208 	orr.w	r2, r2, #8
 8005a56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	699a      	ldr	r2, [r3, #24]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f022 0204 	bic.w	r2, r2, #4
 8005a66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6999      	ldr	r1, [r3, #24]
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	691a      	ldr	r2, [r3, #16]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	619a      	str	r2, [r3, #24]
      break;
 8005a7a:	e064      	b.n	8005b46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68b9      	ldr	r1, [r7, #8]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 fa68 	bl	8005f58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699a      	ldr	r2, [r3, #24]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	699a      	ldr	r2, [r3, #24]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6999      	ldr	r1, [r3, #24]
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	021a      	lsls	r2, r3, #8
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	619a      	str	r2, [r3, #24]
      break;
 8005abc:	e043      	b.n	8005b46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68b9      	ldr	r1, [r7, #8]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f000 fabd 	bl	8006044 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	69da      	ldr	r2, [r3, #28]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f042 0208 	orr.w	r2, r2, #8
 8005ad8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	69da      	ldr	r2, [r3, #28]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f022 0204 	bic.w	r2, r2, #4
 8005ae8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	69d9      	ldr	r1, [r3, #28]
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	691a      	ldr	r2, [r3, #16]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	430a      	orrs	r2, r1
 8005afa:	61da      	str	r2, [r3, #28]
      break;
 8005afc:	e023      	b.n	8005b46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68b9      	ldr	r1, [r7, #8]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f000 fb11 	bl	800612c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	69da      	ldr	r2, [r3, #28]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	69da      	ldr	r2, [r3, #28]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	69d9      	ldr	r1, [r3, #28]
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	021a      	lsls	r2, r3, #8
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	61da      	str	r2, [r3, #28]
      break;
 8005b3e:	e002      	b.n	8005b46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	75fb      	strb	r3, [r7, #23]
      break;
 8005b44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3718      	adds	r7, #24
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b62:	2300      	movs	r3, #0
 8005b64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d101      	bne.n	8005b74 <HAL_TIM_ConfigClockSource+0x1c>
 8005b70:	2302      	movs	r3, #2
 8005b72:	e0b4      	b.n	8005cde <HAL_TIM_ConfigClockSource+0x186>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bac:	d03e      	beq.n	8005c2c <HAL_TIM_ConfigClockSource+0xd4>
 8005bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bb2:	f200 8087 	bhi.w	8005cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bba:	f000 8086 	beq.w	8005cca <HAL_TIM_ConfigClockSource+0x172>
 8005bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bc2:	d87f      	bhi.n	8005cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bc4:	2b70      	cmp	r3, #112	; 0x70
 8005bc6:	d01a      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0xa6>
 8005bc8:	2b70      	cmp	r3, #112	; 0x70
 8005bca:	d87b      	bhi.n	8005cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bcc:	2b60      	cmp	r3, #96	; 0x60
 8005bce:	d050      	beq.n	8005c72 <HAL_TIM_ConfigClockSource+0x11a>
 8005bd0:	2b60      	cmp	r3, #96	; 0x60
 8005bd2:	d877      	bhi.n	8005cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bd4:	2b50      	cmp	r3, #80	; 0x50
 8005bd6:	d03c      	beq.n	8005c52 <HAL_TIM_ConfigClockSource+0xfa>
 8005bd8:	2b50      	cmp	r3, #80	; 0x50
 8005bda:	d873      	bhi.n	8005cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bdc:	2b40      	cmp	r3, #64	; 0x40
 8005bde:	d058      	beq.n	8005c92 <HAL_TIM_ConfigClockSource+0x13a>
 8005be0:	2b40      	cmp	r3, #64	; 0x40
 8005be2:	d86f      	bhi.n	8005cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005be4:	2b30      	cmp	r3, #48	; 0x30
 8005be6:	d064      	beq.n	8005cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8005be8:	2b30      	cmp	r3, #48	; 0x30
 8005bea:	d86b      	bhi.n	8005cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bec:	2b20      	cmp	r3, #32
 8005bee:	d060      	beq.n	8005cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8005bf0:	2b20      	cmp	r3, #32
 8005bf2:	d867      	bhi.n	8005cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d05c      	beq.n	8005cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8005bf8:	2b10      	cmp	r3, #16
 8005bfa:	d05a      	beq.n	8005cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8005bfc:	e062      	b.n	8005cc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6818      	ldr	r0, [r3, #0]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	6899      	ldr	r1, [r3, #8]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f000 fb5d 	bl	80062cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	609a      	str	r2, [r3, #8]
      break;
 8005c2a:	e04f      	b.n	8005ccc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6818      	ldr	r0, [r3, #0]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	6899      	ldr	r1, [r3, #8]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f000 fb46 	bl	80062cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689a      	ldr	r2, [r3, #8]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c4e:	609a      	str	r2, [r3, #8]
      break;
 8005c50:	e03c      	b.n	8005ccc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6818      	ldr	r0, [r3, #0]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	6859      	ldr	r1, [r3, #4]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f000 faba 	bl	80061d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2150      	movs	r1, #80	; 0x50
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 fb13 	bl	8006296 <TIM_ITRx_SetConfig>
      break;
 8005c70:	e02c      	b.n	8005ccc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6818      	ldr	r0, [r3, #0]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	6859      	ldr	r1, [r3, #4]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	461a      	mov	r2, r3
 8005c80:	f000 fad9 	bl	8006236 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2160      	movs	r1, #96	; 0x60
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 fb03 	bl	8006296 <TIM_ITRx_SetConfig>
      break;
 8005c90:	e01c      	b.n	8005ccc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6818      	ldr	r0, [r3, #0]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	6859      	ldr	r1, [r3, #4]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	f000 fa9a 	bl	80061d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2140      	movs	r1, #64	; 0x40
 8005caa:	4618      	mov	r0, r3
 8005cac:	f000 faf3 	bl	8006296 <TIM_ITRx_SetConfig>
      break;
 8005cb0:	e00c      	b.n	8005ccc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4619      	mov	r1, r3
 8005cbc:	4610      	mov	r0, r2
 8005cbe:	f000 faea 	bl	8006296 <TIM_ITRx_SetConfig>
      break;
 8005cc2:	e003      	b.n	8005ccc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8005cc8:	e000      	b.n	8005ccc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005cca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b083      	sub	sp, #12
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cee:	bf00      	nop
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b083      	sub	sp, #12
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d02:	bf00      	nop
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr

08005d0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b083      	sub	sp, #12
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d16:	bf00      	nop
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b083      	sub	sp, #12
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d2a:	bf00      	nop
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
	...

08005d38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a40      	ldr	r2, [pc, #256]	; (8005e4c <TIM_Base_SetConfig+0x114>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d013      	beq.n	8005d78 <TIM_Base_SetConfig+0x40>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d56:	d00f      	beq.n	8005d78 <TIM_Base_SetConfig+0x40>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a3d      	ldr	r2, [pc, #244]	; (8005e50 <TIM_Base_SetConfig+0x118>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d00b      	beq.n	8005d78 <TIM_Base_SetConfig+0x40>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a3c      	ldr	r2, [pc, #240]	; (8005e54 <TIM_Base_SetConfig+0x11c>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d007      	beq.n	8005d78 <TIM_Base_SetConfig+0x40>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a3b      	ldr	r2, [pc, #236]	; (8005e58 <TIM_Base_SetConfig+0x120>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d003      	beq.n	8005d78 <TIM_Base_SetConfig+0x40>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a3a      	ldr	r2, [pc, #232]	; (8005e5c <TIM_Base_SetConfig+0x124>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d108      	bne.n	8005d8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a2f      	ldr	r2, [pc, #188]	; (8005e4c <TIM_Base_SetConfig+0x114>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d02b      	beq.n	8005dea <TIM_Base_SetConfig+0xb2>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d98:	d027      	beq.n	8005dea <TIM_Base_SetConfig+0xb2>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a2c      	ldr	r2, [pc, #176]	; (8005e50 <TIM_Base_SetConfig+0x118>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d023      	beq.n	8005dea <TIM_Base_SetConfig+0xb2>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a2b      	ldr	r2, [pc, #172]	; (8005e54 <TIM_Base_SetConfig+0x11c>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d01f      	beq.n	8005dea <TIM_Base_SetConfig+0xb2>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a2a      	ldr	r2, [pc, #168]	; (8005e58 <TIM_Base_SetConfig+0x120>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d01b      	beq.n	8005dea <TIM_Base_SetConfig+0xb2>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a29      	ldr	r2, [pc, #164]	; (8005e5c <TIM_Base_SetConfig+0x124>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d017      	beq.n	8005dea <TIM_Base_SetConfig+0xb2>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a28      	ldr	r2, [pc, #160]	; (8005e60 <TIM_Base_SetConfig+0x128>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d013      	beq.n	8005dea <TIM_Base_SetConfig+0xb2>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a27      	ldr	r2, [pc, #156]	; (8005e64 <TIM_Base_SetConfig+0x12c>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d00f      	beq.n	8005dea <TIM_Base_SetConfig+0xb2>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a26      	ldr	r2, [pc, #152]	; (8005e68 <TIM_Base_SetConfig+0x130>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d00b      	beq.n	8005dea <TIM_Base_SetConfig+0xb2>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a25      	ldr	r2, [pc, #148]	; (8005e6c <TIM_Base_SetConfig+0x134>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d007      	beq.n	8005dea <TIM_Base_SetConfig+0xb2>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a24      	ldr	r2, [pc, #144]	; (8005e70 <TIM_Base_SetConfig+0x138>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d003      	beq.n	8005dea <TIM_Base_SetConfig+0xb2>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a23      	ldr	r2, [pc, #140]	; (8005e74 <TIM_Base_SetConfig+0x13c>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d108      	bne.n	8005dfc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	689a      	ldr	r2, [r3, #8]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a0a      	ldr	r2, [pc, #40]	; (8005e4c <TIM_Base_SetConfig+0x114>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d003      	beq.n	8005e30 <TIM_Base_SetConfig+0xf8>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a0c      	ldr	r2, [pc, #48]	; (8005e5c <TIM_Base_SetConfig+0x124>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d103      	bne.n	8005e38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	691a      	ldr	r2, [r3, #16]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	615a      	str	r2, [r3, #20]
}
 8005e3e:	bf00      	nop
 8005e40:	3714      	adds	r7, #20
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	40010000 	.word	0x40010000
 8005e50:	40000400 	.word	0x40000400
 8005e54:	40000800 	.word	0x40000800
 8005e58:	40000c00 	.word	0x40000c00
 8005e5c:	40010400 	.word	0x40010400
 8005e60:	40014000 	.word	0x40014000
 8005e64:	40014400 	.word	0x40014400
 8005e68:	40014800 	.word	0x40014800
 8005e6c:	40001800 	.word	0x40001800
 8005e70:	40001c00 	.word	0x40001c00
 8005e74:	40002000 	.word	0x40002000

08005e78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b087      	sub	sp, #28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	f023 0201 	bic.w	r2, r3, #1
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f023 0303 	bic.w	r3, r3, #3
 8005eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f023 0302 	bic.w	r3, r3, #2
 8005ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a20      	ldr	r2, [pc, #128]	; (8005f50 <TIM_OC1_SetConfig+0xd8>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d003      	beq.n	8005edc <TIM_OC1_SetConfig+0x64>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a1f      	ldr	r2, [pc, #124]	; (8005f54 <TIM_OC1_SetConfig+0xdc>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d10c      	bne.n	8005ef6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f023 0308 	bic.w	r3, r3, #8
 8005ee2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f023 0304 	bic.w	r3, r3, #4
 8005ef4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a15      	ldr	r2, [pc, #84]	; (8005f50 <TIM_OC1_SetConfig+0xd8>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d003      	beq.n	8005f06 <TIM_OC1_SetConfig+0x8e>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a14      	ldr	r2, [pc, #80]	; (8005f54 <TIM_OC1_SetConfig+0xdc>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d111      	bne.n	8005f2a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	621a      	str	r2, [r3, #32]
}
 8005f44:	bf00      	nop
 8005f46:	371c      	adds	r7, #28
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	40010000 	.word	0x40010000
 8005f54:	40010400 	.word	0x40010400

08005f58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b087      	sub	sp, #28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	f023 0210 	bic.w	r2, r3, #16
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	021b      	lsls	r3, r3, #8
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	f023 0320 	bic.w	r3, r3, #32
 8005fa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	011b      	lsls	r3, r3, #4
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a22      	ldr	r2, [pc, #136]	; (800603c <TIM_OC2_SetConfig+0xe4>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d003      	beq.n	8005fc0 <TIM_OC2_SetConfig+0x68>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a21      	ldr	r2, [pc, #132]	; (8006040 <TIM_OC2_SetConfig+0xe8>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d10d      	bne.n	8005fdc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	011b      	lsls	r3, r3, #4
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a17      	ldr	r2, [pc, #92]	; (800603c <TIM_OC2_SetConfig+0xe4>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d003      	beq.n	8005fec <TIM_OC2_SetConfig+0x94>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a16      	ldr	r2, [pc, #88]	; (8006040 <TIM_OC2_SetConfig+0xe8>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d113      	bne.n	8006014 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ff2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	4313      	orrs	r3, r2
 8006006:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	4313      	orrs	r3, r2
 8006012:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	621a      	str	r2, [r3, #32]
}
 800602e:	bf00      	nop
 8006030:	371c      	adds	r7, #28
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	40010000 	.word	0x40010000
 8006040:	40010400 	.word	0x40010400

08006044 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006044:	b480      	push	{r7}
 8006046:	b087      	sub	sp, #28
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f023 0303 	bic.w	r3, r3, #3
 800607a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	4313      	orrs	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800608c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	021b      	lsls	r3, r3, #8
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	4313      	orrs	r3, r2
 8006098:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a21      	ldr	r2, [pc, #132]	; (8006124 <TIM_OC3_SetConfig+0xe0>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d003      	beq.n	80060aa <TIM_OC3_SetConfig+0x66>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a20      	ldr	r2, [pc, #128]	; (8006128 <TIM_OC3_SetConfig+0xe4>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d10d      	bne.n	80060c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	021b      	lsls	r3, r3, #8
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a16      	ldr	r2, [pc, #88]	; (8006124 <TIM_OC3_SetConfig+0xe0>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d003      	beq.n	80060d6 <TIM_OC3_SetConfig+0x92>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a15      	ldr	r2, [pc, #84]	; (8006128 <TIM_OC3_SetConfig+0xe4>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d113      	bne.n	80060fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	011b      	lsls	r3, r3, #4
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	011b      	lsls	r3, r3, #4
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	621a      	str	r2, [r3, #32]
}
 8006118:	bf00      	nop
 800611a:	371c      	adds	r7, #28
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr
 8006124:	40010000 	.word	0x40010000
 8006128:	40010400 	.word	0x40010400

0800612c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800612c:	b480      	push	{r7}
 800612e:	b087      	sub	sp, #28
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	69db      	ldr	r3, [r3, #28]
 8006152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800615a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	021b      	lsls	r3, r3, #8
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	4313      	orrs	r3, r2
 800616e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006176:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	031b      	lsls	r3, r3, #12
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	4313      	orrs	r3, r2
 8006182:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a12      	ldr	r2, [pc, #72]	; (80061d0 <TIM_OC4_SetConfig+0xa4>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d003      	beq.n	8006194 <TIM_OC4_SetConfig+0x68>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a11      	ldr	r2, [pc, #68]	; (80061d4 <TIM_OC4_SetConfig+0xa8>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d109      	bne.n	80061a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800619a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	019b      	lsls	r3, r3, #6
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	621a      	str	r2, [r3, #32]
}
 80061c2:	bf00      	nop
 80061c4:	371c      	adds	r7, #28
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	40010000 	.word	0x40010000
 80061d4:	40010400 	.word	0x40010400

080061d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061d8:	b480      	push	{r7}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6a1b      	ldr	r3, [r3, #32]
 80061e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	f023 0201 	bic.w	r2, r3, #1
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006202:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	011b      	lsls	r3, r3, #4
 8006208:	693a      	ldr	r2, [r7, #16]
 800620a:	4313      	orrs	r3, r2
 800620c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	f023 030a 	bic.w	r3, r3, #10
 8006214:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	4313      	orrs	r3, r2
 800621c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	693a      	ldr	r2, [r7, #16]
 8006222:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	621a      	str	r2, [r3, #32]
}
 800622a:	bf00      	nop
 800622c:	371c      	adds	r7, #28
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006236:	b480      	push	{r7}
 8006238:	b087      	sub	sp, #28
 800623a:	af00      	add	r7, sp, #0
 800623c:	60f8      	str	r0, [r7, #12]
 800623e:	60b9      	str	r1, [r7, #8]
 8006240:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	f023 0210 	bic.w	r2, r3, #16
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006260:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	031b      	lsls	r3, r3, #12
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	4313      	orrs	r3, r2
 800626a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006272:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	011b      	lsls	r3, r3, #4
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	4313      	orrs	r3, r2
 800627c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	621a      	str	r2, [r3, #32]
}
 800628a:	bf00      	nop
 800628c:	371c      	adds	r7, #28
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006296:	b480      	push	{r7}
 8006298:	b085      	sub	sp, #20
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	f043 0307 	orr.w	r3, r3, #7
 80062b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	609a      	str	r2, [r3, #8]
}
 80062c0:	bf00      	nop
 80062c2:	3714      	adds	r7, #20
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b087      	sub	sp, #28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
 80062d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	021a      	lsls	r2, r3, #8
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	431a      	orrs	r2, r3
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	609a      	str	r2, [r3, #8]
}
 8006300:	bf00      	nop
 8006302:	371c      	adds	r7, #28
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800631c:	2b01      	cmp	r3, #1
 800631e:	d101      	bne.n	8006324 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006320:	2302      	movs	r3, #2
 8006322:	e05a      	b.n	80063da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2202      	movs	r2, #2
 8006330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800634a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	4313      	orrs	r3, r2
 8006354:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a21      	ldr	r2, [pc, #132]	; (80063e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d022      	beq.n	80063ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006370:	d01d      	beq.n	80063ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a1d      	ldr	r2, [pc, #116]	; (80063ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d018      	beq.n	80063ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a1b      	ldr	r2, [pc, #108]	; (80063f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d013      	beq.n	80063ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a1a      	ldr	r2, [pc, #104]	; (80063f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d00e      	beq.n	80063ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a18      	ldr	r2, [pc, #96]	; (80063f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d009      	beq.n	80063ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a17      	ldr	r2, [pc, #92]	; (80063fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d004      	beq.n	80063ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a15      	ldr	r2, [pc, #84]	; (8006400 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d10c      	bne.n	80063c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	4313      	orrs	r3, r2
 80063be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3714      	adds	r7, #20
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	40010000 	.word	0x40010000
 80063ec:	40000400 	.word	0x40000400
 80063f0:	40000800 	.word	0x40000800
 80063f4:	40000c00 	.word	0x40000c00
 80063f8:	40010400 	.word	0x40010400
 80063fc:	40014000 	.word	0x40014000
 8006400:	40001800 	.word	0x40001800

08006404 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006420:	bf00      	nop
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e03f      	b.n	80064be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b00      	cmp	r3, #0
 8006448:	d106      	bne.n	8006458 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f7fb f82a 	bl	80014ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2224      	movs	r2, #36	; 0x24
 800645c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68da      	ldr	r2, [r3, #12]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800646e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fe1d 	bl	80070b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	691a      	ldr	r2, [r3, #16]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006484:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	695a      	ldr	r2, [r3, #20]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006494:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68da      	ldr	r2, [r3, #12]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2220      	movs	r2, #32
 80064b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2220      	movs	r2, #32
 80064b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b08a      	sub	sp, #40	; 0x28
 80064ca:	af02      	add	r7, sp, #8
 80064cc:	60f8      	str	r0, [r7, #12]
 80064ce:	60b9      	str	r1, [r7, #8]
 80064d0:	603b      	str	r3, [r7, #0]
 80064d2:	4613      	mov	r3, r2
 80064d4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80064d6:	2300      	movs	r3, #0
 80064d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b20      	cmp	r3, #32
 80064e4:	d17c      	bne.n	80065e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <HAL_UART_Transmit+0x2c>
 80064ec:	88fb      	ldrh	r3, [r7, #6]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d101      	bne.n	80064f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e075      	b.n	80065e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d101      	bne.n	8006504 <HAL_UART_Transmit+0x3e>
 8006500:	2302      	movs	r3, #2
 8006502:	e06e      	b.n	80065e2 <HAL_UART_Transmit+0x11c>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2221      	movs	r2, #33	; 0x21
 8006516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800651a:	f7fb fa27 	bl	800196c <HAL_GetTick>
 800651e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	88fa      	ldrh	r2, [r7, #6]
 8006524:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	88fa      	ldrh	r2, [r7, #6]
 800652a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006534:	d108      	bne.n	8006548 <HAL_UART_Transmit+0x82>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d104      	bne.n	8006548 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800653e:	2300      	movs	r3, #0
 8006540:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	61bb      	str	r3, [r7, #24]
 8006546:	e003      	b.n	8006550 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800654c:	2300      	movs	r3, #0
 800654e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006558:	e02a      	b.n	80065b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	9300      	str	r3, [sp, #0]
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2200      	movs	r2, #0
 8006562:	2180      	movs	r1, #128	; 0x80
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f000 fb9b 	bl	8006ca0 <UART_WaitOnFlagUntilTimeout>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d001      	beq.n	8006574 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e036      	b.n	80065e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d10b      	bne.n	8006592 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	461a      	mov	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006588:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	3302      	adds	r3, #2
 800658e:	61bb      	str	r3, [r7, #24]
 8006590:	e007      	b.n	80065a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	781a      	ldrb	r2, [r3, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	3301      	adds	r3, #1
 80065a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	3b01      	subs	r3, #1
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1cf      	bne.n	800655a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	2200      	movs	r2, #0
 80065c2:	2140      	movs	r1, #64	; 0x40
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f000 fb6b 	bl	8006ca0 <UART_WaitOnFlagUntilTimeout>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d001      	beq.n	80065d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e006      	b.n	80065e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80065dc:	2300      	movs	r3, #0
 80065de:	e000      	b.n	80065e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80065e0:	2302      	movs	r3, #2
  }
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3720      	adds	r7, #32
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b08a      	sub	sp, #40	; 0x28
 80065ee:	af02      	add	r7, sp, #8
 80065f0:	60f8      	str	r0, [r7, #12]
 80065f2:	60b9      	str	r1, [r7, #8]
 80065f4:	603b      	str	r3, [r7, #0]
 80065f6:	4613      	mov	r3, r2
 80065f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80065fa:	2300      	movs	r3, #0
 80065fc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b20      	cmp	r3, #32
 8006608:	f040 808c 	bne.w	8006724 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d002      	beq.n	8006618 <HAL_UART_Receive+0x2e>
 8006612:	88fb      	ldrh	r3, [r7, #6]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d101      	bne.n	800661c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e084      	b.n	8006726 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006622:	2b01      	cmp	r3, #1
 8006624:	d101      	bne.n	800662a <HAL_UART_Receive+0x40>
 8006626:	2302      	movs	r3, #2
 8006628:	e07d      	b.n	8006726 <HAL_UART_Receive+0x13c>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2222      	movs	r2, #34	; 0x22
 800663c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006646:	f7fb f991 	bl	800196c <HAL_GetTick>
 800664a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	88fa      	ldrh	r2, [r7, #6]
 8006650:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	88fa      	ldrh	r2, [r7, #6]
 8006656:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006660:	d108      	bne.n	8006674 <HAL_UART_Receive+0x8a>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d104      	bne.n	8006674 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800666a:	2300      	movs	r3, #0
 800666c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	61bb      	str	r3, [r7, #24]
 8006672:	e003      	b.n	800667c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006678:	2300      	movs	r3, #0
 800667a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006684:	e043      	b.n	800670e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	2200      	movs	r2, #0
 800668e:	2120      	movs	r1, #32
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f000 fb05 	bl	8006ca0 <UART_WaitOnFlagUntilTimeout>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d001      	beq.n	80066a0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e042      	b.n	8006726 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10c      	bne.n	80066c0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	3302      	adds	r3, #2
 80066bc:	61bb      	str	r3, [r7, #24]
 80066be:	e01f      	b.n	8006700 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066c8:	d007      	beq.n	80066da <HAL_UART_Receive+0xf0>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10a      	bne.n	80066e8 <HAL_UART_Receive+0xfe>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d106      	bne.n	80066e8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	b2da      	uxtb	r2, r3
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	701a      	strb	r2, [r3, #0]
 80066e6:	e008      	b.n	80066fa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	3301      	adds	r3, #1
 80066fe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006704:	b29b      	uxth	r3, r3
 8006706:	3b01      	subs	r3, #1
 8006708:	b29a      	uxth	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006712:	b29b      	uxth	r3, r3
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1b6      	bne.n	8006686 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2220      	movs	r2, #32
 800671c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006720:	2300      	movs	r3, #0
 8006722:	e000      	b.n	8006726 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006724:	2302      	movs	r3, #2
  }
}
 8006726:	4618      	mov	r0, r3
 8006728:	3720      	adds	r7, #32
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
	...

08006730 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b0ba      	sub	sp, #232	; 0xe8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006756:	2300      	movs	r3, #0
 8006758:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800675c:	2300      	movs	r3, #0
 800675e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006766:	f003 030f 	and.w	r3, r3, #15
 800676a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800676e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10f      	bne.n	8006796 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800677a:	f003 0320 	and.w	r3, r3, #32
 800677e:	2b00      	cmp	r3, #0
 8006780:	d009      	beq.n	8006796 <HAL_UART_IRQHandler+0x66>
 8006782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006786:	f003 0320 	and.w	r3, r3, #32
 800678a:	2b00      	cmp	r3, #0
 800678c:	d003      	beq.n	8006796 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fbd3 	bl	8006f3a <UART_Receive_IT>
      return;
 8006794:	e256      	b.n	8006c44 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006796:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800679a:	2b00      	cmp	r3, #0
 800679c:	f000 80de 	beq.w	800695c <HAL_UART_IRQHandler+0x22c>
 80067a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d106      	bne.n	80067ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80067ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f000 80d1 	beq.w	800695c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067be:	f003 0301 	and.w	r3, r3, #1
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00b      	beq.n	80067de <HAL_UART_IRQHandler+0xae>
 80067c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d005      	beq.n	80067de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d6:	f043 0201 	orr.w	r2, r3, #1
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e2:	f003 0304 	and.w	r3, r3, #4
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00b      	beq.n	8006802 <HAL_UART_IRQHandler+0xd2>
 80067ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d005      	beq.n	8006802 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fa:	f043 0202 	orr.w	r2, r3, #2
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00b      	beq.n	8006826 <HAL_UART_IRQHandler+0xf6>
 800680e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	2b00      	cmp	r3, #0
 8006818:	d005      	beq.n	8006826 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681e:	f043 0204 	orr.w	r2, r3, #4
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800682a:	f003 0308 	and.w	r3, r3, #8
 800682e:	2b00      	cmp	r3, #0
 8006830:	d011      	beq.n	8006856 <HAL_UART_IRQHandler+0x126>
 8006832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006836:	f003 0320 	and.w	r3, r3, #32
 800683a:	2b00      	cmp	r3, #0
 800683c:	d105      	bne.n	800684a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800683e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b00      	cmp	r3, #0
 8006848:	d005      	beq.n	8006856 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684e:	f043 0208 	orr.w	r2, r3, #8
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685a:	2b00      	cmp	r3, #0
 800685c:	f000 81ed 	beq.w	8006c3a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006864:	f003 0320 	and.w	r3, r3, #32
 8006868:	2b00      	cmp	r3, #0
 800686a:	d008      	beq.n	800687e <HAL_UART_IRQHandler+0x14e>
 800686c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006870:	f003 0320 	and.w	r3, r3, #32
 8006874:	2b00      	cmp	r3, #0
 8006876:	d002      	beq.n	800687e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 fb5e 	bl	8006f3a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006888:	2b40      	cmp	r3, #64	; 0x40
 800688a:	bf0c      	ite	eq
 800688c:	2301      	moveq	r3, #1
 800688e:	2300      	movne	r3, #0
 8006890:	b2db      	uxtb	r3, r3
 8006892:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689a:	f003 0308 	and.w	r3, r3, #8
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d103      	bne.n	80068aa <HAL_UART_IRQHandler+0x17a>
 80068a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d04f      	beq.n	800694a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 fa66 	bl	8006d7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ba:	2b40      	cmp	r3, #64	; 0x40
 80068bc:	d141      	bne.n	8006942 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	3314      	adds	r3, #20
 80068c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068cc:	e853 3f00 	ldrex	r3, [r3]
 80068d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80068d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3314      	adds	r3, #20
 80068e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80068ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80068ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80068f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80068fa:	e841 2300 	strex	r3, r2, [r1]
 80068fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006902:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1d9      	bne.n	80068be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690e:	2b00      	cmp	r3, #0
 8006910:	d013      	beq.n	800693a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006916:	4a7d      	ldr	r2, [pc, #500]	; (8006b0c <HAL_UART_IRQHandler+0x3dc>)
 8006918:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691e:	4618      	mov	r0, r3
 8006920:	f7fb f9c2 	bl	8001ca8 <HAL_DMA_Abort_IT>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d016      	beq.n	8006958 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006934:	4610      	mov	r0, r2
 8006936:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006938:	e00e      	b.n	8006958 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f99a 	bl	8006c74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006940:	e00a      	b.n	8006958 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f996 	bl	8006c74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006948:	e006      	b.n	8006958 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f992 	bl	8006c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006956:	e170      	b.n	8006c3a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006958:	bf00      	nop
    return;
 800695a:	e16e      	b.n	8006c3a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006960:	2b01      	cmp	r3, #1
 8006962:	f040 814a 	bne.w	8006bfa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800696a:	f003 0310 	and.w	r3, r3, #16
 800696e:	2b00      	cmp	r3, #0
 8006970:	f000 8143 	beq.w	8006bfa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006978:	f003 0310 	and.w	r3, r3, #16
 800697c:	2b00      	cmp	r3, #0
 800697e:	f000 813c 	beq.w	8006bfa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006982:	2300      	movs	r3, #0
 8006984:	60bb      	str	r3, [r7, #8]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	60bb      	str	r3, [r7, #8]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	60bb      	str	r3, [r7, #8]
 8006996:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a2:	2b40      	cmp	r3, #64	; 0x40
 80069a4:	f040 80b4 	bne.w	8006b10 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f000 8140 	beq.w	8006c3e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069c6:	429a      	cmp	r2, r3
 80069c8:	f080 8139 	bcs.w	8006c3e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d8:	69db      	ldr	r3, [r3, #28]
 80069da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069de:	f000 8088 	beq.w	8006af2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	330c      	adds	r3, #12
 80069e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069f0:	e853 3f00 	ldrex	r3, [r3]
 80069f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80069f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	330c      	adds	r3, #12
 8006a0a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006a0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a1e:	e841 2300 	strex	r3, r2, [r1]
 8006a22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1d9      	bne.n	80069e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	3314      	adds	r3, #20
 8006a34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a38:	e853 3f00 	ldrex	r3, [r3]
 8006a3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a40:	f023 0301 	bic.w	r3, r3, #1
 8006a44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	3314      	adds	r3, #20
 8006a4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a5e:	e841 2300 	strex	r3, r2, [r1]
 8006a62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1e1      	bne.n	8006a2e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	3314      	adds	r3, #20
 8006a70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a74:	e853 3f00 	ldrex	r3, [r3]
 8006a78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	3314      	adds	r3, #20
 8006a8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a96:	e841 2300 	strex	r3, r2, [r1]
 8006a9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1e3      	bne.n	8006a6a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	330c      	adds	r3, #12
 8006ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aba:	e853 3f00 	ldrex	r3, [r3]
 8006abe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ac2:	f023 0310 	bic.w	r3, r3, #16
 8006ac6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	330c      	adds	r3, #12
 8006ad0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006ad4:	65ba      	str	r2, [r7, #88]	; 0x58
 8006ad6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ada:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006adc:	e841 2300 	strex	r3, r2, [r1]
 8006ae0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1e3      	bne.n	8006ab0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7fb f86b 	bl	8001bc8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	4619      	mov	r1, r3
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f8c0 	bl	8006c88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b08:	e099      	b.n	8006c3e <HAL_UART_IRQHandler+0x50e>
 8006b0a:	bf00      	nop
 8006b0c:	08006e43 	.word	0x08006e43
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 808b 	beq.w	8006c42 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006b2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 8086 	beq.w	8006c42 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	330c      	adds	r3, #12
 8006b3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b40:	e853 3f00 	ldrex	r3, [r3]
 8006b44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	330c      	adds	r3, #12
 8006b56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006b5a:	647a      	str	r2, [r7, #68]	; 0x44
 8006b5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b62:	e841 2300 	strex	r3, r2, [r1]
 8006b66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1e3      	bne.n	8006b36 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	3314      	adds	r3, #20
 8006b74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	e853 3f00 	ldrex	r3, [r3]
 8006b7c:	623b      	str	r3, [r7, #32]
   return(result);
 8006b7e:	6a3b      	ldr	r3, [r7, #32]
 8006b80:	f023 0301 	bic.w	r3, r3, #1
 8006b84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	3314      	adds	r3, #20
 8006b8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b92:	633a      	str	r2, [r7, #48]	; 0x30
 8006b94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b9a:	e841 2300 	strex	r3, r2, [r1]
 8006b9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1e3      	bne.n	8006b6e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	330c      	adds	r3, #12
 8006bba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	e853 3f00 	ldrex	r3, [r3]
 8006bc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 0310 	bic.w	r3, r3, #16
 8006bca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	330c      	adds	r3, #12
 8006bd4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006bd8:	61fa      	str	r2, [r7, #28]
 8006bda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bdc:	69b9      	ldr	r1, [r7, #24]
 8006bde:	69fa      	ldr	r2, [r7, #28]
 8006be0:	e841 2300 	strex	r3, r2, [r1]
 8006be4:	617b      	str	r3, [r7, #20]
   return(result);
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1e3      	bne.n	8006bb4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f848 	bl	8006c88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bf8:	e023      	b.n	8006c42 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d009      	beq.n	8006c1a <HAL_UART_IRQHandler+0x4ea>
 8006c06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d003      	beq.n	8006c1a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f929 	bl	8006e6a <UART_Transmit_IT>
    return;
 8006c18:	e014      	b.n	8006c44 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00e      	beq.n	8006c44 <HAL_UART_IRQHandler+0x514>
 8006c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d008      	beq.n	8006c44 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f969 	bl	8006f0a <UART_EndTransmit_IT>
    return;
 8006c38:	e004      	b.n	8006c44 <HAL_UART_IRQHandler+0x514>
    return;
 8006c3a:	bf00      	nop
 8006c3c:	e002      	b.n	8006c44 <HAL_UART_IRQHandler+0x514>
      return;
 8006c3e:	bf00      	nop
 8006c40:	e000      	b.n	8006c44 <HAL_UART_IRQHandler+0x514>
      return;
 8006c42:	bf00      	nop
  }
}
 8006c44:	37e8      	adds	r7, #232	; 0xe8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop

08006c4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	460b      	mov	r3, r1
 8006c92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b090      	sub	sp, #64	; 0x40
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	603b      	str	r3, [r7, #0]
 8006cac:	4613      	mov	r3, r2
 8006cae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cb0:	e050      	b.n	8006d54 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb8:	d04c      	beq.n	8006d54 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006cba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d007      	beq.n	8006cd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006cc0:	f7fa fe54 	bl	800196c <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d241      	bcs.n	8006d54 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	330c      	adds	r3, #12
 8006cd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cda:	e853 3f00 	ldrex	r3, [r3]
 8006cde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	330c      	adds	r3, #12
 8006cee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006cf0:	637a      	str	r2, [r7, #52]	; 0x34
 8006cf2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006cf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cf8:	e841 2300 	strex	r3, r2, [r1]
 8006cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1e5      	bne.n	8006cd0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	3314      	adds	r3, #20
 8006d0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	e853 3f00 	ldrex	r3, [r3]
 8006d12:	613b      	str	r3, [r7, #16]
   return(result);
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	f023 0301 	bic.w	r3, r3, #1
 8006d1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	3314      	adds	r3, #20
 8006d22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d24:	623a      	str	r2, [r7, #32]
 8006d26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d28:	69f9      	ldr	r1, [r7, #28]
 8006d2a:	6a3a      	ldr	r2, [r7, #32]
 8006d2c:	e841 2300 	strex	r3, r2, [r1]
 8006d30:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1e5      	bne.n	8006d04 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2220      	movs	r2, #32
 8006d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2220      	movs	r2, #32
 8006d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e00f      	b.n	8006d74 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	bf0c      	ite	eq
 8006d64:	2301      	moveq	r3, #1
 8006d66:	2300      	movne	r3, #0
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	79fb      	ldrb	r3, [r7, #7]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d09f      	beq.n	8006cb2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3740      	adds	r7, #64	; 0x40
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b095      	sub	sp, #84	; 0x54
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	330c      	adds	r3, #12
 8006d8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d8e:	e853 3f00 	ldrex	r3, [r3]
 8006d92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	330c      	adds	r3, #12
 8006da2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006da4:	643a      	str	r2, [r7, #64]	; 0x40
 8006da6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006daa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006dac:	e841 2300 	strex	r3, r2, [r1]
 8006db0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1e5      	bne.n	8006d84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	3314      	adds	r3, #20
 8006dbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc0:	6a3b      	ldr	r3, [r7, #32]
 8006dc2:	e853 3f00 	ldrex	r3, [r3]
 8006dc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	f023 0301 	bic.w	r3, r3, #1
 8006dce:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	3314      	adds	r3, #20
 8006dd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006dd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006dda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ddc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006de0:	e841 2300 	strex	r3, r2, [r1]
 8006de4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1e5      	bne.n	8006db8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d119      	bne.n	8006e28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	330c      	adds	r3, #12
 8006dfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	e853 3f00 	ldrex	r3, [r3]
 8006e02:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	f023 0310 	bic.w	r3, r3, #16
 8006e0a:	647b      	str	r3, [r7, #68]	; 0x44
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	330c      	adds	r3, #12
 8006e12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e14:	61ba      	str	r2, [r7, #24]
 8006e16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e18:	6979      	ldr	r1, [r7, #20]
 8006e1a:	69ba      	ldr	r2, [r7, #24]
 8006e1c:	e841 2300 	strex	r3, r2, [r1]
 8006e20:	613b      	str	r3, [r7, #16]
   return(result);
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1e5      	bne.n	8006df4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006e36:	bf00      	nop
 8006e38:	3754      	adds	r7, #84	; 0x54
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b084      	sub	sp, #16
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f7ff ff09 	bl	8006c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e62:	bf00      	nop
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b085      	sub	sp, #20
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	2b21      	cmp	r3, #33	; 0x21
 8006e7c:	d13e      	bne.n	8006efc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e86:	d114      	bne.n	8006eb2 <UART_Transmit_IT+0x48>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d110      	bne.n	8006eb2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a1b      	ldr	r3, [r3, #32]
 8006e94:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	881b      	ldrh	r3, [r3, #0]
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ea4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	1c9a      	adds	r2, r3, #2
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	621a      	str	r2, [r3, #32]
 8006eb0:	e008      	b.n	8006ec4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	1c59      	adds	r1, r3, #1
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	6211      	str	r1, [r2, #32]
 8006ebc:	781a      	ldrb	r2, [r3, #0]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d10f      	bne.n	8006ef8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68da      	ldr	r2, [r3, #12]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ee6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68da      	ldr	r2, [r3, #12]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ef6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	e000      	b.n	8006efe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006efc:	2302      	movs	r3, #2
  }
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3714      	adds	r7, #20
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr

08006f0a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b082      	sub	sp, #8
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68da      	ldr	r2, [r3, #12]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f20:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2220      	movs	r2, #32
 8006f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f7ff fe8e 	bl	8006c4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b08c      	sub	sp, #48	; 0x30
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	2b22      	cmp	r3, #34	; 0x22
 8006f4c:	f040 80ab 	bne.w	80070a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f58:	d117      	bne.n	8006f8a <UART_Receive_IT+0x50>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d113      	bne.n	8006f8a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006f62:	2300      	movs	r3, #0
 8006f64:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f6a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f82:	1c9a      	adds	r2, r3, #2
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	629a      	str	r2, [r3, #40]	; 0x28
 8006f88:	e026      	b.n	8006fd8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006f90:	2300      	movs	r3, #0
 8006f92:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f9c:	d007      	beq.n	8006fae <UART_Receive_IT+0x74>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10a      	bne.n	8006fbc <UART_Receive_IT+0x82>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d106      	bne.n	8006fbc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	b2da      	uxtb	r2, r3
 8006fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb8:	701a      	strb	r2, [r3, #0]
 8006fba:	e008      	b.n	8006fce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fc8:	b2da      	uxtb	r2, r3
 8006fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fcc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd2:	1c5a      	adds	r2, r3, #1
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d15a      	bne.n	80070a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68da      	ldr	r2, [r3, #12]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f022 0220 	bic.w	r2, r2, #32
 8006ffa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68da      	ldr	r2, [r3, #12]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800700a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	695a      	ldr	r2, [r3, #20]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f022 0201 	bic.w	r2, r2, #1
 800701a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2220      	movs	r2, #32
 8007020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007028:	2b01      	cmp	r3, #1
 800702a:	d135      	bne.n	8007098 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	330c      	adds	r3, #12
 8007038:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	e853 3f00 	ldrex	r3, [r3]
 8007040:	613b      	str	r3, [r7, #16]
   return(result);
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	f023 0310 	bic.w	r3, r3, #16
 8007048:	627b      	str	r3, [r7, #36]	; 0x24
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	330c      	adds	r3, #12
 8007050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007052:	623a      	str	r2, [r7, #32]
 8007054:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007056:	69f9      	ldr	r1, [r7, #28]
 8007058:	6a3a      	ldr	r2, [r7, #32]
 800705a:	e841 2300 	strex	r3, r2, [r1]
 800705e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1e5      	bne.n	8007032 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0310 	and.w	r3, r3, #16
 8007070:	2b10      	cmp	r3, #16
 8007072:	d10a      	bne.n	800708a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007074:	2300      	movs	r3, #0
 8007076:	60fb      	str	r3, [r7, #12]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	60fb      	str	r3, [r7, #12]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	60fb      	str	r3, [r7, #12]
 8007088:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800708e:	4619      	mov	r1, r3
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f7ff fdf9 	bl	8006c88 <HAL_UARTEx_RxEventCallback>
 8007096:	e002      	b.n	800709e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f7ff fde1 	bl	8006c60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	e002      	b.n	80070a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80070a2:	2300      	movs	r3, #0
 80070a4:	e000      	b.n	80070a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80070a6:	2302      	movs	r3, #2
  }
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3730      	adds	r7, #48	; 0x30
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070b4:	b0c0      	sub	sp, #256	; 0x100
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80070c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070cc:	68d9      	ldr	r1, [r3, #12]
 80070ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	ea40 0301 	orr.w	r3, r0, r1
 80070d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80070da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070de:	689a      	ldr	r2, [r3, #8]
 80070e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	431a      	orrs	r2, r3
 80070e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	431a      	orrs	r2, r3
 80070f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80070fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007108:	f021 010c 	bic.w	r1, r1, #12
 800710c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007116:	430b      	orrs	r3, r1
 8007118:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800711a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800712a:	6999      	ldr	r1, [r3, #24]
 800712c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	ea40 0301 	orr.w	r3, r0, r1
 8007136:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	4b8f      	ldr	r3, [pc, #572]	; (800737c <UART_SetConfig+0x2cc>)
 8007140:	429a      	cmp	r2, r3
 8007142:	d005      	beq.n	8007150 <UART_SetConfig+0xa0>
 8007144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	4b8d      	ldr	r3, [pc, #564]	; (8007380 <UART_SetConfig+0x2d0>)
 800714c:	429a      	cmp	r2, r3
 800714e:	d104      	bne.n	800715a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007150:	f7fd ff66 	bl	8005020 <HAL_RCC_GetPCLK2Freq>
 8007154:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007158:	e003      	b.n	8007162 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800715a:	f7fd ff4d 	bl	8004ff8 <HAL_RCC_GetPCLK1Freq>
 800715e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007166:	69db      	ldr	r3, [r3, #28]
 8007168:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800716c:	f040 810c 	bne.w	8007388 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007170:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007174:	2200      	movs	r2, #0
 8007176:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800717a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800717e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007182:	4622      	mov	r2, r4
 8007184:	462b      	mov	r3, r5
 8007186:	1891      	adds	r1, r2, r2
 8007188:	65b9      	str	r1, [r7, #88]	; 0x58
 800718a:	415b      	adcs	r3, r3
 800718c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800718e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007192:	4621      	mov	r1, r4
 8007194:	eb12 0801 	adds.w	r8, r2, r1
 8007198:	4629      	mov	r1, r5
 800719a:	eb43 0901 	adc.w	r9, r3, r1
 800719e:	f04f 0200 	mov.w	r2, #0
 80071a2:	f04f 0300 	mov.w	r3, #0
 80071a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071b2:	4690      	mov	r8, r2
 80071b4:	4699      	mov	r9, r3
 80071b6:	4623      	mov	r3, r4
 80071b8:	eb18 0303 	adds.w	r3, r8, r3
 80071bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80071c0:	462b      	mov	r3, r5
 80071c2:	eb49 0303 	adc.w	r3, r9, r3
 80071c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80071ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80071d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80071da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80071de:	460b      	mov	r3, r1
 80071e0:	18db      	adds	r3, r3, r3
 80071e2:	653b      	str	r3, [r7, #80]	; 0x50
 80071e4:	4613      	mov	r3, r2
 80071e6:	eb42 0303 	adc.w	r3, r2, r3
 80071ea:	657b      	str	r3, [r7, #84]	; 0x54
 80071ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80071f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80071f4:	f7f8 fffc 	bl	80001f0 <__aeabi_uldivmod>
 80071f8:	4602      	mov	r2, r0
 80071fa:	460b      	mov	r3, r1
 80071fc:	4b61      	ldr	r3, [pc, #388]	; (8007384 <UART_SetConfig+0x2d4>)
 80071fe:	fba3 2302 	umull	r2, r3, r3, r2
 8007202:	095b      	lsrs	r3, r3, #5
 8007204:	011c      	lsls	r4, r3, #4
 8007206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800720a:	2200      	movs	r2, #0
 800720c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007210:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007214:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007218:	4642      	mov	r2, r8
 800721a:	464b      	mov	r3, r9
 800721c:	1891      	adds	r1, r2, r2
 800721e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007220:	415b      	adcs	r3, r3
 8007222:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007224:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007228:	4641      	mov	r1, r8
 800722a:	eb12 0a01 	adds.w	sl, r2, r1
 800722e:	4649      	mov	r1, r9
 8007230:	eb43 0b01 	adc.w	fp, r3, r1
 8007234:	f04f 0200 	mov.w	r2, #0
 8007238:	f04f 0300 	mov.w	r3, #0
 800723c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007240:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007244:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007248:	4692      	mov	sl, r2
 800724a:	469b      	mov	fp, r3
 800724c:	4643      	mov	r3, r8
 800724e:	eb1a 0303 	adds.w	r3, sl, r3
 8007252:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007256:	464b      	mov	r3, r9
 8007258:	eb4b 0303 	adc.w	r3, fp, r3
 800725c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800726c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007270:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007274:	460b      	mov	r3, r1
 8007276:	18db      	adds	r3, r3, r3
 8007278:	643b      	str	r3, [r7, #64]	; 0x40
 800727a:	4613      	mov	r3, r2
 800727c:	eb42 0303 	adc.w	r3, r2, r3
 8007280:	647b      	str	r3, [r7, #68]	; 0x44
 8007282:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007286:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800728a:	f7f8 ffb1 	bl	80001f0 <__aeabi_uldivmod>
 800728e:	4602      	mov	r2, r0
 8007290:	460b      	mov	r3, r1
 8007292:	4611      	mov	r1, r2
 8007294:	4b3b      	ldr	r3, [pc, #236]	; (8007384 <UART_SetConfig+0x2d4>)
 8007296:	fba3 2301 	umull	r2, r3, r3, r1
 800729a:	095b      	lsrs	r3, r3, #5
 800729c:	2264      	movs	r2, #100	; 0x64
 800729e:	fb02 f303 	mul.w	r3, r2, r3
 80072a2:	1acb      	subs	r3, r1, r3
 80072a4:	00db      	lsls	r3, r3, #3
 80072a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80072aa:	4b36      	ldr	r3, [pc, #216]	; (8007384 <UART_SetConfig+0x2d4>)
 80072ac:	fba3 2302 	umull	r2, r3, r3, r2
 80072b0:	095b      	lsrs	r3, r3, #5
 80072b2:	005b      	lsls	r3, r3, #1
 80072b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80072b8:	441c      	add	r4, r3
 80072ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072be:	2200      	movs	r2, #0
 80072c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80072c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80072c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80072cc:	4642      	mov	r2, r8
 80072ce:	464b      	mov	r3, r9
 80072d0:	1891      	adds	r1, r2, r2
 80072d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80072d4:	415b      	adcs	r3, r3
 80072d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80072dc:	4641      	mov	r1, r8
 80072de:	1851      	adds	r1, r2, r1
 80072e0:	6339      	str	r1, [r7, #48]	; 0x30
 80072e2:	4649      	mov	r1, r9
 80072e4:	414b      	adcs	r3, r1
 80072e6:	637b      	str	r3, [r7, #52]	; 0x34
 80072e8:	f04f 0200 	mov.w	r2, #0
 80072ec:	f04f 0300 	mov.w	r3, #0
 80072f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80072f4:	4659      	mov	r1, fp
 80072f6:	00cb      	lsls	r3, r1, #3
 80072f8:	4651      	mov	r1, sl
 80072fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072fe:	4651      	mov	r1, sl
 8007300:	00ca      	lsls	r2, r1, #3
 8007302:	4610      	mov	r0, r2
 8007304:	4619      	mov	r1, r3
 8007306:	4603      	mov	r3, r0
 8007308:	4642      	mov	r2, r8
 800730a:	189b      	adds	r3, r3, r2
 800730c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007310:	464b      	mov	r3, r9
 8007312:	460a      	mov	r2, r1
 8007314:	eb42 0303 	adc.w	r3, r2, r3
 8007318:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800731c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007328:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800732c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007330:	460b      	mov	r3, r1
 8007332:	18db      	adds	r3, r3, r3
 8007334:	62bb      	str	r3, [r7, #40]	; 0x28
 8007336:	4613      	mov	r3, r2
 8007338:	eb42 0303 	adc.w	r3, r2, r3
 800733c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800733e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007342:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007346:	f7f8 ff53 	bl	80001f0 <__aeabi_uldivmod>
 800734a:	4602      	mov	r2, r0
 800734c:	460b      	mov	r3, r1
 800734e:	4b0d      	ldr	r3, [pc, #52]	; (8007384 <UART_SetConfig+0x2d4>)
 8007350:	fba3 1302 	umull	r1, r3, r3, r2
 8007354:	095b      	lsrs	r3, r3, #5
 8007356:	2164      	movs	r1, #100	; 0x64
 8007358:	fb01 f303 	mul.w	r3, r1, r3
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	00db      	lsls	r3, r3, #3
 8007360:	3332      	adds	r3, #50	; 0x32
 8007362:	4a08      	ldr	r2, [pc, #32]	; (8007384 <UART_SetConfig+0x2d4>)
 8007364:	fba2 2303 	umull	r2, r3, r2, r3
 8007368:	095b      	lsrs	r3, r3, #5
 800736a:	f003 0207 	and.w	r2, r3, #7
 800736e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4422      	add	r2, r4
 8007376:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007378:	e106      	b.n	8007588 <UART_SetConfig+0x4d8>
 800737a:	bf00      	nop
 800737c:	40011000 	.word	0x40011000
 8007380:	40011400 	.word	0x40011400
 8007384:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007388:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800738c:	2200      	movs	r2, #0
 800738e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007392:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007396:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800739a:	4642      	mov	r2, r8
 800739c:	464b      	mov	r3, r9
 800739e:	1891      	adds	r1, r2, r2
 80073a0:	6239      	str	r1, [r7, #32]
 80073a2:	415b      	adcs	r3, r3
 80073a4:	627b      	str	r3, [r7, #36]	; 0x24
 80073a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073aa:	4641      	mov	r1, r8
 80073ac:	1854      	adds	r4, r2, r1
 80073ae:	4649      	mov	r1, r9
 80073b0:	eb43 0501 	adc.w	r5, r3, r1
 80073b4:	f04f 0200 	mov.w	r2, #0
 80073b8:	f04f 0300 	mov.w	r3, #0
 80073bc:	00eb      	lsls	r3, r5, #3
 80073be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073c2:	00e2      	lsls	r2, r4, #3
 80073c4:	4614      	mov	r4, r2
 80073c6:	461d      	mov	r5, r3
 80073c8:	4643      	mov	r3, r8
 80073ca:	18e3      	adds	r3, r4, r3
 80073cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80073d0:	464b      	mov	r3, r9
 80073d2:	eb45 0303 	adc.w	r3, r5, r3
 80073d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80073da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80073e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80073ea:	f04f 0200 	mov.w	r2, #0
 80073ee:	f04f 0300 	mov.w	r3, #0
 80073f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80073f6:	4629      	mov	r1, r5
 80073f8:	008b      	lsls	r3, r1, #2
 80073fa:	4621      	mov	r1, r4
 80073fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007400:	4621      	mov	r1, r4
 8007402:	008a      	lsls	r2, r1, #2
 8007404:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007408:	f7f8 fef2 	bl	80001f0 <__aeabi_uldivmod>
 800740c:	4602      	mov	r2, r0
 800740e:	460b      	mov	r3, r1
 8007410:	4b60      	ldr	r3, [pc, #384]	; (8007594 <UART_SetConfig+0x4e4>)
 8007412:	fba3 2302 	umull	r2, r3, r3, r2
 8007416:	095b      	lsrs	r3, r3, #5
 8007418:	011c      	lsls	r4, r3, #4
 800741a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800741e:	2200      	movs	r2, #0
 8007420:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007424:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007428:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800742c:	4642      	mov	r2, r8
 800742e:	464b      	mov	r3, r9
 8007430:	1891      	adds	r1, r2, r2
 8007432:	61b9      	str	r1, [r7, #24]
 8007434:	415b      	adcs	r3, r3
 8007436:	61fb      	str	r3, [r7, #28]
 8007438:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800743c:	4641      	mov	r1, r8
 800743e:	1851      	adds	r1, r2, r1
 8007440:	6139      	str	r1, [r7, #16]
 8007442:	4649      	mov	r1, r9
 8007444:	414b      	adcs	r3, r1
 8007446:	617b      	str	r3, [r7, #20]
 8007448:	f04f 0200 	mov.w	r2, #0
 800744c:	f04f 0300 	mov.w	r3, #0
 8007450:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007454:	4659      	mov	r1, fp
 8007456:	00cb      	lsls	r3, r1, #3
 8007458:	4651      	mov	r1, sl
 800745a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800745e:	4651      	mov	r1, sl
 8007460:	00ca      	lsls	r2, r1, #3
 8007462:	4610      	mov	r0, r2
 8007464:	4619      	mov	r1, r3
 8007466:	4603      	mov	r3, r0
 8007468:	4642      	mov	r2, r8
 800746a:	189b      	adds	r3, r3, r2
 800746c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007470:	464b      	mov	r3, r9
 8007472:	460a      	mov	r2, r1
 8007474:	eb42 0303 	adc.w	r3, r2, r3
 8007478:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800747c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	67bb      	str	r3, [r7, #120]	; 0x78
 8007486:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007488:	f04f 0200 	mov.w	r2, #0
 800748c:	f04f 0300 	mov.w	r3, #0
 8007490:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007494:	4649      	mov	r1, r9
 8007496:	008b      	lsls	r3, r1, #2
 8007498:	4641      	mov	r1, r8
 800749a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800749e:	4641      	mov	r1, r8
 80074a0:	008a      	lsls	r2, r1, #2
 80074a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80074a6:	f7f8 fea3 	bl	80001f0 <__aeabi_uldivmod>
 80074aa:	4602      	mov	r2, r0
 80074ac:	460b      	mov	r3, r1
 80074ae:	4611      	mov	r1, r2
 80074b0:	4b38      	ldr	r3, [pc, #224]	; (8007594 <UART_SetConfig+0x4e4>)
 80074b2:	fba3 2301 	umull	r2, r3, r3, r1
 80074b6:	095b      	lsrs	r3, r3, #5
 80074b8:	2264      	movs	r2, #100	; 0x64
 80074ba:	fb02 f303 	mul.w	r3, r2, r3
 80074be:	1acb      	subs	r3, r1, r3
 80074c0:	011b      	lsls	r3, r3, #4
 80074c2:	3332      	adds	r3, #50	; 0x32
 80074c4:	4a33      	ldr	r2, [pc, #204]	; (8007594 <UART_SetConfig+0x4e4>)
 80074c6:	fba2 2303 	umull	r2, r3, r2, r3
 80074ca:	095b      	lsrs	r3, r3, #5
 80074cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074d0:	441c      	add	r4, r3
 80074d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074d6:	2200      	movs	r2, #0
 80074d8:	673b      	str	r3, [r7, #112]	; 0x70
 80074da:	677a      	str	r2, [r7, #116]	; 0x74
 80074dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80074e0:	4642      	mov	r2, r8
 80074e2:	464b      	mov	r3, r9
 80074e4:	1891      	adds	r1, r2, r2
 80074e6:	60b9      	str	r1, [r7, #8]
 80074e8:	415b      	adcs	r3, r3
 80074ea:	60fb      	str	r3, [r7, #12]
 80074ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80074f0:	4641      	mov	r1, r8
 80074f2:	1851      	adds	r1, r2, r1
 80074f4:	6039      	str	r1, [r7, #0]
 80074f6:	4649      	mov	r1, r9
 80074f8:	414b      	adcs	r3, r1
 80074fa:	607b      	str	r3, [r7, #4]
 80074fc:	f04f 0200 	mov.w	r2, #0
 8007500:	f04f 0300 	mov.w	r3, #0
 8007504:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007508:	4659      	mov	r1, fp
 800750a:	00cb      	lsls	r3, r1, #3
 800750c:	4651      	mov	r1, sl
 800750e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007512:	4651      	mov	r1, sl
 8007514:	00ca      	lsls	r2, r1, #3
 8007516:	4610      	mov	r0, r2
 8007518:	4619      	mov	r1, r3
 800751a:	4603      	mov	r3, r0
 800751c:	4642      	mov	r2, r8
 800751e:	189b      	adds	r3, r3, r2
 8007520:	66bb      	str	r3, [r7, #104]	; 0x68
 8007522:	464b      	mov	r3, r9
 8007524:	460a      	mov	r2, r1
 8007526:	eb42 0303 	adc.w	r3, r2, r3
 800752a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800752c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	663b      	str	r3, [r7, #96]	; 0x60
 8007536:	667a      	str	r2, [r7, #100]	; 0x64
 8007538:	f04f 0200 	mov.w	r2, #0
 800753c:	f04f 0300 	mov.w	r3, #0
 8007540:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007544:	4649      	mov	r1, r9
 8007546:	008b      	lsls	r3, r1, #2
 8007548:	4641      	mov	r1, r8
 800754a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800754e:	4641      	mov	r1, r8
 8007550:	008a      	lsls	r2, r1, #2
 8007552:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007556:	f7f8 fe4b 	bl	80001f0 <__aeabi_uldivmod>
 800755a:	4602      	mov	r2, r0
 800755c:	460b      	mov	r3, r1
 800755e:	4b0d      	ldr	r3, [pc, #52]	; (8007594 <UART_SetConfig+0x4e4>)
 8007560:	fba3 1302 	umull	r1, r3, r3, r2
 8007564:	095b      	lsrs	r3, r3, #5
 8007566:	2164      	movs	r1, #100	; 0x64
 8007568:	fb01 f303 	mul.w	r3, r1, r3
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	011b      	lsls	r3, r3, #4
 8007570:	3332      	adds	r3, #50	; 0x32
 8007572:	4a08      	ldr	r2, [pc, #32]	; (8007594 <UART_SetConfig+0x4e4>)
 8007574:	fba2 2303 	umull	r2, r3, r2, r3
 8007578:	095b      	lsrs	r3, r3, #5
 800757a:	f003 020f 	and.w	r2, r3, #15
 800757e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4422      	add	r2, r4
 8007586:	609a      	str	r2, [r3, #8]
}
 8007588:	bf00      	nop
 800758a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800758e:	46bd      	mov	sp, r7
 8007590:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007594:	51eb851f 	.word	0x51eb851f

08007598 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d123      	bne.n	80075f2 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80075b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80075b6:	683a      	ldr	r2, [r7, #0]
 80075b8:	6851      	ldr	r1, [r2, #4]
 80075ba:	683a      	ldr	r2, [r7, #0]
 80075bc:	6892      	ldr	r2, [r2, #8]
 80075be:	4311      	orrs	r1, r2
 80075c0:	683a      	ldr	r2, [r7, #0]
 80075c2:	68d2      	ldr	r2, [r2, #12]
 80075c4:	4311      	orrs	r1, r2
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	6912      	ldr	r2, [r2, #16]
 80075ca:	4311      	orrs	r1, r2
 80075cc:	683a      	ldr	r2, [r7, #0]
 80075ce:	6952      	ldr	r2, [r2, #20]
 80075d0:	4311      	orrs	r1, r2
 80075d2:	683a      	ldr	r2, [r7, #0]
 80075d4:	6992      	ldr	r2, [r2, #24]
 80075d6:	4311      	orrs	r1, r2
 80075d8:	683a      	ldr	r2, [r7, #0]
 80075da:	69d2      	ldr	r2, [r2, #28]
 80075dc:	4311      	orrs	r1, r2
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	6a12      	ldr	r2, [r2, #32]
 80075e2:	4311      	orrs	r1, r2
 80075e4:	683a      	ldr	r2, [r7, #0]
 80075e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80075e8:	430a      	orrs	r2, r1
 80075ea:	431a      	orrs	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	601a      	str	r2, [r3, #0]
 80075f0:	e028      	b.n	8007644 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	69d9      	ldr	r1, [r3, #28]
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	4319      	orrs	r1, r3
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007608:	430b      	orrs	r3, r1
 800760a:	431a      	orrs	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007618:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800761c:	683a      	ldr	r2, [r7, #0]
 800761e:	6851      	ldr	r1, [r2, #4]
 8007620:	683a      	ldr	r2, [r7, #0]
 8007622:	6892      	ldr	r2, [r2, #8]
 8007624:	4311      	orrs	r1, r2
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	68d2      	ldr	r2, [r2, #12]
 800762a:	4311      	orrs	r1, r2
 800762c:	683a      	ldr	r2, [r7, #0]
 800762e:	6912      	ldr	r2, [r2, #16]
 8007630:	4311      	orrs	r1, r2
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	6952      	ldr	r2, [r2, #20]
 8007636:	4311      	orrs	r1, r2
 8007638:	683a      	ldr	r2, [r7, #0]
 800763a:	6992      	ldr	r2, [r2, #24]
 800763c:	430a      	orrs	r2, r1
 800763e:	431a      	orrs	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	370c      	adds	r7, #12
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr

08007652 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007652:	b480      	push	{r7}
 8007654:	b085      	sub	sp, #20
 8007656:	af00      	add	r7, sp, #0
 8007658:	60f8      	str	r0, [r7, #12]
 800765a:	60b9      	str	r1, [r7, #8]
 800765c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d128      	bne.n	80076b6 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	1e59      	subs	r1, r3, #1
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	3b01      	subs	r3, #1
 8007678:	011b      	lsls	r3, r3, #4
 800767a:	4319      	orrs	r1, r3
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	3b01      	subs	r3, #1
 8007682:	021b      	lsls	r3, r3, #8
 8007684:	4319      	orrs	r1, r3
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	3b01      	subs	r3, #1
 800768c:	031b      	lsls	r3, r3, #12
 800768e:	4319      	orrs	r1, r3
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	3b01      	subs	r3, #1
 8007696:	041b      	lsls	r3, r3, #16
 8007698:	4319      	orrs	r1, r3
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	695b      	ldr	r3, [r3, #20]
 800769e:	3b01      	subs	r3, #1
 80076a0:	051b      	lsls	r3, r3, #20
 80076a2:	4319      	orrs	r1, r3
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	699b      	ldr	r3, [r3, #24]
 80076a8:	3b01      	subs	r3, #1
 80076aa:	061b      	lsls	r3, r3, #24
 80076ac:	430b      	orrs	r3, r1
 80076ae:	431a      	orrs	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	609a      	str	r2, [r3, #8]
 80076b4:	e02f      	b.n	8007716 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80076be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	68d2      	ldr	r2, [r2, #12]
 80076c6:	3a01      	subs	r2, #1
 80076c8:	0311      	lsls	r1, r2, #12
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	6952      	ldr	r2, [r2, #20]
 80076ce:	3a01      	subs	r2, #1
 80076d0:	0512      	lsls	r2, r2, #20
 80076d2:	430a      	orrs	r2, r1
 80076d4:	431a      	orrs	r2, r3
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	1e59      	subs	r1, r3, #1
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	3b01      	subs	r3, #1
 80076ee:	011b      	lsls	r3, r3, #4
 80076f0:	4319      	orrs	r1, r3
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	3b01      	subs	r3, #1
 80076f8:	021b      	lsls	r3, r3, #8
 80076fa:	4319      	orrs	r1, r3
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	3b01      	subs	r3, #1
 8007702:	041b      	lsls	r3, r3, #16
 8007704:	4319      	orrs	r1, r3
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	3b01      	subs	r3, #1
 800770c:	061b      	lsls	r3, r3, #24
 800770e:	430b      	orrs	r3, r1
 8007710:	431a      	orrs	r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3714      	adds	r7, #20
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007724:	b084      	sub	sp, #16
 8007726:	b580      	push	{r7, lr}
 8007728:	b084      	sub	sp, #16
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
 800772e:	f107 001c 	add.w	r0, r7, #28
 8007732:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007738:	2b01      	cmp	r3, #1
 800773a:	d122      	bne.n	8007782 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007740:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007766:	2b01      	cmp	r3, #1
 8007768:	d105      	bne.n	8007776 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f9c0 	bl	8007afc <USB_CoreReset>
 800777c:	4603      	mov	r3, r0
 800777e:	73fb      	strb	r3, [r7, #15]
 8007780:	e01a      	b.n	80077b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 f9b4 	bl	8007afc <USB_CoreReset>
 8007794:	4603      	mov	r3, r0
 8007796:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800779a:	2b00      	cmp	r3, #0
 800779c:	d106      	bne.n	80077ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	639a      	str	r2, [r3, #56]	; 0x38
 80077aa:	e005      	b.n	80077b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80077b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d10b      	bne.n	80077d6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	f043 0206 	orr.w	r2, r3, #6
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	f043 0220 	orr.w	r2, r3, #32
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80077d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077e2:	b004      	add	sp, #16
 80077e4:	4770      	bx	lr

080077e6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80077e6:	b480      	push	{r7}
 80077e8:	b083      	sub	sp, #12
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f043 0201 	orr.w	r2, r3, #1
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	f023 0201 	bic.w	r2, r3, #1
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	370c      	adds	r7, #12
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800782a:	b580      	push	{r7, lr}
 800782c:	b084      	sub	sp, #16
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
 8007832:	460b      	mov	r3, r1
 8007834:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007836:	2300      	movs	r3, #0
 8007838:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007846:	78fb      	ldrb	r3, [r7, #3]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d115      	bne.n	8007878 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007858:	2001      	movs	r0, #1
 800785a:	f7fa f893 	bl	8001984 <HAL_Delay>
      ms++;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	3301      	adds	r3, #1
 8007862:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 f93a 	bl	8007ade <USB_GetMode>
 800786a:	4603      	mov	r3, r0
 800786c:	2b01      	cmp	r3, #1
 800786e:	d01e      	beq.n	80078ae <USB_SetCurrentMode+0x84>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2b31      	cmp	r3, #49	; 0x31
 8007874:	d9f0      	bls.n	8007858 <USB_SetCurrentMode+0x2e>
 8007876:	e01a      	b.n	80078ae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007878:	78fb      	ldrb	r3, [r7, #3]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d115      	bne.n	80078aa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800788a:	2001      	movs	r0, #1
 800788c:	f7fa f87a 	bl	8001984 <HAL_Delay>
      ms++;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	3301      	adds	r3, #1
 8007894:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f921 	bl	8007ade <USB_GetMode>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d005      	beq.n	80078ae <USB_SetCurrentMode+0x84>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2b31      	cmp	r3, #49	; 0x31
 80078a6:	d9f0      	bls.n	800788a <USB_SetCurrentMode+0x60>
 80078a8:	e001      	b.n	80078ae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e005      	b.n	80078ba <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2b32      	cmp	r3, #50	; 0x32
 80078b2:	d101      	bne.n	80078b8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e000      	b.n	80078ba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3710      	adds	r7, #16
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
	...

080078c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80078ce:	2300      	movs	r3, #0
 80078d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	3301      	adds	r3, #1
 80078d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	4a13      	ldr	r2, [pc, #76]	; (8007928 <USB_FlushTxFifo+0x64>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d901      	bls.n	80078e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e01b      	b.n	800791c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	daf2      	bge.n	80078d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80078ec:	2300      	movs	r3, #0
 80078ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	019b      	lsls	r3, r3, #6
 80078f4:	f043 0220 	orr.w	r2, r3, #32
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	3301      	adds	r3, #1
 8007900:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	4a08      	ldr	r2, [pc, #32]	; (8007928 <USB_FlushTxFifo+0x64>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d901      	bls.n	800790e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800790a:	2303      	movs	r3, #3
 800790c:	e006      	b.n	800791c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	f003 0320 	and.w	r3, r3, #32
 8007916:	2b20      	cmp	r3, #32
 8007918:	d0f0      	beq.n	80078fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3714      	adds	r7, #20
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr
 8007928:	00030d40 	.word	0x00030d40

0800792c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007934:	2300      	movs	r3, #0
 8007936:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	3301      	adds	r3, #1
 800793c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	4a11      	ldr	r2, [pc, #68]	; (8007988 <USB_FlushRxFifo+0x5c>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d901      	bls.n	800794a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007946:	2303      	movs	r3, #3
 8007948:	e018      	b.n	800797c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	2b00      	cmp	r3, #0
 8007950:	daf2      	bge.n	8007938 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007952:	2300      	movs	r3, #0
 8007954:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2210      	movs	r2, #16
 800795a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	3301      	adds	r3, #1
 8007960:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	4a08      	ldr	r2, [pc, #32]	; (8007988 <USB_FlushRxFifo+0x5c>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d901      	bls.n	800796e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e006      	b.n	800797c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	f003 0310 	and.w	r3, r3, #16
 8007976:	2b10      	cmp	r3, #16
 8007978:	d0f0      	beq.n	800795c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3714      	adds	r7, #20
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr
 8007988:	00030d40 	.word	0x00030d40

0800798c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800798c:	b480      	push	{r7}
 800798e:	b089      	sub	sp, #36	; 0x24
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	4611      	mov	r1, r2
 8007998:	461a      	mov	r2, r3
 800799a:	460b      	mov	r3, r1
 800799c:	71fb      	strb	r3, [r7, #7]
 800799e:	4613      	mov	r3, r2
 80079a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80079aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d123      	bne.n	80079fa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80079b2:	88bb      	ldrh	r3, [r7, #4]
 80079b4:	3303      	adds	r3, #3
 80079b6:	089b      	lsrs	r3, r3, #2
 80079b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80079ba:	2300      	movs	r3, #0
 80079bc:	61bb      	str	r3, [r7, #24]
 80079be:	e018      	b.n	80079f2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80079c0:	79fb      	ldrb	r3, [r7, #7]
 80079c2:	031a      	lsls	r2, r3, #12
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	4413      	add	r3, r2
 80079c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079cc:	461a      	mov	r2, r3
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	3301      	adds	r3, #1
 80079d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	3301      	adds	r3, #1
 80079de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	3301      	adds	r3, #1
 80079e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	3301      	adds	r3, #1
 80079ea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	3301      	adds	r3, #1
 80079f0:	61bb      	str	r3, [r7, #24]
 80079f2:	69ba      	ldr	r2, [r7, #24]
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d3e2      	bcc.n	80079c0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3724      	adds	r7, #36	; 0x24
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b08b      	sub	sp, #44	; 0x2c
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	4613      	mov	r3, r2
 8007a14:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007a1e:	88fb      	ldrh	r3, [r7, #6]
 8007a20:	089b      	lsrs	r3, r3, #2
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007a26:	88fb      	ldrh	r3, [r7, #6]
 8007a28:	f003 0303 	and.w	r3, r3, #3
 8007a2c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007a2e:	2300      	movs	r3, #0
 8007a30:	623b      	str	r3, [r7, #32]
 8007a32:	e014      	b.n	8007a5e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a42:	3301      	adds	r3, #1
 8007a44:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a48:	3301      	adds	r3, #1
 8007a4a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4e:	3301      	adds	r3, #1
 8007a50:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a54:	3301      	adds	r3, #1
 8007a56:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007a58:	6a3b      	ldr	r3, [r7, #32]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	623b      	str	r3, [r7, #32]
 8007a5e:	6a3a      	ldr	r2, [r7, #32]
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d3e6      	bcc.n	8007a34 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007a66:	8bfb      	ldrh	r3, [r7, #30]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d01e      	beq.n	8007aaa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a76:	461a      	mov	r2, r3
 8007a78:	f107 0310 	add.w	r3, r7, #16
 8007a7c:	6812      	ldr	r2, [r2, #0]
 8007a7e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	6a3b      	ldr	r3, [r7, #32]
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	00db      	lsls	r3, r3, #3
 8007a88:	fa22 f303 	lsr.w	r3, r2, r3
 8007a8c:	b2da      	uxtb	r2, r3
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a90:	701a      	strb	r2, [r3, #0]
      i++;
 8007a92:	6a3b      	ldr	r3, [r7, #32]
 8007a94:	3301      	adds	r3, #1
 8007a96:	623b      	str	r3, [r7, #32]
      pDest++;
 8007a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007a9e:	8bfb      	ldrh	r3, [r7, #30]
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007aa4:	8bfb      	ldrh	r3, [r7, #30]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1ea      	bne.n	8007a80 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	372c      	adds	r7, #44	; 0x2c
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	695b      	ldr	r3, [r3, #20]
 8007ac4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	699b      	ldr	r3, [r3, #24]
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	4013      	ands	r3, r2
 8007ace:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3714      	adds	r7, #20
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr

08007ade <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b083      	sub	sp, #12
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	f003 0301 	and.w	r3, r3, #1
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	370c      	adds	r7, #12
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
	...

08007afc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b04:	2300      	movs	r3, #0
 8007b06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	4a13      	ldr	r2, [pc, #76]	; (8007b60 <USB_CoreReset+0x64>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d901      	bls.n	8007b1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007b16:	2303      	movs	r3, #3
 8007b18:	e01b      	b.n	8007b52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	daf2      	bge.n	8007b08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007b22:	2300      	movs	r3, #0
 8007b24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	f043 0201 	orr.w	r2, r3, #1
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	3301      	adds	r3, #1
 8007b36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	4a09      	ldr	r2, [pc, #36]	; (8007b60 <USB_CoreReset+0x64>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d901      	bls.n	8007b44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e006      	b.n	8007b52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	f003 0301 	and.w	r3, r3, #1
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d0f0      	beq.n	8007b32 <USB_CoreReset+0x36>

  return HAL_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3714      	adds	r7, #20
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	00030d40 	.word	0x00030d40

08007b64 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b64:	b084      	sub	sp, #16
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b086      	sub	sp, #24
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
 8007b6e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007b72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007b76:	2300      	movs	r3, #0
 8007b78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b84:	461a      	mov	r2, r3
 8007b86:	2300      	movs	r3, #0
 8007b88:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d018      	beq.n	8007bec <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d10a      	bne.n	8007bd6 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007bce:	f043 0304 	orr.w	r3, r3, #4
 8007bd2:	6013      	str	r3, [r2, #0]
 8007bd4:	e014      	b.n	8007c00 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007be4:	f023 0304 	bic.w	r3, r3, #4
 8007be8:	6013      	str	r3, [r2, #0]
 8007bea:	e009      	b.n	8007c00 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007bfa:	f023 0304 	bic.w	r3, r3, #4
 8007bfe:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007c00:	2110      	movs	r1, #16
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f7ff fe5e 	bl	80078c4 <USB_FlushTxFifo>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d001      	beq.n	8007c12 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7ff fe8a 	bl	800792c <USB_FlushRxFifo>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d001      	beq.n	8007c22 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007c22:	2300      	movs	r3, #0
 8007c24:	613b      	str	r3, [r7, #16]
 8007c26:	e015      	b.n	8007c54 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	015a      	lsls	r2, r3, #5
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	4413      	add	r3, r2
 8007c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c34:	461a      	mov	r2, r3
 8007c36:	f04f 33ff 	mov.w	r3, #4294967295
 8007c3a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	015a      	lsls	r2, r3, #5
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	4413      	add	r3, r2
 8007c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c48:	461a      	mov	r2, r3
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	3301      	adds	r3, #1
 8007c52:	613b      	str	r3, [r7, #16]
 8007c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c56:	693a      	ldr	r2, [r7, #16]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d3e5      	bcc.n	8007c28 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f04f 32ff 	mov.w	r2, #4294967295
 8007c68:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00b      	beq.n	8007c8e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c7c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a13      	ldr	r2, [pc, #76]	; (8007cd0 <USB_HostInit+0x16c>)
 8007c82:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a13      	ldr	r2, [pc, #76]	; (8007cd4 <USB_HostInit+0x170>)
 8007c88:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007c8c:	e009      	b.n	8007ca2 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2280      	movs	r2, #128	; 0x80
 8007c92:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a10      	ldr	r2, [pc, #64]	; (8007cd8 <USB_HostInit+0x174>)
 8007c98:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a0f      	ldr	r2, [pc, #60]	; (8007cdc <USB_HostInit+0x178>)
 8007c9e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d105      	bne.n	8007cb4 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	f043 0210 	orr.w	r2, r3, #16
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	699a      	ldr	r2, [r3, #24]
 8007cb8:	4b09      	ldr	r3, [pc, #36]	; (8007ce0 <USB_HostInit+0x17c>)
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3718      	adds	r7, #24
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ccc:	b004      	add	sp, #16
 8007cce:	4770      	bx	lr
 8007cd0:	01000200 	.word	0x01000200
 8007cd4:	00e00300 	.word	0x00e00300
 8007cd8:	00600080 	.word	0x00600080
 8007cdc:	004000e0 	.word	0x004000e0
 8007ce0:	a3200008 	.word	0xa3200008

08007ce4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b085      	sub	sp, #20
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	460b      	mov	r3, r1
 8007cee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d02:	f023 0303 	bic.w	r3, r3, #3
 8007d06:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	78fb      	ldrb	r3, [r7, #3]
 8007d12:	f003 0303 	and.w	r3, r3, #3
 8007d16:	68f9      	ldr	r1, [r7, #12]
 8007d18:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007d20:	78fb      	ldrb	r3, [r7, #3]
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d107      	bne.n	8007d36 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007d32:	6053      	str	r3, [r2, #4]
 8007d34:	e009      	b.n	8007d4a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007d36:	78fb      	ldrb	r3, [r7, #3]
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	d106      	bne.n	8007d4a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d42:	461a      	mov	r2, r3
 8007d44:	f241 7370 	movw	r3, #6000	; 0x1770
 8007d48:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3714      	adds	r7, #20
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007d64:	2300      	movs	r3, #0
 8007d66:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007d78:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d86:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007d88:	2064      	movs	r0, #100	; 0x64
 8007d8a:	f7f9 fdfb 	bl	8001984 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007d96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d9a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007d9c:	200a      	movs	r0, #10
 8007d9e:	f7f9 fdf1 	bl	8001984 <HAL_Delay>

  return HAL_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3710      	adds	r7, #16
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b085      	sub	sp, #20
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	460b      	mov	r3, r1
 8007db6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007dd0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d109      	bne.n	8007df0 <USB_DriveVbus+0x44>
 8007ddc:	78fb      	ldrb	r3, [r7, #3]
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d106      	bne.n	8007df0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007dea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007dee:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dfa:	d109      	bne.n	8007e10 <USB_DriveVbus+0x64>
 8007dfc:	78fb      	ldrb	r3, [r7, #3]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d106      	bne.n	8007e10 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007e0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e0e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3714      	adds	r7, #20
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr

08007e1e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007e1e:	b480      	push	{r7}
 8007e20:	b085      	sub	sp, #20
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	0c5b      	lsrs	r3, r3, #17
 8007e3c:	f003 0303 	and.w	r3, r3, #3
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3714      	adds	r7, #20
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	b29b      	uxth	r3, r3
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3714      	adds	r7, #20
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr
	...

08007e70 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b088      	sub	sp, #32
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	4608      	mov	r0, r1
 8007e7a:	4611      	mov	r1, r2
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	4603      	mov	r3, r0
 8007e80:	70fb      	strb	r3, [r7, #3]
 8007e82:	460b      	mov	r3, r1
 8007e84:	70bb      	strb	r3, [r7, #2]
 8007e86:	4613      	mov	r3, r2
 8007e88:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007e92:	78fb      	ldrb	r3, [r7, #3]
 8007e94:	015a      	lsls	r2, r3, #5
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	4413      	add	r3, r2
 8007e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ea4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007ea6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007eaa:	2b03      	cmp	r3, #3
 8007eac:	d87e      	bhi.n	8007fac <USB_HC_Init+0x13c>
 8007eae:	a201      	add	r2, pc, #4	; (adr r2, 8007eb4 <USB_HC_Init+0x44>)
 8007eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb4:	08007ec5 	.word	0x08007ec5
 8007eb8:	08007f6f 	.word	0x08007f6f
 8007ebc:	08007ec5 	.word	0x08007ec5
 8007ec0:	08007f31 	.word	0x08007f31
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007ec4:	78fb      	ldrb	r3, [r7, #3]
 8007ec6:	015a      	lsls	r2, r3, #5
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	4413      	add	r3, r2
 8007ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	f240 439d 	movw	r3, #1181	; 0x49d
 8007ed6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007ed8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	da10      	bge.n	8007f02 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007ee0:	78fb      	ldrb	r3, [r7, #3]
 8007ee2:	015a      	lsls	r2, r3, #5
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	78fa      	ldrb	r2, [r7, #3]
 8007ef0:	0151      	lsls	r1, r2, #5
 8007ef2:	693a      	ldr	r2, [r7, #16]
 8007ef4:	440a      	add	r2, r1
 8007ef6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007efe:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007f00:	e057      	b.n	8007fb2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d051      	beq.n	8007fb2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007f0e:	78fb      	ldrb	r3, [r7, #3]
 8007f10:	015a      	lsls	r2, r3, #5
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	4413      	add	r3, r2
 8007f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	78fa      	ldrb	r2, [r7, #3]
 8007f1e:	0151      	lsls	r1, r2, #5
 8007f20:	693a      	ldr	r2, [r7, #16]
 8007f22:	440a      	add	r2, r1
 8007f24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f28:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007f2c:	60d3      	str	r3, [r2, #12]
      break;
 8007f2e:	e040      	b.n	8007fb2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007f30:	78fb      	ldrb	r3, [r7, #3]
 8007f32:	015a      	lsls	r2, r3, #5
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	4413      	add	r3, r2
 8007f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	f240 639d 	movw	r3, #1693	; 0x69d
 8007f42:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007f44:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	da34      	bge.n	8007fb6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007f4c:	78fb      	ldrb	r3, [r7, #3]
 8007f4e:	015a      	lsls	r2, r3, #5
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	4413      	add	r3, r2
 8007f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	78fa      	ldrb	r2, [r7, #3]
 8007f5c:	0151      	lsls	r1, r2, #5
 8007f5e:	693a      	ldr	r2, [r7, #16]
 8007f60:	440a      	add	r2, r1
 8007f62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f6a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007f6c:	e023      	b.n	8007fb6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007f6e:	78fb      	ldrb	r3, [r7, #3]
 8007f70:	015a      	lsls	r2, r3, #5
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	4413      	add	r3, r2
 8007f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	f240 2325 	movw	r3, #549	; 0x225
 8007f80:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007f82:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	da17      	bge.n	8007fba <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007f8a:	78fb      	ldrb	r3, [r7, #3]
 8007f8c:	015a      	lsls	r2, r3, #5
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	4413      	add	r3, r2
 8007f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	78fa      	ldrb	r2, [r7, #3]
 8007f9a:	0151      	lsls	r1, r2, #5
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	440a      	add	r2, r1
 8007fa0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fa4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007fa8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007faa:	e006      	b.n	8007fba <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	77fb      	strb	r3, [r7, #31]
      break;
 8007fb0:	e004      	b.n	8007fbc <USB_HC_Init+0x14c>
      break;
 8007fb2:	bf00      	nop
 8007fb4:	e002      	b.n	8007fbc <USB_HC_Init+0x14c>
      break;
 8007fb6:	bf00      	nop
 8007fb8:	e000      	b.n	8007fbc <USB_HC_Init+0x14c>
      break;
 8007fba:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007fbc:	78fb      	ldrb	r3, [r7, #3]
 8007fbe:	015a      	lsls	r2, r3, #5
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	78fa      	ldrb	r2, [r7, #3]
 8007fcc:	0151      	lsls	r1, r2, #5
 8007fce:	693a      	ldr	r2, [r7, #16]
 8007fd0:	440a      	add	r2, r1
 8007fd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fd6:	f043 0302 	orr.w	r3, r3, #2
 8007fda:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fe2:	699a      	ldr	r2, [r3, #24]
 8007fe4:	78fb      	ldrb	r3, [r7, #3]
 8007fe6:	f003 030f 	and.w	r3, r3, #15
 8007fea:	2101      	movs	r1, #1
 8007fec:	fa01 f303 	lsl.w	r3, r1, r3
 8007ff0:	6939      	ldr	r1, [r7, #16]
 8007ff2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	699b      	ldr	r3, [r3, #24]
 8007ffe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008006:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800800a:	2b00      	cmp	r3, #0
 800800c:	da03      	bge.n	8008016 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800800e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008012:	61bb      	str	r3, [r7, #24]
 8008014:	e001      	b.n	800801a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8008016:	2300      	movs	r3, #0
 8008018:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f7ff feff 	bl	8007e1e <USB_GetHostSpeed>
 8008020:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008022:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008026:	2b02      	cmp	r3, #2
 8008028:	d106      	bne.n	8008038 <USB_HC_Init+0x1c8>
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2b02      	cmp	r3, #2
 800802e:	d003      	beq.n	8008038 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008030:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008034:	617b      	str	r3, [r7, #20]
 8008036:	e001      	b.n	800803c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008038:	2300      	movs	r3, #0
 800803a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800803c:	787b      	ldrb	r3, [r7, #1]
 800803e:	059b      	lsls	r3, r3, #22
 8008040:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008044:	78bb      	ldrb	r3, [r7, #2]
 8008046:	02db      	lsls	r3, r3, #11
 8008048:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800804c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800804e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008052:	049b      	lsls	r3, r3, #18
 8008054:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008058:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800805a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800805c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008060:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008066:	78fb      	ldrb	r3, [r7, #3]
 8008068:	0159      	lsls	r1, r3, #5
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	440b      	add	r3, r1
 800806e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008072:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008078:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800807a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800807e:	2b03      	cmp	r3, #3
 8008080:	d003      	beq.n	800808a <USB_HC_Init+0x21a>
 8008082:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008086:	2b01      	cmp	r3, #1
 8008088:	d10f      	bne.n	80080aa <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800808a:	78fb      	ldrb	r3, [r7, #3]
 800808c:	015a      	lsls	r2, r3, #5
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	4413      	add	r3, r2
 8008092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	78fa      	ldrb	r2, [r7, #3]
 800809a:	0151      	lsls	r1, r2, #5
 800809c:	693a      	ldr	r2, [r7, #16]
 800809e:	440a      	add	r2, r1
 80080a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80080a8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80080aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3720      	adds	r7, #32
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b08c      	sub	sp, #48	; 0x30
 80080b8:	af02      	add	r7, sp, #8
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	60b9      	str	r1, [r7, #8]
 80080be:	4613      	mov	r3, r2
 80080c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	785b      	ldrb	r3, [r3, #1]
 80080ca:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80080cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080d0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d02d      	beq.n	800813a <USB_HC_StartXfer+0x86>
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	791b      	ldrb	r3, [r3, #4]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d129      	bne.n	800813a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80080e6:	79fb      	ldrb	r3, [r7, #7]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d117      	bne.n	800811c <USB_HC_StartXfer+0x68>
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	79db      	ldrb	r3, [r3, #7]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d003      	beq.n	80080fc <USB_HC_StartXfer+0x48>
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	79db      	ldrb	r3, [r3, #7]
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d10f      	bne.n	800811c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	015a      	lsls	r2, r3, #5
 8008100:	6a3b      	ldr	r3, [r7, #32]
 8008102:	4413      	add	r3, r2
 8008104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	69fa      	ldr	r2, [r7, #28]
 800810c:	0151      	lsls	r1, r2, #5
 800810e:	6a3a      	ldr	r2, [r7, #32]
 8008110:	440a      	add	r2, r1
 8008112:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800811a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800811c:	79fb      	ldrb	r3, [r7, #7]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d10b      	bne.n	800813a <USB_HC_StartXfer+0x86>
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	795b      	ldrb	r3, [r3, #5]
 8008126:	2b01      	cmp	r3, #1
 8008128:	d107      	bne.n	800813a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	785b      	ldrb	r3, [r3, #1]
 800812e:	4619      	mov	r1, r3
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	f000 fa0f 	bl	8008554 <USB_DoPing>
      return HAL_OK;
 8008136:	2300      	movs	r3, #0
 8008138:	e0f8      	b.n	800832c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	695b      	ldr	r3, [r3, #20]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d018      	beq.n	8008174 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	695b      	ldr	r3, [r3, #20]
 8008146:	68ba      	ldr	r2, [r7, #8]
 8008148:	8912      	ldrh	r2, [r2, #8]
 800814a:	4413      	add	r3, r2
 800814c:	3b01      	subs	r3, #1
 800814e:	68ba      	ldr	r2, [r7, #8]
 8008150:	8912      	ldrh	r2, [r2, #8]
 8008152:	fbb3 f3f2 	udiv	r3, r3, r2
 8008156:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008158:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800815a:	8b7b      	ldrh	r3, [r7, #26]
 800815c:	429a      	cmp	r2, r3
 800815e:	d90b      	bls.n	8008178 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008160:	8b7b      	ldrh	r3, [r7, #26]
 8008162:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008164:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	8912      	ldrh	r2, [r2, #8]
 800816a:	fb03 f202 	mul.w	r2, r3, r2
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	611a      	str	r2, [r3, #16]
 8008172:	e001      	b.n	8008178 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008174:	2301      	movs	r3, #1
 8008176:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	78db      	ldrb	r3, [r3, #3]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d007      	beq.n	8008190 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008180:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008182:	68ba      	ldr	r2, [r7, #8]
 8008184:	8912      	ldrh	r2, [r2, #8]
 8008186:	fb03 f202 	mul.w	r2, r3, r2
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	611a      	str	r2, [r3, #16]
 800818e:	e003      	b.n	8008198 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	695a      	ldr	r2, [r3, #20]
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80081a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80081a2:	04d9      	lsls	r1, r3, #19
 80081a4:	4b63      	ldr	r3, [pc, #396]	; (8008334 <USB_HC_StartXfer+0x280>)
 80081a6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80081a8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	7a9b      	ldrb	r3, [r3, #10]
 80081ae:	075b      	lsls	r3, r3, #29
 80081b0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80081b4:	69f9      	ldr	r1, [r7, #28]
 80081b6:	0148      	lsls	r0, r1, #5
 80081b8:	6a39      	ldr	r1, [r7, #32]
 80081ba:	4401      	add	r1, r0
 80081bc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80081c0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80081c2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80081c4:	79fb      	ldrb	r3, [r7, #7]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d009      	beq.n	80081de <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	68d9      	ldr	r1, [r3, #12]
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	015a      	lsls	r2, r3, #5
 80081d2:	6a3b      	ldr	r3, [r7, #32]
 80081d4:	4413      	add	r3, r2
 80081d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081da:	460a      	mov	r2, r1
 80081dc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80081de:	6a3b      	ldr	r3, [r7, #32]
 80081e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	f003 0301 	and.w	r3, r3, #1
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	bf0c      	ite	eq
 80081ee:	2301      	moveq	r3, #1
 80081f0:	2300      	movne	r3, #0
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	015a      	lsls	r2, r3, #5
 80081fa:	6a3b      	ldr	r3, [r7, #32]
 80081fc:	4413      	add	r3, r2
 80081fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	69fa      	ldr	r2, [r7, #28]
 8008206:	0151      	lsls	r1, r2, #5
 8008208:	6a3a      	ldr	r2, [r7, #32]
 800820a:	440a      	add	r2, r1
 800820c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008210:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008214:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	015a      	lsls	r2, r3, #5
 800821a:	6a3b      	ldr	r3, [r7, #32]
 800821c:	4413      	add	r3, r2
 800821e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	7e7b      	ldrb	r3, [r7, #25]
 8008226:	075b      	lsls	r3, r3, #29
 8008228:	69f9      	ldr	r1, [r7, #28]
 800822a:	0148      	lsls	r0, r1, #5
 800822c:	6a39      	ldr	r1, [r7, #32]
 800822e:	4401      	add	r1, r0
 8008230:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008234:	4313      	orrs	r3, r2
 8008236:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008238:	69fb      	ldr	r3, [r7, #28]
 800823a:	015a      	lsls	r2, r3, #5
 800823c:	6a3b      	ldr	r3, [r7, #32]
 800823e:	4413      	add	r3, r2
 8008240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800824e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	78db      	ldrb	r3, [r3, #3]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d004      	beq.n	8008262 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800825e:	613b      	str	r3, [r7, #16]
 8008260:	e003      	b.n	800826a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008268:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008270:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	015a      	lsls	r2, r3, #5
 8008276:	6a3b      	ldr	r3, [r7, #32]
 8008278:	4413      	add	r3, r2
 800827a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800827e:	461a      	mov	r2, r3
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008284:	79fb      	ldrb	r3, [r7, #7]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d001      	beq.n	800828e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800828a:	2300      	movs	r3, #0
 800828c:	e04e      	b.n	800832c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	78db      	ldrb	r3, [r3, #3]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d149      	bne.n	800832a <USB_HC_StartXfer+0x276>
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	695b      	ldr	r3, [r3, #20]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d045      	beq.n	800832a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	79db      	ldrb	r3, [r3, #7]
 80082a2:	2b03      	cmp	r3, #3
 80082a4:	d830      	bhi.n	8008308 <USB_HC_StartXfer+0x254>
 80082a6:	a201      	add	r2, pc, #4	; (adr r2, 80082ac <USB_HC_StartXfer+0x1f8>)
 80082a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ac:	080082bd 	.word	0x080082bd
 80082b0:	080082e1 	.word	0x080082e1
 80082b4:	080082bd 	.word	0x080082bd
 80082b8:	080082e1 	.word	0x080082e1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	695b      	ldr	r3, [r3, #20]
 80082c0:	3303      	adds	r3, #3
 80082c2:	089b      	lsrs	r3, r3, #2
 80082c4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80082c6:	8afa      	ldrh	r2, [r7, #22]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d91c      	bls.n	800830c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	699b      	ldr	r3, [r3, #24]
 80082d6:	f043 0220 	orr.w	r2, r3, #32
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	619a      	str	r2, [r3, #24]
        }
        break;
 80082de:	e015      	b.n	800830c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	695b      	ldr	r3, [r3, #20]
 80082e4:	3303      	adds	r3, #3
 80082e6:	089b      	lsrs	r3, r3, #2
 80082e8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80082ea:	8afa      	ldrh	r2, [r7, #22]
 80082ec:	6a3b      	ldr	r3, [r7, #32]
 80082ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d90a      	bls.n	8008310 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	699b      	ldr	r3, [r3, #24]
 80082fe:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	619a      	str	r2, [r3, #24]
        }
        break;
 8008306:	e003      	b.n	8008310 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008308:	bf00      	nop
 800830a:	e002      	b.n	8008312 <USB_HC_StartXfer+0x25e>
        break;
 800830c:	bf00      	nop
 800830e:	e000      	b.n	8008312 <USB_HC_StartXfer+0x25e>
        break;
 8008310:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	68d9      	ldr	r1, [r3, #12]
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	785a      	ldrb	r2, [r3, #1]
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	695b      	ldr	r3, [r3, #20]
 800831e:	b29b      	uxth	r3, r3
 8008320:	2000      	movs	r0, #0
 8008322:	9000      	str	r0, [sp, #0]
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f7ff fb31 	bl	800798c <USB_WritePacket>
  }

  return HAL_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	3728      	adds	r7, #40	; 0x28
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}
 8008334:	1ff80000 	.word	0x1ff80000

08008338 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008338:	b480      	push	{r7}
 800833a:	b085      	sub	sp, #20
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800834a:	695b      	ldr	r3, [r3, #20]
 800834c:	b29b      	uxth	r3, r3
}
 800834e:	4618      	mov	r0, r3
 8008350:	3714      	adds	r7, #20
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr

0800835a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800835a:	b480      	push	{r7}
 800835c:	b089      	sub	sp, #36	; 0x24
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
 8008362:	460b      	mov	r3, r1
 8008364:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800836a:	78fb      	ldrb	r3, [r7, #3]
 800836c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800836e:	2300      	movs	r3, #0
 8008370:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	015a      	lsls	r2, r3, #5
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	4413      	add	r3, r2
 800837a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	0c9b      	lsrs	r3, r3, #18
 8008382:	f003 0303 	and.w	r3, r3, #3
 8008386:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	015a      	lsls	r2, r3, #5
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	4413      	add	r3, r2
 8008390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	0fdb      	lsrs	r3, r3, #31
 8008398:	f003 0301 	and.w	r3, r3, #1
 800839c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	f003 0320 	and.w	r3, r3, #32
 80083a6:	2b20      	cmp	r3, #32
 80083a8:	d104      	bne.n	80083b4 <USB_HC_Halt+0x5a>
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d101      	bne.n	80083b4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80083b0:	2300      	movs	r3, #0
 80083b2:	e0c8      	b.n	8008546 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d002      	beq.n	80083c0 <USB_HC_Halt+0x66>
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d163      	bne.n	8008488 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80083c0:	69bb      	ldr	r3, [r7, #24]
 80083c2:	015a      	lsls	r2, r3, #5
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	4413      	add	r3, r2
 80083c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	69ba      	ldr	r2, [r7, #24]
 80083d0:	0151      	lsls	r1, r2, #5
 80083d2:	69fa      	ldr	r2, [r7, #28]
 80083d4:	440a      	add	r2, r1
 80083d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80083de:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	f003 0320 	and.w	r3, r3, #32
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f040 80ab 	bne.w	8008544 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d133      	bne.n	8008462 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	015a      	lsls	r2, r3, #5
 80083fe:	69fb      	ldr	r3, [r7, #28]
 8008400:	4413      	add	r3, r2
 8008402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	69ba      	ldr	r2, [r7, #24]
 800840a:	0151      	lsls	r1, r2, #5
 800840c:	69fa      	ldr	r2, [r7, #28]
 800840e:	440a      	add	r2, r1
 8008410:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008414:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008418:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800841a:	69bb      	ldr	r3, [r7, #24]
 800841c:	015a      	lsls	r2, r3, #5
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	4413      	add	r3, r2
 8008422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	69ba      	ldr	r2, [r7, #24]
 800842a:	0151      	lsls	r1, r2, #5
 800842c:	69fa      	ldr	r2, [r7, #28]
 800842e:	440a      	add	r2, r1
 8008430:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008434:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008438:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	3301      	adds	r3, #1
 800843e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008446:	d81d      	bhi.n	8008484 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	015a      	lsls	r2, r3, #5
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	4413      	add	r3, r2
 8008450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800845a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800845e:	d0ec      	beq.n	800843a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008460:	e070      	b.n	8008544 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	015a      	lsls	r2, r3, #5
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	4413      	add	r3, r2
 800846a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	69ba      	ldr	r2, [r7, #24]
 8008472:	0151      	lsls	r1, r2, #5
 8008474:	69fa      	ldr	r2, [r7, #28]
 8008476:	440a      	add	r2, r1
 8008478:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800847c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008480:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008482:	e05f      	b.n	8008544 <USB_HC_Halt+0x1ea>
            break;
 8008484:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008486:	e05d      	b.n	8008544 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	015a      	lsls	r2, r3, #5
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	4413      	add	r3, r2
 8008490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	69ba      	ldr	r2, [r7, #24]
 8008498:	0151      	lsls	r1, r2, #5
 800849a:	69fa      	ldr	r2, [r7, #28]
 800849c:	440a      	add	r2, r1
 800849e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084a6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d133      	bne.n	8008520 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	015a      	lsls	r2, r3, #5
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	4413      	add	r3, r2
 80084c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	69ba      	ldr	r2, [r7, #24]
 80084c8:	0151      	lsls	r1, r2, #5
 80084ca:	69fa      	ldr	r2, [r7, #28]
 80084cc:	440a      	add	r2, r1
 80084ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084d6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	69ba      	ldr	r2, [r7, #24]
 80084e8:	0151      	lsls	r1, r2, #5
 80084ea:	69fa      	ldr	r2, [r7, #28]
 80084ec:	440a      	add	r2, r1
 80084ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80084f6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	3301      	adds	r3, #1
 80084fc:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008504:	d81d      	bhi.n	8008542 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	015a      	lsls	r2, r3, #5
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	4413      	add	r3, r2
 800850e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008518:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800851c:	d0ec      	beq.n	80084f8 <USB_HC_Halt+0x19e>
 800851e:	e011      	b.n	8008544 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	015a      	lsls	r2, r3, #5
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	4413      	add	r3, r2
 8008528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	69ba      	ldr	r2, [r7, #24]
 8008530:	0151      	lsls	r1, r2, #5
 8008532:	69fa      	ldr	r2, [r7, #28]
 8008534:	440a      	add	r2, r1
 8008536:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800853a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800853e:	6013      	str	r3, [r2, #0]
 8008540:	e000      	b.n	8008544 <USB_HC_Halt+0x1ea>
          break;
 8008542:	bf00      	nop
    }
  }

  return HAL_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3724      	adds	r7, #36	; 0x24
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
	...

08008554 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008554:	b480      	push	{r7}
 8008556:	b087      	sub	sp, #28
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	460b      	mov	r3, r1
 800855e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008564:	78fb      	ldrb	r3, [r7, #3]
 8008566:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008568:	2301      	movs	r3, #1
 800856a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	04da      	lsls	r2, r3, #19
 8008570:	4b15      	ldr	r3, [pc, #84]	; (80085c8 <USB_DoPing+0x74>)
 8008572:	4013      	ands	r3, r2
 8008574:	693a      	ldr	r2, [r7, #16]
 8008576:	0151      	lsls	r1, r2, #5
 8008578:	697a      	ldr	r2, [r7, #20]
 800857a:	440a      	add	r2, r1
 800857c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008580:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008584:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	015a      	lsls	r2, r3, #5
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	4413      	add	r3, r2
 800858e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800859c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085a4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	015a      	lsls	r2, r3, #5
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	4413      	add	r3, r2
 80085ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085b2:	461a      	mov	r2, r3
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	371c      	adds	r7, #28
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop
 80085c8:	1ff80000 	.word	0x1ff80000

080085cc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b088      	sub	sp, #32
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80085d4:	2300      	movs	r3, #0
 80085d6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80085dc:	2300      	movs	r3, #0
 80085de:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f7ff f911 	bl	8007808 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80085e6:	2110      	movs	r1, #16
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f7ff f96b 	bl	80078c4 <USB_FlushTxFifo>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d001      	beq.n	80085f8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f7ff f997 	bl	800792c <USB_FlushRxFifo>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d001      	beq.n	8008608 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008604:	2301      	movs	r3, #1
 8008606:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008608:	2300      	movs	r3, #0
 800860a:	61bb      	str	r3, [r7, #24]
 800860c:	e01f      	b.n	800864e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	015a      	lsls	r2, r3, #5
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	4413      	add	r3, r2
 8008616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008624:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800862c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008634:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	015a      	lsls	r2, r3, #5
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	4413      	add	r3, r2
 800863e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008642:	461a      	mov	r2, r3
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	3301      	adds	r3, #1
 800864c:	61bb      	str	r3, [r7, #24]
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	2b0f      	cmp	r3, #15
 8008652:	d9dc      	bls.n	800860e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008654:	2300      	movs	r3, #0
 8008656:	61bb      	str	r3, [r7, #24]
 8008658:	e034      	b.n	80086c4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	015a      	lsls	r2, r3, #5
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	4413      	add	r3, r2
 8008662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008670:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008678:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008680:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	015a      	lsls	r2, r3, #5
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	4413      	add	r3, r2
 800868a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800868e:	461a      	mov	r2, r3
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	3301      	adds	r3, #1
 8008698:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086a0:	d80c      	bhi.n	80086bc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	015a      	lsls	r2, r3, #5
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	4413      	add	r3, r2
 80086aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086b8:	d0ec      	beq.n	8008694 <USB_StopHost+0xc8>
 80086ba:	e000      	b.n	80086be <USB_StopHost+0xf2>
        break;
 80086bc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	3301      	adds	r3, #1
 80086c2:	61bb      	str	r3, [r7, #24]
 80086c4:	69bb      	ldr	r3, [r7, #24]
 80086c6:	2b0f      	cmp	r3, #15
 80086c8:	d9c7      	bls.n	800865a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086d0:	461a      	mov	r2, r3
 80086d2:	f04f 33ff 	mov.w	r3, #4294967295
 80086d6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f04f 32ff 	mov.w	r2, #4294967295
 80086de:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f7ff f880 	bl	80077e6 <USB_EnableGlobalInt>

  return ret;
 80086e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3720      	adds	r7, #32
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <smMotorSteps>:
 *
 * @note
 *
 **************************************************************************************************/
void smMotorSteps(uint8_t steps)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	4603      	mov	r3, r0
 80086f8:	71fb      	strb	r3, [r7, #7]
	for (int var = 0; var < 100; ++var)
 80086fa:	2300      	movs	r3, #0
 80086fc:	60fb      	str	r3, [r7, #12]
 80086fe:	e026      	b.n	800874e <smMotorSteps+0x5e>
			{
				HAL_GPIO_WritePin(SMZR_STEP_GPIO_Port, SMZR_STEP_Pin, GPIO_PIN_SET);
 8008700:	2201      	movs	r2, #1
 8008702:	2120      	movs	r1, #32
 8008704:	4816      	ldr	r0, [pc, #88]	; (8008760 <smMotorSteps+0x70>)
 8008706:	f7f9 fe89 	bl	800241c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SMZL_STEP_GPIO_Port, SMZL_STEP_Pin, GPIO_PIN_SET);
 800870a:	2201      	movs	r2, #1
 800870c:	2140      	movs	r1, #64	; 0x40
 800870e:	4815      	ldr	r0, [pc, #84]	; (8008764 <smMotorSteps+0x74>)
 8008710:	f7f9 fe84 	bl	800241c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SMX_STEP_GPIO_Port, SMX_STEP_Pin, GPIO_PIN_SET);
 8008714:	2201      	movs	r2, #1
 8008716:	2140      	movs	r1, #64	; 0x40
 8008718:	4811      	ldr	r0, [pc, #68]	; (8008760 <smMotorSteps+0x70>)
 800871a:	f7f9 fe7f 	bl	800241c <HAL_GPIO_WritePin>
				osDelay(1);
 800871e:	2001      	movs	r0, #1
 8008720:	f002 fba0 	bl	800ae64 <osDelay>
				HAL_GPIO_WritePin(SMZR_STEP_GPIO_Port, SMZR_STEP_Pin, GPIO_PIN_RESET);
 8008724:	2200      	movs	r2, #0
 8008726:	2120      	movs	r1, #32
 8008728:	480d      	ldr	r0, [pc, #52]	; (8008760 <smMotorSteps+0x70>)
 800872a:	f7f9 fe77 	bl	800241c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SMZL_STEP_GPIO_Port, SMZL_STEP_Pin, GPIO_PIN_RESET);
 800872e:	2200      	movs	r2, #0
 8008730:	2140      	movs	r1, #64	; 0x40
 8008732:	480c      	ldr	r0, [pc, #48]	; (8008764 <smMotorSteps+0x74>)
 8008734:	f7f9 fe72 	bl	800241c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SMX_STEP_GPIO_Port, SMX_STEP_Pin, GPIO_PIN_RESET);
 8008738:	2200      	movs	r2, #0
 800873a:	2140      	movs	r1, #64	; 0x40
 800873c:	4808      	ldr	r0, [pc, #32]	; (8008760 <smMotorSteps+0x70>)
 800873e:	f7f9 fe6d 	bl	800241c <HAL_GPIO_WritePin>
				osDelay(1);
 8008742:	2001      	movs	r0, #1
 8008744:	f002 fb8e 	bl	800ae64 <osDelay>
	for (int var = 0; var < 100; ++var)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	3301      	adds	r3, #1
 800874c:	60fb      	str	r3, [r7, #12]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2b63      	cmp	r3, #99	; 0x63
 8008752:	ddd5      	ble.n	8008700 <smMotorSteps+0x10>
			}
}
 8008754:	bf00      	nop
 8008756:	bf00      	nop
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	40021000 	.word	0x40021000
 8008764:	40021400 	.word	0x40021400

08008768 <Mian>:


extern UART_HandleTypeDef huart1;

void Mian(void)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
    uint8_t dataRx[10];
    HAL_UART_Receive(&huart1, dataRx, 5, 50);
 800876e:	1d39      	adds	r1, r7, #4
 8008770:	2332      	movs	r3, #50	; 0x32
 8008772:	2205      	movs	r2, #5
 8008774:	4806      	ldr	r0, [pc, #24]	; (8008790 <Mian+0x28>)
 8008776:	f7fd ff38 	bl	80065ea <HAL_UART_Receive>
    HAL_UART_Transmit(&huart1, dataRx, 1, 1);
 800877a:	1d39      	adds	r1, r7, #4
 800877c:	2301      	movs	r3, #1
 800877e:	2201      	movs	r2, #1
 8008780:	4803      	ldr	r0, [pc, #12]	; (8008790 <Mian+0x28>)
 8008782:	f7fd fea0 	bl	80064c6 <HAL_UART_Transmit>
}
 8008786:	bf00      	nop
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	200002c8 	.word	0x200002c8

08008794 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008794:	b590      	push	{r4, r7, lr}
 8008796:	b089      	sub	sp, #36	; 0x24
 8008798:	af04      	add	r7, sp, #16
 800879a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800879c:	2301      	movs	r3, #1
 800879e:	2202      	movs	r2, #2
 80087a0:	2102      	movs	r1, #2
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 fcb2 	bl	800910c <USBH_FindInterface>
 80087a8:	4603      	mov	r3, r0
 80087aa:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
 80087ae:	2bff      	cmp	r3, #255	; 0xff
 80087b0:	d002      	beq.n	80087b8 <USBH_CDC_InterfaceInit+0x24>
 80087b2:	7bfb      	ldrb	r3, [r7, #15]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d901      	bls.n	80087bc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80087b8:	2302      	movs	r3, #2
 80087ba:	e13d      	b.n	8008a38 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80087bc:	7bfb      	ldrb	r3, [r7, #15]
 80087be:	4619      	mov	r1, r3
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 fc87 	bl	80090d4 <USBH_SelectInterface>
 80087c6:	4603      	mov	r3, r0
 80087c8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80087ca:	7bbb      	ldrb	r3, [r7, #14]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d001      	beq.n	80087d4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80087d0:	2302      	movs	r3, #2
 80087d2:	e131      	b.n	8008a38 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80087da:	2050      	movs	r0, #80	; 0x50
 80087dc:	f005 fd02 	bl	800e1e4 <malloc>
 80087e0:	4603      	mov	r3, r0
 80087e2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087ea:	69db      	ldr	r3, [r3, #28]
 80087ec:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d101      	bne.n	80087f8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80087f4:	2302      	movs	r3, #2
 80087f6:	e11f      	b.n	8008a38 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80087f8:	2250      	movs	r2, #80	; 0x50
 80087fa:	2100      	movs	r1, #0
 80087fc:	68b8      	ldr	r0, [r7, #8]
 80087fe:	f005 fdad 	bl	800e35c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008802:	7bfb      	ldrb	r3, [r7, #15]
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	211a      	movs	r1, #26
 8008808:	fb01 f303 	mul.w	r3, r1, r3
 800880c:	4413      	add	r3, r2
 800880e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	b25b      	sxtb	r3, r3
 8008816:	2b00      	cmp	r3, #0
 8008818:	da15      	bge.n	8008846 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800881a:	7bfb      	ldrb	r3, [r7, #15]
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	211a      	movs	r1, #26
 8008820:	fb01 f303 	mul.w	r3, r1, r3
 8008824:	4413      	add	r3, r2
 8008826:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800882a:	781a      	ldrb	r2, [r3, #0]
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008830:	7bfb      	ldrb	r3, [r7, #15]
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	211a      	movs	r1, #26
 8008836:	fb01 f303 	mul.w	r3, r1, r3
 800883a:	4413      	add	r3, r2
 800883c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008840:	881a      	ldrh	r2, [r3, #0]
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	785b      	ldrb	r3, [r3, #1]
 800884a:	4619      	mov	r1, r3
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f002 f986 	bl	800ab5e <USBH_AllocPipe>
 8008852:	4603      	mov	r3, r0
 8008854:	461a      	mov	r2, r3
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	7819      	ldrb	r1, [r3, #0]
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	7858      	ldrb	r0, [r3, #1]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800886e:	68ba      	ldr	r2, [r7, #8]
 8008870:	8952      	ldrh	r2, [r2, #10]
 8008872:	9202      	str	r2, [sp, #8]
 8008874:	2203      	movs	r2, #3
 8008876:	9201      	str	r2, [sp, #4]
 8008878:	9300      	str	r3, [sp, #0]
 800887a:	4623      	mov	r3, r4
 800887c:	4602      	mov	r2, r0
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f002 f93e 	bl	800ab00 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	2200      	movs	r2, #0
 800888a:	4619      	mov	r1, r3
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f005 fc25 	bl	800e0dc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008892:	2300      	movs	r3, #0
 8008894:	2200      	movs	r2, #0
 8008896:	210a      	movs	r1, #10
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 fc37 	bl	800910c <USBH_FindInterface>
 800889e:	4603      	mov	r3, r0
 80088a0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80088a2:	7bfb      	ldrb	r3, [r7, #15]
 80088a4:	2bff      	cmp	r3, #255	; 0xff
 80088a6:	d002      	beq.n	80088ae <USBH_CDC_InterfaceInit+0x11a>
 80088a8:	7bfb      	ldrb	r3, [r7, #15]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d901      	bls.n	80088b2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80088ae:	2302      	movs	r3, #2
 80088b0:	e0c2      	b.n	8008a38 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80088b2:	7bfb      	ldrb	r3, [r7, #15]
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	211a      	movs	r1, #26
 80088b8:	fb01 f303 	mul.w	r3, r1, r3
 80088bc:	4413      	add	r3, r2
 80088be:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	b25b      	sxtb	r3, r3
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	da16      	bge.n	80088f8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80088ca:	7bfb      	ldrb	r3, [r7, #15]
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	211a      	movs	r1, #26
 80088d0:	fb01 f303 	mul.w	r3, r1, r3
 80088d4:	4413      	add	r3, r2
 80088d6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80088da:	781a      	ldrb	r2, [r3, #0]
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80088e0:	7bfb      	ldrb	r3, [r7, #15]
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	211a      	movs	r1, #26
 80088e6:	fb01 f303 	mul.w	r3, r1, r3
 80088ea:	4413      	add	r3, r2
 80088ec:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80088f0:	881a      	ldrh	r2, [r3, #0]
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	835a      	strh	r2, [r3, #26]
 80088f6:	e015      	b.n	8008924 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80088f8:	7bfb      	ldrb	r3, [r7, #15]
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	211a      	movs	r1, #26
 80088fe:	fb01 f303 	mul.w	r3, r1, r3
 8008902:	4413      	add	r3, r2
 8008904:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008908:	781a      	ldrb	r2, [r3, #0]
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800890e:	7bfb      	ldrb	r3, [r7, #15]
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	211a      	movs	r1, #26
 8008914:	fb01 f303 	mul.w	r3, r1, r3
 8008918:	4413      	add	r3, r2
 800891a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800891e:	881a      	ldrh	r2, [r3, #0]
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008924:	7bfb      	ldrb	r3, [r7, #15]
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	211a      	movs	r1, #26
 800892a:	fb01 f303 	mul.w	r3, r1, r3
 800892e:	4413      	add	r3, r2
 8008930:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	b25b      	sxtb	r3, r3
 8008938:	2b00      	cmp	r3, #0
 800893a:	da16      	bge.n	800896a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800893c:	7bfb      	ldrb	r3, [r7, #15]
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	211a      	movs	r1, #26
 8008942:	fb01 f303 	mul.w	r3, r1, r3
 8008946:	4413      	add	r3, r2
 8008948:	f203 3356 	addw	r3, r3, #854	; 0x356
 800894c:	781a      	ldrb	r2, [r3, #0]
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008952:	7bfb      	ldrb	r3, [r7, #15]
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	211a      	movs	r1, #26
 8008958:	fb01 f303 	mul.w	r3, r1, r3
 800895c:	4413      	add	r3, r2
 800895e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008962:	881a      	ldrh	r2, [r3, #0]
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	835a      	strh	r2, [r3, #26]
 8008968:	e015      	b.n	8008996 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800896a:	7bfb      	ldrb	r3, [r7, #15]
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	211a      	movs	r1, #26
 8008970:	fb01 f303 	mul.w	r3, r1, r3
 8008974:	4413      	add	r3, r2
 8008976:	f203 3356 	addw	r3, r3, #854	; 0x356
 800897a:	781a      	ldrb	r2, [r3, #0]
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008980:	7bfb      	ldrb	r3, [r7, #15]
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	211a      	movs	r1, #26
 8008986:	fb01 f303 	mul.w	r3, r1, r3
 800898a:	4413      	add	r3, r2
 800898c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008990:	881a      	ldrh	r2, [r3, #0]
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	7b9b      	ldrb	r3, [r3, #14]
 800899a:	4619      	mov	r1, r3
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f002 f8de 	bl	800ab5e <USBH_AllocPipe>
 80089a2:	4603      	mov	r3, r0
 80089a4:	461a      	mov	r2, r3
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	7bdb      	ldrb	r3, [r3, #15]
 80089ae:	4619      	mov	r1, r3
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f002 f8d4 	bl	800ab5e <USBH_AllocPipe>
 80089b6:	4603      	mov	r3, r0
 80089b8:	461a      	mov	r2, r3
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	7b59      	ldrb	r1, [r3, #13]
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	7b98      	ldrb	r0, [r3, #14]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	8b12      	ldrh	r2, [r2, #24]
 80089d6:	9202      	str	r2, [sp, #8]
 80089d8:	2202      	movs	r2, #2
 80089da:	9201      	str	r2, [sp, #4]
 80089dc:	9300      	str	r3, [sp, #0]
 80089de:	4623      	mov	r3, r4
 80089e0:	4602      	mov	r2, r0
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f002 f88c 	bl	800ab00 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	7b19      	ldrb	r1, [r3, #12]
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	7bd8      	ldrb	r0, [r3, #15]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80089fc:	68ba      	ldr	r2, [r7, #8]
 80089fe:	8b52      	ldrh	r2, [r2, #26]
 8008a00:	9202      	str	r2, [sp, #8]
 8008a02:	2202      	movs	r2, #2
 8008a04:	9201      	str	r2, [sp, #4]
 8008a06:	9300      	str	r3, [sp, #0]
 8008a08:	4623      	mov	r3, r4
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f002 f877 	bl	800ab00 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	7b5b      	ldrb	r3, [r3, #13]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	4619      	mov	r1, r3
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f005 fb5a 	bl	800e0dc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	7b1b      	ldrb	r3, [r3, #12]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	4619      	mov	r1, r3
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f005 fb53 	bl	800e0dc <USBH_LL_SetToggle>

  return USBH_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3714      	adds	r7, #20
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd90      	pop	{r4, r7, pc}

08008a40 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a4e:	69db      	ldr	r3, [r3, #28]
 8008a50:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00e      	beq.n	8008a78 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	4619      	mov	r1, r3
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f002 f86c 	bl	800ab3e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f002 f897 	bl	800aba0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2200      	movs	r2, #0
 8008a76:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	7b1b      	ldrb	r3, [r3, #12]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d00e      	beq.n	8008a9e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	7b1b      	ldrb	r3, [r3, #12]
 8008a84:	4619      	mov	r1, r3
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f002 f859 	bl	800ab3e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	7b1b      	ldrb	r3, [r3, #12]
 8008a90:	4619      	mov	r1, r3
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f002 f884 	bl	800aba0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	7b5b      	ldrb	r3, [r3, #13]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00e      	beq.n	8008ac4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	7b5b      	ldrb	r3, [r3, #13]
 8008aaa:	4619      	mov	r1, r3
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f002 f846 	bl	800ab3e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	7b5b      	ldrb	r3, [r3, #13]
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f002 f871 	bl	800aba0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008aca:	69db      	ldr	r3, [r3, #28]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d00b      	beq.n	8008ae8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ad6:	69db      	ldr	r3, [r3, #28]
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f005 fb8b 	bl	800e1f4 <free>
    phost->pActiveClass->pData = 0U;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b084      	sub	sp, #16
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b00:	69db      	ldr	r3, [r3, #28]
 8008b02:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	3340      	adds	r3, #64	; 0x40
 8008b08:	4619      	mov	r1, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 f8b1 	bl	8008c72 <GetLineCoding>
 8008b10:	4603      	mov	r3, r0
 8008b12:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008b14:	7afb      	ldrb	r3, [r7, #11]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d105      	bne.n	8008b26 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b20:	2102      	movs	r1, #2
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008b26:	7afb      	ldrb	r3, [r7, #11]
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3710      	adds	r7, #16
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b46:	69db      	ldr	r3, [r3, #28]
 8008b48:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008b50:	2b04      	cmp	r3, #4
 8008b52:	d877      	bhi.n	8008c44 <USBH_CDC_Process+0x114>
 8008b54:	a201      	add	r2, pc, #4	; (adr r2, 8008b5c <USBH_CDC_Process+0x2c>)
 8008b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b5a:	bf00      	nop
 8008b5c:	08008b71 	.word	0x08008b71
 8008b60:	08008b77 	.word	0x08008b77
 8008b64:	08008ba7 	.word	0x08008ba7
 8008b68:	08008c1b 	.word	0x08008c1b
 8008b6c:	08008c29 	.word	0x08008c29
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008b70:	2300      	movs	r3, #0
 8008b72:	73fb      	strb	r3, [r7, #15]
      break;
 8008b74:	e06d      	b.n	8008c52 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 f897 	bl	8008cb0 <SetLineCoding>
 8008b82:	4603      	mov	r3, r0
 8008b84:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008b86:	7bbb      	ldrb	r3, [r7, #14]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d104      	bne.n	8008b96 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	2202      	movs	r2, #2
 8008b90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008b94:	e058      	b.n	8008c48 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008b96:	7bbb      	ldrb	r3, [r7, #14]
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d055      	beq.n	8008c48 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	2204      	movs	r2, #4
 8008ba0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008ba4:	e050      	b.n	8008c48 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	3340      	adds	r3, #64	; 0x40
 8008baa:	4619      	mov	r1, r3
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 f860 	bl	8008c72 <GetLineCoding>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008bb6:	7bbb      	ldrb	r3, [r7, #14]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d126      	bne.n	8008c0a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bce:	791b      	ldrb	r3, [r3, #4]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d13b      	bne.n	8008c4c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bde:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d133      	bne.n	8008c4c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bee:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d12b      	bne.n	8008c4c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bfc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d124      	bne.n	8008c4c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 f982 	bl	8008f0c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008c08:	e020      	b.n	8008c4c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008c0a:	7bbb      	ldrb	r3, [r7, #14]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d01d      	beq.n	8008c4c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	2204      	movs	r2, #4
 8008c14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008c18:	e018      	b.n	8008c4c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 f867 	bl	8008cee <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 f8f6 	bl	8008e12 <CDC_ProcessReception>
      break;
 8008c26:	e014      	b.n	8008c52 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008c28:	2100      	movs	r1, #0
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f001 f957 	bl	8009ede <USBH_ClrFeature>
 8008c30:	4603      	mov	r3, r0
 8008c32:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008c34:	7bbb      	ldrb	r3, [r7, #14]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d10a      	bne.n	8008c50 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008c42:	e005      	b.n	8008c50 <USBH_CDC_Process+0x120>

    default:
      break;
 8008c44:	bf00      	nop
 8008c46:	e004      	b.n	8008c52 <USBH_CDC_Process+0x122>
      break;
 8008c48:	bf00      	nop
 8008c4a:	e002      	b.n	8008c52 <USBH_CDC_Process+0x122>
      break;
 8008c4c:	bf00      	nop
 8008c4e:	e000      	b.n	8008c52 <USBH_CDC_Process+0x122>
      break;
 8008c50:	bf00      	nop

  }

  return status;
 8008c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3710      	adds	r7, #16
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	370c      	adds	r7, #12
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr

08008c72 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b082      	sub	sp, #8
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
 8008c7a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	22a1      	movs	r2, #161	; 0xa1
 8008c80:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2221      	movs	r2, #33	; 0x21
 8008c86:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2207      	movs	r2, #7
 8008c98:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	2207      	movs	r2, #7
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f001 fbeb 	bl	800a47c <USBH_CtlReq>
 8008ca6:	4603      	mov	r3, r0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3708      	adds	r7, #8
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2221      	movs	r2, #33	; 0x21
 8008cbe:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2220      	movs	r2, #32
 8008cc4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2207      	movs	r2, #7
 8008cd6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	2207      	movs	r2, #7
 8008cdc:	4619      	mov	r1, r3
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f001 fbcc 	bl	800a47c <USBH_CtlReq>
 8008ce4:	4603      	mov	r3, r0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3708      	adds	r7, #8
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}

08008cee <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008cee:	b580      	push	{r7, lr}
 8008cf0:	b086      	sub	sp, #24
 8008cf2:	af02      	add	r7, sp, #8
 8008cf4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cfc:	69db      	ldr	r3, [r3, #28]
 8008cfe:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008d00:	2300      	movs	r3, #0
 8008d02:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d002      	beq.n	8008d14 <CDC_ProcessTransmission+0x26>
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	d023      	beq.n	8008d5a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008d12:	e07a      	b.n	8008e0a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	8b12      	ldrh	r2, [r2, #24]
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d90b      	bls.n	8008d38 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	69d9      	ldr	r1, [r3, #28]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	8b1a      	ldrh	r2, [r3, #24]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	7b5b      	ldrb	r3, [r3, #13]
 8008d2c:	2001      	movs	r0, #1
 8008d2e:	9000      	str	r0, [sp, #0]
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f001 fea2 	bl	800aa7a <USBH_BulkSendData>
 8008d36:	e00b      	b.n	8008d50 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8008d40:	b29a      	uxth	r2, r3
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	7b5b      	ldrb	r3, [r3, #13]
 8008d46:	2001      	movs	r0, #1
 8008d48:	9000      	str	r0, [sp, #0]
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f001 fe95 	bl	800aa7a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2202      	movs	r2, #2
 8008d54:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008d58:	e057      	b.n	8008e0a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	7b5b      	ldrb	r3, [r3, #13]
 8008d5e:	4619      	mov	r1, r3
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f005 f991 	bl	800e088 <USBH_LL_GetURBState>
 8008d66:	4603      	mov	r3, r0
 8008d68:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008d6a:	7afb      	ldrb	r3, [r7, #11]
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d136      	bne.n	8008dde <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d74:	68fa      	ldr	r2, [r7, #12]
 8008d76:	8b12      	ldrh	r2, [r2, #24]
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d90e      	bls.n	8008d9a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	8b12      	ldrh	r2, [r2, #24]
 8008d84:	1a9a      	subs	r2, r3, r2
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	69db      	ldr	r3, [r3, #28]
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	8b12      	ldrh	r2, [r2, #24]
 8008d92:	441a      	add	r2, r3
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	61da      	str	r2, [r3, #28]
 8008d98:	e002      	b.n	8008da0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d004      	beq.n	8008db2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8008db0:	e006      	b.n	8008dc0 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f892 	bl	8008ee4 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2204      	movs	r2, #4
 8008dc4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f002 f8d2 	bl	800af80 <osMessageQueuePut>
      break;
 8008ddc:	e014      	b.n	8008e08 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8008dde:	7afb      	ldrb	r3, [r7, #11]
 8008de0:	2b02      	cmp	r3, #2
 8008de2:	d111      	bne.n	8008e08 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2201      	movs	r2, #1
 8008de8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2204      	movs	r2, #4
 8008df0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008e00:	2300      	movs	r3, #0
 8008e02:	2200      	movs	r2, #0
 8008e04:	f002 f8bc 	bl	800af80 <osMessageQueuePut>
      break;
 8008e08:	bf00      	nop
  }
}
 8008e0a:	bf00      	nop
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b086      	sub	sp, #24
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e20:	69db      	ldr	r3, [r3, #28]
 8008e22:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008e24:	2300      	movs	r3, #0
 8008e26:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008e2e:	2b03      	cmp	r3, #3
 8008e30:	d002      	beq.n	8008e38 <CDC_ProcessReception+0x26>
 8008e32:	2b04      	cmp	r3, #4
 8008e34:	d00e      	beq.n	8008e54 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008e36:	e051      	b.n	8008edc <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	6a19      	ldr	r1, [r3, #32]
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	8b5a      	ldrh	r2, [r3, #26]
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	7b1b      	ldrb	r3, [r3, #12]
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f001 fe3d 	bl	800aac4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	2204      	movs	r2, #4
 8008e4e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008e52:	e043      	b.n	8008edc <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	7b1b      	ldrb	r3, [r3, #12]
 8008e58:	4619      	mov	r1, r3
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f005 f914 	bl	800e088 <USBH_LL_GetURBState>
 8008e60:	4603      	mov	r3, r0
 8008e62:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008e64:	7cfb      	ldrb	r3, [r7, #19]
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d137      	bne.n	8008eda <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	7b1b      	ldrb	r3, [r3, #12]
 8008e6e:	4619      	mov	r1, r3
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f005 f877 	bl	800df64 <USBH_LL_GetLastXferSize>
 8008e76:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d016      	beq.n	8008eb0 <CDC_ProcessReception+0x9e>
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	8b5b      	ldrh	r3, [r3, #26]
 8008e86:	461a      	mov	r2, r3
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d910      	bls.n	8008eb0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	1ad2      	subs	r2, r2, r3
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	6a1a      	ldr	r2, [r3, #32]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	441a      	add	r2, r3
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	2203      	movs	r2, #3
 8008eaa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8008eae:	e006      	b.n	8008ebe <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 f81d 	bl	8008ef8 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2204      	movs	r2, #4
 8008ec2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f002 f853 	bl	800af80 <osMessageQueuePut>
      break;
 8008eda:	bf00      	nop
  }
}
 8008edc:	bf00      	nop
 8008ede:	3718      	adds	r7, #24
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008eec:	bf00      	nop
 8008eee:	370c      	adds	r7, #12
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008f00:	bf00      	nop
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008f14:	bf00      	nop
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d101      	bne.n	8008f38 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008f34:	2302      	movs	r3, #2
 8008f36:	e044      	b.n	8008fc2 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	79fa      	ldrb	r2, [r7, #7]
 8008f3c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f000 f841 	bl	8008fd8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d003      	beq.n	8008f84 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	68ba      	ldr	r2, [r7, #8]
 8008f80:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8008f84:	2200      	movs	r2, #0
 8008f86:	2104      	movs	r1, #4
 8008f88:	2010      	movs	r0, #16
 8008f8a:	f001 ff86 	bl	800ae9a <osMessageQueueNew>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8008f96:	4b0d      	ldr	r3, [pc, #52]	; (8008fcc <USBH_Init+0xac>)
 8008f98:	4a0d      	ldr	r2, [pc, #52]	; (8008fd0 <USBH_Init+0xb0>)
 8008f9a:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8008f9c:	4b0b      	ldr	r3, [pc, #44]	; (8008fcc <USBH_Init+0xac>)
 8008f9e:	2280      	movs	r2, #128	; 0x80
 8008fa0:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8008fa2:	4b0a      	ldr	r3, [pc, #40]	; (8008fcc <USBH_Init+0xac>)
 8008fa4:	2218      	movs	r2, #24
 8008fa6:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8008fa8:	4a08      	ldr	r2, [pc, #32]	; (8008fcc <USBH_Init+0xac>)
 8008faa:	68f9      	ldr	r1, [r7, #12]
 8008fac:	4809      	ldr	r0, [pc, #36]	; (8008fd4 <USBH_Init+0xb4>)
 8008fae:	f001 fec7 	bl	800ad40 <osThreadNew>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f004 ff14 	bl	800dde8 <USBH_LL_Init>

  return USBH_OK;
 8008fc0:	2300      	movs	r3, #0
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	20000398 	.word	0x20000398
 8008fd0:	0800e56c 	.word	0x0800e56c
 8008fd4:	08009c55 	.word	0x08009c55

08008fd8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	60fb      	str	r3, [r7, #12]
 8008fe8:	e009      	b.n	8008ffe <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	33e0      	adds	r3, #224	; 0xe0
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	4413      	add	r3, r2
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	60fb      	str	r3, [r7, #12]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2b0f      	cmp	r3, #15
 8009002:	d9f2      	bls.n	8008fea <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009004:	2300      	movs	r3, #0
 8009006:	60fb      	str	r3, [r7, #12]
 8009008:	e009      	b.n	800901e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	4413      	add	r3, r2
 8009010:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009014:	2200      	movs	r2, #0
 8009016:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	3301      	adds	r3, #1
 800901c:	60fb      	str	r3, [r7, #12]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009024:	d3f1      	bcc.n	800900a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2201      	movs	r2, #1
 8009036:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2201      	movs	r2, #1
 8009044:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2240      	movs	r2, #64	; 0x40
 800904a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2201      	movs	r2, #1
 800905e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	3714      	adds	r7, #20
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009080:	b480      	push	{r7}
 8009082:	b085      	sub	sp, #20
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800908a:	2300      	movs	r3, #0
 800908c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d016      	beq.n	80090c2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10e      	bne.n	80090bc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80090a4:	1c59      	adds	r1, r3, #1
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	33de      	adds	r3, #222	; 0xde
 80090b0:	6839      	ldr	r1, [r7, #0]
 80090b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80090b6:	2300      	movs	r3, #0
 80090b8:	73fb      	strb	r3, [r7, #15]
 80090ba:	e004      	b.n	80090c6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80090bc:	2302      	movs	r3, #2
 80090be:	73fb      	strb	r3, [r7, #15]
 80090c0:	e001      	b.n	80090c6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80090c2:	2302      	movs	r3, #2
 80090c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80090c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3714      	adds	r7, #20
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	460b      	mov	r3, r1
 80090de:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80090e0:	2300      	movs	r3, #0
 80090e2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80090ea:	78fa      	ldrb	r2, [r7, #3]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d204      	bcs.n	80090fa <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	78fa      	ldrb	r2, [r7, #3]
 80090f4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80090f8:	e001      	b.n	80090fe <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80090fa:	2302      	movs	r3, #2
 80090fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80090fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009100:	4618      	mov	r0, r3
 8009102:	3714      	adds	r7, #20
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800910c:	b480      	push	{r7}
 800910e:	b087      	sub	sp, #28
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	4608      	mov	r0, r1
 8009116:	4611      	mov	r1, r2
 8009118:	461a      	mov	r2, r3
 800911a:	4603      	mov	r3, r0
 800911c:	70fb      	strb	r3, [r7, #3]
 800911e:	460b      	mov	r3, r1
 8009120:	70bb      	strb	r3, [r7, #2]
 8009122:	4613      	mov	r3, r2
 8009124:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009126:	2300      	movs	r3, #0
 8009128:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800912a:	2300      	movs	r3, #0
 800912c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009134:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009136:	e025      	b.n	8009184 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009138:	7dfb      	ldrb	r3, [r7, #23]
 800913a:	221a      	movs	r2, #26
 800913c:	fb02 f303 	mul.w	r3, r2, r3
 8009140:	3308      	adds	r3, #8
 8009142:	68fa      	ldr	r2, [r7, #12]
 8009144:	4413      	add	r3, r2
 8009146:	3302      	adds	r3, #2
 8009148:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	795b      	ldrb	r3, [r3, #5]
 800914e:	78fa      	ldrb	r2, [r7, #3]
 8009150:	429a      	cmp	r2, r3
 8009152:	d002      	beq.n	800915a <USBH_FindInterface+0x4e>
 8009154:	78fb      	ldrb	r3, [r7, #3]
 8009156:	2bff      	cmp	r3, #255	; 0xff
 8009158:	d111      	bne.n	800917e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800915e:	78ba      	ldrb	r2, [r7, #2]
 8009160:	429a      	cmp	r2, r3
 8009162:	d002      	beq.n	800916a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009164:	78bb      	ldrb	r3, [r7, #2]
 8009166:	2bff      	cmp	r3, #255	; 0xff
 8009168:	d109      	bne.n	800917e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800916e:	787a      	ldrb	r2, [r7, #1]
 8009170:	429a      	cmp	r2, r3
 8009172:	d002      	beq.n	800917a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009174:	787b      	ldrb	r3, [r7, #1]
 8009176:	2bff      	cmp	r3, #255	; 0xff
 8009178:	d101      	bne.n	800917e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800917a:	7dfb      	ldrb	r3, [r7, #23]
 800917c:	e006      	b.n	800918c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800917e:	7dfb      	ldrb	r3, [r7, #23]
 8009180:	3301      	adds	r3, #1
 8009182:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009184:	7dfb      	ldrb	r3, [r7, #23]
 8009186:	2b01      	cmp	r3, #1
 8009188:	d9d6      	bls.n	8009138 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800918a:	23ff      	movs	r3, #255	; 0xff
}
 800918c:	4618      	mov	r0, r3
 800918e:	371c      	adds	r7, #28
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f004 fe67 	bl	800de74 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80091a6:	2101      	movs	r1, #1
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f004 ff80 	bl	800e0ae <USBH_LL_DriverVBUS>

  return USBH_OK;
 80091ae:	2300      	movs	r3, #0
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3708      	adds	r7, #8
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b088      	sub	sp, #32
 80091bc:	af04      	add	r7, sp, #16
 80091be:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80091c0:	2302      	movs	r3, #2
 80091c2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80091c4:	2300      	movs	r3, #0
 80091c6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d102      	bne.n	80091da <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2203      	movs	r2, #3
 80091d8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	2b0b      	cmp	r3, #11
 80091e2:	f200 8247 	bhi.w	8009674 <USBH_Process+0x4bc>
 80091e6:	a201      	add	r2, pc, #4	; (adr r2, 80091ec <USBH_Process+0x34>)
 80091e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ec:	0800921d 	.word	0x0800921d
 80091f0:	0800926b 	.word	0x0800926b
 80091f4:	080092ef 	.word	0x080092ef
 80091f8:	080095f3 	.word	0x080095f3
 80091fc:	08009675 	.word	0x08009675
 8009200:	080093af 	.word	0x080093af
 8009204:	0800957d 	.word	0x0800957d
 8009208:	08009401 	.word	0x08009401
 800920c:	0800943d 	.word	0x0800943d
 8009210:	08009477 	.word	0x08009477
 8009214:	080094d5 	.word	0x080094d5
 8009218:	080095db 	.word	0x080095db
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009222:	b2db      	uxtb	r3, r3
 8009224:	2b00      	cmp	r3, #0
 8009226:	f000 8227 	beq.w	8009678 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2201      	movs	r2, #1
 800922e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009230:	20c8      	movs	r0, #200	; 0xc8
 8009232:	f004 ff83 	bl	800e13c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f004 fe79 	bl	800df2e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2201      	movs	r2, #1
 8009250:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009260:	2300      	movs	r3, #0
 8009262:	2200      	movs	r2, #0
 8009264:	f001 fe8c 	bl	800af80 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8009268:	e206      	b.n	8009678 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009270:	2b01      	cmp	r3, #1
 8009272:	d107      	bne.n	8009284 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2202      	movs	r2, #2
 8009280:	701a      	strb	r2, [r3, #0]
 8009282:	e025      	b.n	80092d0 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800928a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800928e:	d914      	bls.n	80092ba <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009296:	3301      	adds	r3, #1
 8009298:	b2da      	uxtb	r2, r3
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80092a6:	2b03      	cmp	r3, #3
 80092a8:	d903      	bls.n	80092b2 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	220d      	movs	r2, #13
 80092ae:	701a      	strb	r2, [r3, #0]
 80092b0:	e00e      	b.n	80092d0 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	701a      	strb	r2, [r3, #0]
 80092b8:	e00a      	b.n	80092d0 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80092c0:	f103 020a 	add.w	r2, r3, #10
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80092ca:	200a      	movs	r0, #10
 80092cc:	f004 ff36 	bl	800e13c <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80092e4:	2300      	movs	r3, #0
 80092e6:	2200      	movs	r2, #0
 80092e8:	f001 fe4a 	bl	800af80 <osMessageQueuePut>
#endif
#endif
      break;
 80092ec:	e1cb      	b.n	8009686 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d005      	beq.n	8009304 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80092fe:	2104      	movs	r1, #4
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009304:	2064      	movs	r0, #100	; 0x64
 8009306:	f004 ff19 	bl	800e13c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f004 fde8 	bl	800dee0 <USBH_LL_GetSpeed>
 8009310:	4603      	mov	r3, r0
 8009312:	461a      	mov	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2205      	movs	r2, #5
 800931e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009320:	2100      	movs	r1, #0
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f001 fc1b 	bl	800ab5e <USBH_AllocPipe>
 8009328:	4603      	mov	r3, r0
 800932a:	461a      	mov	r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009330:	2180      	movs	r1, #128	; 0x80
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f001 fc13 	bl	800ab5e <USBH_AllocPipe>
 8009338:	4603      	mov	r3, r0
 800933a:	461a      	mov	r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	7919      	ldrb	r1, [r3, #4]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009354:	b292      	uxth	r2, r2
 8009356:	9202      	str	r2, [sp, #8]
 8009358:	2200      	movs	r2, #0
 800935a:	9201      	str	r2, [sp, #4]
 800935c:	9300      	str	r3, [sp, #0]
 800935e:	4603      	mov	r3, r0
 8009360:	2280      	movs	r2, #128	; 0x80
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f001 fbcc 	bl	800ab00 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	7959      	ldrb	r1, [r3, #5]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800937c:	b292      	uxth	r2, r2
 800937e:	9202      	str	r2, [sp, #8]
 8009380:	2200      	movs	r2, #0
 8009382:	9201      	str	r2, [sp, #4]
 8009384:	9300      	str	r3, [sp, #0]
 8009386:	4603      	mov	r3, r0
 8009388:	2200      	movs	r2, #0
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f001 fbb8 	bl	800ab00 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80093a4:	2300      	movs	r3, #0
 80093a6:	2200      	movs	r2, #0
 80093a8:	f001 fdea 	bl	800af80 <osMessageQueuePut>
#endif
#endif
      break;
 80093ac:	e16b      	b.n	8009686 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 f96e 	bl	8009690 <USBH_HandleEnum>
 80093b4:	4603      	mov	r3, r0
 80093b6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80093b8:	7bbb      	ldrb	r3, [r7, #14]
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	2b00      	cmp	r3, #0
 80093be:	f040 815d 	bne.w	800967c <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d103      	bne.n	80093dc <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2208      	movs	r2, #8
 80093d8:	701a      	strb	r2, [r3, #0]
 80093da:	e002      	b.n	80093e2 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2207      	movs	r2, #7
 80093e0:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2205      	movs	r2, #5
 80093e6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80093f6:	2300      	movs	r3, #0
 80093f8:	2200      	movs	r2, #0
 80093fa:	f001 fdc1 	bl	800af80 <osMessageQueuePut>
#endif
#endif
      }
      break;
 80093fe:	e13d      	b.n	800967c <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009406:	2b00      	cmp	r3, #0
 8009408:	f000 813a 	beq.w	8009680 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009412:	2101      	movs	r1, #1
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2208      	movs	r2, #8
 800941c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2205      	movs	r2, #5
 8009422:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009432:	2300      	movs	r3, #0
 8009434:	2200      	movs	r2, #0
 8009436:	f001 fda3 	bl	800af80 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800943a:	e121      	b.n	8009680 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009442:	b29b      	uxth	r3, r3
 8009444:	4619      	mov	r1, r3
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 fd02 	bl	8009e50 <USBH_SetCfg>
 800944c:	4603      	mov	r3, r0
 800944e:	2b00      	cmp	r3, #0
 8009450:	d102      	bne.n	8009458 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2209      	movs	r2, #9
 8009456:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2201      	movs	r2, #1
 800945c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800946c:	2300      	movs	r3, #0
 800946e:	2200      	movs	r2, #0
 8009470:	f001 fd86 	bl	800af80 <osMessageQueuePut>
#endif
#endif
      break;
 8009474:	e107      	b.n	8009686 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800947c:	f003 0320 	and.w	r3, r3, #32
 8009480:	2b00      	cmp	r3, #0
 8009482:	d015      	beq.n	80094b0 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009484:	2101      	movs	r1, #1
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 fd05 	bl	8009e96 <USBH_SetFeature>
 800948c:	4603      	mov	r3, r0
 800948e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009490:	7bbb      	ldrb	r3, [r7, #14]
 8009492:	b2db      	uxtb	r3, r3
 8009494:	2b00      	cmp	r3, #0
 8009496:	d103      	bne.n	80094a0 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	220a      	movs	r2, #10
 800949c:	701a      	strb	r2, [r3, #0]
 800949e:	e00a      	b.n	80094b6 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 80094a0:	7bbb      	ldrb	r3, [r7, #14]
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	2b03      	cmp	r3, #3
 80094a6:	d106      	bne.n	80094b6 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	220a      	movs	r2, #10
 80094ac:	701a      	strb	r2, [r3, #0]
 80094ae:	e002      	b.n	80094b6 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	220a      	movs	r2, #10
 80094b4:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2201      	movs	r2, #1
 80094ba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80094ca:	2300      	movs	r3, #0
 80094cc:	2200      	movs	r2, #0
 80094ce:	f001 fd57 	bl	800af80 <osMessageQueuePut>
#endif
#endif
      break;
 80094d2:	e0d8      	b.n	8009686 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d03f      	beq.n	800955e <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80094e6:	2300      	movs	r3, #0
 80094e8:	73fb      	strb	r3, [r7, #15]
 80094ea:	e016      	b.n	800951a <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80094ec:	7bfa      	ldrb	r2, [r7, #15]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	32de      	adds	r2, #222	; 0xde
 80094f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094f6:	791a      	ldrb	r2, [r3, #4]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80094fe:	429a      	cmp	r2, r3
 8009500:	d108      	bne.n	8009514 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009502:	7bfa      	ldrb	r2, [r7, #15]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	32de      	adds	r2, #222	; 0xde
 8009508:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009512:	e005      	b.n	8009520 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009514:	7bfb      	ldrb	r3, [r7, #15]
 8009516:	3301      	adds	r3, #1
 8009518:	73fb      	strb	r3, [r7, #15]
 800951a:	7bfb      	ldrb	r3, [r7, #15]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d0e5      	beq.n	80094ec <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009526:	2b00      	cmp	r3, #0
 8009528:	d016      	beq.n	8009558 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	4798      	blx	r3
 8009536:	4603      	mov	r3, r0
 8009538:	2b00      	cmp	r3, #0
 800953a:	d109      	bne.n	8009550 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2206      	movs	r2, #6
 8009540:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009548:	2103      	movs	r1, #3
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	4798      	blx	r3
 800954e:	e006      	b.n	800955e <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	220d      	movs	r2, #13
 8009554:	701a      	strb	r2, [r3, #0]
 8009556:	e002      	b.n	800955e <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	220d      	movs	r2, #13
 800955c:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2205      	movs	r2, #5
 8009562:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009572:	2300      	movs	r3, #0
 8009574:	2200      	movs	r2, #0
 8009576:	f001 fd03 	bl	800af80 <osMessageQueuePut>
#endif
#endif
      break;
 800957a:	e084      	b.n	8009686 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009582:	2b00      	cmp	r3, #0
 8009584:	d017      	beq.n	80095b6 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800958c:	691b      	ldr	r3, [r3, #16]
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	4798      	blx	r3
 8009592:	4603      	mov	r3, r0
 8009594:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009596:	7bbb      	ldrb	r3, [r7, #14]
 8009598:	b2db      	uxtb	r3, r3
 800959a:	2b00      	cmp	r3, #0
 800959c:	d103      	bne.n	80095a6 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	220b      	movs	r2, #11
 80095a2:	701a      	strb	r2, [r3, #0]
 80095a4:	e00a      	b.n	80095bc <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 80095a6:	7bbb      	ldrb	r3, [r7, #14]
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	d106      	bne.n	80095bc <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	220d      	movs	r2, #13
 80095b2:	701a      	strb	r2, [r3, #0]
 80095b4:	e002      	b.n	80095bc <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	220d      	movs	r2, #13
 80095ba:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2205      	movs	r2, #5
 80095c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80095d0:	2300      	movs	r3, #0
 80095d2:	2200      	movs	r2, #0
 80095d4:	f001 fcd4 	bl	800af80 <osMessageQueuePut>
#endif
#endif
      break;
 80095d8:	e055      	b.n	8009686 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d04f      	beq.n	8009684 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095ea:	695b      	ldr	r3, [r3, #20]
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	4798      	blx	r3
      }
      break;
 80095f0:	e048      	b.n	8009684 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2200      	movs	r2, #0
 80095f6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f7ff fcec 	bl	8008fd8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009606:	2b00      	cmp	r3, #0
 8009608:	d009      	beq.n	800961e <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009624:	2b00      	cmp	r3, #0
 8009626:	d005      	beq.n	8009634 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800962e:	2105      	movs	r1, #5
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800963a:	b2db      	uxtb	r3, r3
 800963c:	2b01      	cmp	r3, #1
 800963e:	d107      	bne.n	8009650 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f7ff fda5 	bl	8009198 <USBH_Start>
 800964e:	e002      	b.n	8009656 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f004 fc0f 	bl	800de74 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2201      	movs	r2, #1
 800965a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800966a:	2300      	movs	r3, #0
 800966c:	2200      	movs	r2, #0
 800966e:	f001 fc87 	bl	800af80 <osMessageQueuePut>
#endif
#endif
      break;
 8009672:	e008      	b.n	8009686 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 8009674:	bf00      	nop
 8009676:	e006      	b.n	8009686 <USBH_Process+0x4ce>
      break;
 8009678:	bf00      	nop
 800967a:	e004      	b.n	8009686 <USBH_Process+0x4ce>
      break;
 800967c:	bf00      	nop
 800967e:	e002      	b.n	8009686 <USBH_Process+0x4ce>
    break;
 8009680:	bf00      	nop
 8009682:	e000      	b.n	8009686 <USBH_Process+0x4ce>
      break;
 8009684:	bf00      	nop
  }
  return USBH_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3710      	adds	r7, #16
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b088      	sub	sp, #32
 8009694:	af04      	add	r7, sp, #16
 8009696:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009698:	2301      	movs	r3, #1
 800969a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800969c:	2301      	movs	r3, #1
 800969e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	785b      	ldrb	r3, [r3, #1]
 80096a4:	2b07      	cmp	r3, #7
 80096a6:	f200 8208 	bhi.w	8009aba <USBH_HandleEnum+0x42a>
 80096aa:	a201      	add	r2, pc, #4	; (adr r2, 80096b0 <USBH_HandleEnum+0x20>)
 80096ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b0:	080096d1 	.word	0x080096d1
 80096b4:	0800978f 	.word	0x0800978f
 80096b8:	080097f9 	.word	0x080097f9
 80096bc:	08009887 	.word	0x08009887
 80096c0:	080098f1 	.word	0x080098f1
 80096c4:	08009961 	.word	0x08009961
 80096c8:	080099fd 	.word	0x080099fd
 80096cc:	08009a7b 	.word	0x08009a7b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80096d0:	2108      	movs	r1, #8
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 faec 	bl	8009cb0 <USBH_Get_DevDesc>
 80096d8:	4603      	mov	r3, r0
 80096da:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80096dc:	7bbb      	ldrb	r3, [r7, #14]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d130      	bne.n	8009744 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	7919      	ldrb	r1, [r3, #4]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009706:	b292      	uxth	r2, r2
 8009708:	9202      	str	r2, [sp, #8]
 800970a:	2200      	movs	r2, #0
 800970c:	9201      	str	r2, [sp, #4]
 800970e:	9300      	str	r3, [sp, #0]
 8009710:	4603      	mov	r3, r0
 8009712:	2280      	movs	r2, #128	; 0x80
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f001 f9f3 	bl	800ab00 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	7959      	ldrb	r1, [r3, #5]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800972e:	b292      	uxth	r2, r2
 8009730:	9202      	str	r2, [sp, #8]
 8009732:	2200      	movs	r2, #0
 8009734:	9201      	str	r2, [sp, #4]
 8009736:	9300      	str	r3, [sp, #0]
 8009738:	4603      	mov	r3, r0
 800973a:	2200      	movs	r2, #0
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f001 f9df 	bl	800ab00 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009742:	e1bc      	b.n	8009abe <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009744:	7bbb      	ldrb	r3, [r7, #14]
 8009746:	2b03      	cmp	r3, #3
 8009748:	f040 81b9 	bne.w	8009abe <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009752:	3301      	adds	r3, #1
 8009754:	b2da      	uxtb	r2, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009762:	2b03      	cmp	r3, #3
 8009764:	d903      	bls.n	800976e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	220d      	movs	r2, #13
 800976a:	701a      	strb	r2, [r3, #0]
      break;
 800976c:	e1a7      	b.n	8009abe <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	795b      	ldrb	r3, [r3, #5]
 8009772:	4619      	mov	r1, r3
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f001 fa13 	bl	800aba0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	791b      	ldrb	r3, [r3, #4]
 800977e:	4619      	mov	r1, r3
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f001 fa0d 	bl	800aba0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2200      	movs	r2, #0
 800978a:	701a      	strb	r2, [r3, #0]
      break;
 800978c:	e197      	b.n	8009abe <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800978e:	2112      	movs	r1, #18
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 fa8d 	bl	8009cb0 <USBH_Get_DevDesc>
 8009796:	4603      	mov	r3, r0
 8009798:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800979a:	7bbb      	ldrb	r3, [r7, #14]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d103      	bne.n	80097a8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2202      	movs	r2, #2
 80097a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80097a6:	e18c      	b.n	8009ac2 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80097a8:	7bbb      	ldrb	r3, [r7, #14]
 80097aa:	2b03      	cmp	r3, #3
 80097ac:	f040 8189 	bne.w	8009ac2 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80097b6:	3301      	adds	r3, #1
 80097b8:	b2da      	uxtb	r2, r3
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80097c6:	2b03      	cmp	r3, #3
 80097c8:	d903      	bls.n	80097d2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	220d      	movs	r2, #13
 80097ce:	701a      	strb	r2, [r3, #0]
      break;
 80097d0:	e177      	b.n	8009ac2 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	795b      	ldrb	r3, [r3, #5]
 80097d6:	4619      	mov	r1, r3
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f001 f9e1 	bl	800aba0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	791b      	ldrb	r3, [r3, #4]
 80097e2:	4619      	mov	r1, r3
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f001 f9db 	bl	800aba0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	701a      	strb	r2, [r3, #0]
      break;
 80097f6:	e164      	b.n	8009ac2 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80097f8:	2101      	movs	r1, #1
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 fb04 	bl	8009e08 <USBH_SetAddress>
 8009800:	4603      	mov	r3, r0
 8009802:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009804:	7bbb      	ldrb	r3, [r7, #14]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d132      	bne.n	8009870 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800980a:	2002      	movs	r0, #2
 800980c:	f004 fc96 	bl	800e13c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2203      	movs	r2, #3
 800981c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	7919      	ldrb	r1, [r3, #4]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009832:	b292      	uxth	r2, r2
 8009834:	9202      	str	r2, [sp, #8]
 8009836:	2200      	movs	r2, #0
 8009838:	9201      	str	r2, [sp, #4]
 800983a:	9300      	str	r3, [sp, #0]
 800983c:	4603      	mov	r3, r0
 800983e:	2280      	movs	r2, #128	; 0x80
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f001 f95d 	bl	800ab00 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	7959      	ldrb	r1, [r3, #5]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800985a:	b292      	uxth	r2, r2
 800985c:	9202      	str	r2, [sp, #8]
 800985e:	2200      	movs	r2, #0
 8009860:	9201      	str	r2, [sp, #4]
 8009862:	9300      	str	r3, [sp, #0]
 8009864:	4603      	mov	r3, r0
 8009866:	2200      	movs	r2, #0
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f001 f949 	bl	800ab00 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800986e:	e12a      	b.n	8009ac6 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009870:	7bbb      	ldrb	r3, [r7, #14]
 8009872:	2b03      	cmp	r3, #3
 8009874:	f040 8127 	bne.w	8009ac6 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	220d      	movs	r2, #13
 800987c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	705a      	strb	r2, [r3, #1]
      break;
 8009884:	e11f      	b.n	8009ac6 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009886:	2109      	movs	r1, #9
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 fa39 	bl	8009d00 <USBH_Get_CfgDesc>
 800988e:	4603      	mov	r3, r0
 8009890:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009892:	7bbb      	ldrb	r3, [r7, #14]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d103      	bne.n	80098a0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2204      	movs	r2, #4
 800989c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800989e:	e114      	b.n	8009aca <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80098a0:	7bbb      	ldrb	r3, [r7, #14]
 80098a2:	2b03      	cmp	r3, #3
 80098a4:	f040 8111 	bne.w	8009aca <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80098ae:	3301      	adds	r3, #1
 80098b0:	b2da      	uxtb	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80098be:	2b03      	cmp	r3, #3
 80098c0:	d903      	bls.n	80098ca <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	220d      	movs	r2, #13
 80098c6:	701a      	strb	r2, [r3, #0]
      break;
 80098c8:	e0ff      	b.n	8009aca <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	795b      	ldrb	r3, [r3, #5]
 80098ce:	4619      	mov	r1, r3
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f001 f965 	bl	800aba0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	791b      	ldrb	r3, [r3, #4]
 80098da:	4619      	mov	r1, r3
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f001 f95f 	bl	800aba0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	701a      	strb	r2, [r3, #0]
      break;
 80098ee:	e0ec      	b.n	8009aca <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80098f6:	4619      	mov	r1, r3
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 fa01 	bl	8009d00 <USBH_Get_CfgDesc>
 80098fe:	4603      	mov	r3, r0
 8009900:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009902:	7bbb      	ldrb	r3, [r7, #14]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d103      	bne.n	8009910 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2205      	movs	r2, #5
 800990c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800990e:	e0de      	b.n	8009ace <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009910:	7bbb      	ldrb	r3, [r7, #14]
 8009912:	2b03      	cmp	r3, #3
 8009914:	f040 80db 	bne.w	8009ace <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800991e:	3301      	adds	r3, #1
 8009920:	b2da      	uxtb	r2, r3
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800992e:	2b03      	cmp	r3, #3
 8009930:	d903      	bls.n	800993a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	220d      	movs	r2, #13
 8009936:	701a      	strb	r2, [r3, #0]
      break;
 8009938:	e0c9      	b.n	8009ace <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	795b      	ldrb	r3, [r3, #5]
 800993e:	4619      	mov	r1, r3
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f001 f92d 	bl	800aba0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	791b      	ldrb	r3, [r3, #4]
 800994a:	4619      	mov	r1, r3
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f001 f927 	bl	800aba0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2200      	movs	r2, #0
 8009956:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	701a      	strb	r2, [r3, #0]
      break;
 800995e:	e0b6      	b.n	8009ace <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009966:	2b00      	cmp	r3, #0
 8009968:	d036      	beq.n	80099d8 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009976:	23ff      	movs	r3, #255	; 0xff
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 f9e5 	bl	8009d48 <USBH_Get_StringDesc>
 800997e:	4603      	mov	r3, r0
 8009980:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009982:	7bbb      	ldrb	r3, [r7, #14]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d111      	bne.n	80099ac <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2206      	movs	r2, #6
 800998c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2205      	movs	r2, #5
 8009992:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80099a2:	2300      	movs	r3, #0
 80099a4:	2200      	movs	r2, #0
 80099a6:	f001 faeb 	bl	800af80 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80099aa:	e092      	b.n	8009ad2 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80099ac:	7bbb      	ldrb	r3, [r7, #14]
 80099ae:	2b03      	cmp	r3, #3
 80099b0:	f040 808f 	bne.w	8009ad2 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2206      	movs	r2, #6
 80099b8:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2205      	movs	r2, #5
 80099be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80099ce:	2300      	movs	r3, #0
 80099d0:	2200      	movs	r2, #0
 80099d2:	f001 fad5 	bl	800af80 <osMessageQueuePut>
      break;
 80099d6:	e07c      	b.n	8009ad2 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2206      	movs	r2, #6
 80099dc:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2205      	movs	r2, #5
 80099e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80099f2:	2300      	movs	r3, #0
 80099f4:	2200      	movs	r2, #0
 80099f6:	f001 fac3 	bl	800af80 <osMessageQueuePut>
      break;
 80099fa:	e06a      	b.n	8009ad2 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d027      	beq.n	8009a56 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009a12:	23ff      	movs	r3, #255	; 0xff
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 f997 	bl	8009d48 <USBH_Get_StringDesc>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009a1e:	7bbb      	ldrb	r3, [r7, #14]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d103      	bne.n	8009a2c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2207      	movs	r2, #7
 8009a28:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009a2a:	e054      	b.n	8009ad6 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a2c:	7bbb      	ldrb	r3, [r7, #14]
 8009a2e:	2b03      	cmp	r3, #3
 8009a30:	d151      	bne.n	8009ad6 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2207      	movs	r2, #7
 8009a36:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2205      	movs	r2, #5
 8009a3c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f001 fa96 	bl	800af80 <osMessageQueuePut>
      break;
 8009a54:	e03f      	b.n	8009ad6 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2207      	movs	r2, #7
 8009a5a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2205      	movs	r2, #5
 8009a60:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009a70:	2300      	movs	r3, #0
 8009a72:	2200      	movs	r2, #0
 8009a74:	f001 fa84 	bl	800af80 <osMessageQueuePut>
      break;
 8009a78:	e02d      	b.n	8009ad6 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d017      	beq.n	8009ab4 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009a90:	23ff      	movs	r3, #255	; 0xff
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 f958 	bl	8009d48 <USBH_Get_StringDesc>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009a9c:	7bbb      	ldrb	r3, [r7, #14]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d102      	bne.n	8009aa8 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009aa6:	e018      	b.n	8009ada <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009aa8:	7bbb      	ldrb	r3, [r7, #14]
 8009aaa:	2b03      	cmp	r3, #3
 8009aac:	d115      	bne.n	8009ada <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	73fb      	strb	r3, [r7, #15]
      break;
 8009ab2:	e012      	b.n	8009ada <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ab8:	e00f      	b.n	8009ada <USBH_HandleEnum+0x44a>

    default:
      break;
 8009aba:	bf00      	nop
 8009abc:	e00e      	b.n	8009adc <USBH_HandleEnum+0x44c>
      break;
 8009abe:	bf00      	nop
 8009ac0:	e00c      	b.n	8009adc <USBH_HandleEnum+0x44c>
      break;
 8009ac2:	bf00      	nop
 8009ac4:	e00a      	b.n	8009adc <USBH_HandleEnum+0x44c>
      break;
 8009ac6:	bf00      	nop
 8009ac8:	e008      	b.n	8009adc <USBH_HandleEnum+0x44c>
      break;
 8009aca:	bf00      	nop
 8009acc:	e006      	b.n	8009adc <USBH_HandleEnum+0x44c>
      break;
 8009ace:	bf00      	nop
 8009ad0:	e004      	b.n	8009adc <USBH_HandleEnum+0x44c>
      break;
 8009ad2:	bf00      	nop
 8009ad4:	e002      	b.n	8009adc <USBH_HandleEnum+0x44c>
      break;
 8009ad6:	bf00      	nop
 8009ad8:	e000      	b.n	8009adc <USBH_HandleEnum+0x44c>
      break;
 8009ada:	bf00      	nop
  }
  return Status;
 8009adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3710      	adds	r7, #16
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop

08009ae8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	683a      	ldr	r2, [r7, #0]
 8009af6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009afa:	bf00      	nop
 8009afc:	370c      	adds	r7, #12
 8009afe:	46bd      	mov	sp, r7
 8009b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b04:	4770      	bx	lr

08009b06 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b082      	sub	sp, #8
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009b14:	1c5a      	adds	r2, r3, #1
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 f804 	bl	8009b2a <USBH_HandleSof>
}
 8009b22:	bf00      	nop
 8009b24:	3708      	adds	r7, #8
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}

08009b2a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009b2a:	b580      	push	{r7, lr}
 8009b2c:	b082      	sub	sp, #8
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	2b0b      	cmp	r3, #11
 8009b3a:	d10a      	bne.n	8009b52 <USBH_HandleSof+0x28>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d005      	beq.n	8009b52 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b4c:	699b      	ldr	r3, [r3, #24]
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	4798      	blx	r3
  }
}
 8009b52:	bf00      	nop
 8009b54:	3708      	adds	r7, #8
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b082      	sub	sp, #8
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2201      	movs	r2, #1
 8009b66:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009b7e:	2300      	movs	r3, #0
 8009b80:	2200      	movs	r2, #0
 8009b82:	f001 f9fd 	bl	800af80 <osMessageQueuePut>
#endif
#endif

  return;
 8009b86:	bf00      	nop
}
 8009b88:	3708      	adds	r7, #8
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}

08009b8e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009b8e:	b480      	push	{r7}
 8009b90:	b083      	sub	sp, #12
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009b9e:	bf00      	nop
}
 8009ba0:	370c      	adds	r7, #12
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr

08009baa <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b082      	sub	sp, #8
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009bde:	2300      	movs	r3, #0
 8009be0:	2200      	movs	r2, #0
 8009be2:	f001 f9cd 	bl	800af80 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8009be6:	2300      	movs	r3, #0
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3708      	adds	r7, #8
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f004 f94a 	bl	800deaa <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	791b      	ldrb	r3, [r3, #4]
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 ffbf 	bl	800aba0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	795b      	ldrb	r3, [r3, #5]
 8009c26:	4619      	mov	r1, r3
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 ffb9 	bl	800aba0 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2201      	movs	r2, #1
 8009c32:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009c42:	2300      	movs	r3, #0
 8009c44:	2200      	movs	r2, #0
 8009c46:	f001 f99b 	bl	800af80 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8009c4a:	2300      	movs	r3, #0
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3708      	adds	r7, #8
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8009c68:	f04f 33ff 	mov.w	r3, #4294967295
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f001 f9e7 	bl	800b040 <osMessageQueueGet>
 8009c72:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d1f0      	bne.n	8009c5c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f7ff fa9c 	bl	80091b8 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8009c80:	e7ec      	b.n	8009c5c <USBH_Process_OS+0x8>

08009c82 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8009c82:	b580      	push	{r7, lr}
 8009c84:	b082      	sub	sp, #8
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f001 f96d 	bl	800af80 <osMessageQueuePut>
#endif

  return USBH_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3708      	adds	r7, #8
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b086      	sub	sp, #24
 8009cb4:	af02      	add	r7, sp, #8
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	460b      	mov	r3, r1
 8009cba:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009cc2:	78fb      	ldrb	r3, [r7, #3]
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	9300      	str	r3, [sp, #0]
 8009cc8:	4613      	mov	r3, r2
 8009cca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009cce:	2100      	movs	r1, #0
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 f864 	bl	8009d9e <USBH_GetDescriptor>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8009cda:	7bfb      	ldrb	r3, [r7, #15]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d10a      	bne.n	8009cf6 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009cec:	78fa      	ldrb	r2, [r7, #3]
 8009cee:	b292      	uxth	r2, r2
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	f000 f919 	bl	8009f28 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3710      	adds	r7, #16
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b086      	sub	sp, #24
 8009d04:	af02      	add	r7, sp, #8
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	460b      	mov	r3, r1
 8009d0a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	331c      	adds	r3, #28
 8009d10:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009d12:	887b      	ldrh	r3, [r7, #2]
 8009d14:	9300      	str	r3, [sp, #0]
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d1c:	2100      	movs	r1, #0
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 f83d 	bl	8009d9e <USBH_GetDescriptor>
 8009d24:	4603      	mov	r3, r0
 8009d26:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009d28:	7bfb      	ldrb	r3, [r7, #15]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d107      	bne.n	8009d3e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009d2e:	887b      	ldrh	r3, [r7, #2]
 8009d30:	461a      	mov	r2, r3
 8009d32:	68b9      	ldr	r1, [r7, #8]
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 f989 	bl	800a04c <USBH_ParseCfgDesc>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3710      	adds	r7, #16
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b088      	sub	sp, #32
 8009d4c:	af02      	add	r7, sp, #8
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	607a      	str	r2, [r7, #4]
 8009d52:	461a      	mov	r2, r3
 8009d54:	460b      	mov	r3, r1
 8009d56:	72fb      	strb	r3, [r7, #11]
 8009d58:	4613      	mov	r3, r2
 8009d5a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8009d5c:	7afb      	ldrb	r3, [r7, #11]
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009d64:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009d6c:	893b      	ldrh	r3, [r7, #8]
 8009d6e:	9300      	str	r3, [sp, #0]
 8009d70:	460b      	mov	r3, r1
 8009d72:	2100      	movs	r1, #0
 8009d74:	68f8      	ldr	r0, [r7, #12]
 8009d76:	f000 f812 	bl	8009d9e <USBH_GetDescriptor>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009d7e:	7dfb      	ldrb	r3, [r7, #23]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d107      	bne.n	8009d94 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009d8a:	893a      	ldrh	r2, [r7, #8]
 8009d8c:	6879      	ldr	r1, [r7, #4]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f000 fb26 	bl	800a3e0 <USBH_ParseStringDesc>
  }

  return status;
 8009d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3718      	adds	r7, #24
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b084      	sub	sp, #16
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	60f8      	str	r0, [r7, #12]
 8009da6:	607b      	str	r3, [r7, #4]
 8009da8:	460b      	mov	r3, r1
 8009daa:	72fb      	strb	r3, [r7, #11]
 8009dac:	4613      	mov	r3, r2
 8009dae:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	789b      	ldrb	r3, [r3, #2]
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d11c      	bne.n	8009df2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009db8:	7afb      	ldrb	r3, [r7, #11]
 8009dba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009dbe:	b2da      	uxtb	r2, r3
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2206      	movs	r2, #6
 8009dc8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	893a      	ldrh	r2, [r7, #8]
 8009dce:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009dd0:	893b      	ldrh	r3, [r7, #8]
 8009dd2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009dd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009dda:	d104      	bne.n	8009de6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f240 4209 	movw	r2, #1033	; 0x409
 8009de2:	829a      	strh	r2, [r3, #20]
 8009de4:	e002      	b.n	8009dec <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2200      	movs	r2, #0
 8009dea:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	8b3a      	ldrh	r2, [r7, #24]
 8009df0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009df2:	8b3b      	ldrh	r3, [r7, #24]
 8009df4:	461a      	mov	r2, r3
 8009df6:	6879      	ldr	r1, [r7, #4]
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f000 fb3f 	bl	800a47c <USBH_CtlReq>
 8009dfe:	4603      	mov	r3, r0
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3710      	adds	r7, #16
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b082      	sub	sp, #8
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	460b      	mov	r3, r1
 8009e12:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	789b      	ldrb	r3, [r3, #2]
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d10f      	bne.n	8009e3c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2205      	movs	r2, #5
 8009e26:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009e28:	78fb      	ldrb	r3, [r7, #3]
 8009e2a:	b29a      	uxth	r2, r3
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	2100      	movs	r1, #0
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 fb1b 	bl	800a47c <USBH_CtlReq>
 8009e46:	4603      	mov	r3, r0
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3708      	adds	r7, #8
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	460b      	mov	r3, r1
 8009e5a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	789b      	ldrb	r3, [r3, #2]
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d10e      	bne.n	8009e82 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2200      	movs	r2, #0
 8009e68:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2209      	movs	r2, #9
 8009e6e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	887a      	ldrh	r2, [r7, #2]
 8009e74:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009e82:	2200      	movs	r2, #0
 8009e84:	2100      	movs	r1, #0
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 faf8 	bl	800a47c <USBH_CtlReq>
 8009e8c:	4603      	mov	r3, r0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3708      	adds	r7, #8
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b082      	sub	sp, #8
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	789b      	ldrb	r3, [r3, #2]
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d10f      	bne.n	8009eca <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2200      	movs	r2, #0
 8009eae:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2203      	movs	r2, #3
 8009eb4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009eb6:	78fb      	ldrb	r3, [r7, #3]
 8009eb8:	b29a      	uxth	r2, r3
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009eca:	2200      	movs	r2, #0
 8009ecc:	2100      	movs	r1, #0
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 fad4 	bl	800a47c <USBH_CtlReq>
 8009ed4:	4603      	mov	r3, r0
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3708      	adds	r7, #8
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b082      	sub	sp, #8
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	789b      	ldrb	r3, [r3, #2]
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d10f      	bne.n	8009f12 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2202      	movs	r2, #2
 8009ef6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2201      	movs	r2, #1
 8009efc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2200      	movs	r2, #0
 8009f02:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009f04:	78fb      	ldrb	r3, [r7, #3]
 8009f06:	b29a      	uxth	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8009f12:	2200      	movs	r2, #0
 8009f14:	2100      	movs	r1, #0
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 fab0 	bl	800a47c <USBH_CtlReq>
 8009f1c:	4603      	mov	r3, r0
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3708      	adds	r7, #8
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
	...

08009f28 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b085      	sub	sp, #20
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	60b9      	str	r1, [r7, #8]
 8009f32:	4613      	mov	r3, r2
 8009f34:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	781a      	ldrb	r2, [r3, #0]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	785a      	ldrb	r2, [r3, #1]
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	3302      	adds	r3, #2
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	b29a      	uxth	r2, r3
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	3303      	adds	r3, #3
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	021b      	lsls	r3, r3, #8
 8009f58:	b29b      	uxth	r3, r3
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	b29a      	uxth	r2, r3
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	791a      	ldrb	r2, [r3, #4]
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	795a      	ldrb	r2, [r3, #5]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	799a      	ldrb	r2, [r3, #6]
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	79da      	ldrb	r2, [r3, #7]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	79db      	ldrb	r3, [r3, #7]
 8009f86:	2b20      	cmp	r3, #32
 8009f88:	dc0f      	bgt.n	8009faa <USBH_ParseDevDesc+0x82>
 8009f8a:	2b08      	cmp	r3, #8
 8009f8c:	db14      	blt.n	8009fb8 <USBH_ParseDevDesc+0x90>
 8009f8e:	3b08      	subs	r3, #8
 8009f90:	4a2d      	ldr	r2, [pc, #180]	; (800a048 <USBH_ParseDevDesc+0x120>)
 8009f92:	fa22 f303 	lsr.w	r3, r2, r3
 8009f96:	f003 0301 	and.w	r3, r3, #1
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	bf14      	ite	ne
 8009f9e:	2301      	movne	r3, #1
 8009fa0:	2300      	moveq	r3, #0
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d102      	bne.n	8009fae <USBH_ParseDevDesc+0x86>
 8009fa8:	e006      	b.n	8009fb8 <USBH_ParseDevDesc+0x90>
 8009faa:	2b40      	cmp	r3, #64	; 0x40
 8009fac:	d104      	bne.n	8009fb8 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	79da      	ldrb	r2, [r3, #7]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	71da      	strb	r2, [r3, #7]
      break;
 8009fb6:	e003      	b.n	8009fc0 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2240      	movs	r2, #64	; 0x40
 8009fbc:	71da      	strb	r2, [r3, #7]
      break;
 8009fbe:	bf00      	nop
  }

  if (length > 8U)
 8009fc0:	88fb      	ldrh	r3, [r7, #6]
 8009fc2:	2b08      	cmp	r3, #8
 8009fc4:	d939      	bls.n	800a03a <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	3308      	adds	r3, #8
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	b29a      	uxth	r2, r3
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	3309      	adds	r3, #9
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	021b      	lsls	r3, r3, #8
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	b29a      	uxth	r2, r3
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	330a      	adds	r3, #10
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	b29a      	uxth	r2, r3
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	330b      	adds	r3, #11
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	021b      	lsls	r3, r3, #8
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	b29a      	uxth	r2, r3
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	330c      	adds	r3, #12
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	b29a      	uxth	r2, r3
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	330d      	adds	r3, #13
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	021b      	lsls	r3, r3, #8
 800a010:	b29b      	uxth	r3, r3
 800a012:	4313      	orrs	r3, r2
 800a014:	b29a      	uxth	r2, r3
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	7b9a      	ldrb	r2, [r3, #14]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	7bda      	ldrb	r2, [r3, #15]
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	7c1a      	ldrb	r2, [r3, #16]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	7c5a      	ldrb	r2, [r3, #17]
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	745a      	strb	r2, [r3, #17]
  }
}
 800a03a:	bf00      	nop
 800a03c:	3714      	adds	r7, #20
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr
 800a046:	bf00      	nop
 800a048:	01000101 	.word	0x01000101

0800a04c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b08c      	sub	sp, #48	; 0x30
 800a050:	af00      	add	r7, sp, #0
 800a052:	60f8      	str	r0, [r7, #12]
 800a054:	60b9      	str	r1, [r7, #8]
 800a056:	4613      	mov	r3, r2
 800a058:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a060:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a062:	2300      	movs	r3, #0
 800a064:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a06c:	2300      	movs	r3, #0
 800a06e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800a072:	2300      	movs	r3, #0
 800a074:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	781a      	ldrb	r2, [r3, #0]
 800a080:	6a3b      	ldr	r3, [r7, #32]
 800a082:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	785a      	ldrb	r2, [r3, #1]
 800a088:	6a3b      	ldr	r3, [r7, #32]
 800a08a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	3302      	adds	r3, #2
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	b29a      	uxth	r2, r3
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	3303      	adds	r3, #3
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	021b      	lsls	r3, r3, #8
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0a8:	bf28      	it	cs
 800a0aa:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800a0ae:	b29a      	uxth	r2, r3
 800a0b0:	6a3b      	ldr	r3, [r7, #32]
 800a0b2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	791a      	ldrb	r2, [r3, #4]
 800a0b8:	6a3b      	ldr	r3, [r7, #32]
 800a0ba:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	795a      	ldrb	r2, [r3, #5]
 800a0c0:	6a3b      	ldr	r3, [r7, #32]
 800a0c2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	799a      	ldrb	r2, [r3, #6]
 800a0c8:	6a3b      	ldr	r3, [r7, #32]
 800a0ca:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	79da      	ldrb	r2, [r3, #7]
 800a0d0:	6a3b      	ldr	r3, [r7, #32]
 800a0d2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	7a1a      	ldrb	r2, [r3, #8]
 800a0d8:	6a3b      	ldr	r3, [r7, #32]
 800a0da:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800a0dc:	6a3b      	ldr	r3, [r7, #32]
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	2b09      	cmp	r3, #9
 800a0e2:	d002      	beq.n	800a0ea <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a0e4:	6a3b      	ldr	r3, [r7, #32]
 800a0e6:	2209      	movs	r2, #9
 800a0e8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a0ea:	88fb      	ldrh	r3, [r7, #6]
 800a0ec:	2b09      	cmp	r3, #9
 800a0ee:	f240 809d 	bls.w	800a22c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800a0f2:	2309      	movs	r3, #9
 800a0f4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a0fa:	e081      	b.n	800a200 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a0fc:	f107 0316 	add.w	r3, r7, #22
 800a100:	4619      	mov	r1, r3
 800a102:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a104:	f000 f99f 	bl	800a446 <USBH_GetNextDesc>
 800a108:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10c:	785b      	ldrb	r3, [r3, #1]
 800a10e:	2b04      	cmp	r3, #4
 800a110:	d176      	bne.n	800a200 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	2b09      	cmp	r3, #9
 800a118:	d002      	beq.n	800a120 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a11c:	2209      	movs	r2, #9
 800a11e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a124:	221a      	movs	r2, #26
 800a126:	fb02 f303 	mul.w	r3, r2, r3
 800a12a:	3308      	adds	r3, #8
 800a12c:	6a3a      	ldr	r2, [r7, #32]
 800a12e:	4413      	add	r3, r2
 800a130:	3302      	adds	r3, #2
 800a132:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a134:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a136:	69f8      	ldr	r0, [r7, #28]
 800a138:	f000 f87e 	bl	800a238 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a13c:	2300      	movs	r3, #0
 800a13e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a142:	2300      	movs	r3, #0
 800a144:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a146:	e043      	b.n	800a1d0 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a148:	f107 0316 	add.w	r3, r7, #22
 800a14c:	4619      	mov	r1, r3
 800a14e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a150:	f000 f979 	bl	800a446 <USBH_GetNextDesc>
 800a154:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a158:	785b      	ldrb	r3, [r3, #1]
 800a15a:	2b05      	cmp	r3, #5
 800a15c:	d138      	bne.n	800a1d0 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800a15e:	69fb      	ldr	r3, [r7, #28]
 800a160:	795b      	ldrb	r3, [r3, #5]
 800a162:	2b01      	cmp	r3, #1
 800a164:	d10f      	bne.n	800a186 <USBH_ParseCfgDesc+0x13a>
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	799b      	ldrb	r3, [r3, #6]
 800a16a:	2b02      	cmp	r3, #2
 800a16c:	d10b      	bne.n	800a186 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a16e:	69fb      	ldr	r3, [r7, #28]
 800a170:	79db      	ldrb	r3, [r3, #7]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d10f      	bne.n	800a196 <USBH_ParseCfgDesc+0x14a>
 800a176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	2b09      	cmp	r3, #9
 800a17c:	d00b      	beq.n	800a196 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800a17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a180:	2209      	movs	r2, #9
 800a182:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a184:	e007      	b.n	800a196 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800a186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	2b07      	cmp	r3, #7
 800a18c:	d004      	beq.n	800a198 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a190:	2207      	movs	r2, #7
 800a192:	701a      	strb	r2, [r3, #0]
 800a194:	e000      	b.n	800a198 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a196:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a19c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a1a0:	3201      	adds	r2, #1
 800a1a2:	00d2      	lsls	r2, r2, #3
 800a1a4:	211a      	movs	r1, #26
 800a1a6:	fb01 f303 	mul.w	r3, r1, r3
 800a1aa:	4413      	add	r3, r2
 800a1ac:	3308      	adds	r3, #8
 800a1ae:	6a3a      	ldr	r2, [r7, #32]
 800a1b0:	4413      	add	r3, r2
 800a1b2:	3304      	adds	r3, #4
 800a1b4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a1b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1b8:	69b9      	ldr	r1, [r7, #24]
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	f000 f86b 	bl	800a296 <USBH_ParseEPDesc>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800a1c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a1ca:	3301      	adds	r3, #1
 800a1cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	791b      	ldrb	r3, [r3, #4]
 800a1d4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d204      	bcs.n	800a1e6 <USBH_ParseCfgDesc+0x19a>
 800a1dc:	6a3b      	ldr	r3, [r7, #32]
 800a1de:	885a      	ldrh	r2, [r3, #2]
 800a1e0:	8afb      	ldrh	r3, [r7, #22]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d8b0      	bhi.n	800a148 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a1e6:	69fb      	ldr	r3, [r7, #28]
 800a1e8:	791b      	ldrb	r3, [r3, #4]
 800a1ea:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d201      	bcs.n	800a1f6 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800a1f2:	2303      	movs	r3, #3
 800a1f4:	e01c      	b.n	800a230 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800a1f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a200:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a204:	2b01      	cmp	r3, #1
 800a206:	d805      	bhi.n	800a214 <USBH_ParseCfgDesc+0x1c8>
 800a208:	6a3b      	ldr	r3, [r7, #32]
 800a20a:	885a      	ldrh	r2, [r3, #2]
 800a20c:	8afb      	ldrh	r3, [r7, #22]
 800a20e:	429a      	cmp	r2, r3
 800a210:	f63f af74 	bhi.w	800a0fc <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a214:	6a3b      	ldr	r3, [r7, #32]
 800a216:	791b      	ldrb	r3, [r3, #4]
 800a218:	2b02      	cmp	r3, #2
 800a21a:	bf28      	it	cs
 800a21c:	2302      	movcs	r3, #2
 800a21e:	b2db      	uxtb	r3, r3
 800a220:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a224:	429a      	cmp	r2, r3
 800a226:	d201      	bcs.n	800a22c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800a228:	2303      	movs	r3, #3
 800a22a:	e001      	b.n	800a230 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800a22c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a230:	4618      	mov	r0, r3
 800a232:	3730      	adds	r7, #48	; 0x30
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	781a      	ldrb	r2, [r3, #0]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	785a      	ldrb	r2, [r3, #1]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	789a      	ldrb	r2, [r3, #2]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	78da      	ldrb	r2, [r3, #3]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	791a      	ldrb	r2, [r3, #4]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	795a      	ldrb	r2, [r3, #5]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	799a      	ldrb	r2, [r3, #6]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	79da      	ldrb	r2, [r3, #7]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	7a1a      	ldrb	r2, [r3, #8]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	721a      	strb	r2, [r3, #8]
}
 800a28a:	bf00      	nop
 800a28c:	370c      	adds	r7, #12
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr

0800a296 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800a296:	b480      	push	{r7}
 800a298:	b087      	sub	sp, #28
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	60f8      	str	r0, [r7, #12]
 800a29e:	60b9      	str	r1, [r7, #8]
 800a2a0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	781a      	ldrb	r2, [r3, #0]
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	785a      	ldrb	r2, [r3, #1]
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	789a      	ldrb	r2, [r3, #2]
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	78da      	ldrb	r2, [r3, #3]
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	3304      	adds	r3, #4
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	b29a      	uxth	r2, r3
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	3305      	adds	r3, #5
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	021b      	lsls	r3, r3, #8
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	b29a      	uxth	r2, r3
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	799a      	ldrb	r2, [r3, #6]
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	889b      	ldrh	r3, [r3, #4]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d102      	bne.n	800a2f8 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800a2f2:	2303      	movs	r3, #3
 800a2f4:	75fb      	strb	r3, [r7, #23]
 800a2f6:	e033      	b.n	800a360 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	889b      	ldrh	r3, [r3, #4]
 800a2fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a300:	f023 0307 	bic.w	r3, r3, #7
 800a304:	b29a      	uxth	r2, r3
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	889b      	ldrh	r3, [r3, #4]
 800a30e:	b21a      	sxth	r2, r3
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	3304      	adds	r3, #4
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	b299      	uxth	r1, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	3305      	adds	r3, #5
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	b29b      	uxth	r3, r3
 800a320:	021b      	lsls	r3, r3, #8
 800a322:	b29b      	uxth	r3, r3
 800a324:	430b      	orrs	r3, r1
 800a326:	b29b      	uxth	r3, r3
 800a328:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d110      	bne.n	800a352 <USBH_ParseEPDesc+0xbc>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	3304      	adds	r3, #4
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	b299      	uxth	r1, r3
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	3305      	adds	r3, #5
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	b29b      	uxth	r3, r3
 800a340:	021b      	lsls	r3, r3, #8
 800a342:	b29b      	uxth	r3, r3
 800a344:	430b      	orrs	r3, r1
 800a346:	b29b      	uxth	r3, r3
 800a348:	b21b      	sxth	r3, r3
 800a34a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a34e:	b21b      	sxth	r3, r3
 800a350:	e001      	b.n	800a356 <USBH_ParseEPDesc+0xc0>
 800a352:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a356:	4313      	orrs	r3, r2
 800a358:	b21b      	sxth	r3, r3
 800a35a:	b29a      	uxth	r2, r3
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a366:	2b00      	cmp	r3, #0
 800a368:	d116      	bne.n	800a398 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	78db      	ldrb	r3, [r3, #3]
 800a36e:	f003 0303 	and.w	r3, r3, #3
 800a372:	2b01      	cmp	r3, #1
 800a374:	d005      	beq.n	800a382 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	78db      	ldrb	r3, [r3, #3]
 800a37a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a37e:	2b03      	cmp	r3, #3
 800a380:	d127      	bne.n	800a3d2 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	799b      	ldrb	r3, [r3, #6]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d003      	beq.n	800a392 <USBH_ParseEPDesc+0xfc>
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	799b      	ldrb	r3, [r3, #6]
 800a38e:	2b10      	cmp	r3, #16
 800a390:	d91f      	bls.n	800a3d2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a392:	2303      	movs	r3, #3
 800a394:	75fb      	strb	r3, [r7, #23]
 800a396:	e01c      	b.n	800a3d2 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	78db      	ldrb	r3, [r3, #3]
 800a39c:	f003 0303 	and.w	r3, r3, #3
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d10a      	bne.n	800a3ba <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	799b      	ldrb	r3, [r3, #6]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d003      	beq.n	800a3b4 <USBH_ParseEPDesc+0x11e>
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	799b      	ldrb	r3, [r3, #6]
 800a3b0:	2b10      	cmp	r3, #16
 800a3b2:	d90e      	bls.n	800a3d2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a3b4:	2303      	movs	r3, #3
 800a3b6:	75fb      	strb	r3, [r7, #23]
 800a3b8:	e00b      	b.n	800a3d2 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	78db      	ldrb	r3, [r3, #3]
 800a3be:	f003 0303 	and.w	r3, r3, #3
 800a3c2:	2b03      	cmp	r3, #3
 800a3c4:	d105      	bne.n	800a3d2 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	799b      	ldrb	r3, [r3, #6]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d101      	bne.n	800a3d2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a3ce:	2303      	movs	r3, #3
 800a3d0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800a3d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	371c      	adds	r7, #28
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr

0800a3e0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b087      	sub	sp, #28
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	4613      	mov	r3, r2
 800a3ec:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	3301      	adds	r3, #1
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	2b03      	cmp	r3, #3
 800a3f6:	d120      	bne.n	800a43a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	1e9a      	subs	r2, r3, #2
 800a3fe:	88fb      	ldrh	r3, [r7, #6]
 800a400:	4293      	cmp	r3, r2
 800a402:	bf28      	it	cs
 800a404:	4613      	movcs	r3, r2
 800a406:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	3302      	adds	r3, #2
 800a40c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a40e:	2300      	movs	r3, #0
 800a410:	82fb      	strh	r3, [r7, #22]
 800a412:	e00b      	b.n	800a42c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a414:	8afb      	ldrh	r3, [r7, #22]
 800a416:	68fa      	ldr	r2, [r7, #12]
 800a418:	4413      	add	r3, r2
 800a41a:	781a      	ldrb	r2, [r3, #0]
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	3301      	adds	r3, #1
 800a424:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a426:	8afb      	ldrh	r3, [r7, #22]
 800a428:	3302      	adds	r3, #2
 800a42a:	82fb      	strh	r3, [r7, #22]
 800a42c:	8afa      	ldrh	r2, [r7, #22]
 800a42e:	8abb      	ldrh	r3, [r7, #20]
 800a430:	429a      	cmp	r2, r3
 800a432:	d3ef      	bcc.n	800a414 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	2200      	movs	r2, #0
 800a438:	701a      	strb	r2, [r3, #0]
  }
}
 800a43a:	bf00      	nop
 800a43c:	371c      	adds	r7, #28
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr

0800a446 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a446:	b480      	push	{r7}
 800a448:	b085      	sub	sp, #20
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]
 800a44e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	881a      	ldrh	r2, [r3, #0]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	781b      	ldrb	r3, [r3, #0]
 800a458:	b29b      	uxth	r3, r3
 800a45a:	4413      	add	r3, r2
 800a45c:	b29a      	uxth	r2, r3
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	4413      	add	r3, r2
 800a46c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a46e:	68fb      	ldr	r3, [r7, #12]
}
 800a470:	4618      	mov	r0, r3
 800a472:	3714      	adds	r7, #20
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr

0800a47c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b086      	sub	sp, #24
 800a480:	af00      	add	r7, sp, #0
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	4613      	mov	r3, r2
 800a488:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a48a:	2301      	movs	r3, #1
 800a48c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	789b      	ldrb	r3, [r3, #2]
 800a492:	2b01      	cmp	r3, #1
 800a494:	d002      	beq.n	800a49c <USBH_CtlReq+0x20>
 800a496:	2b02      	cmp	r3, #2
 800a498:	d01d      	beq.n	800a4d6 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800a49a:	e043      	b.n	800a524 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	68ba      	ldr	r2, [r7, #8]
 800a4a0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	88fa      	ldrh	r2, [r7, #6]
 800a4a6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2202      	movs	r2, #2
 800a4b2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2203      	movs	r2, #3
 800a4bc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f000 fd56 	bl	800af80 <osMessageQueuePut>
      break;
 800a4d4:	e026      	b.n	800a524 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800a4d6:	68f8      	ldr	r0, [r7, #12]
 800a4d8:	f000 f82a 	bl	800a530 <USBH_HandleControl>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a4e0:	7dfb      	ldrb	r3, [r7, #23]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d002      	beq.n	800a4ec <USBH_CtlReq+0x70>
 800a4e6:	7dfb      	ldrb	r3, [r7, #23]
 800a4e8:	2b03      	cmp	r3, #3
 800a4ea:	d106      	bne.n	800a4fa <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	761a      	strb	r2, [r3, #24]
 800a4f8:	e005      	b.n	800a506 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800a4fa:	7dfb      	ldrb	r3, [r7, #23]
 800a4fc:	2b02      	cmp	r3, #2
 800a4fe:	d102      	bne.n	800a506 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2201      	movs	r2, #1
 800a504:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2203      	movs	r2, #3
 800a50a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a51a:	2300      	movs	r3, #0
 800a51c:	2200      	movs	r2, #0
 800a51e:	f000 fd2f 	bl	800af80 <osMessageQueuePut>
      break;
 800a522:	bf00      	nop
  }
  return status;
 800a524:	7dfb      	ldrb	r3, [r7, #23]
}
 800a526:	4618      	mov	r0, r3
 800a528:	3718      	adds	r7, #24
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
	...

0800a530 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b086      	sub	sp, #24
 800a534:	af02      	add	r7, sp, #8
 800a536:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a538:	2301      	movs	r3, #1
 800a53a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a53c:	2300      	movs	r3, #0
 800a53e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	7e1b      	ldrb	r3, [r3, #24]
 800a544:	3b01      	subs	r3, #1
 800a546:	2b0a      	cmp	r3, #10
 800a548:	f200 8229 	bhi.w	800a99e <USBH_HandleControl+0x46e>
 800a54c:	a201      	add	r2, pc, #4	; (adr r2, 800a554 <USBH_HandleControl+0x24>)
 800a54e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a552:	bf00      	nop
 800a554:	0800a581 	.word	0x0800a581
 800a558:	0800a59b 	.word	0x0800a59b
 800a55c:	0800a63d 	.word	0x0800a63d
 800a560:	0800a663 	.word	0x0800a663
 800a564:	0800a6ef 	.word	0x0800a6ef
 800a568:	0800a719 	.word	0x0800a719
 800a56c:	0800a7db 	.word	0x0800a7db
 800a570:	0800a7fd 	.word	0x0800a7fd
 800a574:	0800a88f 	.word	0x0800a88f
 800a578:	0800a8b5 	.word	0x0800a8b5
 800a57c:	0800a947 	.word	0x0800a947
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f103 0110 	add.w	r1, r3, #16
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	795b      	ldrb	r3, [r3, #5]
 800a58a:	461a      	mov	r2, r3
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f000 fa17 	bl	800a9c0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2202      	movs	r2, #2
 800a596:	761a      	strb	r2, [r3, #24]
      break;
 800a598:	e20c      	b.n	800a9b4 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	795b      	ldrb	r3, [r3, #5]
 800a59e:	4619      	mov	r1, r3
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f003 fd71 	bl	800e088 <USBH_LL_GetURBState>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a5aa:	7bbb      	ldrb	r3, [r7, #14]
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d12c      	bne.n	800a60a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	7c1b      	ldrb	r3, [r3, #16]
 800a5b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a5b8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	8adb      	ldrh	r3, [r3, #22]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d00a      	beq.n	800a5d8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a5c2:	7b7b      	ldrb	r3, [r7, #13]
 800a5c4:	2b80      	cmp	r3, #128	; 0x80
 800a5c6:	d103      	bne.n	800a5d0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2203      	movs	r2, #3
 800a5cc:	761a      	strb	r2, [r3, #24]
 800a5ce:	e00d      	b.n	800a5ec <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2205      	movs	r2, #5
 800a5d4:	761a      	strb	r2, [r3, #24]
 800a5d6:	e009      	b.n	800a5ec <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800a5d8:	7b7b      	ldrb	r3, [r7, #13]
 800a5da:	2b80      	cmp	r3, #128	; 0x80
 800a5dc:	d103      	bne.n	800a5e6 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2209      	movs	r2, #9
 800a5e2:	761a      	strb	r2, [r3, #24]
 800a5e4:	e002      	b.n	800a5ec <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2207      	movs	r2, #7
 800a5ea:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2203      	movs	r2, #3
 800a5f0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a600:	2300      	movs	r3, #0
 800a602:	2200      	movs	r2, #0
 800a604:	f000 fcbc 	bl	800af80 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a608:	e1cb      	b.n	800a9a2 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a60a:	7bbb      	ldrb	r3, [r7, #14]
 800a60c:	2b04      	cmp	r3, #4
 800a60e:	d003      	beq.n	800a618 <USBH_HandleControl+0xe8>
 800a610:	7bbb      	ldrb	r3, [r7, #14]
 800a612:	2b02      	cmp	r3, #2
 800a614:	f040 81c5 	bne.w	800a9a2 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	220b      	movs	r2, #11
 800a61c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2203      	movs	r2, #3
 800a622:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a632:	2300      	movs	r3, #0
 800a634:	2200      	movs	r2, #0
 800a636:	f000 fca3 	bl	800af80 <osMessageQueuePut>
      break;
 800a63a:	e1b2      	b.n	800a9a2 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a642:	b29a      	uxth	r2, r3
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6899      	ldr	r1, [r3, #8]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	899a      	ldrh	r2, [r3, #12]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	791b      	ldrb	r3, [r3, #4]
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f000 f9f2 	bl	800aa3e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2204      	movs	r2, #4
 800a65e:	761a      	strb	r2, [r3, #24]
      break;
 800a660:	e1a8      	b.n	800a9b4 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	791b      	ldrb	r3, [r3, #4]
 800a666:	4619      	mov	r1, r3
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f003 fd0d 	bl	800e088 <USBH_LL_GetURBState>
 800a66e:	4603      	mov	r3, r0
 800a670:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a672:	7bbb      	ldrb	r3, [r7, #14]
 800a674:	2b01      	cmp	r3, #1
 800a676:	d110      	bne.n	800a69a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2209      	movs	r2, #9
 800a67c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2203      	movs	r2, #3
 800a682:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a692:	2300      	movs	r3, #0
 800a694:	2200      	movs	r2, #0
 800a696:	f000 fc73 	bl	800af80 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a69a:	7bbb      	ldrb	r3, [r7, #14]
 800a69c:	2b05      	cmp	r3, #5
 800a69e:	d110      	bne.n	800a6c2 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a6a0:	2303      	movs	r3, #3
 800a6a2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2203      	movs	r2, #3
 800a6a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f000 fc60 	bl	800af80 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a6c0:	e171      	b.n	800a9a6 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800a6c2:	7bbb      	ldrb	r3, [r7, #14]
 800a6c4:	2b04      	cmp	r3, #4
 800a6c6:	f040 816e 	bne.w	800a9a6 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	220b      	movs	r2, #11
 800a6ce:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2203      	movs	r2, #3
 800a6d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f000 fc4a 	bl	800af80 <osMessageQueuePut>
      break;
 800a6ec:	e15b      	b.n	800a9a6 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6899      	ldr	r1, [r3, #8]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	899a      	ldrh	r2, [r3, #12]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	795b      	ldrb	r3, [r3, #5]
 800a6fa:	2001      	movs	r0, #1
 800a6fc:	9000      	str	r0, [sp, #0]
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f000 f978 	bl	800a9f4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a70a:	b29a      	uxth	r2, r3
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2206      	movs	r2, #6
 800a714:	761a      	strb	r2, [r3, #24]
      break;
 800a716:	e14d      	b.n	800a9b4 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	795b      	ldrb	r3, [r3, #5]
 800a71c:	4619      	mov	r1, r3
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f003 fcb2 	bl	800e088 <USBH_LL_GetURBState>
 800a724:	4603      	mov	r3, r0
 800a726:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a728:	7bbb      	ldrb	r3, [r7, #14]
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d111      	bne.n	800a752 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2207      	movs	r2, #7
 800a732:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2203      	movs	r2, #3
 800a738:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a748:	2300      	movs	r3, #0
 800a74a:	2200      	movs	r2, #0
 800a74c:	f000 fc18 	bl	800af80 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a750:	e12b      	b.n	800a9aa <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800a752:	7bbb      	ldrb	r3, [r7, #14]
 800a754:	2b05      	cmp	r3, #5
 800a756:	d113      	bne.n	800a780 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	220c      	movs	r2, #12
 800a75c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a75e:	2303      	movs	r3, #3
 800a760:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2203      	movs	r2, #3
 800a766:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a776:	2300      	movs	r3, #0
 800a778:	2200      	movs	r2, #0
 800a77a:	f000 fc01 	bl	800af80 <osMessageQueuePut>
      break;
 800a77e:	e114      	b.n	800a9aa <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a780:	7bbb      	ldrb	r3, [r7, #14]
 800a782:	2b02      	cmp	r3, #2
 800a784:	d111      	bne.n	800a7aa <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2205      	movs	r2, #5
 800a78a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2203      	movs	r2, #3
 800a790:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f000 fbec 	bl	800af80 <osMessageQueuePut>
      break;
 800a7a8:	e0ff      	b.n	800a9aa <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800a7aa:	7bbb      	ldrb	r3, [r7, #14]
 800a7ac:	2b04      	cmp	r3, #4
 800a7ae:	f040 80fc 	bne.w	800a9aa <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	220b      	movs	r2, #11
 800a7b6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a7b8:	2302      	movs	r3, #2
 800a7ba:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2203      	movs	r2, #3
 800a7c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f000 fbd4 	bl	800af80 <osMessageQueuePut>
      break;
 800a7d8:	e0e7      	b.n	800a9aa <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	791b      	ldrb	r3, [r3, #4]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	2100      	movs	r1, #0
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 f92b 	bl	800aa3e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a7ee:	b29a      	uxth	r2, r3
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2208      	movs	r2, #8
 800a7f8:	761a      	strb	r2, [r3, #24]

      break;
 800a7fa:	e0db      	b.n	800a9b4 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	791b      	ldrb	r3, [r3, #4]
 800a800:	4619      	mov	r1, r3
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f003 fc40 	bl	800e088 <USBH_LL_GetURBState>
 800a808:	4603      	mov	r3, r0
 800a80a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a80c:	7bbb      	ldrb	r3, [r7, #14]
 800a80e:	2b01      	cmp	r3, #1
 800a810:	d113      	bne.n	800a83a <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	220d      	movs	r2, #13
 800a816:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a818:	2300      	movs	r3, #0
 800a81a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2203      	movs	r2, #3
 800a820:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a830:	2300      	movs	r3, #0
 800a832:	2200      	movs	r2, #0
 800a834:	f000 fba4 	bl	800af80 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a838:	e0b9      	b.n	800a9ae <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800a83a:	7bbb      	ldrb	r3, [r7, #14]
 800a83c:	2b04      	cmp	r3, #4
 800a83e:	d111      	bne.n	800a864 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	220b      	movs	r2, #11
 800a844:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2203      	movs	r2, #3
 800a84a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a85a:	2300      	movs	r3, #0
 800a85c:	2200      	movs	r2, #0
 800a85e:	f000 fb8f 	bl	800af80 <osMessageQueuePut>
      break;
 800a862:	e0a4      	b.n	800a9ae <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800a864:	7bbb      	ldrb	r3, [r7, #14]
 800a866:	2b05      	cmp	r3, #5
 800a868:	f040 80a1 	bne.w	800a9ae <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800a86c:	2303      	movs	r3, #3
 800a86e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2203      	movs	r2, #3
 800a874:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a884:	2300      	movs	r3, #0
 800a886:	2200      	movs	r2, #0
 800a888:	f000 fb7a 	bl	800af80 <osMessageQueuePut>
      break;
 800a88c:	e08f      	b.n	800a9ae <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	795b      	ldrb	r3, [r3, #5]
 800a892:	2201      	movs	r2, #1
 800a894:	9200      	str	r2, [sp, #0]
 800a896:	2200      	movs	r2, #0
 800a898:	2100      	movs	r1, #0
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 f8aa 	bl	800a9f4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a8a6:	b29a      	uxth	r2, r3
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	220a      	movs	r2, #10
 800a8b0:	761a      	strb	r2, [r3, #24]
      break;
 800a8b2:	e07f      	b.n	800a9b4 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	795b      	ldrb	r3, [r3, #5]
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f003 fbe4 	bl	800e088 <USBH_LL_GetURBState>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a8c4:	7bbb      	ldrb	r3, [r7, #14]
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d113      	bne.n	800a8f2 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	220d      	movs	r2, #13
 800a8d2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2203      	movs	r2, #3
 800a8d8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f000 fb48 	bl	800af80 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a8f0:	e05f      	b.n	800a9b2 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a8f2:	7bbb      	ldrb	r3, [r7, #14]
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	d111      	bne.n	800a91c <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2209      	movs	r2, #9
 800a8fc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2203      	movs	r2, #3
 800a902:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a912:	2300      	movs	r3, #0
 800a914:	2200      	movs	r2, #0
 800a916:	f000 fb33 	bl	800af80 <osMessageQueuePut>
      break;
 800a91a:	e04a      	b.n	800a9b2 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800a91c:	7bbb      	ldrb	r3, [r7, #14]
 800a91e:	2b04      	cmp	r3, #4
 800a920:	d147      	bne.n	800a9b2 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	220b      	movs	r2, #11
 800a926:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2203      	movs	r2, #3
 800a92c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a93c:	2300      	movs	r3, #0
 800a93e:	2200      	movs	r2, #0
 800a940:	f000 fb1e 	bl	800af80 <osMessageQueuePut>
      break;
 800a944:	e035      	b.n	800a9b2 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	7e5b      	ldrb	r3, [r3, #25]
 800a94a:	3301      	adds	r3, #1
 800a94c:	b2da      	uxtb	r2, r3
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	765a      	strb	r2, [r3, #25]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	7e5b      	ldrb	r3, [r3, #25]
 800a956:	2b02      	cmp	r3, #2
 800a958:	d806      	bhi.n	800a968 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2201      	movs	r2, #1
 800a95e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2201      	movs	r2, #1
 800a964:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a966:	e025      	b.n	800a9b4 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a96e:	2106      	movs	r1, #6
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2200      	movs	r2, #0
 800a978:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	795b      	ldrb	r3, [r3, #5]
 800a97e:	4619      	mov	r1, r3
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 f90d 	bl	800aba0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	791b      	ldrb	r3, [r3, #4]
 800a98a:	4619      	mov	r1, r3
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 f907 	bl	800aba0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2200      	movs	r2, #0
 800a996:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a998:	2302      	movs	r3, #2
 800a99a:	73fb      	strb	r3, [r7, #15]
      break;
 800a99c:	e00a      	b.n	800a9b4 <USBH_HandleControl+0x484>

    default:
      break;
 800a99e:	bf00      	nop
 800a9a0:	e008      	b.n	800a9b4 <USBH_HandleControl+0x484>
      break;
 800a9a2:	bf00      	nop
 800a9a4:	e006      	b.n	800a9b4 <USBH_HandleControl+0x484>
      break;
 800a9a6:	bf00      	nop
 800a9a8:	e004      	b.n	800a9b4 <USBH_HandleControl+0x484>
      break;
 800a9aa:	bf00      	nop
 800a9ac:	e002      	b.n	800a9b4 <USBH_HandleControl+0x484>
      break;
 800a9ae:	bf00      	nop
 800a9b0:	e000      	b.n	800a9b4 <USBH_HandleControl+0x484>
      break;
 800a9b2:	bf00      	nop
  }

  return status;
 800a9b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop

0800a9c0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b088      	sub	sp, #32
 800a9c4:	af04      	add	r7, sp, #16
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a9ce:	79f9      	ldrb	r1, [r7, #7]
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	9303      	str	r3, [sp, #12]
 800a9d4:	2308      	movs	r3, #8
 800a9d6:	9302      	str	r3, [sp, #8]
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	9301      	str	r3, [sp, #4]
 800a9dc:	2300      	movs	r3, #0
 800a9de:	9300      	str	r3, [sp, #0]
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	68f8      	ldr	r0, [r7, #12]
 800a9e6:	f003 fb1e 	bl	800e026 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a9ea:	2300      	movs	r3, #0
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3710      	adds	r7, #16
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b088      	sub	sp, #32
 800a9f8:	af04      	add	r7, sp, #16
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	60b9      	str	r1, [r7, #8]
 800a9fe:	4611      	mov	r1, r2
 800aa00:	461a      	mov	r2, r3
 800aa02:	460b      	mov	r3, r1
 800aa04:	80fb      	strh	r3, [r7, #6]
 800aa06:	4613      	mov	r3, r2
 800aa08:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d001      	beq.n	800aa18 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800aa14:	2300      	movs	r3, #0
 800aa16:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aa18:	7979      	ldrb	r1, [r7, #5]
 800aa1a:	7e3b      	ldrb	r3, [r7, #24]
 800aa1c:	9303      	str	r3, [sp, #12]
 800aa1e:	88fb      	ldrh	r3, [r7, #6]
 800aa20:	9302      	str	r3, [sp, #8]
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	9301      	str	r3, [sp, #4]
 800aa26:	2301      	movs	r3, #1
 800aa28:	9300      	str	r3, [sp, #0]
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	68f8      	ldr	r0, [r7, #12]
 800aa30:	f003 faf9 	bl	800e026 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800aa34:	2300      	movs	r3, #0
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3710      	adds	r7, #16
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}

0800aa3e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800aa3e:	b580      	push	{r7, lr}
 800aa40:	b088      	sub	sp, #32
 800aa42:	af04      	add	r7, sp, #16
 800aa44:	60f8      	str	r0, [r7, #12]
 800aa46:	60b9      	str	r1, [r7, #8]
 800aa48:	4611      	mov	r1, r2
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	80fb      	strh	r3, [r7, #6]
 800aa50:	4613      	mov	r3, r2
 800aa52:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aa54:	7979      	ldrb	r1, [r7, #5]
 800aa56:	2300      	movs	r3, #0
 800aa58:	9303      	str	r3, [sp, #12]
 800aa5a:	88fb      	ldrh	r3, [r7, #6]
 800aa5c:	9302      	str	r3, [sp, #8]
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	9301      	str	r3, [sp, #4]
 800aa62:	2301      	movs	r3, #1
 800aa64:	9300      	str	r3, [sp, #0]
 800aa66:	2300      	movs	r3, #0
 800aa68:	2201      	movs	r2, #1
 800aa6a:	68f8      	ldr	r0, [r7, #12]
 800aa6c:	f003 fadb 	bl	800e026 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800aa70:	2300      	movs	r3, #0

}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3710      	adds	r7, #16
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}

0800aa7a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800aa7a:	b580      	push	{r7, lr}
 800aa7c:	b088      	sub	sp, #32
 800aa7e:	af04      	add	r7, sp, #16
 800aa80:	60f8      	str	r0, [r7, #12]
 800aa82:	60b9      	str	r1, [r7, #8]
 800aa84:	4611      	mov	r1, r2
 800aa86:	461a      	mov	r2, r3
 800aa88:	460b      	mov	r3, r1
 800aa8a:	80fb      	strh	r3, [r7, #6]
 800aa8c:	4613      	mov	r3, r2
 800aa8e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d001      	beq.n	800aa9e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aa9e:	7979      	ldrb	r1, [r7, #5]
 800aaa0:	7e3b      	ldrb	r3, [r7, #24]
 800aaa2:	9303      	str	r3, [sp, #12]
 800aaa4:	88fb      	ldrh	r3, [r7, #6]
 800aaa6:	9302      	str	r3, [sp, #8]
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	9301      	str	r3, [sp, #4]
 800aaac:	2301      	movs	r3, #1
 800aaae:	9300      	str	r3, [sp, #0]
 800aab0:	2302      	movs	r3, #2
 800aab2:	2200      	movs	r2, #0
 800aab4:	68f8      	ldr	r0, [r7, #12]
 800aab6:	f003 fab6 	bl	800e026 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800aaba:	2300      	movs	r3, #0
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3710      	adds	r7, #16
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b088      	sub	sp, #32
 800aac8:	af04      	add	r7, sp, #16
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	60b9      	str	r1, [r7, #8]
 800aace:	4611      	mov	r1, r2
 800aad0:	461a      	mov	r2, r3
 800aad2:	460b      	mov	r3, r1
 800aad4:	80fb      	strh	r3, [r7, #6]
 800aad6:	4613      	mov	r3, r2
 800aad8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aada:	7979      	ldrb	r1, [r7, #5]
 800aadc:	2300      	movs	r3, #0
 800aade:	9303      	str	r3, [sp, #12]
 800aae0:	88fb      	ldrh	r3, [r7, #6]
 800aae2:	9302      	str	r3, [sp, #8]
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	9301      	str	r3, [sp, #4]
 800aae8:	2301      	movs	r3, #1
 800aaea:	9300      	str	r3, [sp, #0]
 800aaec:	2302      	movs	r3, #2
 800aaee:	2201      	movs	r2, #1
 800aaf0:	68f8      	ldr	r0, [r7, #12]
 800aaf2:	f003 fa98 	bl	800e026 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800aaf6:	2300      	movs	r3, #0
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3710      	adds	r7, #16
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b086      	sub	sp, #24
 800ab04:	af04      	add	r7, sp, #16
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	4608      	mov	r0, r1
 800ab0a:	4611      	mov	r1, r2
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	4603      	mov	r3, r0
 800ab10:	70fb      	strb	r3, [r7, #3]
 800ab12:	460b      	mov	r3, r1
 800ab14:	70bb      	strb	r3, [r7, #2]
 800ab16:	4613      	mov	r3, r2
 800ab18:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ab1a:	7878      	ldrb	r0, [r7, #1]
 800ab1c:	78ba      	ldrb	r2, [r7, #2]
 800ab1e:	78f9      	ldrb	r1, [r7, #3]
 800ab20:	8b3b      	ldrh	r3, [r7, #24]
 800ab22:	9302      	str	r3, [sp, #8]
 800ab24:	7d3b      	ldrb	r3, [r7, #20]
 800ab26:	9301      	str	r3, [sp, #4]
 800ab28:	7c3b      	ldrb	r3, [r7, #16]
 800ab2a:	9300      	str	r3, [sp, #0]
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f003 fa2b 	bl	800df8a <USBH_LL_OpenPipe>

  return USBH_OK;
 800ab34:	2300      	movs	r3, #0
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3708      	adds	r7, #8
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}

0800ab3e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b082      	sub	sp, #8
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
 800ab46:	460b      	mov	r3, r1
 800ab48:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800ab4a:	78fb      	ldrb	r3, [r7, #3]
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f003 fa4a 	bl	800dfe8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ab54:	2300      	movs	r3, #0
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3708      	adds	r7, #8
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}

0800ab5e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ab5e:	b580      	push	{r7, lr}
 800ab60:	b084      	sub	sp, #16
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
 800ab66:	460b      	mov	r3, r1
 800ab68:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 f836 	bl	800abdc <USBH_GetFreePipe>
 800ab70:	4603      	mov	r3, r0
 800ab72:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ab74:	89fb      	ldrh	r3, [r7, #14]
 800ab76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d00a      	beq.n	800ab94 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ab7e:	78fa      	ldrb	r2, [r7, #3]
 800ab80:	89fb      	ldrh	r3, [r7, #14]
 800ab82:	f003 030f 	and.w	r3, r3, #15
 800ab86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ab8a:	6879      	ldr	r1, [r7, #4]
 800ab8c:	33e0      	adds	r3, #224	; 0xe0
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	440b      	add	r3, r1
 800ab92:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ab94:	89fb      	ldrh	r3, [r7, #14]
 800ab96:	b2db      	uxtb	r3, r3
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3710      	adds	r7, #16
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	460b      	mov	r3, r1
 800abaa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800abac:	78fb      	ldrb	r3, [r7, #3]
 800abae:	2b0f      	cmp	r3, #15
 800abb0:	d80d      	bhi.n	800abce <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800abb2:	78fb      	ldrb	r3, [r7, #3]
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	33e0      	adds	r3, #224	; 0xe0
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	4413      	add	r3, r2
 800abbc:	685a      	ldr	r2, [r3, #4]
 800abbe:	78fb      	ldrb	r3, [r7, #3]
 800abc0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800abc4:	6879      	ldr	r1, [r7, #4]
 800abc6:	33e0      	adds	r3, #224	; 0xe0
 800abc8:	009b      	lsls	r3, r3, #2
 800abca:	440b      	add	r3, r1
 800abcc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800abce:	2300      	movs	r3, #0
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	370c      	adds	r7, #12
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr

0800abdc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800abdc:	b480      	push	{r7}
 800abde:	b085      	sub	sp, #20
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800abe4:	2300      	movs	r3, #0
 800abe6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800abe8:	2300      	movs	r3, #0
 800abea:	73fb      	strb	r3, [r7, #15]
 800abec:	e00f      	b.n	800ac0e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800abee:	7bfb      	ldrb	r3, [r7, #15]
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	33e0      	adds	r3, #224	; 0xe0
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	4413      	add	r3, r2
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d102      	bne.n	800ac08 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ac02:	7bfb      	ldrb	r3, [r7, #15]
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	e007      	b.n	800ac18 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800ac08:	7bfb      	ldrb	r3, [r7, #15]
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	73fb      	strb	r3, [r7, #15]
 800ac0e:	7bfb      	ldrb	r3, [r7, #15]
 800ac10:	2b0f      	cmp	r3, #15
 800ac12:	d9ec      	bls.n	800abee <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ac14:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3714      	adds	r7, #20
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr

0800ac24 <__NVIC_SetPriority>:
{
 800ac24:	b480      	push	{r7}
 800ac26:	b083      	sub	sp, #12
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	6039      	str	r1, [r7, #0]
 800ac2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ac30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	db0a      	blt.n	800ac4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	b2da      	uxtb	r2, r3
 800ac3c:	490c      	ldr	r1, [pc, #48]	; (800ac70 <__NVIC_SetPriority+0x4c>)
 800ac3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac42:	0112      	lsls	r2, r2, #4
 800ac44:	b2d2      	uxtb	r2, r2
 800ac46:	440b      	add	r3, r1
 800ac48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ac4c:	e00a      	b.n	800ac64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	b2da      	uxtb	r2, r3
 800ac52:	4908      	ldr	r1, [pc, #32]	; (800ac74 <__NVIC_SetPriority+0x50>)
 800ac54:	79fb      	ldrb	r3, [r7, #7]
 800ac56:	f003 030f 	and.w	r3, r3, #15
 800ac5a:	3b04      	subs	r3, #4
 800ac5c:	0112      	lsls	r2, r2, #4
 800ac5e:	b2d2      	uxtb	r2, r2
 800ac60:	440b      	add	r3, r1
 800ac62:	761a      	strb	r2, [r3, #24]
}
 800ac64:	bf00      	nop
 800ac66:	370c      	adds	r7, #12
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr
 800ac70:	e000e100 	.word	0xe000e100
 800ac74:	e000ed00 	.word	0xe000ed00

0800ac78 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ac7c:	4b05      	ldr	r3, [pc, #20]	; (800ac94 <SysTick_Handler+0x1c>)
 800ac7e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ac80:	f001 ff3e 	bl	800cb00 <xTaskGetSchedulerState>
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d001      	beq.n	800ac8e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ac8a:	f002 fd25 	bl	800d6d8 <xPortSysTickHandler>
  }
}
 800ac8e:	bf00      	nop
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	e000e010 	.word	0xe000e010

0800ac98 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ac9c:	2100      	movs	r1, #0
 800ac9e:	f06f 0004 	mvn.w	r0, #4
 800aca2:	f7ff ffbf 	bl	800ac24 <__NVIC_SetPriority>
#endif
}
 800aca6:	bf00      	nop
 800aca8:	bd80      	pop	{r7, pc}
	...

0800acac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800acac:	b480      	push	{r7}
 800acae:	b083      	sub	sp, #12
 800acb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acb2:	f3ef 8305 	mrs	r3, IPSR
 800acb6:	603b      	str	r3, [r7, #0]
  return(result);
 800acb8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d003      	beq.n	800acc6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800acbe:	f06f 0305 	mvn.w	r3, #5
 800acc2:	607b      	str	r3, [r7, #4]
 800acc4:	e00c      	b.n	800ace0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800acc6:	4b0a      	ldr	r3, [pc, #40]	; (800acf0 <osKernelInitialize+0x44>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d105      	bne.n	800acda <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800acce:	4b08      	ldr	r3, [pc, #32]	; (800acf0 <osKernelInitialize+0x44>)
 800acd0:	2201      	movs	r2, #1
 800acd2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800acd4:	2300      	movs	r3, #0
 800acd6:	607b      	str	r3, [r7, #4]
 800acd8:	e002      	b.n	800ace0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800acda:	f04f 33ff 	mov.w	r3, #4294967295
 800acde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ace0:	687b      	ldr	r3, [r7, #4]
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	370c      	adds	r7, #12
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr
 800acee:	bf00      	nop
 800acf0:	200003bc 	.word	0x200003bc

0800acf4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acfa:	f3ef 8305 	mrs	r3, IPSR
 800acfe:	603b      	str	r3, [r7, #0]
  return(result);
 800ad00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d003      	beq.n	800ad0e <osKernelStart+0x1a>
    stat = osErrorISR;
 800ad06:	f06f 0305 	mvn.w	r3, #5
 800ad0a:	607b      	str	r3, [r7, #4]
 800ad0c:	e010      	b.n	800ad30 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ad0e:	4b0b      	ldr	r3, [pc, #44]	; (800ad3c <osKernelStart+0x48>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	d109      	bne.n	800ad2a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ad16:	f7ff ffbf 	bl	800ac98 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ad1a:	4b08      	ldr	r3, [pc, #32]	; (800ad3c <osKernelStart+0x48>)
 800ad1c:	2202      	movs	r2, #2
 800ad1e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ad20:	f001 fa6a 	bl	800c1f8 <vTaskStartScheduler>
      stat = osOK;
 800ad24:	2300      	movs	r3, #0
 800ad26:	607b      	str	r3, [r7, #4]
 800ad28:	e002      	b.n	800ad30 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ad2a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ad30:	687b      	ldr	r3, [r7, #4]
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3708      	adds	r7, #8
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	200003bc 	.word	0x200003bc

0800ad40 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b08e      	sub	sp, #56	; 0x38
 800ad44:	af04      	add	r7, sp, #16
 800ad46:	60f8      	str	r0, [r7, #12]
 800ad48:	60b9      	str	r1, [r7, #8]
 800ad4a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad50:	f3ef 8305 	mrs	r3, IPSR
 800ad54:	617b      	str	r3, [r7, #20]
  return(result);
 800ad56:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d17e      	bne.n	800ae5a <osThreadNew+0x11a>
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d07b      	beq.n	800ae5a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ad62:	2380      	movs	r3, #128	; 0x80
 800ad64:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ad66:	2318      	movs	r3, #24
 800ad68:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ad6e:	f04f 33ff 	mov.w	r3, #4294967295
 800ad72:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d045      	beq.n	800ae06 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d002      	beq.n	800ad88 <osThreadNew+0x48>
        name = attr->name;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	699b      	ldr	r3, [r3, #24]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d002      	beq.n	800ad96 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	699b      	ldr	r3, [r3, #24]
 800ad94:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ad96:	69fb      	ldr	r3, [r7, #28]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d008      	beq.n	800adae <osThreadNew+0x6e>
 800ad9c:	69fb      	ldr	r3, [r7, #28]
 800ad9e:	2b38      	cmp	r3, #56	; 0x38
 800ada0:	d805      	bhi.n	800adae <osThreadNew+0x6e>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	f003 0301 	and.w	r3, r3, #1
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d001      	beq.n	800adb2 <osThreadNew+0x72>
        return (NULL);
 800adae:	2300      	movs	r3, #0
 800adb0:	e054      	b.n	800ae5c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	695b      	ldr	r3, [r3, #20]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d003      	beq.n	800adc2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	695b      	ldr	r3, [r3, #20]
 800adbe:	089b      	lsrs	r3, r3, #2
 800adc0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	689b      	ldr	r3, [r3, #8]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d00e      	beq.n	800ade8 <osThreadNew+0xa8>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	68db      	ldr	r3, [r3, #12]
 800adce:	2bab      	cmp	r3, #171	; 0xab
 800add0:	d90a      	bls.n	800ade8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800add6:	2b00      	cmp	r3, #0
 800add8:	d006      	beq.n	800ade8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	695b      	ldr	r3, [r3, #20]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d002      	beq.n	800ade8 <osThreadNew+0xa8>
        mem = 1;
 800ade2:	2301      	movs	r3, #1
 800ade4:	61bb      	str	r3, [r7, #24]
 800ade6:	e010      	b.n	800ae0a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	689b      	ldr	r3, [r3, #8]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d10c      	bne.n	800ae0a <osThreadNew+0xca>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	68db      	ldr	r3, [r3, #12]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d108      	bne.n	800ae0a <osThreadNew+0xca>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	691b      	ldr	r3, [r3, #16]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d104      	bne.n	800ae0a <osThreadNew+0xca>
          mem = 0;
 800ae00:	2300      	movs	r3, #0
 800ae02:	61bb      	str	r3, [r7, #24]
 800ae04:	e001      	b.n	800ae0a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ae06:	2300      	movs	r3, #0
 800ae08:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d110      	bne.n	800ae32 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ae18:	9202      	str	r2, [sp, #8]
 800ae1a:	9301      	str	r3, [sp, #4]
 800ae1c:	69fb      	ldr	r3, [r7, #28]
 800ae1e:	9300      	str	r3, [sp, #0]
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	6a3a      	ldr	r2, [r7, #32]
 800ae24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae26:	68f8      	ldr	r0, [r7, #12]
 800ae28:	f000 fff6 	bl	800be18 <xTaskCreateStatic>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	613b      	str	r3, [r7, #16]
 800ae30:	e013      	b.n	800ae5a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ae32:	69bb      	ldr	r3, [r7, #24]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d110      	bne.n	800ae5a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ae38:	6a3b      	ldr	r3, [r7, #32]
 800ae3a:	b29a      	uxth	r2, r3
 800ae3c:	f107 0310 	add.w	r3, r7, #16
 800ae40:	9301      	str	r3, [sp, #4]
 800ae42:	69fb      	ldr	r3, [r7, #28]
 800ae44:	9300      	str	r3, [sp, #0]
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae4a:	68f8      	ldr	r0, [r7, #12]
 800ae4c:	f001 f841 	bl	800bed2 <xTaskCreate>
 800ae50:	4603      	mov	r3, r0
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d001      	beq.n	800ae5a <osThreadNew+0x11a>
            hTask = NULL;
 800ae56:	2300      	movs	r3, #0
 800ae58:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ae5a:	693b      	ldr	r3, [r7, #16]
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3728      	adds	r7, #40	; 0x28
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}

0800ae64 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b084      	sub	sp, #16
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae6c:	f3ef 8305 	mrs	r3, IPSR
 800ae70:	60bb      	str	r3, [r7, #8]
  return(result);
 800ae72:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d003      	beq.n	800ae80 <osDelay+0x1c>
    stat = osErrorISR;
 800ae78:	f06f 0305 	mvn.w	r3, #5
 800ae7c:	60fb      	str	r3, [r7, #12]
 800ae7e:	e007      	b.n	800ae90 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ae80:	2300      	movs	r3, #0
 800ae82:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d002      	beq.n	800ae90 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f001 f980 	bl	800c190 <vTaskDelay>
    }
  }

  return (stat);
 800ae90:	68fb      	ldr	r3, [r7, #12]
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3710      	adds	r7, #16
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}

0800ae9a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ae9a:	b580      	push	{r7, lr}
 800ae9c:	b08a      	sub	sp, #40	; 0x28
 800ae9e:	af02      	add	r7, sp, #8
 800aea0:	60f8      	str	r0, [r7, #12]
 800aea2:	60b9      	str	r1, [r7, #8]
 800aea4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800aea6:	2300      	movs	r3, #0
 800aea8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aeaa:	f3ef 8305 	mrs	r3, IPSR
 800aeae:	613b      	str	r3, [r7, #16]
  return(result);
 800aeb0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d15f      	bne.n	800af76 <osMessageQueueNew+0xdc>
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d05c      	beq.n	800af76 <osMessageQueueNew+0xdc>
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d059      	beq.n	800af76 <osMessageQueueNew+0xdc>
    mem = -1;
 800aec2:	f04f 33ff 	mov.w	r3, #4294967295
 800aec6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d029      	beq.n	800af22 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	689b      	ldr	r3, [r3, #8]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d012      	beq.n	800aefc <osMessageQueueNew+0x62>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	68db      	ldr	r3, [r3, #12]
 800aeda:	2b4f      	cmp	r3, #79	; 0x4f
 800aedc:	d90e      	bls.n	800aefc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d00a      	beq.n	800aefc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	695a      	ldr	r2, [r3, #20]
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	68b9      	ldr	r1, [r7, #8]
 800aeee:	fb01 f303 	mul.w	r3, r1, r3
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d302      	bcc.n	800aefc <osMessageQueueNew+0x62>
        mem = 1;
 800aef6:	2301      	movs	r3, #1
 800aef8:	61bb      	str	r3, [r7, #24]
 800aefa:	e014      	b.n	800af26 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	689b      	ldr	r3, [r3, #8]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d110      	bne.n	800af26 <osMessageQueueNew+0x8c>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	68db      	ldr	r3, [r3, #12]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d10c      	bne.n	800af26 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800af10:	2b00      	cmp	r3, #0
 800af12:	d108      	bne.n	800af26 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	695b      	ldr	r3, [r3, #20]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d104      	bne.n	800af26 <osMessageQueueNew+0x8c>
          mem = 0;
 800af1c:	2300      	movs	r3, #0
 800af1e:	61bb      	str	r3, [r7, #24]
 800af20:	e001      	b.n	800af26 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800af22:	2300      	movs	r3, #0
 800af24:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800af26:	69bb      	ldr	r3, [r7, #24]
 800af28:	2b01      	cmp	r3, #1
 800af2a:	d10b      	bne.n	800af44 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	691a      	ldr	r2, [r3, #16]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	689b      	ldr	r3, [r3, #8]
 800af34:	2100      	movs	r1, #0
 800af36:	9100      	str	r1, [sp, #0]
 800af38:	68b9      	ldr	r1, [r7, #8]
 800af3a:	68f8      	ldr	r0, [r7, #12]
 800af3c:	f000 fa2e 	bl	800b39c <xQueueGenericCreateStatic>
 800af40:	61f8      	str	r0, [r7, #28]
 800af42:	e008      	b.n	800af56 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800af44:	69bb      	ldr	r3, [r7, #24]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d105      	bne.n	800af56 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800af4a:	2200      	movs	r2, #0
 800af4c:	68b9      	ldr	r1, [r7, #8]
 800af4e:	68f8      	ldr	r0, [r7, #12]
 800af50:	f000 fa9c 	bl	800b48c <xQueueGenericCreate>
 800af54:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800af56:	69fb      	ldr	r3, [r7, #28]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d00c      	beq.n	800af76 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d003      	beq.n	800af6a <osMessageQueueNew+0xd0>
        name = attr->name;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	617b      	str	r3, [r7, #20]
 800af68:	e001      	b.n	800af6e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800af6a:	2300      	movs	r3, #0
 800af6c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800af6e:	6979      	ldr	r1, [r7, #20]
 800af70:	69f8      	ldr	r0, [r7, #28]
 800af72:	f000 fef3 	bl	800bd5c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800af76:	69fb      	ldr	r3, [r7, #28]
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3720      	adds	r7, #32
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800af80:	b580      	push	{r7, lr}
 800af82:	b088      	sub	sp, #32
 800af84:	af00      	add	r7, sp, #0
 800af86:	60f8      	str	r0, [r7, #12]
 800af88:	60b9      	str	r1, [r7, #8]
 800af8a:	603b      	str	r3, [r7, #0]
 800af8c:	4613      	mov	r3, r2
 800af8e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800af94:	2300      	movs	r3, #0
 800af96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af98:	f3ef 8305 	mrs	r3, IPSR
 800af9c:	617b      	str	r3, [r7, #20]
  return(result);
 800af9e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d028      	beq.n	800aff6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800afa4:	69bb      	ldr	r3, [r7, #24]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d005      	beq.n	800afb6 <osMessageQueuePut+0x36>
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d002      	beq.n	800afb6 <osMessageQueuePut+0x36>
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d003      	beq.n	800afbe <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800afb6:	f06f 0303 	mvn.w	r3, #3
 800afba:	61fb      	str	r3, [r7, #28]
 800afbc:	e038      	b.n	800b030 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800afbe:	2300      	movs	r3, #0
 800afc0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800afc2:	f107 0210 	add.w	r2, r7, #16
 800afc6:	2300      	movs	r3, #0
 800afc8:	68b9      	ldr	r1, [r7, #8]
 800afca:	69b8      	ldr	r0, [r7, #24]
 800afcc:	f000 fbba 	bl	800b744 <xQueueGenericSendFromISR>
 800afd0:	4603      	mov	r3, r0
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	d003      	beq.n	800afde <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800afd6:	f06f 0302 	mvn.w	r3, #2
 800afda:	61fb      	str	r3, [r7, #28]
 800afdc:	e028      	b.n	800b030 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d025      	beq.n	800b030 <osMessageQueuePut+0xb0>
 800afe4:	4b15      	ldr	r3, [pc, #84]	; (800b03c <osMessageQueuePut+0xbc>)
 800afe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afea:	601a      	str	r2, [r3, #0]
 800afec:	f3bf 8f4f 	dsb	sy
 800aff0:	f3bf 8f6f 	isb	sy
 800aff4:	e01c      	b.n	800b030 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800aff6:	69bb      	ldr	r3, [r7, #24]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d002      	beq.n	800b002 <osMessageQueuePut+0x82>
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d103      	bne.n	800b00a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b002:	f06f 0303 	mvn.w	r3, #3
 800b006:	61fb      	str	r3, [r7, #28]
 800b008:	e012      	b.n	800b030 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b00a:	2300      	movs	r3, #0
 800b00c:	683a      	ldr	r2, [r7, #0]
 800b00e:	68b9      	ldr	r1, [r7, #8]
 800b010:	69b8      	ldr	r0, [r7, #24]
 800b012:	f000 fa99 	bl	800b548 <xQueueGenericSend>
 800b016:	4603      	mov	r3, r0
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d009      	beq.n	800b030 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d003      	beq.n	800b02a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b022:	f06f 0301 	mvn.w	r3, #1
 800b026:	61fb      	str	r3, [r7, #28]
 800b028:	e002      	b.n	800b030 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b02a:	f06f 0302 	mvn.w	r3, #2
 800b02e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b030:	69fb      	ldr	r3, [r7, #28]
}
 800b032:	4618      	mov	r0, r3
 800b034:	3720      	adds	r7, #32
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	e000ed04 	.word	0xe000ed04

0800b040 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b040:	b580      	push	{r7, lr}
 800b042:	b088      	sub	sp, #32
 800b044:	af00      	add	r7, sp, #0
 800b046:	60f8      	str	r0, [r7, #12]
 800b048:	60b9      	str	r1, [r7, #8]
 800b04a:	607a      	str	r2, [r7, #4]
 800b04c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b052:	2300      	movs	r3, #0
 800b054:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b056:	f3ef 8305 	mrs	r3, IPSR
 800b05a:	617b      	str	r3, [r7, #20]
  return(result);
 800b05c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d028      	beq.n	800b0b4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b062:	69bb      	ldr	r3, [r7, #24]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d005      	beq.n	800b074 <osMessageQueueGet+0x34>
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d002      	beq.n	800b074 <osMessageQueueGet+0x34>
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d003      	beq.n	800b07c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b074:	f06f 0303 	mvn.w	r3, #3
 800b078:	61fb      	str	r3, [r7, #28]
 800b07a:	e037      	b.n	800b0ec <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b07c:	2300      	movs	r3, #0
 800b07e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b080:	f107 0310 	add.w	r3, r7, #16
 800b084:	461a      	mov	r2, r3
 800b086:	68b9      	ldr	r1, [r7, #8]
 800b088:	69b8      	ldr	r0, [r7, #24]
 800b08a:	f000 fcd7 	bl	800ba3c <xQueueReceiveFromISR>
 800b08e:	4603      	mov	r3, r0
 800b090:	2b01      	cmp	r3, #1
 800b092:	d003      	beq.n	800b09c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b094:	f06f 0302 	mvn.w	r3, #2
 800b098:	61fb      	str	r3, [r7, #28]
 800b09a:	e027      	b.n	800b0ec <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d024      	beq.n	800b0ec <osMessageQueueGet+0xac>
 800b0a2:	4b15      	ldr	r3, [pc, #84]	; (800b0f8 <osMessageQueueGet+0xb8>)
 800b0a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0a8:	601a      	str	r2, [r3, #0]
 800b0aa:	f3bf 8f4f 	dsb	sy
 800b0ae:	f3bf 8f6f 	isb	sy
 800b0b2:	e01b      	b.n	800b0ec <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b0b4:	69bb      	ldr	r3, [r7, #24]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d002      	beq.n	800b0c0 <osMessageQueueGet+0x80>
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d103      	bne.n	800b0c8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b0c0:	f06f 0303 	mvn.w	r3, #3
 800b0c4:	61fb      	str	r3, [r7, #28]
 800b0c6:	e011      	b.n	800b0ec <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b0c8:	683a      	ldr	r2, [r7, #0]
 800b0ca:	68b9      	ldr	r1, [r7, #8]
 800b0cc:	69b8      	ldr	r0, [r7, #24]
 800b0ce:	f000 fbd5 	bl	800b87c <xQueueReceive>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	2b01      	cmp	r3, #1
 800b0d6:	d009      	beq.n	800b0ec <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d003      	beq.n	800b0e6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b0de:	f06f 0301 	mvn.w	r3, #1
 800b0e2:	61fb      	str	r3, [r7, #28]
 800b0e4:	e002      	b.n	800b0ec <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b0e6:	f06f 0302 	mvn.w	r3, #2
 800b0ea:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b0ec:	69fb      	ldr	r3, [r7, #28]
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3720      	adds	r7, #32
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}
 800b0f6:	bf00      	nop
 800b0f8:	e000ed04 	.word	0xe000ed04

0800b0fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b0fc:	b480      	push	{r7}
 800b0fe:	b085      	sub	sp, #20
 800b100:	af00      	add	r7, sp, #0
 800b102:	60f8      	str	r0, [r7, #12]
 800b104:	60b9      	str	r1, [r7, #8]
 800b106:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	4a07      	ldr	r2, [pc, #28]	; (800b128 <vApplicationGetIdleTaskMemory+0x2c>)
 800b10c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	4a06      	ldr	r2, [pc, #24]	; (800b12c <vApplicationGetIdleTaskMemory+0x30>)
 800b112:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2280      	movs	r2, #128	; 0x80
 800b118:	601a      	str	r2, [r3, #0]
}
 800b11a:	bf00      	nop
 800b11c:	3714      	adds	r7, #20
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr
 800b126:	bf00      	nop
 800b128:	200003c0 	.word	0x200003c0
 800b12c:	2000046c 	.word	0x2000046c

0800b130 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b130:	b480      	push	{r7}
 800b132:	b085      	sub	sp, #20
 800b134:	af00      	add	r7, sp, #0
 800b136:	60f8      	str	r0, [r7, #12]
 800b138:	60b9      	str	r1, [r7, #8]
 800b13a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	4a07      	ldr	r2, [pc, #28]	; (800b15c <vApplicationGetTimerTaskMemory+0x2c>)
 800b140:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	4a06      	ldr	r2, [pc, #24]	; (800b160 <vApplicationGetTimerTaskMemory+0x30>)
 800b146:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b14e:	601a      	str	r2, [r3, #0]
}
 800b150:	bf00      	nop
 800b152:	3714      	adds	r7, #20
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr
 800b15c:	2000066c 	.word	0x2000066c
 800b160:	20000718 	.word	0x20000718

0800b164 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b164:	b480      	push	{r7}
 800b166:	b083      	sub	sp, #12
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f103 0208 	add.w	r2, r3, #8
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f04f 32ff 	mov.w	r2, #4294967295
 800b17c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f103 0208 	add.w	r2, r3, #8
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f103 0208 	add.w	r2, r3, #8
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2200      	movs	r2, #0
 800b196:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b198:	bf00      	nop
 800b19a:	370c      	adds	r7, #12
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr

0800b1a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b083      	sub	sp, #12
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b1b2:	bf00      	nop
 800b1b4:	370c      	adds	r7, #12
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1bc:	4770      	bx	lr

0800b1be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b1be:	b480      	push	{r7}
 800b1c0:	b085      	sub	sp, #20
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
 800b1c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	68fa      	ldr	r2, [r7, #12]
 800b1d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	689a      	ldr	r2, [r3, #8]
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	689b      	ldr	r3, [r3, #8]
 800b1e0:	683a      	ldr	r2, [r7, #0]
 800b1e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	683a      	ldr	r2, [r7, #0]
 800b1e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	687a      	ldr	r2, [r7, #4]
 800b1ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	1c5a      	adds	r2, r3, #1
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	601a      	str	r2, [r3, #0]
}
 800b1fa:	bf00      	nop
 800b1fc:	3714      	adds	r7, #20
 800b1fe:	46bd      	mov	sp, r7
 800b200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b204:	4770      	bx	lr

0800b206 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b206:	b480      	push	{r7}
 800b208:	b085      	sub	sp, #20
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
 800b20e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b21c:	d103      	bne.n	800b226 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	691b      	ldr	r3, [r3, #16]
 800b222:	60fb      	str	r3, [r7, #12]
 800b224:	e00c      	b.n	800b240 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	3308      	adds	r3, #8
 800b22a:	60fb      	str	r3, [r7, #12]
 800b22c:	e002      	b.n	800b234 <vListInsert+0x2e>
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	60fb      	str	r3, [r7, #12]
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	68ba      	ldr	r2, [r7, #8]
 800b23c:	429a      	cmp	r2, r3
 800b23e:	d2f6      	bcs.n	800b22e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	685a      	ldr	r2, [r3, #4]
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	685b      	ldr	r3, [r3, #4]
 800b24c:	683a      	ldr	r2, [r7, #0]
 800b24e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	68fa      	ldr	r2, [r7, #12]
 800b254:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	683a      	ldr	r2, [r7, #0]
 800b25a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	1c5a      	adds	r2, r3, #1
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	601a      	str	r2, [r3, #0]
}
 800b26c:	bf00      	nop
 800b26e:	3714      	adds	r7, #20
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr

0800b278 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b278:	b480      	push	{r7}
 800b27a:	b085      	sub	sp, #20
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	691b      	ldr	r3, [r3, #16]
 800b284:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	6892      	ldr	r2, [r2, #8]
 800b28e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	689b      	ldr	r3, [r3, #8]
 800b294:	687a      	ldr	r2, [r7, #4]
 800b296:	6852      	ldr	r2, [r2, #4]
 800b298:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	687a      	ldr	r2, [r7, #4]
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d103      	bne.n	800b2ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	689a      	ldr	r2, [r3, #8]
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	1e5a      	subs	r2, r3, #1
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3714      	adds	r7, #20
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr

0800b2cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b084      	sub	sp, #16
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d10a      	bne.n	800b2f6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e4:	f383 8811 	msr	BASEPRI, r3
 800b2e8:	f3bf 8f6f 	isb	sy
 800b2ec:	f3bf 8f4f 	dsb	sy
 800b2f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b2f2:	bf00      	nop
 800b2f4:	e7fe      	b.n	800b2f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b2f6:	f002 f95d 	bl	800d5b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b302:	68f9      	ldr	r1, [r7, #12]
 800b304:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b306:	fb01 f303 	mul.w	r3, r1, r3
 800b30a:	441a      	add	r2, r3
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2200      	movs	r2, #0
 800b314:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681a      	ldr	r2, [r3, #0]
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681a      	ldr	r2, [r3, #0]
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b326:	3b01      	subs	r3, #1
 800b328:	68f9      	ldr	r1, [r7, #12]
 800b32a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b32c:	fb01 f303 	mul.w	r3, r1, r3
 800b330:	441a      	add	r2, r3
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	22ff      	movs	r2, #255	; 0xff
 800b33a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	22ff      	movs	r2, #255	; 0xff
 800b342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d114      	bne.n	800b376 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	691b      	ldr	r3, [r3, #16]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d01a      	beq.n	800b38a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	3310      	adds	r3, #16
 800b358:	4618      	mov	r0, r3
 800b35a:	f001 fa0d 	bl	800c778 <xTaskRemoveFromEventList>
 800b35e:	4603      	mov	r3, r0
 800b360:	2b00      	cmp	r3, #0
 800b362:	d012      	beq.n	800b38a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b364:	4b0c      	ldr	r3, [pc, #48]	; (800b398 <xQueueGenericReset+0xcc>)
 800b366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b36a:	601a      	str	r2, [r3, #0]
 800b36c:	f3bf 8f4f 	dsb	sy
 800b370:	f3bf 8f6f 	isb	sy
 800b374:	e009      	b.n	800b38a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	3310      	adds	r3, #16
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7ff fef2 	bl	800b164 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	3324      	adds	r3, #36	; 0x24
 800b384:	4618      	mov	r0, r3
 800b386:	f7ff feed 	bl	800b164 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b38a:	f002 f943 	bl	800d614 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b38e:	2301      	movs	r3, #1
}
 800b390:	4618      	mov	r0, r3
 800b392:	3710      	adds	r7, #16
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}
 800b398:	e000ed04 	.word	0xe000ed04

0800b39c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b08e      	sub	sp, #56	; 0x38
 800b3a0:	af02      	add	r7, sp, #8
 800b3a2:	60f8      	str	r0, [r7, #12]
 800b3a4:	60b9      	str	r1, [r7, #8]
 800b3a6:	607a      	str	r2, [r7, #4]
 800b3a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d10a      	bne.n	800b3c6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b4:	f383 8811 	msr	BASEPRI, r3
 800b3b8:	f3bf 8f6f 	isb	sy
 800b3bc:	f3bf 8f4f 	dsb	sy
 800b3c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b3c2:	bf00      	nop
 800b3c4:	e7fe      	b.n	800b3c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d10a      	bne.n	800b3e2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d0:	f383 8811 	msr	BASEPRI, r3
 800b3d4:	f3bf 8f6f 	isb	sy
 800b3d8:	f3bf 8f4f 	dsb	sy
 800b3dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b3de:	bf00      	nop
 800b3e0:	e7fe      	b.n	800b3e0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d002      	beq.n	800b3ee <xQueueGenericCreateStatic+0x52>
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d001      	beq.n	800b3f2 <xQueueGenericCreateStatic+0x56>
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	e000      	b.n	800b3f4 <xQueueGenericCreateStatic+0x58>
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d10a      	bne.n	800b40e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3fc:	f383 8811 	msr	BASEPRI, r3
 800b400:	f3bf 8f6f 	isb	sy
 800b404:	f3bf 8f4f 	dsb	sy
 800b408:	623b      	str	r3, [r7, #32]
}
 800b40a:	bf00      	nop
 800b40c:	e7fe      	b.n	800b40c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d102      	bne.n	800b41a <xQueueGenericCreateStatic+0x7e>
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d101      	bne.n	800b41e <xQueueGenericCreateStatic+0x82>
 800b41a:	2301      	movs	r3, #1
 800b41c:	e000      	b.n	800b420 <xQueueGenericCreateStatic+0x84>
 800b41e:	2300      	movs	r3, #0
 800b420:	2b00      	cmp	r3, #0
 800b422:	d10a      	bne.n	800b43a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b428:	f383 8811 	msr	BASEPRI, r3
 800b42c:	f3bf 8f6f 	isb	sy
 800b430:	f3bf 8f4f 	dsb	sy
 800b434:	61fb      	str	r3, [r7, #28]
}
 800b436:	bf00      	nop
 800b438:	e7fe      	b.n	800b438 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b43a:	2350      	movs	r3, #80	; 0x50
 800b43c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	2b50      	cmp	r3, #80	; 0x50
 800b442:	d00a      	beq.n	800b45a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b448:	f383 8811 	msr	BASEPRI, r3
 800b44c:	f3bf 8f6f 	isb	sy
 800b450:	f3bf 8f4f 	dsb	sy
 800b454:	61bb      	str	r3, [r7, #24]
}
 800b456:	bf00      	nop
 800b458:	e7fe      	b.n	800b458 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b45a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b462:	2b00      	cmp	r3, #0
 800b464:	d00d      	beq.n	800b482 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b468:	2201      	movs	r2, #1
 800b46a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b46e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b474:	9300      	str	r3, [sp, #0]
 800b476:	4613      	mov	r3, r2
 800b478:	687a      	ldr	r2, [r7, #4]
 800b47a:	68b9      	ldr	r1, [r7, #8]
 800b47c:	68f8      	ldr	r0, [r7, #12]
 800b47e:	f000 f83f 	bl	800b500 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b484:	4618      	mov	r0, r3
 800b486:	3730      	adds	r7, #48	; 0x30
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b08a      	sub	sp, #40	; 0x28
 800b490:	af02      	add	r7, sp, #8
 800b492:	60f8      	str	r0, [r7, #12]
 800b494:	60b9      	str	r1, [r7, #8]
 800b496:	4613      	mov	r3, r2
 800b498:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d10a      	bne.n	800b4b6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a4:	f383 8811 	msr	BASEPRI, r3
 800b4a8:	f3bf 8f6f 	isb	sy
 800b4ac:	f3bf 8f4f 	dsb	sy
 800b4b0:	613b      	str	r3, [r7, #16]
}
 800b4b2:	bf00      	nop
 800b4b4:	e7fe      	b.n	800b4b4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	68ba      	ldr	r2, [r7, #8]
 800b4ba:	fb02 f303 	mul.w	r3, r2, r3
 800b4be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b4c0:	69fb      	ldr	r3, [r7, #28]
 800b4c2:	3350      	adds	r3, #80	; 0x50
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f002 f997 	bl	800d7f8 <pvPortMalloc>
 800b4ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b4cc:	69bb      	ldr	r3, [r7, #24]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d011      	beq.n	800b4f6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b4d2:	69bb      	ldr	r3, [r7, #24]
 800b4d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	3350      	adds	r3, #80	; 0x50
 800b4da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b4dc:	69bb      	ldr	r3, [r7, #24]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b4e4:	79fa      	ldrb	r2, [r7, #7]
 800b4e6:	69bb      	ldr	r3, [r7, #24]
 800b4e8:	9300      	str	r3, [sp, #0]
 800b4ea:	4613      	mov	r3, r2
 800b4ec:	697a      	ldr	r2, [r7, #20]
 800b4ee:	68b9      	ldr	r1, [r7, #8]
 800b4f0:	68f8      	ldr	r0, [r7, #12]
 800b4f2:	f000 f805 	bl	800b500 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b4f6:	69bb      	ldr	r3, [r7, #24]
	}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3720      	adds	r7, #32
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}

0800b500 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
 800b506:	60f8      	str	r0, [r7, #12]
 800b508:	60b9      	str	r1, [r7, #8]
 800b50a:	607a      	str	r2, [r7, #4]
 800b50c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d103      	bne.n	800b51c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b514:	69bb      	ldr	r3, [r7, #24]
 800b516:	69ba      	ldr	r2, [r7, #24]
 800b518:	601a      	str	r2, [r3, #0]
 800b51a:	e002      	b.n	800b522 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b51c:	69bb      	ldr	r3, [r7, #24]
 800b51e:	687a      	ldr	r2, [r7, #4]
 800b520:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b522:	69bb      	ldr	r3, [r7, #24]
 800b524:	68fa      	ldr	r2, [r7, #12]
 800b526:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b528:	69bb      	ldr	r3, [r7, #24]
 800b52a:	68ba      	ldr	r2, [r7, #8]
 800b52c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b52e:	2101      	movs	r1, #1
 800b530:	69b8      	ldr	r0, [r7, #24]
 800b532:	f7ff fecb 	bl	800b2cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b536:	69bb      	ldr	r3, [r7, #24]
 800b538:	78fa      	ldrb	r2, [r7, #3]
 800b53a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b53e:	bf00      	nop
 800b540:	3710      	adds	r7, #16
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}
	...

0800b548 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b08e      	sub	sp, #56	; 0x38
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	60f8      	str	r0, [r7, #12]
 800b550:	60b9      	str	r1, [r7, #8]
 800b552:	607a      	str	r2, [r7, #4]
 800b554:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b556:	2300      	movs	r3, #0
 800b558:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b560:	2b00      	cmp	r3, #0
 800b562:	d10a      	bne.n	800b57a <xQueueGenericSend+0x32>
	__asm volatile
 800b564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b568:	f383 8811 	msr	BASEPRI, r3
 800b56c:	f3bf 8f6f 	isb	sy
 800b570:	f3bf 8f4f 	dsb	sy
 800b574:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b576:	bf00      	nop
 800b578:	e7fe      	b.n	800b578 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d103      	bne.n	800b588 <xQueueGenericSend+0x40>
 800b580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b584:	2b00      	cmp	r3, #0
 800b586:	d101      	bne.n	800b58c <xQueueGenericSend+0x44>
 800b588:	2301      	movs	r3, #1
 800b58a:	e000      	b.n	800b58e <xQueueGenericSend+0x46>
 800b58c:	2300      	movs	r3, #0
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d10a      	bne.n	800b5a8 <xQueueGenericSend+0x60>
	__asm volatile
 800b592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b596:	f383 8811 	msr	BASEPRI, r3
 800b59a:	f3bf 8f6f 	isb	sy
 800b59e:	f3bf 8f4f 	dsb	sy
 800b5a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b5a4:	bf00      	nop
 800b5a6:	e7fe      	b.n	800b5a6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	2b02      	cmp	r3, #2
 800b5ac:	d103      	bne.n	800b5b6 <xQueueGenericSend+0x6e>
 800b5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d101      	bne.n	800b5ba <xQueueGenericSend+0x72>
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	e000      	b.n	800b5bc <xQueueGenericSend+0x74>
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d10a      	bne.n	800b5d6 <xQueueGenericSend+0x8e>
	__asm volatile
 800b5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c4:	f383 8811 	msr	BASEPRI, r3
 800b5c8:	f3bf 8f6f 	isb	sy
 800b5cc:	f3bf 8f4f 	dsb	sy
 800b5d0:	623b      	str	r3, [r7, #32]
}
 800b5d2:	bf00      	nop
 800b5d4:	e7fe      	b.n	800b5d4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b5d6:	f001 fa93 	bl	800cb00 <xTaskGetSchedulerState>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d102      	bne.n	800b5e6 <xQueueGenericSend+0x9e>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d101      	bne.n	800b5ea <xQueueGenericSend+0xa2>
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	e000      	b.n	800b5ec <xQueueGenericSend+0xa4>
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d10a      	bne.n	800b606 <xQueueGenericSend+0xbe>
	__asm volatile
 800b5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f4:	f383 8811 	msr	BASEPRI, r3
 800b5f8:	f3bf 8f6f 	isb	sy
 800b5fc:	f3bf 8f4f 	dsb	sy
 800b600:	61fb      	str	r3, [r7, #28]
}
 800b602:	bf00      	nop
 800b604:	e7fe      	b.n	800b604 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b606:	f001 ffd5 	bl	800d5b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b60c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b612:	429a      	cmp	r2, r3
 800b614:	d302      	bcc.n	800b61c <xQueueGenericSend+0xd4>
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	2b02      	cmp	r3, #2
 800b61a:	d129      	bne.n	800b670 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b61c:	683a      	ldr	r2, [r7, #0]
 800b61e:	68b9      	ldr	r1, [r7, #8]
 800b620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b622:	f000 fa8b 	bl	800bb3c <prvCopyDataToQueue>
 800b626:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d010      	beq.n	800b652 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b632:	3324      	adds	r3, #36	; 0x24
 800b634:	4618      	mov	r0, r3
 800b636:	f001 f89f 	bl	800c778 <xTaskRemoveFromEventList>
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d013      	beq.n	800b668 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b640:	4b3f      	ldr	r3, [pc, #252]	; (800b740 <xQueueGenericSend+0x1f8>)
 800b642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b646:	601a      	str	r2, [r3, #0]
 800b648:	f3bf 8f4f 	dsb	sy
 800b64c:	f3bf 8f6f 	isb	sy
 800b650:	e00a      	b.n	800b668 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b654:	2b00      	cmp	r3, #0
 800b656:	d007      	beq.n	800b668 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b658:	4b39      	ldr	r3, [pc, #228]	; (800b740 <xQueueGenericSend+0x1f8>)
 800b65a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b65e:	601a      	str	r2, [r3, #0]
 800b660:	f3bf 8f4f 	dsb	sy
 800b664:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b668:	f001 ffd4 	bl	800d614 <vPortExitCritical>
				return pdPASS;
 800b66c:	2301      	movs	r3, #1
 800b66e:	e063      	b.n	800b738 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d103      	bne.n	800b67e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b676:	f001 ffcd 	bl	800d614 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b67a:	2300      	movs	r3, #0
 800b67c:	e05c      	b.n	800b738 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b67e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b680:	2b00      	cmp	r3, #0
 800b682:	d106      	bne.n	800b692 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b684:	f107 0314 	add.w	r3, r7, #20
 800b688:	4618      	mov	r0, r3
 800b68a:	f001 f8d9 	bl	800c840 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b68e:	2301      	movs	r3, #1
 800b690:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b692:	f001 ffbf 	bl	800d614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b696:	f000 fe1f 	bl	800c2d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b69a:	f001 ff8b 	bl	800d5b4 <vPortEnterCritical>
 800b69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6a4:	b25b      	sxtb	r3, r3
 800b6a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6aa:	d103      	bne.n	800b6b4 <xQueueGenericSend+0x16c>
 800b6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b6ba:	b25b      	sxtb	r3, r3
 800b6bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6c0:	d103      	bne.n	800b6ca <xQueueGenericSend+0x182>
 800b6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b6ca:	f001 ffa3 	bl	800d614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b6ce:	1d3a      	adds	r2, r7, #4
 800b6d0:	f107 0314 	add.w	r3, r7, #20
 800b6d4:	4611      	mov	r1, r2
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f001 f8c8 	bl	800c86c <xTaskCheckForTimeOut>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d124      	bne.n	800b72c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b6e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6e4:	f000 fb22 	bl	800bd2c <prvIsQueueFull>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d018      	beq.n	800b720 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f0:	3310      	adds	r3, #16
 800b6f2:	687a      	ldr	r2, [r7, #4]
 800b6f4:	4611      	mov	r1, r2
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f000 ffee 	bl	800c6d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b6fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6fe:	f000 faad 	bl	800bc5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b702:	f000 fdf7 	bl	800c2f4 <xTaskResumeAll>
 800b706:	4603      	mov	r3, r0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	f47f af7c 	bne.w	800b606 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b70e:	4b0c      	ldr	r3, [pc, #48]	; (800b740 <xQueueGenericSend+0x1f8>)
 800b710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b714:	601a      	str	r2, [r3, #0]
 800b716:	f3bf 8f4f 	dsb	sy
 800b71a:	f3bf 8f6f 	isb	sy
 800b71e:	e772      	b.n	800b606 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b720:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b722:	f000 fa9b 	bl	800bc5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b726:	f000 fde5 	bl	800c2f4 <xTaskResumeAll>
 800b72a:	e76c      	b.n	800b606 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b72c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b72e:	f000 fa95 	bl	800bc5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b732:	f000 fddf 	bl	800c2f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b736:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3738      	adds	r7, #56	; 0x38
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}
 800b740:	e000ed04 	.word	0xe000ed04

0800b744 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b090      	sub	sp, #64	; 0x40
 800b748:	af00      	add	r7, sp, #0
 800b74a:	60f8      	str	r0, [r7, #12]
 800b74c:	60b9      	str	r1, [r7, #8]
 800b74e:	607a      	str	r2, [r7, #4]
 800b750:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d10a      	bne.n	800b772 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b760:	f383 8811 	msr	BASEPRI, r3
 800b764:	f3bf 8f6f 	isb	sy
 800b768:	f3bf 8f4f 	dsb	sy
 800b76c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b76e:	bf00      	nop
 800b770:	e7fe      	b.n	800b770 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d103      	bne.n	800b780 <xQueueGenericSendFromISR+0x3c>
 800b778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b77a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d101      	bne.n	800b784 <xQueueGenericSendFromISR+0x40>
 800b780:	2301      	movs	r3, #1
 800b782:	e000      	b.n	800b786 <xQueueGenericSendFromISR+0x42>
 800b784:	2300      	movs	r3, #0
 800b786:	2b00      	cmp	r3, #0
 800b788:	d10a      	bne.n	800b7a0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78e:	f383 8811 	msr	BASEPRI, r3
 800b792:	f3bf 8f6f 	isb	sy
 800b796:	f3bf 8f4f 	dsb	sy
 800b79a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b79c:	bf00      	nop
 800b79e:	e7fe      	b.n	800b79e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	2b02      	cmp	r3, #2
 800b7a4:	d103      	bne.n	800b7ae <xQueueGenericSendFromISR+0x6a>
 800b7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d101      	bne.n	800b7b2 <xQueueGenericSendFromISR+0x6e>
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	e000      	b.n	800b7b4 <xQueueGenericSendFromISR+0x70>
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d10a      	bne.n	800b7ce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7bc:	f383 8811 	msr	BASEPRI, r3
 800b7c0:	f3bf 8f6f 	isb	sy
 800b7c4:	f3bf 8f4f 	dsb	sy
 800b7c8:	623b      	str	r3, [r7, #32]
}
 800b7ca:	bf00      	nop
 800b7cc:	e7fe      	b.n	800b7cc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b7ce:	f001 ffd3 	bl	800d778 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b7d2:	f3ef 8211 	mrs	r2, BASEPRI
 800b7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7da:	f383 8811 	msr	BASEPRI, r3
 800b7de:	f3bf 8f6f 	isb	sy
 800b7e2:	f3bf 8f4f 	dsb	sy
 800b7e6:	61fa      	str	r2, [r7, #28]
 800b7e8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b7ea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b7ec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	d302      	bcc.n	800b800 <xQueueGenericSendFromISR+0xbc>
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	2b02      	cmp	r3, #2
 800b7fe:	d12f      	bne.n	800b860 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b802:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b80c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b80e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b810:	683a      	ldr	r2, [r7, #0]
 800b812:	68b9      	ldr	r1, [r7, #8]
 800b814:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b816:	f000 f991 	bl	800bb3c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b81a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b81e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b822:	d112      	bne.n	800b84a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d016      	beq.n	800b85a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b82e:	3324      	adds	r3, #36	; 0x24
 800b830:	4618      	mov	r0, r3
 800b832:	f000 ffa1 	bl	800c778 <xTaskRemoveFromEventList>
 800b836:	4603      	mov	r3, r0
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d00e      	beq.n	800b85a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d00b      	beq.n	800b85a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2201      	movs	r2, #1
 800b846:	601a      	str	r2, [r3, #0]
 800b848:	e007      	b.n	800b85a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b84a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b84e:	3301      	adds	r3, #1
 800b850:	b2db      	uxtb	r3, r3
 800b852:	b25a      	sxtb	r2, r3
 800b854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b85a:	2301      	movs	r3, #1
 800b85c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b85e:	e001      	b.n	800b864 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b860:	2300      	movs	r3, #0
 800b862:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b866:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b86e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b872:	4618      	mov	r0, r3
 800b874:	3740      	adds	r7, #64	; 0x40
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
	...

0800b87c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b08c      	sub	sp, #48	; 0x30
 800b880:	af00      	add	r7, sp, #0
 800b882:	60f8      	str	r0, [r7, #12]
 800b884:	60b9      	str	r1, [r7, #8]
 800b886:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b888:	2300      	movs	r3, #0
 800b88a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b892:	2b00      	cmp	r3, #0
 800b894:	d10a      	bne.n	800b8ac <xQueueReceive+0x30>
	__asm volatile
 800b896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89a:	f383 8811 	msr	BASEPRI, r3
 800b89e:	f3bf 8f6f 	isb	sy
 800b8a2:	f3bf 8f4f 	dsb	sy
 800b8a6:	623b      	str	r3, [r7, #32]
}
 800b8a8:	bf00      	nop
 800b8aa:	e7fe      	b.n	800b8aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d103      	bne.n	800b8ba <xQueueReceive+0x3e>
 800b8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d101      	bne.n	800b8be <xQueueReceive+0x42>
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	e000      	b.n	800b8c0 <xQueueReceive+0x44>
 800b8be:	2300      	movs	r3, #0
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d10a      	bne.n	800b8da <xQueueReceive+0x5e>
	__asm volatile
 800b8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c8:	f383 8811 	msr	BASEPRI, r3
 800b8cc:	f3bf 8f6f 	isb	sy
 800b8d0:	f3bf 8f4f 	dsb	sy
 800b8d4:	61fb      	str	r3, [r7, #28]
}
 800b8d6:	bf00      	nop
 800b8d8:	e7fe      	b.n	800b8d8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b8da:	f001 f911 	bl	800cb00 <xTaskGetSchedulerState>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d102      	bne.n	800b8ea <xQueueReceive+0x6e>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d101      	bne.n	800b8ee <xQueueReceive+0x72>
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	e000      	b.n	800b8f0 <xQueueReceive+0x74>
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d10a      	bne.n	800b90a <xQueueReceive+0x8e>
	__asm volatile
 800b8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f8:	f383 8811 	msr	BASEPRI, r3
 800b8fc:	f3bf 8f6f 	isb	sy
 800b900:	f3bf 8f4f 	dsb	sy
 800b904:	61bb      	str	r3, [r7, #24]
}
 800b906:	bf00      	nop
 800b908:	e7fe      	b.n	800b908 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b90a:	f001 fe53 	bl	800d5b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b912:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b916:	2b00      	cmp	r3, #0
 800b918:	d01f      	beq.n	800b95a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b91a:	68b9      	ldr	r1, [r7, #8]
 800b91c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b91e:	f000 f977 	bl	800bc10 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b924:	1e5a      	subs	r2, r3, #1
 800b926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b928:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92c:	691b      	ldr	r3, [r3, #16]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d00f      	beq.n	800b952 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b934:	3310      	adds	r3, #16
 800b936:	4618      	mov	r0, r3
 800b938:	f000 ff1e 	bl	800c778 <xTaskRemoveFromEventList>
 800b93c:	4603      	mov	r3, r0
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d007      	beq.n	800b952 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b942:	4b3d      	ldr	r3, [pc, #244]	; (800ba38 <xQueueReceive+0x1bc>)
 800b944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b948:	601a      	str	r2, [r3, #0]
 800b94a:	f3bf 8f4f 	dsb	sy
 800b94e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b952:	f001 fe5f 	bl	800d614 <vPortExitCritical>
				return pdPASS;
 800b956:	2301      	movs	r3, #1
 800b958:	e069      	b.n	800ba2e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d103      	bne.n	800b968 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b960:	f001 fe58 	bl	800d614 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b964:	2300      	movs	r3, #0
 800b966:	e062      	b.n	800ba2e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d106      	bne.n	800b97c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b96e:	f107 0310 	add.w	r3, r7, #16
 800b972:	4618      	mov	r0, r3
 800b974:	f000 ff64 	bl	800c840 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b978:	2301      	movs	r3, #1
 800b97a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b97c:	f001 fe4a 	bl	800d614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b980:	f000 fcaa 	bl	800c2d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b984:	f001 fe16 	bl	800d5b4 <vPortEnterCritical>
 800b988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b98a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b98e:	b25b      	sxtb	r3, r3
 800b990:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b994:	d103      	bne.n	800b99e <xQueueReceive+0x122>
 800b996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b998:	2200      	movs	r2, #0
 800b99a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9a4:	b25b      	sxtb	r3, r3
 800b9a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9aa:	d103      	bne.n	800b9b4 <xQueueReceive+0x138>
 800b9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b9b4:	f001 fe2e 	bl	800d614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b9b8:	1d3a      	adds	r2, r7, #4
 800b9ba:	f107 0310 	add.w	r3, r7, #16
 800b9be:	4611      	mov	r1, r2
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f000 ff53 	bl	800c86c <xTaskCheckForTimeOut>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d123      	bne.n	800ba14 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b9cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9ce:	f000 f997 	bl	800bd00 <prvIsQueueEmpty>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d017      	beq.n	800ba08 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9da:	3324      	adds	r3, #36	; 0x24
 800b9dc:	687a      	ldr	r2, [r7, #4]
 800b9de:	4611      	mov	r1, r2
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f000 fe79 	bl	800c6d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b9e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9e8:	f000 f938 	bl	800bc5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b9ec:	f000 fc82 	bl	800c2f4 <xTaskResumeAll>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d189      	bne.n	800b90a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b9f6:	4b10      	ldr	r3, [pc, #64]	; (800ba38 <xQueueReceive+0x1bc>)
 800b9f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9fc:	601a      	str	r2, [r3, #0]
 800b9fe:	f3bf 8f4f 	dsb	sy
 800ba02:	f3bf 8f6f 	isb	sy
 800ba06:	e780      	b.n	800b90a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ba08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba0a:	f000 f927 	bl	800bc5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ba0e:	f000 fc71 	bl	800c2f4 <xTaskResumeAll>
 800ba12:	e77a      	b.n	800b90a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ba14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba16:	f000 f921 	bl	800bc5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ba1a:	f000 fc6b 	bl	800c2f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba20:	f000 f96e 	bl	800bd00 <prvIsQueueEmpty>
 800ba24:	4603      	mov	r3, r0
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	f43f af6f 	beq.w	800b90a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ba2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3730      	adds	r7, #48	; 0x30
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}
 800ba36:	bf00      	nop
 800ba38:	e000ed04 	.word	0xe000ed04

0800ba3c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b08e      	sub	sp, #56	; 0x38
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	60f8      	str	r0, [r7, #12]
 800ba44:	60b9      	str	r1, [r7, #8]
 800ba46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ba4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d10a      	bne.n	800ba68 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ba52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba56:	f383 8811 	msr	BASEPRI, r3
 800ba5a:	f3bf 8f6f 	isb	sy
 800ba5e:	f3bf 8f4f 	dsb	sy
 800ba62:	623b      	str	r3, [r7, #32]
}
 800ba64:	bf00      	nop
 800ba66:	e7fe      	b.n	800ba66 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d103      	bne.n	800ba76 <xQueueReceiveFromISR+0x3a>
 800ba6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d101      	bne.n	800ba7a <xQueueReceiveFromISR+0x3e>
 800ba76:	2301      	movs	r3, #1
 800ba78:	e000      	b.n	800ba7c <xQueueReceiveFromISR+0x40>
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d10a      	bne.n	800ba96 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ba80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba84:	f383 8811 	msr	BASEPRI, r3
 800ba88:	f3bf 8f6f 	isb	sy
 800ba8c:	f3bf 8f4f 	dsb	sy
 800ba90:	61fb      	str	r3, [r7, #28]
}
 800ba92:	bf00      	nop
 800ba94:	e7fe      	b.n	800ba94 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ba96:	f001 fe6f 	bl	800d778 <vPortValidateInterruptPriority>
	__asm volatile
 800ba9a:	f3ef 8211 	mrs	r2, BASEPRI
 800ba9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa2:	f383 8811 	msr	BASEPRI, r3
 800baa6:	f3bf 8f6f 	isb	sy
 800baaa:	f3bf 8f4f 	dsb	sy
 800baae:	61ba      	str	r2, [r7, #24]
 800bab0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bab2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bab4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800babc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d02f      	beq.n	800bb22 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bacc:	68b9      	ldr	r1, [r7, #8]
 800bace:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bad0:	f000 f89e 	bl	800bc10 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad6:	1e5a      	subs	r2, r3, #1
 800bad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bada:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800badc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bae4:	d112      	bne.n	800bb0c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae8:	691b      	ldr	r3, [r3, #16]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d016      	beq.n	800bb1c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800baee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf0:	3310      	adds	r3, #16
 800baf2:	4618      	mov	r0, r3
 800baf4:	f000 fe40 	bl	800c778 <xTaskRemoveFromEventList>
 800baf8:	4603      	mov	r3, r0
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d00e      	beq.n	800bb1c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d00b      	beq.n	800bb1c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2201      	movs	r2, #1
 800bb08:	601a      	str	r2, [r3, #0]
 800bb0a:	e007      	b.n	800bb1c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bb0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb10:	3301      	adds	r3, #1
 800bb12:	b2db      	uxtb	r3, r3
 800bb14:	b25a      	sxtb	r2, r3
 800bb16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	637b      	str	r3, [r7, #52]	; 0x34
 800bb20:	e001      	b.n	800bb26 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800bb22:	2300      	movs	r3, #0
 800bb24:	637b      	str	r3, [r7, #52]	; 0x34
 800bb26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb28:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	f383 8811 	msr	BASEPRI, r3
}
 800bb30:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bb32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3738      	adds	r7, #56	; 0x38
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b086      	sub	sp, #24
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	60f8      	str	r0, [r7, #12]
 800bb44:	60b9      	str	r1, [r7, #8]
 800bb46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb50:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d10d      	bne.n	800bb76 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d14d      	bne.n	800bbfe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	689b      	ldr	r3, [r3, #8]
 800bb66:	4618      	mov	r0, r3
 800bb68:	f000 ffe8 	bl	800cb3c <xTaskPriorityDisinherit>
 800bb6c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2200      	movs	r2, #0
 800bb72:	609a      	str	r2, [r3, #8]
 800bb74:	e043      	b.n	800bbfe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d119      	bne.n	800bbb0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	6858      	ldr	r0, [r3, #4]
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb84:	461a      	mov	r2, r3
 800bb86:	68b9      	ldr	r1, [r7, #8]
 800bb88:	f002 fc82 	bl	800e490 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	685a      	ldr	r2, [r3, #4]
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb94:	441a      	add	r2, r3
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	685a      	ldr	r2, [r3, #4]
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	689b      	ldr	r3, [r3, #8]
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d32b      	bcc.n	800bbfe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681a      	ldr	r2, [r3, #0]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	605a      	str	r2, [r3, #4]
 800bbae:	e026      	b.n	800bbfe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	68d8      	ldr	r0, [r3, #12]
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbb8:	461a      	mov	r2, r3
 800bbba:	68b9      	ldr	r1, [r7, #8]
 800bbbc:	f002 fc68 	bl	800e490 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	68da      	ldr	r2, [r3, #12]
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbc8:	425b      	negs	r3, r3
 800bbca:	441a      	add	r2, r3
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	68da      	ldr	r2, [r3, #12]
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d207      	bcs.n	800bbec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	689a      	ldr	r2, [r3, #8]
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbe4:	425b      	negs	r3, r3
 800bbe6:	441a      	add	r2, r3
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2b02      	cmp	r3, #2
 800bbf0:	d105      	bne.n	800bbfe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d002      	beq.n	800bbfe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	3b01      	subs	r3, #1
 800bbfc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	1c5a      	adds	r2, r3, #1
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bc06:	697b      	ldr	r3, [r7, #20]
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3718      	adds	r7, #24
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}

0800bc10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b082      	sub	sp, #8
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d018      	beq.n	800bc54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	68da      	ldr	r2, [r3, #12]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc2a:	441a      	add	r2, r3
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	68da      	ldr	r2, [r3, #12]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	429a      	cmp	r2, r3
 800bc3a:	d303      	bcc.n	800bc44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681a      	ldr	r2, [r3, #0]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	68d9      	ldr	r1, [r3, #12]
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	6838      	ldr	r0, [r7, #0]
 800bc50:	f002 fc1e 	bl	800e490 <memcpy>
	}
}
 800bc54:	bf00      	nop
 800bc56:	3708      	adds	r7, #8
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}

0800bc5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b084      	sub	sp, #16
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bc64:	f001 fca6 	bl	800d5b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bc70:	e011      	b.n	800bc96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d012      	beq.n	800bca0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	3324      	adds	r3, #36	; 0x24
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f000 fd7a 	bl	800c778 <xTaskRemoveFromEventList>
 800bc84:	4603      	mov	r3, r0
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d001      	beq.n	800bc8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bc8a:	f000 fe51 	bl	800c930 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bc8e:	7bfb      	ldrb	r3, [r7, #15]
 800bc90:	3b01      	subs	r3, #1
 800bc92:	b2db      	uxtb	r3, r3
 800bc94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bc96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	dce9      	bgt.n	800bc72 <prvUnlockQueue+0x16>
 800bc9e:	e000      	b.n	800bca2 <prvUnlockQueue+0x46>
					break;
 800bca0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	22ff      	movs	r2, #255	; 0xff
 800bca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bcaa:	f001 fcb3 	bl	800d614 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bcae:	f001 fc81 	bl	800d5b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bcb8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bcba:	e011      	b.n	800bce0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	691b      	ldr	r3, [r3, #16]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d012      	beq.n	800bcea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	3310      	adds	r3, #16
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f000 fd55 	bl	800c778 <xTaskRemoveFromEventList>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d001      	beq.n	800bcd8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bcd4:	f000 fe2c 	bl	800c930 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bcd8:	7bbb      	ldrb	r3, [r7, #14]
 800bcda:	3b01      	subs	r3, #1
 800bcdc:	b2db      	uxtb	r3, r3
 800bcde:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bce0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	dce9      	bgt.n	800bcbc <prvUnlockQueue+0x60>
 800bce8:	e000      	b.n	800bcec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bcea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	22ff      	movs	r2, #255	; 0xff
 800bcf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bcf4:	f001 fc8e 	bl	800d614 <vPortExitCritical>
}
 800bcf8:	bf00      	nop
 800bcfa:	3710      	adds	r7, #16
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}

0800bd00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b084      	sub	sp, #16
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bd08:	f001 fc54 	bl	800d5b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d102      	bne.n	800bd1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bd14:	2301      	movs	r3, #1
 800bd16:	60fb      	str	r3, [r7, #12]
 800bd18:	e001      	b.n	800bd1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bd1e:	f001 fc79 	bl	800d614 <vPortExitCritical>

	return xReturn;
 800bd22:	68fb      	ldr	r3, [r7, #12]
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3710      	adds	r7, #16
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b084      	sub	sp, #16
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bd34:	f001 fc3e 	bl	800d5b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d102      	bne.n	800bd4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bd44:	2301      	movs	r3, #1
 800bd46:	60fb      	str	r3, [r7, #12]
 800bd48:	e001      	b.n	800bd4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bd4e:	f001 fc61 	bl	800d614 <vPortExitCritical>

	return xReturn;
 800bd52:	68fb      	ldr	r3, [r7, #12]
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3710      	adds	r7, #16
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b085      	sub	sp, #20
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd66:	2300      	movs	r3, #0
 800bd68:	60fb      	str	r3, [r7, #12]
 800bd6a:	e014      	b.n	800bd96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bd6c:	4a0f      	ldr	r2, [pc, #60]	; (800bdac <vQueueAddToRegistry+0x50>)
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d10b      	bne.n	800bd90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bd78:	490c      	ldr	r1, [pc, #48]	; (800bdac <vQueueAddToRegistry+0x50>)
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	683a      	ldr	r2, [r7, #0]
 800bd7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bd82:	4a0a      	ldr	r2, [pc, #40]	; (800bdac <vQueueAddToRegistry+0x50>)
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	00db      	lsls	r3, r3, #3
 800bd88:	4413      	add	r3, r2
 800bd8a:	687a      	ldr	r2, [r7, #4]
 800bd8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bd8e:	e006      	b.n	800bd9e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	3301      	adds	r3, #1
 800bd94:	60fb      	str	r3, [r7, #12]
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2b07      	cmp	r3, #7
 800bd9a:	d9e7      	bls.n	800bd6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bd9c:	bf00      	nop
 800bd9e:	bf00      	nop
 800bda0:	3714      	adds	r7, #20
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr
 800bdaa:	bf00      	nop
 800bdac:	20000b18 	.word	0x20000b18

0800bdb0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b086      	sub	sp, #24
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	60f8      	str	r0, [r7, #12]
 800bdb8:	60b9      	str	r1, [r7, #8]
 800bdba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bdc0:	f001 fbf8 	bl	800d5b4 <vPortEnterCritical>
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bdca:	b25b      	sxtb	r3, r3
 800bdcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdd0:	d103      	bne.n	800bdda <vQueueWaitForMessageRestricted+0x2a>
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bde0:	b25b      	sxtb	r3, r3
 800bde2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bde6:	d103      	bne.n	800bdf0 <vQueueWaitForMessageRestricted+0x40>
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	2200      	movs	r2, #0
 800bdec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bdf0:	f001 fc10 	bl	800d614 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d106      	bne.n	800be0a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	3324      	adds	r3, #36	; 0x24
 800be00:	687a      	ldr	r2, [r7, #4]
 800be02:	68b9      	ldr	r1, [r7, #8]
 800be04:	4618      	mov	r0, r3
 800be06:	f000 fc8b 	bl	800c720 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800be0a:	6978      	ldr	r0, [r7, #20]
 800be0c:	f7ff ff26 	bl	800bc5c <prvUnlockQueue>
	}
 800be10:	bf00      	nop
 800be12:	3718      	adds	r7, #24
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}

0800be18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b08e      	sub	sp, #56	; 0x38
 800be1c:	af04      	add	r7, sp, #16
 800be1e:	60f8      	str	r0, [r7, #12]
 800be20:	60b9      	str	r1, [r7, #8]
 800be22:	607a      	str	r2, [r7, #4]
 800be24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800be26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d10a      	bne.n	800be42 <xTaskCreateStatic+0x2a>
	__asm volatile
 800be2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be30:	f383 8811 	msr	BASEPRI, r3
 800be34:	f3bf 8f6f 	isb	sy
 800be38:	f3bf 8f4f 	dsb	sy
 800be3c:	623b      	str	r3, [r7, #32]
}
 800be3e:	bf00      	nop
 800be40:	e7fe      	b.n	800be40 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800be42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be44:	2b00      	cmp	r3, #0
 800be46:	d10a      	bne.n	800be5e <xTaskCreateStatic+0x46>
	__asm volatile
 800be48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be4c:	f383 8811 	msr	BASEPRI, r3
 800be50:	f3bf 8f6f 	isb	sy
 800be54:	f3bf 8f4f 	dsb	sy
 800be58:	61fb      	str	r3, [r7, #28]
}
 800be5a:	bf00      	nop
 800be5c:	e7fe      	b.n	800be5c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800be5e:	23ac      	movs	r3, #172	; 0xac
 800be60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	2bac      	cmp	r3, #172	; 0xac
 800be66:	d00a      	beq.n	800be7e <xTaskCreateStatic+0x66>
	__asm volatile
 800be68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be6c:	f383 8811 	msr	BASEPRI, r3
 800be70:	f3bf 8f6f 	isb	sy
 800be74:	f3bf 8f4f 	dsb	sy
 800be78:	61bb      	str	r3, [r7, #24]
}
 800be7a:	bf00      	nop
 800be7c:	e7fe      	b.n	800be7c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800be7e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800be80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be82:	2b00      	cmp	r3, #0
 800be84:	d01e      	beq.n	800bec4 <xTaskCreateStatic+0xac>
 800be86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d01b      	beq.n	800bec4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800be8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be8e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800be90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be94:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800be96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be98:	2202      	movs	r2, #2
 800be9a:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800be9e:	2300      	movs	r3, #0
 800bea0:	9303      	str	r3, [sp, #12]
 800bea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea4:	9302      	str	r3, [sp, #8]
 800bea6:	f107 0314 	add.w	r3, r7, #20
 800beaa:	9301      	str	r3, [sp, #4]
 800beac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beae:	9300      	str	r3, [sp, #0]
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	687a      	ldr	r2, [r7, #4]
 800beb4:	68b9      	ldr	r1, [r7, #8]
 800beb6:	68f8      	ldr	r0, [r7, #12]
 800beb8:	f000 f850 	bl	800bf5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bebc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bebe:	f000 f8f7 	bl	800c0b0 <prvAddNewTaskToReadyList>
 800bec2:	e001      	b.n	800bec8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bec4:	2300      	movs	r3, #0
 800bec6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bec8:	697b      	ldr	r3, [r7, #20]
	}
 800beca:	4618      	mov	r0, r3
 800becc:	3728      	adds	r7, #40	; 0x28
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}

0800bed2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bed2:	b580      	push	{r7, lr}
 800bed4:	b08c      	sub	sp, #48	; 0x30
 800bed6:	af04      	add	r7, sp, #16
 800bed8:	60f8      	str	r0, [r7, #12]
 800beda:	60b9      	str	r1, [r7, #8]
 800bedc:	603b      	str	r3, [r7, #0]
 800bede:	4613      	mov	r3, r2
 800bee0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bee2:	88fb      	ldrh	r3, [r7, #6]
 800bee4:	009b      	lsls	r3, r3, #2
 800bee6:	4618      	mov	r0, r3
 800bee8:	f001 fc86 	bl	800d7f8 <pvPortMalloc>
 800beec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d00e      	beq.n	800bf12 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bef4:	20ac      	movs	r0, #172	; 0xac
 800bef6:	f001 fc7f 	bl	800d7f8 <pvPortMalloc>
 800befa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800befc:	69fb      	ldr	r3, [r7, #28]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d003      	beq.n	800bf0a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bf02:	69fb      	ldr	r3, [r7, #28]
 800bf04:	697a      	ldr	r2, [r7, #20]
 800bf06:	631a      	str	r2, [r3, #48]	; 0x30
 800bf08:	e005      	b.n	800bf16 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bf0a:	6978      	ldr	r0, [r7, #20]
 800bf0c:	f001 fd44 	bl	800d998 <vPortFree>
 800bf10:	e001      	b.n	800bf16 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bf12:	2300      	movs	r3, #0
 800bf14:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bf16:	69fb      	ldr	r3, [r7, #28]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d017      	beq.n	800bf4c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bf1c:	69fb      	ldr	r3, [r7, #28]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bf24:	88fa      	ldrh	r2, [r7, #6]
 800bf26:	2300      	movs	r3, #0
 800bf28:	9303      	str	r3, [sp, #12]
 800bf2a:	69fb      	ldr	r3, [r7, #28]
 800bf2c:	9302      	str	r3, [sp, #8]
 800bf2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf30:	9301      	str	r3, [sp, #4]
 800bf32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf34:	9300      	str	r3, [sp, #0]
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	68b9      	ldr	r1, [r7, #8]
 800bf3a:	68f8      	ldr	r0, [r7, #12]
 800bf3c:	f000 f80e 	bl	800bf5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bf40:	69f8      	ldr	r0, [r7, #28]
 800bf42:	f000 f8b5 	bl	800c0b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bf46:	2301      	movs	r3, #1
 800bf48:	61bb      	str	r3, [r7, #24]
 800bf4a:	e002      	b.n	800bf52 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bf4c:	f04f 33ff 	mov.w	r3, #4294967295
 800bf50:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bf52:	69bb      	ldr	r3, [r7, #24]
	}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3720      	adds	r7, #32
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}

0800bf5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b088      	sub	sp, #32
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	60b9      	str	r1, [r7, #8]
 800bf66:	607a      	str	r2, [r7, #4]
 800bf68:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bf6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	009b      	lsls	r3, r3, #2
 800bf72:	461a      	mov	r2, r3
 800bf74:	21a5      	movs	r1, #165	; 0xa5
 800bf76:	f002 f9f1 	bl	800e35c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bf7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bf84:	3b01      	subs	r3, #1
 800bf86:	009b      	lsls	r3, r3, #2
 800bf88:	4413      	add	r3, r2
 800bf8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bf8c:	69bb      	ldr	r3, [r7, #24]
 800bf8e:	f023 0307 	bic.w	r3, r3, #7
 800bf92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bf94:	69bb      	ldr	r3, [r7, #24]
 800bf96:	f003 0307 	and.w	r3, r3, #7
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d00a      	beq.n	800bfb4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800bf9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa2:	f383 8811 	msr	BASEPRI, r3
 800bfa6:	f3bf 8f6f 	isb	sy
 800bfaa:	f3bf 8f4f 	dsb	sy
 800bfae:	617b      	str	r3, [r7, #20]
}
 800bfb0:	bf00      	nop
 800bfb2:	e7fe      	b.n	800bfb2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d01f      	beq.n	800bffa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bfba:	2300      	movs	r3, #0
 800bfbc:	61fb      	str	r3, [r7, #28]
 800bfbe:	e012      	b.n	800bfe6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bfc0:	68ba      	ldr	r2, [r7, #8]
 800bfc2:	69fb      	ldr	r3, [r7, #28]
 800bfc4:	4413      	add	r3, r2
 800bfc6:	7819      	ldrb	r1, [r3, #0]
 800bfc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfca:	69fb      	ldr	r3, [r7, #28]
 800bfcc:	4413      	add	r3, r2
 800bfce:	3334      	adds	r3, #52	; 0x34
 800bfd0:	460a      	mov	r2, r1
 800bfd2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bfd4:	68ba      	ldr	r2, [r7, #8]
 800bfd6:	69fb      	ldr	r3, [r7, #28]
 800bfd8:	4413      	add	r3, r2
 800bfda:	781b      	ldrb	r3, [r3, #0]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d006      	beq.n	800bfee <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bfe0:	69fb      	ldr	r3, [r7, #28]
 800bfe2:	3301      	adds	r3, #1
 800bfe4:	61fb      	str	r3, [r7, #28]
 800bfe6:	69fb      	ldr	r3, [r7, #28]
 800bfe8:	2b0f      	cmp	r3, #15
 800bfea:	d9e9      	bls.n	800bfc0 <prvInitialiseNewTask+0x64>
 800bfec:	e000      	b.n	800bff0 <prvInitialiseNewTask+0x94>
			{
				break;
 800bfee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff2:	2200      	movs	r2, #0
 800bff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bff8:	e003      	b.n	800c002 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffc:	2200      	movs	r2, #0
 800bffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c004:	2b37      	cmp	r3, #55	; 0x37
 800c006:	d901      	bls.n	800c00c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c008:	2337      	movs	r3, #55	; 0x37
 800c00a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c010:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c014:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c016:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01a:	2200      	movs	r2, #0
 800c01c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c020:	3304      	adds	r3, #4
 800c022:	4618      	mov	r0, r3
 800c024:	f7ff f8be 	bl	800b1a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c02a:	3318      	adds	r3, #24
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7ff f8b9 	bl	800b1a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c036:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c040:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c046:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800c048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04a:	2200      	movs	r2, #0
 800c04c:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c050:	2200      	movs	r2, #0
 800c052:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c058:	2200      	movs	r2, #0
 800c05a:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c060:	3358      	adds	r3, #88	; 0x58
 800c062:	224c      	movs	r2, #76	; 0x4c
 800c064:	2100      	movs	r1, #0
 800c066:	4618      	mov	r0, r3
 800c068:	f002 f978 	bl	800e35c <memset>
 800c06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06e:	4a0d      	ldr	r2, [pc, #52]	; (800c0a4 <prvInitialiseNewTask+0x148>)
 800c070:	65da      	str	r2, [r3, #92]	; 0x5c
 800c072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c074:	4a0c      	ldr	r2, [pc, #48]	; (800c0a8 <prvInitialiseNewTask+0x14c>)
 800c076:	661a      	str	r2, [r3, #96]	; 0x60
 800c078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07a:	4a0c      	ldr	r2, [pc, #48]	; (800c0ac <prvInitialiseNewTask+0x150>)
 800c07c:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c07e:	683a      	ldr	r2, [r7, #0]
 800c080:	68f9      	ldr	r1, [r7, #12]
 800c082:	69b8      	ldr	r0, [r7, #24]
 800c084:	f001 f96a 	bl	800d35c <pxPortInitialiseStack>
 800c088:	4602      	mov	r2, r0
 800c08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c08c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c090:	2b00      	cmp	r3, #0
 800c092:	d002      	beq.n	800c09a <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c098:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c09a:	bf00      	nop
 800c09c:	3720      	adds	r7, #32
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	bf00      	nop
 800c0a4:	200098a0 	.word	0x200098a0
 800c0a8:	20009908 	.word	0x20009908
 800c0ac:	20009970 	.word	0x20009970

0800c0b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b082      	sub	sp, #8
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c0b8:	f001 fa7c 	bl	800d5b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c0bc:	4b2d      	ldr	r3, [pc, #180]	; (800c174 <prvAddNewTaskToReadyList+0xc4>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	3301      	adds	r3, #1
 800c0c2:	4a2c      	ldr	r2, [pc, #176]	; (800c174 <prvAddNewTaskToReadyList+0xc4>)
 800c0c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c0c6:	4b2c      	ldr	r3, [pc, #176]	; (800c178 <prvAddNewTaskToReadyList+0xc8>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d109      	bne.n	800c0e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c0ce:	4a2a      	ldr	r2, [pc, #168]	; (800c178 <prvAddNewTaskToReadyList+0xc8>)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c0d4:	4b27      	ldr	r3, [pc, #156]	; (800c174 <prvAddNewTaskToReadyList+0xc4>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	2b01      	cmp	r3, #1
 800c0da:	d110      	bne.n	800c0fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c0dc:	f000 fc4e 	bl	800c97c <prvInitialiseTaskLists>
 800c0e0:	e00d      	b.n	800c0fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c0e2:	4b26      	ldr	r3, [pc, #152]	; (800c17c <prvAddNewTaskToReadyList+0xcc>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d109      	bne.n	800c0fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c0ea:	4b23      	ldr	r3, [pc, #140]	; (800c178 <prvAddNewTaskToReadyList+0xc8>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d802      	bhi.n	800c0fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c0f8:	4a1f      	ldr	r2, [pc, #124]	; (800c178 <prvAddNewTaskToReadyList+0xc8>)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c0fe:	4b20      	ldr	r3, [pc, #128]	; (800c180 <prvAddNewTaskToReadyList+0xd0>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	3301      	adds	r3, #1
 800c104:	4a1e      	ldr	r2, [pc, #120]	; (800c180 <prvAddNewTaskToReadyList+0xd0>)
 800c106:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c108:	4b1d      	ldr	r3, [pc, #116]	; (800c180 <prvAddNewTaskToReadyList+0xd0>)
 800c10a:	681a      	ldr	r2, [r3, #0]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c114:	4b1b      	ldr	r3, [pc, #108]	; (800c184 <prvAddNewTaskToReadyList+0xd4>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	429a      	cmp	r2, r3
 800c11a:	d903      	bls.n	800c124 <prvAddNewTaskToReadyList+0x74>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c120:	4a18      	ldr	r2, [pc, #96]	; (800c184 <prvAddNewTaskToReadyList+0xd4>)
 800c122:	6013      	str	r3, [r2, #0]
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c128:	4613      	mov	r3, r2
 800c12a:	009b      	lsls	r3, r3, #2
 800c12c:	4413      	add	r3, r2
 800c12e:	009b      	lsls	r3, r3, #2
 800c130:	4a15      	ldr	r2, [pc, #84]	; (800c188 <prvAddNewTaskToReadyList+0xd8>)
 800c132:	441a      	add	r2, r3
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	3304      	adds	r3, #4
 800c138:	4619      	mov	r1, r3
 800c13a:	4610      	mov	r0, r2
 800c13c:	f7ff f83f 	bl	800b1be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c140:	f001 fa68 	bl	800d614 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c144:	4b0d      	ldr	r3, [pc, #52]	; (800c17c <prvAddNewTaskToReadyList+0xcc>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d00e      	beq.n	800c16a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c14c:	4b0a      	ldr	r3, [pc, #40]	; (800c178 <prvAddNewTaskToReadyList+0xc8>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c156:	429a      	cmp	r2, r3
 800c158:	d207      	bcs.n	800c16a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c15a:	4b0c      	ldr	r3, [pc, #48]	; (800c18c <prvAddNewTaskToReadyList+0xdc>)
 800c15c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c160:	601a      	str	r2, [r3, #0]
 800c162:	f3bf 8f4f 	dsb	sy
 800c166:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c16a:	bf00      	nop
 800c16c:	3708      	adds	r7, #8
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}
 800c172:	bf00      	nop
 800c174:	2000102c 	.word	0x2000102c
 800c178:	20000b58 	.word	0x20000b58
 800c17c:	20001038 	.word	0x20001038
 800c180:	20001048 	.word	0x20001048
 800c184:	20001034 	.word	0x20001034
 800c188:	20000b5c 	.word	0x20000b5c
 800c18c:	e000ed04 	.word	0xe000ed04

0800c190 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c190:	b580      	push	{r7, lr}
 800c192:	b084      	sub	sp, #16
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c198:	2300      	movs	r3, #0
 800c19a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d017      	beq.n	800c1d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c1a2:	4b13      	ldr	r3, [pc, #76]	; (800c1f0 <vTaskDelay+0x60>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d00a      	beq.n	800c1c0 <vTaskDelay+0x30>
	__asm volatile
 800c1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ae:	f383 8811 	msr	BASEPRI, r3
 800c1b2:	f3bf 8f6f 	isb	sy
 800c1b6:	f3bf 8f4f 	dsb	sy
 800c1ba:	60bb      	str	r3, [r7, #8]
}
 800c1bc:	bf00      	nop
 800c1be:	e7fe      	b.n	800c1be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c1c0:	f000 f88a 	bl	800c2d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c1c4:	2100      	movs	r1, #0
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f000 fd26 	bl	800cc18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c1cc:	f000 f892 	bl	800c2f4 <xTaskResumeAll>
 800c1d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d107      	bne.n	800c1e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c1d8:	4b06      	ldr	r3, [pc, #24]	; (800c1f4 <vTaskDelay+0x64>)
 800c1da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1de:	601a      	str	r2, [r3, #0]
 800c1e0:	f3bf 8f4f 	dsb	sy
 800c1e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c1e8:	bf00      	nop
 800c1ea:	3710      	adds	r7, #16
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}
 800c1f0:	20001054 	.word	0x20001054
 800c1f4:	e000ed04 	.word	0xe000ed04

0800c1f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b08a      	sub	sp, #40	; 0x28
 800c1fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c1fe:	2300      	movs	r3, #0
 800c200:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c202:	2300      	movs	r3, #0
 800c204:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c206:	463a      	mov	r2, r7
 800c208:	1d39      	adds	r1, r7, #4
 800c20a:	f107 0308 	add.w	r3, r7, #8
 800c20e:	4618      	mov	r0, r3
 800c210:	f7fe ff74 	bl	800b0fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c214:	6839      	ldr	r1, [r7, #0]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	68ba      	ldr	r2, [r7, #8]
 800c21a:	9202      	str	r2, [sp, #8]
 800c21c:	9301      	str	r3, [sp, #4]
 800c21e:	2300      	movs	r3, #0
 800c220:	9300      	str	r3, [sp, #0]
 800c222:	2300      	movs	r3, #0
 800c224:	460a      	mov	r2, r1
 800c226:	4924      	ldr	r1, [pc, #144]	; (800c2b8 <vTaskStartScheduler+0xc0>)
 800c228:	4824      	ldr	r0, [pc, #144]	; (800c2bc <vTaskStartScheduler+0xc4>)
 800c22a:	f7ff fdf5 	bl	800be18 <xTaskCreateStatic>
 800c22e:	4603      	mov	r3, r0
 800c230:	4a23      	ldr	r2, [pc, #140]	; (800c2c0 <vTaskStartScheduler+0xc8>)
 800c232:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c234:	4b22      	ldr	r3, [pc, #136]	; (800c2c0 <vTaskStartScheduler+0xc8>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d002      	beq.n	800c242 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c23c:	2301      	movs	r3, #1
 800c23e:	617b      	str	r3, [r7, #20]
 800c240:	e001      	b.n	800c246 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c242:	2300      	movs	r3, #0
 800c244:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	2b01      	cmp	r3, #1
 800c24a:	d102      	bne.n	800c252 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c24c:	f000 fd38 	bl	800ccc0 <xTimerCreateTimerTask>
 800c250:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	2b01      	cmp	r3, #1
 800c256:	d11b      	bne.n	800c290 <vTaskStartScheduler+0x98>
	__asm volatile
 800c258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c25c:	f383 8811 	msr	BASEPRI, r3
 800c260:	f3bf 8f6f 	isb	sy
 800c264:	f3bf 8f4f 	dsb	sy
 800c268:	613b      	str	r3, [r7, #16]
}
 800c26a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c26c:	4b15      	ldr	r3, [pc, #84]	; (800c2c4 <vTaskStartScheduler+0xcc>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	3358      	adds	r3, #88	; 0x58
 800c272:	4a15      	ldr	r2, [pc, #84]	; (800c2c8 <vTaskStartScheduler+0xd0>)
 800c274:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c276:	4b15      	ldr	r3, [pc, #84]	; (800c2cc <vTaskStartScheduler+0xd4>)
 800c278:	f04f 32ff 	mov.w	r2, #4294967295
 800c27c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c27e:	4b14      	ldr	r3, [pc, #80]	; (800c2d0 <vTaskStartScheduler+0xd8>)
 800c280:	2201      	movs	r2, #1
 800c282:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c284:	4b13      	ldr	r3, [pc, #76]	; (800c2d4 <vTaskStartScheduler+0xdc>)
 800c286:	2200      	movs	r2, #0
 800c288:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c28a:	f001 f8f1 	bl	800d470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c28e:	e00e      	b.n	800c2ae <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c296:	d10a      	bne.n	800c2ae <vTaskStartScheduler+0xb6>
	__asm volatile
 800c298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c29c:	f383 8811 	msr	BASEPRI, r3
 800c2a0:	f3bf 8f6f 	isb	sy
 800c2a4:	f3bf 8f4f 	dsb	sy
 800c2a8:	60fb      	str	r3, [r7, #12]
}
 800c2aa:	bf00      	nop
 800c2ac:	e7fe      	b.n	800c2ac <vTaskStartScheduler+0xb4>
}
 800c2ae:	bf00      	nop
 800c2b0:	3718      	adds	r7, #24
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
 800c2b6:	bf00      	nop
 800c2b8:	0800e578 	.word	0x0800e578
 800c2bc:	0800c949 	.word	0x0800c949
 800c2c0:	20001050 	.word	0x20001050
 800c2c4:	20000b58 	.word	0x20000b58
 800c2c8:	2000007c 	.word	0x2000007c
 800c2cc:	2000104c 	.word	0x2000104c
 800c2d0:	20001038 	.word	0x20001038
 800c2d4:	20001030 	.word	0x20001030

0800c2d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c2d8:	b480      	push	{r7}
 800c2da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c2dc:	4b04      	ldr	r3, [pc, #16]	; (800c2f0 <vTaskSuspendAll+0x18>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	3301      	adds	r3, #1
 800c2e2:	4a03      	ldr	r2, [pc, #12]	; (800c2f0 <vTaskSuspendAll+0x18>)
 800c2e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c2e6:	bf00      	nop
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr
 800c2f0:	20001054 	.word	0x20001054

0800c2f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b084      	sub	sp, #16
 800c2f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c2fe:	2300      	movs	r3, #0
 800c300:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c302:	4b42      	ldr	r3, [pc, #264]	; (800c40c <xTaskResumeAll+0x118>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d10a      	bne.n	800c320 <xTaskResumeAll+0x2c>
	__asm volatile
 800c30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c30e:	f383 8811 	msr	BASEPRI, r3
 800c312:	f3bf 8f6f 	isb	sy
 800c316:	f3bf 8f4f 	dsb	sy
 800c31a:	603b      	str	r3, [r7, #0]
}
 800c31c:	bf00      	nop
 800c31e:	e7fe      	b.n	800c31e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c320:	f001 f948 	bl	800d5b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c324:	4b39      	ldr	r3, [pc, #228]	; (800c40c <xTaskResumeAll+0x118>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	3b01      	subs	r3, #1
 800c32a:	4a38      	ldr	r2, [pc, #224]	; (800c40c <xTaskResumeAll+0x118>)
 800c32c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c32e:	4b37      	ldr	r3, [pc, #220]	; (800c40c <xTaskResumeAll+0x118>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d162      	bne.n	800c3fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c336:	4b36      	ldr	r3, [pc, #216]	; (800c410 <xTaskResumeAll+0x11c>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d05e      	beq.n	800c3fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c33e:	e02f      	b.n	800c3a0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c340:	4b34      	ldr	r3, [pc, #208]	; (800c414 <xTaskResumeAll+0x120>)
 800c342:	68db      	ldr	r3, [r3, #12]
 800c344:	68db      	ldr	r3, [r3, #12]
 800c346:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	3318      	adds	r3, #24
 800c34c:	4618      	mov	r0, r3
 800c34e:	f7fe ff93 	bl	800b278 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	3304      	adds	r3, #4
 800c356:	4618      	mov	r0, r3
 800c358:	f7fe ff8e 	bl	800b278 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c360:	4b2d      	ldr	r3, [pc, #180]	; (800c418 <xTaskResumeAll+0x124>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	429a      	cmp	r2, r3
 800c366:	d903      	bls.n	800c370 <xTaskResumeAll+0x7c>
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c36c:	4a2a      	ldr	r2, [pc, #168]	; (800c418 <xTaskResumeAll+0x124>)
 800c36e:	6013      	str	r3, [r2, #0]
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c374:	4613      	mov	r3, r2
 800c376:	009b      	lsls	r3, r3, #2
 800c378:	4413      	add	r3, r2
 800c37a:	009b      	lsls	r3, r3, #2
 800c37c:	4a27      	ldr	r2, [pc, #156]	; (800c41c <xTaskResumeAll+0x128>)
 800c37e:	441a      	add	r2, r3
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	3304      	adds	r3, #4
 800c384:	4619      	mov	r1, r3
 800c386:	4610      	mov	r0, r2
 800c388:	f7fe ff19 	bl	800b1be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c390:	4b23      	ldr	r3, [pc, #140]	; (800c420 <xTaskResumeAll+0x12c>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c396:	429a      	cmp	r2, r3
 800c398:	d302      	bcc.n	800c3a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c39a:	4b22      	ldr	r3, [pc, #136]	; (800c424 <xTaskResumeAll+0x130>)
 800c39c:	2201      	movs	r2, #1
 800c39e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c3a0:	4b1c      	ldr	r3, [pc, #112]	; (800c414 <xTaskResumeAll+0x120>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d1cb      	bne.n	800c340 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d001      	beq.n	800c3b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c3ae:	f000 fb87 	bl	800cac0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c3b2:	4b1d      	ldr	r3, [pc, #116]	; (800c428 <xTaskResumeAll+0x134>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d010      	beq.n	800c3e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c3be:	f000 f847 	bl	800c450 <xTaskIncrementTick>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d002      	beq.n	800c3ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c3c8:	4b16      	ldr	r3, [pc, #88]	; (800c424 <xTaskResumeAll+0x130>)
 800c3ca:	2201      	movs	r2, #1
 800c3cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	3b01      	subs	r3, #1
 800c3d2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d1f1      	bne.n	800c3be <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c3da:	4b13      	ldr	r3, [pc, #76]	; (800c428 <xTaskResumeAll+0x134>)
 800c3dc:	2200      	movs	r2, #0
 800c3de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c3e0:	4b10      	ldr	r3, [pc, #64]	; (800c424 <xTaskResumeAll+0x130>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d009      	beq.n	800c3fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c3ec:	4b0f      	ldr	r3, [pc, #60]	; (800c42c <xTaskResumeAll+0x138>)
 800c3ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3f2:	601a      	str	r2, [r3, #0]
 800c3f4:	f3bf 8f4f 	dsb	sy
 800c3f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c3fc:	f001 f90a 	bl	800d614 <vPortExitCritical>

	return xAlreadyYielded;
 800c400:	68bb      	ldr	r3, [r7, #8]
}
 800c402:	4618      	mov	r0, r3
 800c404:	3710      	adds	r7, #16
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	bf00      	nop
 800c40c:	20001054 	.word	0x20001054
 800c410:	2000102c 	.word	0x2000102c
 800c414:	20000fec 	.word	0x20000fec
 800c418:	20001034 	.word	0x20001034
 800c41c:	20000b5c 	.word	0x20000b5c
 800c420:	20000b58 	.word	0x20000b58
 800c424:	20001040 	.word	0x20001040
 800c428:	2000103c 	.word	0x2000103c
 800c42c:	e000ed04 	.word	0xe000ed04

0800c430 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c430:	b480      	push	{r7}
 800c432:	b083      	sub	sp, #12
 800c434:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c436:	4b05      	ldr	r3, [pc, #20]	; (800c44c <xTaskGetTickCount+0x1c>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c43c:	687b      	ldr	r3, [r7, #4]
}
 800c43e:	4618      	mov	r0, r3
 800c440:	370c      	adds	r7, #12
 800c442:	46bd      	mov	sp, r7
 800c444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c448:	4770      	bx	lr
 800c44a:	bf00      	nop
 800c44c:	20001030 	.word	0x20001030

0800c450 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b086      	sub	sp, #24
 800c454:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c456:	2300      	movs	r3, #0
 800c458:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c45a:	4b4f      	ldr	r3, [pc, #316]	; (800c598 <xTaskIncrementTick+0x148>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	f040 808f 	bne.w	800c582 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c464:	4b4d      	ldr	r3, [pc, #308]	; (800c59c <xTaskIncrementTick+0x14c>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	3301      	adds	r3, #1
 800c46a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c46c:	4a4b      	ldr	r2, [pc, #300]	; (800c59c <xTaskIncrementTick+0x14c>)
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d120      	bne.n	800c4ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c478:	4b49      	ldr	r3, [pc, #292]	; (800c5a0 <xTaskIncrementTick+0x150>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d00a      	beq.n	800c498 <xTaskIncrementTick+0x48>
	__asm volatile
 800c482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c486:	f383 8811 	msr	BASEPRI, r3
 800c48a:	f3bf 8f6f 	isb	sy
 800c48e:	f3bf 8f4f 	dsb	sy
 800c492:	603b      	str	r3, [r7, #0]
}
 800c494:	bf00      	nop
 800c496:	e7fe      	b.n	800c496 <xTaskIncrementTick+0x46>
 800c498:	4b41      	ldr	r3, [pc, #260]	; (800c5a0 <xTaskIncrementTick+0x150>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	60fb      	str	r3, [r7, #12]
 800c49e:	4b41      	ldr	r3, [pc, #260]	; (800c5a4 <xTaskIncrementTick+0x154>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	4a3f      	ldr	r2, [pc, #252]	; (800c5a0 <xTaskIncrementTick+0x150>)
 800c4a4:	6013      	str	r3, [r2, #0]
 800c4a6:	4a3f      	ldr	r2, [pc, #252]	; (800c5a4 <xTaskIncrementTick+0x154>)
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	6013      	str	r3, [r2, #0]
 800c4ac:	4b3e      	ldr	r3, [pc, #248]	; (800c5a8 <xTaskIncrementTick+0x158>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	3301      	adds	r3, #1
 800c4b2:	4a3d      	ldr	r2, [pc, #244]	; (800c5a8 <xTaskIncrementTick+0x158>)
 800c4b4:	6013      	str	r3, [r2, #0]
 800c4b6:	f000 fb03 	bl	800cac0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c4ba:	4b3c      	ldr	r3, [pc, #240]	; (800c5ac <xTaskIncrementTick+0x15c>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	693a      	ldr	r2, [r7, #16]
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	d349      	bcc.n	800c558 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c4c4:	4b36      	ldr	r3, [pc, #216]	; (800c5a0 <xTaskIncrementTick+0x150>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d104      	bne.n	800c4d8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4ce:	4b37      	ldr	r3, [pc, #220]	; (800c5ac <xTaskIncrementTick+0x15c>)
 800c4d0:	f04f 32ff 	mov.w	r2, #4294967295
 800c4d4:	601a      	str	r2, [r3, #0]
					break;
 800c4d6:	e03f      	b.n	800c558 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4d8:	4b31      	ldr	r3, [pc, #196]	; (800c5a0 <xTaskIncrementTick+0x150>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	68db      	ldr	r3, [r3, #12]
 800c4de:	68db      	ldr	r3, [r3, #12]
 800c4e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c4e8:	693a      	ldr	r2, [r7, #16]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	429a      	cmp	r2, r3
 800c4ee:	d203      	bcs.n	800c4f8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c4f0:	4a2e      	ldr	r2, [pc, #184]	; (800c5ac <xTaskIncrementTick+0x15c>)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c4f6:	e02f      	b.n	800c558 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	3304      	adds	r3, #4
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f7fe febb 	bl	800b278 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c506:	2b00      	cmp	r3, #0
 800c508:	d004      	beq.n	800c514 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	3318      	adds	r3, #24
 800c50e:	4618      	mov	r0, r3
 800c510:	f7fe feb2 	bl	800b278 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c518:	4b25      	ldr	r3, [pc, #148]	; (800c5b0 <xTaskIncrementTick+0x160>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d903      	bls.n	800c528 <xTaskIncrementTick+0xd8>
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c524:	4a22      	ldr	r2, [pc, #136]	; (800c5b0 <xTaskIncrementTick+0x160>)
 800c526:	6013      	str	r3, [r2, #0]
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c52c:	4613      	mov	r3, r2
 800c52e:	009b      	lsls	r3, r3, #2
 800c530:	4413      	add	r3, r2
 800c532:	009b      	lsls	r3, r3, #2
 800c534:	4a1f      	ldr	r2, [pc, #124]	; (800c5b4 <xTaskIncrementTick+0x164>)
 800c536:	441a      	add	r2, r3
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	3304      	adds	r3, #4
 800c53c:	4619      	mov	r1, r3
 800c53e:	4610      	mov	r0, r2
 800c540:	f7fe fe3d 	bl	800b1be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c548:	4b1b      	ldr	r3, [pc, #108]	; (800c5b8 <xTaskIncrementTick+0x168>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c54e:	429a      	cmp	r2, r3
 800c550:	d3b8      	bcc.n	800c4c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c552:	2301      	movs	r3, #1
 800c554:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c556:	e7b5      	b.n	800c4c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c558:	4b17      	ldr	r3, [pc, #92]	; (800c5b8 <xTaskIncrementTick+0x168>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c55e:	4915      	ldr	r1, [pc, #84]	; (800c5b4 <xTaskIncrementTick+0x164>)
 800c560:	4613      	mov	r3, r2
 800c562:	009b      	lsls	r3, r3, #2
 800c564:	4413      	add	r3, r2
 800c566:	009b      	lsls	r3, r3, #2
 800c568:	440b      	add	r3, r1
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	2b01      	cmp	r3, #1
 800c56e:	d901      	bls.n	800c574 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c570:	2301      	movs	r3, #1
 800c572:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c574:	4b11      	ldr	r3, [pc, #68]	; (800c5bc <xTaskIncrementTick+0x16c>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d007      	beq.n	800c58c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c57c:	2301      	movs	r3, #1
 800c57e:	617b      	str	r3, [r7, #20]
 800c580:	e004      	b.n	800c58c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c582:	4b0f      	ldr	r3, [pc, #60]	; (800c5c0 <xTaskIncrementTick+0x170>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	3301      	adds	r3, #1
 800c588:	4a0d      	ldr	r2, [pc, #52]	; (800c5c0 <xTaskIncrementTick+0x170>)
 800c58a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c58c:	697b      	ldr	r3, [r7, #20]
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3718      	adds	r7, #24
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
 800c596:	bf00      	nop
 800c598:	20001054 	.word	0x20001054
 800c59c:	20001030 	.word	0x20001030
 800c5a0:	20000fe4 	.word	0x20000fe4
 800c5a4:	20000fe8 	.word	0x20000fe8
 800c5a8:	20001044 	.word	0x20001044
 800c5ac:	2000104c 	.word	0x2000104c
 800c5b0:	20001034 	.word	0x20001034
 800c5b4:	20000b5c 	.word	0x20000b5c
 800c5b8:	20000b58 	.word	0x20000b58
 800c5bc:	20001040 	.word	0x20001040
 800c5c0:	2000103c 	.word	0x2000103c

0800c5c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b086      	sub	sp, #24
 800c5c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c5ca:	4b3d      	ldr	r3, [pc, #244]	; (800c6c0 <vTaskSwitchContext+0xfc>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d003      	beq.n	800c5da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c5d2:	4b3c      	ldr	r3, [pc, #240]	; (800c6c4 <vTaskSwitchContext+0x100>)
 800c5d4:	2201      	movs	r2, #1
 800c5d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c5d8:	e06d      	b.n	800c6b6 <vTaskSwitchContext+0xf2>
		xYieldPending = pdFALSE;
 800c5da:	4b3a      	ldr	r3, [pc, #232]	; (800c6c4 <vTaskSwitchContext+0x100>)
 800c5dc:	2200      	movs	r2, #0
 800c5de:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800c5e0:	4b39      	ldr	r3, [pc, #228]	; (800c6c8 <vTaskSwitchContext+0x104>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5e6:	613b      	str	r3, [r7, #16]
 800c5e8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800c5ec:	60fb      	str	r3, [r7, #12]
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	68fa      	ldr	r2, [r7, #12]
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	d111      	bne.n	800c61c <vTaskSwitchContext+0x58>
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	3304      	adds	r3, #4
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	68fa      	ldr	r2, [r7, #12]
 800c600:	429a      	cmp	r2, r3
 800c602:	d10b      	bne.n	800c61c <vTaskSwitchContext+0x58>
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	3308      	adds	r3, #8
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	68fa      	ldr	r2, [r7, #12]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d105      	bne.n	800c61c <vTaskSwitchContext+0x58>
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	330c      	adds	r3, #12
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	68fa      	ldr	r2, [r7, #12]
 800c618:	429a      	cmp	r2, r3
 800c61a:	d008      	beq.n	800c62e <vTaskSwitchContext+0x6a>
 800c61c:	4b2a      	ldr	r3, [pc, #168]	; (800c6c8 <vTaskSwitchContext+0x104>)
 800c61e:	681a      	ldr	r2, [r3, #0]
 800c620:	4b29      	ldr	r3, [pc, #164]	; (800c6c8 <vTaskSwitchContext+0x104>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	3334      	adds	r3, #52	; 0x34
 800c626:	4619      	mov	r1, r3
 800c628:	4610      	mov	r0, r2
 800c62a:	f7f3 ff66 	bl	80004fa <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c62e:	4b27      	ldr	r3, [pc, #156]	; (800c6cc <vTaskSwitchContext+0x108>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	617b      	str	r3, [r7, #20]
 800c634:	e010      	b.n	800c658 <vTaskSwitchContext+0x94>
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d10a      	bne.n	800c652 <vTaskSwitchContext+0x8e>
	__asm volatile
 800c63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c640:	f383 8811 	msr	BASEPRI, r3
 800c644:	f3bf 8f6f 	isb	sy
 800c648:	f3bf 8f4f 	dsb	sy
 800c64c:	607b      	str	r3, [r7, #4]
}
 800c64e:	bf00      	nop
 800c650:	e7fe      	b.n	800c650 <vTaskSwitchContext+0x8c>
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	3b01      	subs	r3, #1
 800c656:	617b      	str	r3, [r7, #20]
 800c658:	491d      	ldr	r1, [pc, #116]	; (800c6d0 <vTaskSwitchContext+0x10c>)
 800c65a:	697a      	ldr	r2, [r7, #20]
 800c65c:	4613      	mov	r3, r2
 800c65e:	009b      	lsls	r3, r3, #2
 800c660:	4413      	add	r3, r2
 800c662:	009b      	lsls	r3, r3, #2
 800c664:	440b      	add	r3, r1
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d0e4      	beq.n	800c636 <vTaskSwitchContext+0x72>
 800c66c:	697a      	ldr	r2, [r7, #20]
 800c66e:	4613      	mov	r3, r2
 800c670:	009b      	lsls	r3, r3, #2
 800c672:	4413      	add	r3, r2
 800c674:	009b      	lsls	r3, r3, #2
 800c676:	4a16      	ldr	r2, [pc, #88]	; (800c6d0 <vTaskSwitchContext+0x10c>)
 800c678:	4413      	add	r3, r2
 800c67a:	60bb      	str	r3, [r7, #8]
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	685b      	ldr	r3, [r3, #4]
 800c680:	685a      	ldr	r2, [r3, #4]
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	605a      	str	r2, [r3, #4]
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	685a      	ldr	r2, [r3, #4]
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	3308      	adds	r3, #8
 800c68e:	429a      	cmp	r2, r3
 800c690:	d104      	bne.n	800c69c <vTaskSwitchContext+0xd8>
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	685b      	ldr	r3, [r3, #4]
 800c696:	685a      	ldr	r2, [r3, #4]
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	605a      	str	r2, [r3, #4]
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	685b      	ldr	r3, [r3, #4]
 800c6a0:	68db      	ldr	r3, [r3, #12]
 800c6a2:	4a09      	ldr	r2, [pc, #36]	; (800c6c8 <vTaskSwitchContext+0x104>)
 800c6a4:	6013      	str	r3, [r2, #0]
 800c6a6:	4a09      	ldr	r2, [pc, #36]	; (800c6cc <vTaskSwitchContext+0x108>)
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c6ac:	4b06      	ldr	r3, [pc, #24]	; (800c6c8 <vTaskSwitchContext+0x104>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	3358      	adds	r3, #88	; 0x58
 800c6b2:	4a08      	ldr	r2, [pc, #32]	; (800c6d4 <vTaskSwitchContext+0x110>)
 800c6b4:	6013      	str	r3, [r2, #0]
}
 800c6b6:	bf00      	nop
 800c6b8:	3718      	adds	r7, #24
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}
 800c6be:	bf00      	nop
 800c6c0:	20001054 	.word	0x20001054
 800c6c4:	20001040 	.word	0x20001040
 800c6c8:	20000b58 	.word	0x20000b58
 800c6cc:	20001034 	.word	0x20001034
 800c6d0:	20000b5c 	.word	0x20000b5c
 800c6d4:	2000007c 	.word	0x2000007c

0800c6d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b084      	sub	sp, #16
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d10a      	bne.n	800c6fe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ec:	f383 8811 	msr	BASEPRI, r3
 800c6f0:	f3bf 8f6f 	isb	sy
 800c6f4:	f3bf 8f4f 	dsb	sy
 800c6f8:	60fb      	str	r3, [r7, #12]
}
 800c6fa:	bf00      	nop
 800c6fc:	e7fe      	b.n	800c6fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c6fe:	4b07      	ldr	r3, [pc, #28]	; (800c71c <vTaskPlaceOnEventList+0x44>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	3318      	adds	r3, #24
 800c704:	4619      	mov	r1, r3
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f7fe fd7d 	bl	800b206 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c70c:	2101      	movs	r1, #1
 800c70e:	6838      	ldr	r0, [r7, #0]
 800c710:	f000 fa82 	bl	800cc18 <prvAddCurrentTaskToDelayedList>
}
 800c714:	bf00      	nop
 800c716:	3710      	adds	r7, #16
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}
 800c71c:	20000b58 	.word	0x20000b58

0800c720 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c720:	b580      	push	{r7, lr}
 800c722:	b086      	sub	sp, #24
 800c724:	af00      	add	r7, sp, #0
 800c726:	60f8      	str	r0, [r7, #12]
 800c728:	60b9      	str	r1, [r7, #8]
 800c72a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d10a      	bne.n	800c748 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c736:	f383 8811 	msr	BASEPRI, r3
 800c73a:	f3bf 8f6f 	isb	sy
 800c73e:	f3bf 8f4f 	dsb	sy
 800c742:	617b      	str	r3, [r7, #20]
}
 800c744:	bf00      	nop
 800c746:	e7fe      	b.n	800c746 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c748:	4b0a      	ldr	r3, [pc, #40]	; (800c774 <vTaskPlaceOnEventListRestricted+0x54>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	3318      	adds	r3, #24
 800c74e:	4619      	mov	r1, r3
 800c750:	68f8      	ldr	r0, [r7, #12]
 800c752:	f7fe fd34 	bl	800b1be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d002      	beq.n	800c762 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c75c:	f04f 33ff 	mov.w	r3, #4294967295
 800c760:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c762:	6879      	ldr	r1, [r7, #4]
 800c764:	68b8      	ldr	r0, [r7, #8]
 800c766:	f000 fa57 	bl	800cc18 <prvAddCurrentTaskToDelayedList>
	}
 800c76a:	bf00      	nop
 800c76c:	3718      	adds	r7, #24
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}
 800c772:	bf00      	nop
 800c774:	20000b58 	.word	0x20000b58

0800c778 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b086      	sub	sp, #24
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	68db      	ldr	r3, [r3, #12]
 800c784:	68db      	ldr	r3, [r3, #12]
 800c786:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d10a      	bne.n	800c7a4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c792:	f383 8811 	msr	BASEPRI, r3
 800c796:	f3bf 8f6f 	isb	sy
 800c79a:	f3bf 8f4f 	dsb	sy
 800c79e:	60fb      	str	r3, [r7, #12]
}
 800c7a0:	bf00      	nop
 800c7a2:	e7fe      	b.n	800c7a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	3318      	adds	r3, #24
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f7fe fd65 	bl	800b278 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7ae:	4b1e      	ldr	r3, [pc, #120]	; (800c828 <xTaskRemoveFromEventList+0xb0>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d11d      	bne.n	800c7f2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	3304      	adds	r3, #4
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f7fe fd5c 	bl	800b278 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7c4:	4b19      	ldr	r3, [pc, #100]	; (800c82c <xTaskRemoveFromEventList+0xb4>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d903      	bls.n	800c7d4 <xTaskRemoveFromEventList+0x5c>
 800c7cc:	693b      	ldr	r3, [r7, #16]
 800c7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7d0:	4a16      	ldr	r2, [pc, #88]	; (800c82c <xTaskRemoveFromEventList+0xb4>)
 800c7d2:	6013      	str	r3, [r2, #0]
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7d8:	4613      	mov	r3, r2
 800c7da:	009b      	lsls	r3, r3, #2
 800c7dc:	4413      	add	r3, r2
 800c7de:	009b      	lsls	r3, r3, #2
 800c7e0:	4a13      	ldr	r2, [pc, #76]	; (800c830 <xTaskRemoveFromEventList+0xb8>)
 800c7e2:	441a      	add	r2, r3
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	3304      	adds	r3, #4
 800c7e8:	4619      	mov	r1, r3
 800c7ea:	4610      	mov	r0, r2
 800c7ec:	f7fe fce7 	bl	800b1be <vListInsertEnd>
 800c7f0:	e005      	b.n	800c7fe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	3318      	adds	r3, #24
 800c7f6:	4619      	mov	r1, r3
 800c7f8:	480e      	ldr	r0, [pc, #56]	; (800c834 <xTaskRemoveFromEventList+0xbc>)
 800c7fa:	f7fe fce0 	bl	800b1be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c802:	4b0d      	ldr	r3, [pc, #52]	; (800c838 <xTaskRemoveFromEventList+0xc0>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c808:	429a      	cmp	r2, r3
 800c80a:	d905      	bls.n	800c818 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c80c:	2301      	movs	r3, #1
 800c80e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c810:	4b0a      	ldr	r3, [pc, #40]	; (800c83c <xTaskRemoveFromEventList+0xc4>)
 800c812:	2201      	movs	r2, #1
 800c814:	601a      	str	r2, [r3, #0]
 800c816:	e001      	b.n	800c81c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c818:	2300      	movs	r3, #0
 800c81a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c81c:	697b      	ldr	r3, [r7, #20]
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3718      	adds	r7, #24
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
 800c826:	bf00      	nop
 800c828:	20001054 	.word	0x20001054
 800c82c:	20001034 	.word	0x20001034
 800c830:	20000b5c 	.word	0x20000b5c
 800c834:	20000fec 	.word	0x20000fec
 800c838:	20000b58 	.word	0x20000b58
 800c83c:	20001040 	.word	0x20001040

0800c840 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c840:	b480      	push	{r7}
 800c842:	b083      	sub	sp, #12
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c848:	4b06      	ldr	r3, [pc, #24]	; (800c864 <vTaskInternalSetTimeOutState+0x24>)
 800c84a:	681a      	ldr	r2, [r3, #0]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c850:	4b05      	ldr	r3, [pc, #20]	; (800c868 <vTaskInternalSetTimeOutState+0x28>)
 800c852:	681a      	ldr	r2, [r3, #0]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	605a      	str	r2, [r3, #4]
}
 800c858:	bf00      	nop
 800c85a:	370c      	adds	r7, #12
 800c85c:	46bd      	mov	sp, r7
 800c85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c862:	4770      	bx	lr
 800c864:	20001044 	.word	0x20001044
 800c868:	20001030 	.word	0x20001030

0800c86c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b088      	sub	sp, #32
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d10a      	bne.n	800c892 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c880:	f383 8811 	msr	BASEPRI, r3
 800c884:	f3bf 8f6f 	isb	sy
 800c888:	f3bf 8f4f 	dsb	sy
 800c88c:	613b      	str	r3, [r7, #16]
}
 800c88e:	bf00      	nop
 800c890:	e7fe      	b.n	800c890 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d10a      	bne.n	800c8ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c89c:	f383 8811 	msr	BASEPRI, r3
 800c8a0:	f3bf 8f6f 	isb	sy
 800c8a4:	f3bf 8f4f 	dsb	sy
 800c8a8:	60fb      	str	r3, [r7, #12]
}
 800c8aa:	bf00      	nop
 800c8ac:	e7fe      	b.n	800c8ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c8ae:	f000 fe81 	bl	800d5b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c8b2:	4b1d      	ldr	r3, [pc, #116]	; (800c928 <xTaskCheckForTimeOut+0xbc>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	685b      	ldr	r3, [r3, #4]
 800c8bc:	69ba      	ldr	r2, [r7, #24]
 800c8be:	1ad3      	subs	r3, r2, r3
 800c8c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8ca:	d102      	bne.n	800c8d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	61fb      	str	r3, [r7, #28]
 800c8d0:	e023      	b.n	800c91a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681a      	ldr	r2, [r3, #0]
 800c8d6:	4b15      	ldr	r3, [pc, #84]	; (800c92c <xTaskCheckForTimeOut+0xc0>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	429a      	cmp	r2, r3
 800c8dc:	d007      	beq.n	800c8ee <xTaskCheckForTimeOut+0x82>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	685b      	ldr	r3, [r3, #4]
 800c8e2:	69ba      	ldr	r2, [r7, #24]
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	d302      	bcc.n	800c8ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	61fb      	str	r3, [r7, #28]
 800c8ec:	e015      	b.n	800c91a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	697a      	ldr	r2, [r7, #20]
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d20b      	bcs.n	800c910 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	681a      	ldr	r2, [r3, #0]
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	1ad2      	subs	r2, r2, r3
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f7ff ff9b 	bl	800c840 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c90a:	2300      	movs	r3, #0
 800c90c:	61fb      	str	r3, [r7, #28]
 800c90e:	e004      	b.n	800c91a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	2200      	movs	r2, #0
 800c914:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c916:	2301      	movs	r3, #1
 800c918:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c91a:	f000 fe7b 	bl	800d614 <vPortExitCritical>

	return xReturn;
 800c91e:	69fb      	ldr	r3, [r7, #28]
}
 800c920:	4618      	mov	r0, r3
 800c922:	3720      	adds	r7, #32
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}
 800c928:	20001030 	.word	0x20001030
 800c92c:	20001044 	.word	0x20001044

0800c930 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c930:	b480      	push	{r7}
 800c932:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c934:	4b03      	ldr	r3, [pc, #12]	; (800c944 <vTaskMissedYield+0x14>)
 800c936:	2201      	movs	r2, #1
 800c938:	601a      	str	r2, [r3, #0]
}
 800c93a:	bf00      	nop
 800c93c:	46bd      	mov	sp, r7
 800c93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c942:	4770      	bx	lr
 800c944:	20001040 	.word	0x20001040

0800c948 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c950:	f000 f854 	bl	800c9fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c954:	4b07      	ldr	r3, [pc, #28]	; (800c974 <prvIdleTask+0x2c>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d907      	bls.n	800c96c <prvIdleTask+0x24>
			{
				taskYIELD();
 800c95c:	4b06      	ldr	r3, [pc, #24]	; (800c978 <prvIdleTask+0x30>)
 800c95e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c962:	601a      	str	r2, [r3, #0]
 800c964:	f3bf 8f4f 	dsb	sy
 800c968:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800c96c:	f7f3 fdbe 	bl	80004ec <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800c970:	e7ee      	b.n	800c950 <prvIdleTask+0x8>
 800c972:	bf00      	nop
 800c974:	20000b5c 	.word	0x20000b5c
 800c978:	e000ed04 	.word	0xe000ed04

0800c97c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b082      	sub	sp, #8
 800c980:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c982:	2300      	movs	r3, #0
 800c984:	607b      	str	r3, [r7, #4]
 800c986:	e00c      	b.n	800c9a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c988:	687a      	ldr	r2, [r7, #4]
 800c98a:	4613      	mov	r3, r2
 800c98c:	009b      	lsls	r3, r3, #2
 800c98e:	4413      	add	r3, r2
 800c990:	009b      	lsls	r3, r3, #2
 800c992:	4a12      	ldr	r2, [pc, #72]	; (800c9dc <prvInitialiseTaskLists+0x60>)
 800c994:	4413      	add	r3, r2
 800c996:	4618      	mov	r0, r3
 800c998:	f7fe fbe4 	bl	800b164 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	3301      	adds	r3, #1
 800c9a0:	607b      	str	r3, [r7, #4]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2b37      	cmp	r3, #55	; 0x37
 800c9a6:	d9ef      	bls.n	800c988 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c9a8:	480d      	ldr	r0, [pc, #52]	; (800c9e0 <prvInitialiseTaskLists+0x64>)
 800c9aa:	f7fe fbdb 	bl	800b164 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c9ae:	480d      	ldr	r0, [pc, #52]	; (800c9e4 <prvInitialiseTaskLists+0x68>)
 800c9b0:	f7fe fbd8 	bl	800b164 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c9b4:	480c      	ldr	r0, [pc, #48]	; (800c9e8 <prvInitialiseTaskLists+0x6c>)
 800c9b6:	f7fe fbd5 	bl	800b164 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c9ba:	480c      	ldr	r0, [pc, #48]	; (800c9ec <prvInitialiseTaskLists+0x70>)
 800c9bc:	f7fe fbd2 	bl	800b164 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c9c0:	480b      	ldr	r0, [pc, #44]	; (800c9f0 <prvInitialiseTaskLists+0x74>)
 800c9c2:	f7fe fbcf 	bl	800b164 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c9c6:	4b0b      	ldr	r3, [pc, #44]	; (800c9f4 <prvInitialiseTaskLists+0x78>)
 800c9c8:	4a05      	ldr	r2, [pc, #20]	; (800c9e0 <prvInitialiseTaskLists+0x64>)
 800c9ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c9cc:	4b0a      	ldr	r3, [pc, #40]	; (800c9f8 <prvInitialiseTaskLists+0x7c>)
 800c9ce:	4a05      	ldr	r2, [pc, #20]	; (800c9e4 <prvInitialiseTaskLists+0x68>)
 800c9d0:	601a      	str	r2, [r3, #0]
}
 800c9d2:	bf00      	nop
 800c9d4:	3708      	adds	r7, #8
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
 800c9da:	bf00      	nop
 800c9dc:	20000b5c 	.word	0x20000b5c
 800c9e0:	20000fbc 	.word	0x20000fbc
 800c9e4:	20000fd0 	.word	0x20000fd0
 800c9e8:	20000fec 	.word	0x20000fec
 800c9ec:	20001000 	.word	0x20001000
 800c9f0:	20001018 	.word	0x20001018
 800c9f4:	20000fe4 	.word	0x20000fe4
 800c9f8:	20000fe8 	.word	0x20000fe8

0800c9fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b082      	sub	sp, #8
 800ca00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ca02:	e019      	b.n	800ca38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ca04:	f000 fdd6 	bl	800d5b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca08:	4b10      	ldr	r3, [pc, #64]	; (800ca4c <prvCheckTasksWaitingTermination+0x50>)
 800ca0a:	68db      	ldr	r3, [r3, #12]
 800ca0c:	68db      	ldr	r3, [r3, #12]
 800ca0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	3304      	adds	r3, #4
 800ca14:	4618      	mov	r0, r3
 800ca16:	f7fe fc2f 	bl	800b278 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ca1a:	4b0d      	ldr	r3, [pc, #52]	; (800ca50 <prvCheckTasksWaitingTermination+0x54>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	3b01      	subs	r3, #1
 800ca20:	4a0b      	ldr	r2, [pc, #44]	; (800ca50 <prvCheckTasksWaitingTermination+0x54>)
 800ca22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ca24:	4b0b      	ldr	r3, [pc, #44]	; (800ca54 <prvCheckTasksWaitingTermination+0x58>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	3b01      	subs	r3, #1
 800ca2a:	4a0a      	ldr	r2, [pc, #40]	; (800ca54 <prvCheckTasksWaitingTermination+0x58>)
 800ca2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ca2e:	f000 fdf1 	bl	800d614 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f000 f810 	bl	800ca58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ca38:	4b06      	ldr	r3, [pc, #24]	; (800ca54 <prvCheckTasksWaitingTermination+0x58>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d1e1      	bne.n	800ca04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ca40:	bf00      	nop
 800ca42:	bf00      	nop
 800ca44:	3708      	adds	r7, #8
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}
 800ca4a:	bf00      	nop
 800ca4c:	20001000 	.word	0x20001000
 800ca50:	2000102c 	.word	0x2000102c
 800ca54:	20001014 	.word	0x20001014

0800ca58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b084      	sub	sp, #16
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	3358      	adds	r3, #88	; 0x58
 800ca64:	4618      	mov	r0, r3
 800ca66:	f001 fc81 	bl	800e36c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d108      	bne.n	800ca86 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f000 ff8d 	bl	800d998 <vPortFree>
				vPortFree( pxTCB );
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f000 ff8a 	bl	800d998 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ca84:	e018      	b.n	800cab8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	d103      	bne.n	800ca98 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f000 ff81 	bl	800d998 <vPortFree>
	}
 800ca96:	e00f      	b.n	800cab8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800ca9e:	2b02      	cmp	r3, #2
 800caa0:	d00a      	beq.n	800cab8 <prvDeleteTCB+0x60>
	__asm volatile
 800caa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa6:	f383 8811 	msr	BASEPRI, r3
 800caaa:	f3bf 8f6f 	isb	sy
 800caae:	f3bf 8f4f 	dsb	sy
 800cab2:	60fb      	str	r3, [r7, #12]
}
 800cab4:	bf00      	nop
 800cab6:	e7fe      	b.n	800cab6 <prvDeleteTCB+0x5e>
	}
 800cab8:	bf00      	nop
 800caba:	3710      	adds	r7, #16
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cac0:	b480      	push	{r7}
 800cac2:	b083      	sub	sp, #12
 800cac4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cac6:	4b0c      	ldr	r3, [pc, #48]	; (800caf8 <prvResetNextTaskUnblockTime+0x38>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d104      	bne.n	800cada <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cad0:	4b0a      	ldr	r3, [pc, #40]	; (800cafc <prvResetNextTaskUnblockTime+0x3c>)
 800cad2:	f04f 32ff 	mov.w	r2, #4294967295
 800cad6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cad8:	e008      	b.n	800caec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cada:	4b07      	ldr	r3, [pc, #28]	; (800caf8 <prvResetNextTaskUnblockTime+0x38>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	68db      	ldr	r3, [r3, #12]
 800cae0:	68db      	ldr	r3, [r3, #12]
 800cae2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	685b      	ldr	r3, [r3, #4]
 800cae8:	4a04      	ldr	r2, [pc, #16]	; (800cafc <prvResetNextTaskUnblockTime+0x3c>)
 800caea:	6013      	str	r3, [r2, #0]
}
 800caec:	bf00      	nop
 800caee:	370c      	adds	r7, #12
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr
 800caf8:	20000fe4 	.word	0x20000fe4
 800cafc:	2000104c 	.word	0x2000104c

0800cb00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cb00:	b480      	push	{r7}
 800cb02:	b083      	sub	sp, #12
 800cb04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cb06:	4b0b      	ldr	r3, [pc, #44]	; (800cb34 <xTaskGetSchedulerState+0x34>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d102      	bne.n	800cb14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cb0e:	2301      	movs	r3, #1
 800cb10:	607b      	str	r3, [r7, #4]
 800cb12:	e008      	b.n	800cb26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb14:	4b08      	ldr	r3, [pc, #32]	; (800cb38 <xTaskGetSchedulerState+0x38>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d102      	bne.n	800cb22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cb1c:	2302      	movs	r3, #2
 800cb1e:	607b      	str	r3, [r7, #4]
 800cb20:	e001      	b.n	800cb26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cb22:	2300      	movs	r3, #0
 800cb24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cb26:	687b      	ldr	r3, [r7, #4]
	}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	370c      	adds	r7, #12
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb32:	4770      	bx	lr
 800cb34:	20001038 	.word	0x20001038
 800cb38:	20001054 	.word	0x20001054

0800cb3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b086      	sub	sp, #24
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d056      	beq.n	800cc00 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cb52:	4b2e      	ldr	r3, [pc, #184]	; (800cc0c <xTaskPriorityDisinherit+0xd0>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	693a      	ldr	r2, [r7, #16]
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	d00a      	beq.n	800cb72 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb60:	f383 8811 	msr	BASEPRI, r3
 800cb64:	f3bf 8f6f 	isb	sy
 800cb68:	f3bf 8f4f 	dsb	sy
 800cb6c:	60fb      	str	r3, [r7, #12]
}
 800cb6e:	bf00      	nop
 800cb70:	e7fe      	b.n	800cb70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d10a      	bne.n	800cb90 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb7e:	f383 8811 	msr	BASEPRI, r3
 800cb82:	f3bf 8f6f 	isb	sy
 800cb86:	f3bf 8f4f 	dsb	sy
 800cb8a:	60bb      	str	r3, [r7, #8]
}
 800cb8c:	bf00      	nop
 800cb8e:	e7fe      	b.n	800cb8e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cb90:	693b      	ldr	r3, [r7, #16]
 800cb92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb94:	1e5a      	subs	r2, r3, #1
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cba2:	429a      	cmp	r2, r3
 800cba4:	d02c      	beq.n	800cc00 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cba6:	693b      	ldr	r3, [r7, #16]
 800cba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d128      	bne.n	800cc00 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	3304      	adds	r3, #4
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7fe fb60 	bl	800b278 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbc4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cbc8:	693b      	ldr	r3, [r7, #16]
 800cbca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cbcc:	693b      	ldr	r3, [r7, #16]
 800cbce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbd0:	4b0f      	ldr	r3, [pc, #60]	; (800cc10 <xTaskPriorityDisinherit+0xd4>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d903      	bls.n	800cbe0 <xTaskPriorityDisinherit+0xa4>
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbdc:	4a0c      	ldr	r2, [pc, #48]	; (800cc10 <xTaskPriorityDisinherit+0xd4>)
 800cbde:	6013      	str	r3, [r2, #0]
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbe4:	4613      	mov	r3, r2
 800cbe6:	009b      	lsls	r3, r3, #2
 800cbe8:	4413      	add	r3, r2
 800cbea:	009b      	lsls	r3, r3, #2
 800cbec:	4a09      	ldr	r2, [pc, #36]	; (800cc14 <xTaskPriorityDisinherit+0xd8>)
 800cbee:	441a      	add	r2, r3
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	3304      	adds	r3, #4
 800cbf4:	4619      	mov	r1, r3
 800cbf6:	4610      	mov	r0, r2
 800cbf8:	f7fe fae1 	bl	800b1be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cc00:	697b      	ldr	r3, [r7, #20]
	}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3718      	adds	r7, #24
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	bf00      	nop
 800cc0c:	20000b58 	.word	0x20000b58
 800cc10:	20001034 	.word	0x20001034
 800cc14:	20000b5c 	.word	0x20000b5c

0800cc18 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b084      	sub	sp, #16
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
 800cc20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cc22:	4b21      	ldr	r3, [pc, #132]	; (800cca8 <prvAddCurrentTaskToDelayedList+0x90>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc28:	4b20      	ldr	r3, [pc, #128]	; (800ccac <prvAddCurrentTaskToDelayedList+0x94>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	3304      	adds	r3, #4
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f7fe fb22 	bl	800b278 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc3a:	d10a      	bne.n	800cc52 <prvAddCurrentTaskToDelayedList+0x3a>
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d007      	beq.n	800cc52 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc42:	4b1a      	ldr	r3, [pc, #104]	; (800ccac <prvAddCurrentTaskToDelayedList+0x94>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	3304      	adds	r3, #4
 800cc48:	4619      	mov	r1, r3
 800cc4a:	4819      	ldr	r0, [pc, #100]	; (800ccb0 <prvAddCurrentTaskToDelayedList+0x98>)
 800cc4c:	f7fe fab7 	bl	800b1be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cc50:	e026      	b.n	800cca0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cc52:	68fa      	ldr	r2, [r7, #12]
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	4413      	add	r3, r2
 800cc58:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cc5a:	4b14      	ldr	r3, [pc, #80]	; (800ccac <prvAddCurrentTaskToDelayedList+0x94>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	68ba      	ldr	r2, [r7, #8]
 800cc60:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cc62:	68ba      	ldr	r2, [r7, #8]
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d209      	bcs.n	800cc7e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc6a:	4b12      	ldr	r3, [pc, #72]	; (800ccb4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cc6c:	681a      	ldr	r2, [r3, #0]
 800cc6e:	4b0f      	ldr	r3, [pc, #60]	; (800ccac <prvAddCurrentTaskToDelayedList+0x94>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	3304      	adds	r3, #4
 800cc74:	4619      	mov	r1, r3
 800cc76:	4610      	mov	r0, r2
 800cc78:	f7fe fac5 	bl	800b206 <vListInsert>
}
 800cc7c:	e010      	b.n	800cca0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc7e:	4b0e      	ldr	r3, [pc, #56]	; (800ccb8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cc80:	681a      	ldr	r2, [r3, #0]
 800cc82:	4b0a      	ldr	r3, [pc, #40]	; (800ccac <prvAddCurrentTaskToDelayedList+0x94>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	3304      	adds	r3, #4
 800cc88:	4619      	mov	r1, r3
 800cc8a:	4610      	mov	r0, r2
 800cc8c:	f7fe fabb 	bl	800b206 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cc90:	4b0a      	ldr	r3, [pc, #40]	; (800ccbc <prvAddCurrentTaskToDelayedList+0xa4>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	68ba      	ldr	r2, [r7, #8]
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d202      	bcs.n	800cca0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cc9a:	4a08      	ldr	r2, [pc, #32]	; (800ccbc <prvAddCurrentTaskToDelayedList+0xa4>)
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	6013      	str	r3, [r2, #0]
}
 800cca0:	bf00      	nop
 800cca2:	3710      	adds	r7, #16
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}
 800cca8:	20001030 	.word	0x20001030
 800ccac:	20000b58 	.word	0x20000b58
 800ccb0:	20001018 	.word	0x20001018
 800ccb4:	20000fe8 	.word	0x20000fe8
 800ccb8:	20000fe4 	.word	0x20000fe4
 800ccbc:	2000104c 	.word	0x2000104c

0800ccc0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b08a      	sub	sp, #40	; 0x28
 800ccc4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ccca:	f000 fb07 	bl	800d2dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ccce:	4b1c      	ldr	r3, [pc, #112]	; (800cd40 <xTimerCreateTimerTask+0x80>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d021      	beq.n	800cd1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ccde:	1d3a      	adds	r2, r7, #4
 800cce0:	f107 0108 	add.w	r1, r7, #8
 800cce4:	f107 030c 	add.w	r3, r7, #12
 800cce8:	4618      	mov	r0, r3
 800ccea:	f7fe fa21 	bl	800b130 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ccee:	6879      	ldr	r1, [r7, #4]
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	68fa      	ldr	r2, [r7, #12]
 800ccf4:	9202      	str	r2, [sp, #8]
 800ccf6:	9301      	str	r3, [sp, #4]
 800ccf8:	2302      	movs	r3, #2
 800ccfa:	9300      	str	r3, [sp, #0]
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	460a      	mov	r2, r1
 800cd00:	4910      	ldr	r1, [pc, #64]	; (800cd44 <xTimerCreateTimerTask+0x84>)
 800cd02:	4811      	ldr	r0, [pc, #68]	; (800cd48 <xTimerCreateTimerTask+0x88>)
 800cd04:	f7ff f888 	bl	800be18 <xTaskCreateStatic>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	4a10      	ldr	r2, [pc, #64]	; (800cd4c <xTimerCreateTimerTask+0x8c>)
 800cd0c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cd0e:	4b0f      	ldr	r3, [pc, #60]	; (800cd4c <xTimerCreateTimerTask+0x8c>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d001      	beq.n	800cd1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cd16:	2301      	movs	r3, #1
 800cd18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d10a      	bne.n	800cd36 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800cd20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd24:	f383 8811 	msr	BASEPRI, r3
 800cd28:	f3bf 8f6f 	isb	sy
 800cd2c:	f3bf 8f4f 	dsb	sy
 800cd30:	613b      	str	r3, [r7, #16]
}
 800cd32:	bf00      	nop
 800cd34:	e7fe      	b.n	800cd34 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cd36:	697b      	ldr	r3, [r7, #20]
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3718      	adds	r7, #24
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}
 800cd40:	20001088 	.word	0x20001088
 800cd44:	0800e580 	.word	0x0800e580
 800cd48:	0800ce85 	.word	0x0800ce85
 800cd4c:	2000108c 	.word	0x2000108c

0800cd50 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b08a      	sub	sp, #40	; 0x28
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	60f8      	str	r0, [r7, #12]
 800cd58:	60b9      	str	r1, [r7, #8]
 800cd5a:	607a      	str	r2, [r7, #4]
 800cd5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d10a      	bne.n	800cd7e <xTimerGenericCommand+0x2e>
	__asm volatile
 800cd68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6c:	f383 8811 	msr	BASEPRI, r3
 800cd70:	f3bf 8f6f 	isb	sy
 800cd74:	f3bf 8f4f 	dsb	sy
 800cd78:	623b      	str	r3, [r7, #32]
}
 800cd7a:	bf00      	nop
 800cd7c:	e7fe      	b.n	800cd7c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cd7e:	4b1a      	ldr	r3, [pc, #104]	; (800cde8 <xTimerGenericCommand+0x98>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d02a      	beq.n	800cddc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	2b05      	cmp	r3, #5
 800cd96:	dc18      	bgt.n	800cdca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cd98:	f7ff feb2 	bl	800cb00 <xTaskGetSchedulerState>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	2b02      	cmp	r3, #2
 800cda0:	d109      	bne.n	800cdb6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cda2:	4b11      	ldr	r3, [pc, #68]	; (800cde8 <xTimerGenericCommand+0x98>)
 800cda4:	6818      	ldr	r0, [r3, #0]
 800cda6:	f107 0110 	add.w	r1, r7, #16
 800cdaa:	2300      	movs	r3, #0
 800cdac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdae:	f7fe fbcb 	bl	800b548 <xQueueGenericSend>
 800cdb2:	6278      	str	r0, [r7, #36]	; 0x24
 800cdb4:	e012      	b.n	800cddc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cdb6:	4b0c      	ldr	r3, [pc, #48]	; (800cde8 <xTimerGenericCommand+0x98>)
 800cdb8:	6818      	ldr	r0, [r3, #0]
 800cdba:	f107 0110 	add.w	r1, r7, #16
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	f7fe fbc1 	bl	800b548 <xQueueGenericSend>
 800cdc6:	6278      	str	r0, [r7, #36]	; 0x24
 800cdc8:	e008      	b.n	800cddc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cdca:	4b07      	ldr	r3, [pc, #28]	; (800cde8 <xTimerGenericCommand+0x98>)
 800cdcc:	6818      	ldr	r0, [r3, #0]
 800cdce:	f107 0110 	add.w	r1, r7, #16
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	683a      	ldr	r2, [r7, #0]
 800cdd6:	f7fe fcb5 	bl	800b744 <xQueueGenericSendFromISR>
 800cdda:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3728      	adds	r7, #40	; 0x28
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
 800cde6:	bf00      	nop
 800cde8:	20001088 	.word	0x20001088

0800cdec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b088      	sub	sp, #32
 800cdf0:	af02      	add	r7, sp, #8
 800cdf2:	6078      	str	r0, [r7, #4]
 800cdf4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdf6:	4b22      	ldr	r3, [pc, #136]	; (800ce80 <prvProcessExpiredTimer+0x94>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	68db      	ldr	r3, [r3, #12]
 800cdfc:	68db      	ldr	r3, [r3, #12]
 800cdfe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	3304      	adds	r3, #4
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7fe fa37 	bl	800b278 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce0a:	697b      	ldr	r3, [r7, #20]
 800ce0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce10:	f003 0304 	and.w	r3, r3, #4
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d022      	beq.n	800ce5e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	699a      	ldr	r2, [r3, #24]
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	18d1      	adds	r1, r2, r3
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	683a      	ldr	r2, [r7, #0]
 800ce24:	6978      	ldr	r0, [r7, #20]
 800ce26:	f000 f8d1 	bl	800cfcc <prvInsertTimerInActiveList>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d01f      	beq.n	800ce70 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ce30:	2300      	movs	r3, #0
 800ce32:	9300      	str	r3, [sp, #0]
 800ce34:	2300      	movs	r3, #0
 800ce36:	687a      	ldr	r2, [r7, #4]
 800ce38:	2100      	movs	r1, #0
 800ce3a:	6978      	ldr	r0, [r7, #20]
 800ce3c:	f7ff ff88 	bl	800cd50 <xTimerGenericCommand>
 800ce40:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ce42:	693b      	ldr	r3, [r7, #16]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d113      	bne.n	800ce70 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ce48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce4c:	f383 8811 	msr	BASEPRI, r3
 800ce50:	f3bf 8f6f 	isb	sy
 800ce54:	f3bf 8f4f 	dsb	sy
 800ce58:	60fb      	str	r3, [r7, #12]
}
 800ce5a:	bf00      	nop
 800ce5c:	e7fe      	b.n	800ce5c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce64:	f023 0301 	bic.w	r3, r3, #1
 800ce68:	b2da      	uxtb	r2, r3
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ce70:	697b      	ldr	r3, [r7, #20]
 800ce72:	6a1b      	ldr	r3, [r3, #32]
 800ce74:	6978      	ldr	r0, [r7, #20]
 800ce76:	4798      	blx	r3
}
 800ce78:	bf00      	nop
 800ce7a:	3718      	adds	r7, #24
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}
 800ce80:	20001080 	.word	0x20001080

0800ce84 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b084      	sub	sp, #16
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ce8c:	f107 0308 	add.w	r3, r7, #8
 800ce90:	4618      	mov	r0, r3
 800ce92:	f000 f857 	bl	800cf44 <prvGetNextExpireTime>
 800ce96:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	68f8      	ldr	r0, [r7, #12]
 800ce9e:	f000 f803 	bl	800cea8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cea2:	f000 f8d5 	bl	800d050 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cea6:	e7f1      	b.n	800ce8c <prvTimerTask+0x8>

0800cea8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b084      	sub	sp, #16
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
 800ceb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ceb2:	f7ff fa11 	bl	800c2d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ceb6:	f107 0308 	add.w	r3, r7, #8
 800ceba:	4618      	mov	r0, r3
 800cebc:	f000 f866 	bl	800cf8c <prvSampleTimeNow>
 800cec0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d130      	bne.n	800cf2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d10a      	bne.n	800cee4 <prvProcessTimerOrBlockTask+0x3c>
 800cece:	687a      	ldr	r2, [r7, #4]
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d806      	bhi.n	800cee4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ced6:	f7ff fa0d 	bl	800c2f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ceda:	68f9      	ldr	r1, [r7, #12]
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f7ff ff85 	bl	800cdec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cee2:	e024      	b.n	800cf2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d008      	beq.n	800cefc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ceea:	4b13      	ldr	r3, [pc, #76]	; (800cf38 <prvProcessTimerOrBlockTask+0x90>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d101      	bne.n	800cef8 <prvProcessTimerOrBlockTask+0x50>
 800cef4:	2301      	movs	r3, #1
 800cef6:	e000      	b.n	800cefa <prvProcessTimerOrBlockTask+0x52>
 800cef8:	2300      	movs	r3, #0
 800cefa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cefc:	4b0f      	ldr	r3, [pc, #60]	; (800cf3c <prvProcessTimerOrBlockTask+0x94>)
 800cefe:	6818      	ldr	r0, [r3, #0]
 800cf00:	687a      	ldr	r2, [r7, #4]
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	1ad3      	subs	r3, r2, r3
 800cf06:	683a      	ldr	r2, [r7, #0]
 800cf08:	4619      	mov	r1, r3
 800cf0a:	f7fe ff51 	bl	800bdb0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cf0e:	f7ff f9f1 	bl	800c2f4 <xTaskResumeAll>
 800cf12:	4603      	mov	r3, r0
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d10a      	bne.n	800cf2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cf18:	4b09      	ldr	r3, [pc, #36]	; (800cf40 <prvProcessTimerOrBlockTask+0x98>)
 800cf1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf1e:	601a      	str	r2, [r3, #0]
 800cf20:	f3bf 8f4f 	dsb	sy
 800cf24:	f3bf 8f6f 	isb	sy
}
 800cf28:	e001      	b.n	800cf2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cf2a:	f7ff f9e3 	bl	800c2f4 <xTaskResumeAll>
}
 800cf2e:	bf00      	nop
 800cf30:	3710      	adds	r7, #16
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop
 800cf38:	20001084 	.word	0x20001084
 800cf3c:	20001088 	.word	0x20001088
 800cf40:	e000ed04 	.word	0xe000ed04

0800cf44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cf44:	b480      	push	{r7}
 800cf46:	b085      	sub	sp, #20
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cf4c:	4b0e      	ldr	r3, [pc, #56]	; (800cf88 <prvGetNextExpireTime+0x44>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d101      	bne.n	800cf5a <prvGetNextExpireTime+0x16>
 800cf56:	2201      	movs	r2, #1
 800cf58:	e000      	b.n	800cf5c <prvGetNextExpireTime+0x18>
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d105      	bne.n	800cf74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cf68:	4b07      	ldr	r3, [pc, #28]	; (800cf88 <prvGetNextExpireTime+0x44>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	68db      	ldr	r3, [r3, #12]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	60fb      	str	r3, [r7, #12]
 800cf72:	e001      	b.n	800cf78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cf74:	2300      	movs	r3, #0
 800cf76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cf78:	68fb      	ldr	r3, [r7, #12]
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3714      	adds	r7, #20
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf84:	4770      	bx	lr
 800cf86:	bf00      	nop
 800cf88:	20001080 	.word	0x20001080

0800cf8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b084      	sub	sp, #16
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cf94:	f7ff fa4c 	bl	800c430 <xTaskGetTickCount>
 800cf98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cf9a:	4b0b      	ldr	r3, [pc, #44]	; (800cfc8 <prvSampleTimeNow+0x3c>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	68fa      	ldr	r2, [r7, #12]
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d205      	bcs.n	800cfb0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cfa4:	f000 f936 	bl	800d214 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2201      	movs	r2, #1
 800cfac:	601a      	str	r2, [r3, #0]
 800cfae:	e002      	b.n	800cfb6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cfb6:	4a04      	ldr	r2, [pc, #16]	; (800cfc8 <prvSampleTimeNow+0x3c>)
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3710      	adds	r7, #16
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	20001090 	.word	0x20001090

0800cfcc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b086      	sub	sp, #24
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	60b9      	str	r1, [r7, #8]
 800cfd6:	607a      	str	r2, [r7, #4]
 800cfd8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	68ba      	ldr	r2, [r7, #8]
 800cfe2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	68fa      	ldr	r2, [r7, #12]
 800cfe8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cfea:	68ba      	ldr	r2, [r7, #8]
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	429a      	cmp	r2, r3
 800cff0:	d812      	bhi.n	800d018 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cff2:	687a      	ldr	r2, [r7, #4]
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	1ad2      	subs	r2, r2, r3
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	699b      	ldr	r3, [r3, #24]
 800cffc:	429a      	cmp	r2, r3
 800cffe:	d302      	bcc.n	800d006 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d000:	2301      	movs	r3, #1
 800d002:	617b      	str	r3, [r7, #20]
 800d004:	e01b      	b.n	800d03e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d006:	4b10      	ldr	r3, [pc, #64]	; (800d048 <prvInsertTimerInActiveList+0x7c>)
 800d008:	681a      	ldr	r2, [r3, #0]
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	3304      	adds	r3, #4
 800d00e:	4619      	mov	r1, r3
 800d010:	4610      	mov	r0, r2
 800d012:	f7fe f8f8 	bl	800b206 <vListInsert>
 800d016:	e012      	b.n	800d03e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d018:	687a      	ldr	r2, [r7, #4]
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d206      	bcs.n	800d02e <prvInsertTimerInActiveList+0x62>
 800d020:	68ba      	ldr	r2, [r7, #8]
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	429a      	cmp	r2, r3
 800d026:	d302      	bcc.n	800d02e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d028:	2301      	movs	r3, #1
 800d02a:	617b      	str	r3, [r7, #20]
 800d02c:	e007      	b.n	800d03e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d02e:	4b07      	ldr	r3, [pc, #28]	; (800d04c <prvInsertTimerInActiveList+0x80>)
 800d030:	681a      	ldr	r2, [r3, #0]
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	3304      	adds	r3, #4
 800d036:	4619      	mov	r1, r3
 800d038:	4610      	mov	r0, r2
 800d03a:	f7fe f8e4 	bl	800b206 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d03e:	697b      	ldr	r3, [r7, #20]
}
 800d040:	4618      	mov	r0, r3
 800d042:	3718      	adds	r7, #24
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}
 800d048:	20001084 	.word	0x20001084
 800d04c:	20001080 	.word	0x20001080

0800d050 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b08e      	sub	sp, #56	; 0x38
 800d054:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d056:	e0ca      	b.n	800d1ee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	da18      	bge.n	800d090 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d05e:	1d3b      	adds	r3, r7, #4
 800d060:	3304      	adds	r3, #4
 800d062:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d066:	2b00      	cmp	r3, #0
 800d068:	d10a      	bne.n	800d080 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d06e:	f383 8811 	msr	BASEPRI, r3
 800d072:	f3bf 8f6f 	isb	sy
 800d076:	f3bf 8f4f 	dsb	sy
 800d07a:	61fb      	str	r3, [r7, #28]
}
 800d07c:	bf00      	nop
 800d07e:	e7fe      	b.n	800d07e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d086:	6850      	ldr	r0, [r2, #4]
 800d088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d08a:	6892      	ldr	r2, [r2, #8]
 800d08c:	4611      	mov	r1, r2
 800d08e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2b00      	cmp	r3, #0
 800d094:	f2c0 80ab 	blt.w	800d1ee <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d09e:	695b      	ldr	r3, [r3, #20]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d004      	beq.n	800d0ae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a6:	3304      	adds	r3, #4
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f7fe f8e5 	bl	800b278 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d0ae:	463b      	mov	r3, r7
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f7ff ff6b 	bl	800cf8c <prvSampleTimeNow>
 800d0b6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2b09      	cmp	r3, #9
 800d0bc:	f200 8096 	bhi.w	800d1ec <prvProcessReceivedCommands+0x19c>
 800d0c0:	a201      	add	r2, pc, #4	; (adr r2, 800d0c8 <prvProcessReceivedCommands+0x78>)
 800d0c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0c6:	bf00      	nop
 800d0c8:	0800d0f1 	.word	0x0800d0f1
 800d0cc:	0800d0f1 	.word	0x0800d0f1
 800d0d0:	0800d0f1 	.word	0x0800d0f1
 800d0d4:	0800d165 	.word	0x0800d165
 800d0d8:	0800d179 	.word	0x0800d179
 800d0dc:	0800d1c3 	.word	0x0800d1c3
 800d0e0:	0800d0f1 	.word	0x0800d0f1
 800d0e4:	0800d0f1 	.word	0x0800d0f1
 800d0e8:	0800d165 	.word	0x0800d165
 800d0ec:	0800d179 	.word	0x0800d179
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0f6:	f043 0301 	orr.w	r3, r3, #1
 800d0fa:	b2da      	uxtb	r2, r3
 800d0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d102:	68ba      	ldr	r2, [r7, #8]
 800d104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d106:	699b      	ldr	r3, [r3, #24]
 800d108:	18d1      	adds	r1, r2, r3
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d10e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d110:	f7ff ff5c 	bl	800cfcc <prvInsertTimerInActiveList>
 800d114:	4603      	mov	r3, r0
 800d116:	2b00      	cmp	r3, #0
 800d118:	d069      	beq.n	800d1ee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d11c:	6a1b      	ldr	r3, [r3, #32]
 800d11e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d120:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d124:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d128:	f003 0304 	and.w	r3, r3, #4
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d05e      	beq.n	800d1ee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d130:	68ba      	ldr	r2, [r7, #8]
 800d132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d134:	699b      	ldr	r3, [r3, #24]
 800d136:	441a      	add	r2, r3
 800d138:	2300      	movs	r3, #0
 800d13a:	9300      	str	r3, [sp, #0]
 800d13c:	2300      	movs	r3, #0
 800d13e:	2100      	movs	r1, #0
 800d140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d142:	f7ff fe05 	bl	800cd50 <xTimerGenericCommand>
 800d146:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d148:	6a3b      	ldr	r3, [r7, #32]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d14f      	bne.n	800d1ee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d152:	f383 8811 	msr	BASEPRI, r3
 800d156:	f3bf 8f6f 	isb	sy
 800d15a:	f3bf 8f4f 	dsb	sy
 800d15e:	61bb      	str	r3, [r7, #24]
}
 800d160:	bf00      	nop
 800d162:	e7fe      	b.n	800d162 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d166:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d16a:	f023 0301 	bic.w	r3, r3, #1
 800d16e:	b2da      	uxtb	r2, r3
 800d170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d172:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d176:	e03a      	b.n	800d1ee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d17a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d17e:	f043 0301 	orr.w	r3, r3, #1
 800d182:	b2da      	uxtb	r2, r3
 800d184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d186:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d18a:	68ba      	ldr	r2, [r7, #8]
 800d18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d18e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d192:	699b      	ldr	r3, [r3, #24]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d10a      	bne.n	800d1ae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d19c:	f383 8811 	msr	BASEPRI, r3
 800d1a0:	f3bf 8f6f 	isb	sy
 800d1a4:	f3bf 8f4f 	dsb	sy
 800d1a8:	617b      	str	r3, [r7, #20]
}
 800d1aa:	bf00      	nop
 800d1ac:	e7fe      	b.n	800d1ac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b0:	699a      	ldr	r2, [r3, #24]
 800d1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b4:	18d1      	adds	r1, r2, r3
 800d1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1bc:	f7ff ff06 	bl	800cfcc <prvInsertTimerInActiveList>
					break;
 800d1c0:	e015      	b.n	800d1ee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1c8:	f003 0302 	and.w	r3, r3, #2
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d103      	bne.n	800d1d8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d1d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1d2:	f000 fbe1 	bl	800d998 <vPortFree>
 800d1d6:	e00a      	b.n	800d1ee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1de:	f023 0301 	bic.w	r3, r3, #1
 800d1e2:	b2da      	uxtb	r2, r3
 800d1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d1ea:	e000      	b.n	800d1ee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800d1ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d1ee:	4b08      	ldr	r3, [pc, #32]	; (800d210 <prvProcessReceivedCommands+0x1c0>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	1d39      	adds	r1, r7, #4
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f7fe fb40 	bl	800b87c <xQueueReceive>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	f47f af2a 	bne.w	800d058 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d204:	bf00      	nop
 800d206:	bf00      	nop
 800d208:	3730      	adds	r7, #48	; 0x30
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}
 800d20e:	bf00      	nop
 800d210:	20001088 	.word	0x20001088

0800d214 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b088      	sub	sp, #32
 800d218:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d21a:	e048      	b.n	800d2ae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d21c:	4b2d      	ldr	r3, [pc, #180]	; (800d2d4 <prvSwitchTimerLists+0xc0>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	68db      	ldr	r3, [r3, #12]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d226:	4b2b      	ldr	r3, [pc, #172]	; (800d2d4 <prvSwitchTimerLists+0xc0>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	68db      	ldr	r3, [r3, #12]
 800d22c:	68db      	ldr	r3, [r3, #12]
 800d22e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	3304      	adds	r3, #4
 800d234:	4618      	mov	r0, r3
 800d236:	f7fe f81f 	bl	800b278 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	6a1b      	ldr	r3, [r3, #32]
 800d23e:	68f8      	ldr	r0, [r7, #12]
 800d240:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d248:	f003 0304 	and.w	r3, r3, #4
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d02e      	beq.n	800d2ae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	699b      	ldr	r3, [r3, #24]
 800d254:	693a      	ldr	r2, [r7, #16]
 800d256:	4413      	add	r3, r2
 800d258:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d25a:	68ba      	ldr	r2, [r7, #8]
 800d25c:	693b      	ldr	r3, [r7, #16]
 800d25e:	429a      	cmp	r2, r3
 800d260:	d90e      	bls.n	800d280 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	68ba      	ldr	r2, [r7, #8]
 800d266:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	68fa      	ldr	r2, [r7, #12]
 800d26c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d26e:	4b19      	ldr	r3, [pc, #100]	; (800d2d4 <prvSwitchTimerLists+0xc0>)
 800d270:	681a      	ldr	r2, [r3, #0]
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	3304      	adds	r3, #4
 800d276:	4619      	mov	r1, r3
 800d278:	4610      	mov	r0, r2
 800d27a:	f7fd ffc4 	bl	800b206 <vListInsert>
 800d27e:	e016      	b.n	800d2ae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d280:	2300      	movs	r3, #0
 800d282:	9300      	str	r3, [sp, #0]
 800d284:	2300      	movs	r3, #0
 800d286:	693a      	ldr	r2, [r7, #16]
 800d288:	2100      	movs	r1, #0
 800d28a:	68f8      	ldr	r0, [r7, #12]
 800d28c:	f7ff fd60 	bl	800cd50 <xTimerGenericCommand>
 800d290:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d10a      	bne.n	800d2ae <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d29c:	f383 8811 	msr	BASEPRI, r3
 800d2a0:	f3bf 8f6f 	isb	sy
 800d2a4:	f3bf 8f4f 	dsb	sy
 800d2a8:	603b      	str	r3, [r7, #0]
}
 800d2aa:	bf00      	nop
 800d2ac:	e7fe      	b.n	800d2ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d2ae:	4b09      	ldr	r3, [pc, #36]	; (800d2d4 <prvSwitchTimerLists+0xc0>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d1b1      	bne.n	800d21c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d2b8:	4b06      	ldr	r3, [pc, #24]	; (800d2d4 <prvSwitchTimerLists+0xc0>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d2be:	4b06      	ldr	r3, [pc, #24]	; (800d2d8 <prvSwitchTimerLists+0xc4>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	4a04      	ldr	r2, [pc, #16]	; (800d2d4 <prvSwitchTimerLists+0xc0>)
 800d2c4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d2c6:	4a04      	ldr	r2, [pc, #16]	; (800d2d8 <prvSwitchTimerLists+0xc4>)
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	6013      	str	r3, [r2, #0]
}
 800d2cc:	bf00      	nop
 800d2ce:	3718      	adds	r7, #24
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}
 800d2d4:	20001080 	.word	0x20001080
 800d2d8:	20001084 	.word	0x20001084

0800d2dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b082      	sub	sp, #8
 800d2e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d2e2:	f000 f967 	bl	800d5b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d2e6:	4b15      	ldr	r3, [pc, #84]	; (800d33c <prvCheckForValidListAndQueue+0x60>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d120      	bne.n	800d330 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d2ee:	4814      	ldr	r0, [pc, #80]	; (800d340 <prvCheckForValidListAndQueue+0x64>)
 800d2f0:	f7fd ff38 	bl	800b164 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d2f4:	4813      	ldr	r0, [pc, #76]	; (800d344 <prvCheckForValidListAndQueue+0x68>)
 800d2f6:	f7fd ff35 	bl	800b164 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d2fa:	4b13      	ldr	r3, [pc, #76]	; (800d348 <prvCheckForValidListAndQueue+0x6c>)
 800d2fc:	4a10      	ldr	r2, [pc, #64]	; (800d340 <prvCheckForValidListAndQueue+0x64>)
 800d2fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d300:	4b12      	ldr	r3, [pc, #72]	; (800d34c <prvCheckForValidListAndQueue+0x70>)
 800d302:	4a10      	ldr	r2, [pc, #64]	; (800d344 <prvCheckForValidListAndQueue+0x68>)
 800d304:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d306:	2300      	movs	r3, #0
 800d308:	9300      	str	r3, [sp, #0]
 800d30a:	4b11      	ldr	r3, [pc, #68]	; (800d350 <prvCheckForValidListAndQueue+0x74>)
 800d30c:	4a11      	ldr	r2, [pc, #68]	; (800d354 <prvCheckForValidListAndQueue+0x78>)
 800d30e:	2110      	movs	r1, #16
 800d310:	200a      	movs	r0, #10
 800d312:	f7fe f843 	bl	800b39c <xQueueGenericCreateStatic>
 800d316:	4603      	mov	r3, r0
 800d318:	4a08      	ldr	r2, [pc, #32]	; (800d33c <prvCheckForValidListAndQueue+0x60>)
 800d31a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d31c:	4b07      	ldr	r3, [pc, #28]	; (800d33c <prvCheckForValidListAndQueue+0x60>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d005      	beq.n	800d330 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d324:	4b05      	ldr	r3, [pc, #20]	; (800d33c <prvCheckForValidListAndQueue+0x60>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	490b      	ldr	r1, [pc, #44]	; (800d358 <prvCheckForValidListAndQueue+0x7c>)
 800d32a:	4618      	mov	r0, r3
 800d32c:	f7fe fd16 	bl	800bd5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d330:	f000 f970 	bl	800d614 <vPortExitCritical>
}
 800d334:	bf00      	nop
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}
 800d33a:	bf00      	nop
 800d33c:	20001088 	.word	0x20001088
 800d340:	20001058 	.word	0x20001058
 800d344:	2000106c 	.word	0x2000106c
 800d348:	20001080 	.word	0x20001080
 800d34c:	20001084 	.word	0x20001084
 800d350:	20001134 	.word	0x20001134
 800d354:	20001094 	.word	0x20001094
 800d358:	0800e588 	.word	0x0800e588

0800d35c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d35c:	b480      	push	{r7}
 800d35e:	b085      	sub	sp, #20
 800d360:	af00      	add	r7, sp, #0
 800d362:	60f8      	str	r0, [r7, #12]
 800d364:	60b9      	str	r1, [r7, #8]
 800d366:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	3b04      	subs	r3, #4
 800d36c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d374:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	3b04      	subs	r3, #4
 800d37a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	f023 0201 	bic.w	r2, r3, #1
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	3b04      	subs	r3, #4
 800d38a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d38c:	4a0c      	ldr	r2, [pc, #48]	; (800d3c0 <pxPortInitialiseStack+0x64>)
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	3b14      	subs	r3, #20
 800d396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d398:	687a      	ldr	r2, [r7, #4]
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	3b04      	subs	r3, #4
 800d3a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	f06f 0202 	mvn.w	r2, #2
 800d3aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	3b20      	subs	r3, #32
 800d3b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3714      	adds	r7, #20
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr
 800d3c0:	0800d3c5 	.word	0x0800d3c5

0800d3c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b085      	sub	sp, #20
 800d3c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d3ce:	4b12      	ldr	r3, [pc, #72]	; (800d418 <prvTaskExitError+0x54>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3d6:	d00a      	beq.n	800d3ee <prvTaskExitError+0x2a>
	__asm volatile
 800d3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3dc:	f383 8811 	msr	BASEPRI, r3
 800d3e0:	f3bf 8f6f 	isb	sy
 800d3e4:	f3bf 8f4f 	dsb	sy
 800d3e8:	60fb      	str	r3, [r7, #12]
}
 800d3ea:	bf00      	nop
 800d3ec:	e7fe      	b.n	800d3ec <prvTaskExitError+0x28>
	__asm volatile
 800d3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f2:	f383 8811 	msr	BASEPRI, r3
 800d3f6:	f3bf 8f6f 	isb	sy
 800d3fa:	f3bf 8f4f 	dsb	sy
 800d3fe:	60bb      	str	r3, [r7, #8]
}
 800d400:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d402:	bf00      	nop
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d0fc      	beq.n	800d404 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d40a:	bf00      	nop
 800d40c:	bf00      	nop
 800d40e:	3714      	adds	r7, #20
 800d410:	46bd      	mov	sp, r7
 800d412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d416:	4770      	bx	lr
 800d418:	2000002c 	.word	0x2000002c
 800d41c:	00000000 	.word	0x00000000

0800d420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d420:	4b07      	ldr	r3, [pc, #28]	; (800d440 <pxCurrentTCBConst2>)
 800d422:	6819      	ldr	r1, [r3, #0]
 800d424:	6808      	ldr	r0, [r1, #0]
 800d426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d42a:	f380 8809 	msr	PSP, r0
 800d42e:	f3bf 8f6f 	isb	sy
 800d432:	f04f 0000 	mov.w	r0, #0
 800d436:	f380 8811 	msr	BASEPRI, r0
 800d43a:	4770      	bx	lr
 800d43c:	f3af 8000 	nop.w

0800d440 <pxCurrentTCBConst2>:
 800d440:	20000b58 	.word	0x20000b58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d444:	bf00      	nop
 800d446:	bf00      	nop

0800d448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d448:	4808      	ldr	r0, [pc, #32]	; (800d46c <prvPortStartFirstTask+0x24>)
 800d44a:	6800      	ldr	r0, [r0, #0]
 800d44c:	6800      	ldr	r0, [r0, #0]
 800d44e:	f380 8808 	msr	MSP, r0
 800d452:	f04f 0000 	mov.w	r0, #0
 800d456:	f380 8814 	msr	CONTROL, r0
 800d45a:	b662      	cpsie	i
 800d45c:	b661      	cpsie	f
 800d45e:	f3bf 8f4f 	dsb	sy
 800d462:	f3bf 8f6f 	isb	sy
 800d466:	df00      	svc	0
 800d468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d46a:	bf00      	nop
 800d46c:	e000ed08 	.word	0xe000ed08

0800d470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b086      	sub	sp, #24
 800d474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d476:	4b46      	ldr	r3, [pc, #280]	; (800d590 <xPortStartScheduler+0x120>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	4a46      	ldr	r2, [pc, #280]	; (800d594 <xPortStartScheduler+0x124>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d10a      	bne.n	800d496 <xPortStartScheduler+0x26>
	__asm volatile
 800d480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d484:	f383 8811 	msr	BASEPRI, r3
 800d488:	f3bf 8f6f 	isb	sy
 800d48c:	f3bf 8f4f 	dsb	sy
 800d490:	613b      	str	r3, [r7, #16]
}
 800d492:	bf00      	nop
 800d494:	e7fe      	b.n	800d494 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d496:	4b3e      	ldr	r3, [pc, #248]	; (800d590 <xPortStartScheduler+0x120>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	4a3f      	ldr	r2, [pc, #252]	; (800d598 <xPortStartScheduler+0x128>)
 800d49c:	4293      	cmp	r3, r2
 800d49e:	d10a      	bne.n	800d4b6 <xPortStartScheduler+0x46>
	__asm volatile
 800d4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a4:	f383 8811 	msr	BASEPRI, r3
 800d4a8:	f3bf 8f6f 	isb	sy
 800d4ac:	f3bf 8f4f 	dsb	sy
 800d4b0:	60fb      	str	r3, [r7, #12]
}
 800d4b2:	bf00      	nop
 800d4b4:	e7fe      	b.n	800d4b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d4b6:	4b39      	ldr	r3, [pc, #228]	; (800d59c <xPortStartScheduler+0x12c>)
 800d4b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	781b      	ldrb	r3, [r3, #0]
 800d4be:	b2db      	uxtb	r3, r3
 800d4c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	22ff      	movs	r2, #255	; 0xff
 800d4c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	781b      	ldrb	r3, [r3, #0]
 800d4cc:	b2db      	uxtb	r3, r3
 800d4ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d4d0:	78fb      	ldrb	r3, [r7, #3]
 800d4d2:	b2db      	uxtb	r3, r3
 800d4d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d4d8:	b2da      	uxtb	r2, r3
 800d4da:	4b31      	ldr	r3, [pc, #196]	; (800d5a0 <xPortStartScheduler+0x130>)
 800d4dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d4de:	4b31      	ldr	r3, [pc, #196]	; (800d5a4 <xPortStartScheduler+0x134>)
 800d4e0:	2207      	movs	r2, #7
 800d4e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d4e4:	e009      	b.n	800d4fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d4e6:	4b2f      	ldr	r3, [pc, #188]	; (800d5a4 <xPortStartScheduler+0x134>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	3b01      	subs	r3, #1
 800d4ec:	4a2d      	ldr	r2, [pc, #180]	; (800d5a4 <xPortStartScheduler+0x134>)
 800d4ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d4f0:	78fb      	ldrb	r3, [r7, #3]
 800d4f2:	b2db      	uxtb	r3, r3
 800d4f4:	005b      	lsls	r3, r3, #1
 800d4f6:	b2db      	uxtb	r3, r3
 800d4f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d4fa:	78fb      	ldrb	r3, [r7, #3]
 800d4fc:	b2db      	uxtb	r3, r3
 800d4fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d502:	2b80      	cmp	r3, #128	; 0x80
 800d504:	d0ef      	beq.n	800d4e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d506:	4b27      	ldr	r3, [pc, #156]	; (800d5a4 <xPortStartScheduler+0x134>)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	f1c3 0307 	rsb	r3, r3, #7
 800d50e:	2b04      	cmp	r3, #4
 800d510:	d00a      	beq.n	800d528 <xPortStartScheduler+0xb8>
	__asm volatile
 800d512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d516:	f383 8811 	msr	BASEPRI, r3
 800d51a:	f3bf 8f6f 	isb	sy
 800d51e:	f3bf 8f4f 	dsb	sy
 800d522:	60bb      	str	r3, [r7, #8]
}
 800d524:	bf00      	nop
 800d526:	e7fe      	b.n	800d526 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d528:	4b1e      	ldr	r3, [pc, #120]	; (800d5a4 <xPortStartScheduler+0x134>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	021b      	lsls	r3, r3, #8
 800d52e:	4a1d      	ldr	r2, [pc, #116]	; (800d5a4 <xPortStartScheduler+0x134>)
 800d530:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d532:	4b1c      	ldr	r3, [pc, #112]	; (800d5a4 <xPortStartScheduler+0x134>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d53a:	4a1a      	ldr	r2, [pc, #104]	; (800d5a4 <xPortStartScheduler+0x134>)
 800d53c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	b2da      	uxtb	r2, r3
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d546:	4b18      	ldr	r3, [pc, #96]	; (800d5a8 <xPortStartScheduler+0x138>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	4a17      	ldr	r2, [pc, #92]	; (800d5a8 <xPortStartScheduler+0x138>)
 800d54c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d550:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d552:	4b15      	ldr	r3, [pc, #84]	; (800d5a8 <xPortStartScheduler+0x138>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	4a14      	ldr	r2, [pc, #80]	; (800d5a8 <xPortStartScheduler+0x138>)
 800d558:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d55c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d55e:	f000 f8dd 	bl	800d71c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d562:	4b12      	ldr	r3, [pc, #72]	; (800d5ac <xPortStartScheduler+0x13c>)
 800d564:	2200      	movs	r2, #0
 800d566:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d568:	f000 f8fc 	bl	800d764 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d56c:	4b10      	ldr	r3, [pc, #64]	; (800d5b0 <xPortStartScheduler+0x140>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	4a0f      	ldr	r2, [pc, #60]	; (800d5b0 <xPortStartScheduler+0x140>)
 800d572:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d576:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d578:	f7ff ff66 	bl	800d448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d57c:	f7ff f822 	bl	800c5c4 <vTaskSwitchContext>
	prvTaskExitError();
 800d580:	f7ff ff20 	bl	800d3c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d584:	2300      	movs	r3, #0
}
 800d586:	4618      	mov	r0, r3
 800d588:	3718      	adds	r7, #24
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}
 800d58e:	bf00      	nop
 800d590:	e000ed00 	.word	0xe000ed00
 800d594:	410fc271 	.word	0x410fc271
 800d598:	410fc270 	.word	0x410fc270
 800d59c:	e000e400 	.word	0xe000e400
 800d5a0:	20001184 	.word	0x20001184
 800d5a4:	20001188 	.word	0x20001188
 800d5a8:	e000ed20 	.word	0xe000ed20
 800d5ac:	2000002c 	.word	0x2000002c
 800d5b0:	e000ef34 	.word	0xe000ef34

0800d5b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b083      	sub	sp, #12
 800d5b8:	af00      	add	r7, sp, #0
	__asm volatile
 800d5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5be:	f383 8811 	msr	BASEPRI, r3
 800d5c2:	f3bf 8f6f 	isb	sy
 800d5c6:	f3bf 8f4f 	dsb	sy
 800d5ca:	607b      	str	r3, [r7, #4]
}
 800d5cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d5ce:	4b0f      	ldr	r3, [pc, #60]	; (800d60c <vPortEnterCritical+0x58>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	3301      	adds	r3, #1
 800d5d4:	4a0d      	ldr	r2, [pc, #52]	; (800d60c <vPortEnterCritical+0x58>)
 800d5d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d5d8:	4b0c      	ldr	r3, [pc, #48]	; (800d60c <vPortEnterCritical+0x58>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	2b01      	cmp	r3, #1
 800d5de:	d10f      	bne.n	800d600 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d5e0:	4b0b      	ldr	r3, [pc, #44]	; (800d610 <vPortEnterCritical+0x5c>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	b2db      	uxtb	r3, r3
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d00a      	beq.n	800d600 <vPortEnterCritical+0x4c>
	__asm volatile
 800d5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ee:	f383 8811 	msr	BASEPRI, r3
 800d5f2:	f3bf 8f6f 	isb	sy
 800d5f6:	f3bf 8f4f 	dsb	sy
 800d5fa:	603b      	str	r3, [r7, #0]
}
 800d5fc:	bf00      	nop
 800d5fe:	e7fe      	b.n	800d5fe <vPortEnterCritical+0x4a>
	}
}
 800d600:	bf00      	nop
 800d602:	370c      	adds	r7, #12
 800d604:	46bd      	mov	sp, r7
 800d606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60a:	4770      	bx	lr
 800d60c:	2000002c 	.word	0x2000002c
 800d610:	e000ed04 	.word	0xe000ed04

0800d614 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d614:	b480      	push	{r7}
 800d616:	b083      	sub	sp, #12
 800d618:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d61a:	4b12      	ldr	r3, [pc, #72]	; (800d664 <vPortExitCritical+0x50>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d10a      	bne.n	800d638 <vPortExitCritical+0x24>
	__asm volatile
 800d622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d626:	f383 8811 	msr	BASEPRI, r3
 800d62a:	f3bf 8f6f 	isb	sy
 800d62e:	f3bf 8f4f 	dsb	sy
 800d632:	607b      	str	r3, [r7, #4]
}
 800d634:	bf00      	nop
 800d636:	e7fe      	b.n	800d636 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d638:	4b0a      	ldr	r3, [pc, #40]	; (800d664 <vPortExitCritical+0x50>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	3b01      	subs	r3, #1
 800d63e:	4a09      	ldr	r2, [pc, #36]	; (800d664 <vPortExitCritical+0x50>)
 800d640:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d642:	4b08      	ldr	r3, [pc, #32]	; (800d664 <vPortExitCritical+0x50>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d105      	bne.n	800d656 <vPortExitCritical+0x42>
 800d64a:	2300      	movs	r3, #0
 800d64c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	f383 8811 	msr	BASEPRI, r3
}
 800d654:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d656:	bf00      	nop
 800d658:	370c      	adds	r7, #12
 800d65a:	46bd      	mov	sp, r7
 800d65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d660:	4770      	bx	lr
 800d662:	bf00      	nop
 800d664:	2000002c 	.word	0x2000002c
	...

0800d670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d670:	f3ef 8009 	mrs	r0, PSP
 800d674:	f3bf 8f6f 	isb	sy
 800d678:	4b15      	ldr	r3, [pc, #84]	; (800d6d0 <pxCurrentTCBConst>)
 800d67a:	681a      	ldr	r2, [r3, #0]
 800d67c:	f01e 0f10 	tst.w	lr, #16
 800d680:	bf08      	it	eq
 800d682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d68a:	6010      	str	r0, [r2, #0]
 800d68c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d690:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d694:	f380 8811 	msr	BASEPRI, r0
 800d698:	f3bf 8f4f 	dsb	sy
 800d69c:	f3bf 8f6f 	isb	sy
 800d6a0:	f7fe ff90 	bl	800c5c4 <vTaskSwitchContext>
 800d6a4:	f04f 0000 	mov.w	r0, #0
 800d6a8:	f380 8811 	msr	BASEPRI, r0
 800d6ac:	bc09      	pop	{r0, r3}
 800d6ae:	6819      	ldr	r1, [r3, #0]
 800d6b0:	6808      	ldr	r0, [r1, #0]
 800d6b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6b6:	f01e 0f10 	tst.w	lr, #16
 800d6ba:	bf08      	it	eq
 800d6bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d6c0:	f380 8809 	msr	PSP, r0
 800d6c4:	f3bf 8f6f 	isb	sy
 800d6c8:	4770      	bx	lr
 800d6ca:	bf00      	nop
 800d6cc:	f3af 8000 	nop.w

0800d6d0 <pxCurrentTCBConst>:
 800d6d0:	20000b58 	.word	0x20000b58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d6d4:	bf00      	nop
 800d6d6:	bf00      	nop

0800d6d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b082      	sub	sp, #8
 800d6dc:	af00      	add	r7, sp, #0
	__asm volatile
 800d6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e2:	f383 8811 	msr	BASEPRI, r3
 800d6e6:	f3bf 8f6f 	isb	sy
 800d6ea:	f3bf 8f4f 	dsb	sy
 800d6ee:	607b      	str	r3, [r7, #4]
}
 800d6f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d6f2:	f7fe fead 	bl	800c450 <xTaskIncrementTick>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d003      	beq.n	800d704 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d6fc:	4b06      	ldr	r3, [pc, #24]	; (800d718 <xPortSysTickHandler+0x40>)
 800d6fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d702:	601a      	str	r2, [r3, #0]
 800d704:	2300      	movs	r3, #0
 800d706:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	f383 8811 	msr	BASEPRI, r3
}
 800d70e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d710:	bf00      	nop
 800d712:	3708      	adds	r7, #8
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}
 800d718:	e000ed04 	.word	0xe000ed04

0800d71c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d71c:	b480      	push	{r7}
 800d71e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d720:	4b0b      	ldr	r3, [pc, #44]	; (800d750 <vPortSetupTimerInterrupt+0x34>)
 800d722:	2200      	movs	r2, #0
 800d724:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d726:	4b0b      	ldr	r3, [pc, #44]	; (800d754 <vPortSetupTimerInterrupt+0x38>)
 800d728:	2200      	movs	r2, #0
 800d72a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d72c:	4b0a      	ldr	r3, [pc, #40]	; (800d758 <vPortSetupTimerInterrupt+0x3c>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	4a0a      	ldr	r2, [pc, #40]	; (800d75c <vPortSetupTimerInterrupt+0x40>)
 800d732:	fba2 2303 	umull	r2, r3, r2, r3
 800d736:	099b      	lsrs	r3, r3, #6
 800d738:	4a09      	ldr	r2, [pc, #36]	; (800d760 <vPortSetupTimerInterrupt+0x44>)
 800d73a:	3b01      	subs	r3, #1
 800d73c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d73e:	4b04      	ldr	r3, [pc, #16]	; (800d750 <vPortSetupTimerInterrupt+0x34>)
 800d740:	2207      	movs	r2, #7
 800d742:	601a      	str	r2, [r3, #0]
}
 800d744:	bf00      	nop
 800d746:	46bd      	mov	sp, r7
 800d748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74c:	4770      	bx	lr
 800d74e:	bf00      	nop
 800d750:	e000e010 	.word	0xe000e010
 800d754:	e000e018 	.word	0xe000e018
 800d758:	20000000 	.word	0x20000000
 800d75c:	10624dd3 	.word	0x10624dd3
 800d760:	e000e014 	.word	0xe000e014

0800d764 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d764:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d774 <vPortEnableVFP+0x10>
 800d768:	6801      	ldr	r1, [r0, #0]
 800d76a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d76e:	6001      	str	r1, [r0, #0]
 800d770:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d772:	bf00      	nop
 800d774:	e000ed88 	.word	0xe000ed88

0800d778 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d778:	b480      	push	{r7}
 800d77a:	b085      	sub	sp, #20
 800d77c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d77e:	f3ef 8305 	mrs	r3, IPSR
 800d782:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	2b0f      	cmp	r3, #15
 800d788:	d914      	bls.n	800d7b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d78a:	4a17      	ldr	r2, [pc, #92]	; (800d7e8 <vPortValidateInterruptPriority+0x70>)
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	4413      	add	r3, r2
 800d790:	781b      	ldrb	r3, [r3, #0]
 800d792:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d794:	4b15      	ldr	r3, [pc, #84]	; (800d7ec <vPortValidateInterruptPriority+0x74>)
 800d796:	781b      	ldrb	r3, [r3, #0]
 800d798:	7afa      	ldrb	r2, [r7, #11]
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d20a      	bcs.n	800d7b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a2:	f383 8811 	msr	BASEPRI, r3
 800d7a6:	f3bf 8f6f 	isb	sy
 800d7aa:	f3bf 8f4f 	dsb	sy
 800d7ae:	607b      	str	r3, [r7, #4]
}
 800d7b0:	bf00      	nop
 800d7b2:	e7fe      	b.n	800d7b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d7b4:	4b0e      	ldr	r3, [pc, #56]	; (800d7f0 <vPortValidateInterruptPriority+0x78>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d7bc:	4b0d      	ldr	r3, [pc, #52]	; (800d7f4 <vPortValidateInterruptPriority+0x7c>)
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	429a      	cmp	r2, r3
 800d7c2:	d90a      	bls.n	800d7da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c8:	f383 8811 	msr	BASEPRI, r3
 800d7cc:	f3bf 8f6f 	isb	sy
 800d7d0:	f3bf 8f4f 	dsb	sy
 800d7d4:	603b      	str	r3, [r7, #0]
}
 800d7d6:	bf00      	nop
 800d7d8:	e7fe      	b.n	800d7d8 <vPortValidateInterruptPriority+0x60>
	}
 800d7da:	bf00      	nop
 800d7dc:	3714      	adds	r7, #20
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e4:	4770      	bx	lr
 800d7e6:	bf00      	nop
 800d7e8:	e000e3f0 	.word	0xe000e3f0
 800d7ec:	20001184 	.word	0x20001184
 800d7f0:	e000ed0c 	.word	0xe000ed0c
 800d7f4:	20001188 	.word	0x20001188

0800d7f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b08a      	sub	sp, #40	; 0x28
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d800:	2300      	movs	r3, #0
 800d802:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d804:	f7fe fd68 	bl	800c2d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d808:	4b5d      	ldr	r3, [pc, #372]	; (800d980 <pvPortMalloc+0x188>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d101      	bne.n	800d814 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d810:	f000 f924 	bl	800da5c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d814:	4b5b      	ldr	r3, [pc, #364]	; (800d984 <pvPortMalloc+0x18c>)
 800d816:	681a      	ldr	r2, [r3, #0]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	4013      	ands	r3, r2
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	f040 8093 	bne.w	800d948 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d01d      	beq.n	800d864 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d828:	2208      	movs	r2, #8
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	4413      	add	r3, r2
 800d82e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f003 0307 	and.w	r3, r3, #7
 800d836:	2b00      	cmp	r3, #0
 800d838:	d014      	beq.n	800d864 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f023 0307 	bic.w	r3, r3, #7
 800d840:	3308      	adds	r3, #8
 800d842:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f003 0307 	and.w	r3, r3, #7
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d00a      	beq.n	800d864 <pvPortMalloc+0x6c>
	__asm volatile
 800d84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d852:	f383 8811 	msr	BASEPRI, r3
 800d856:	f3bf 8f6f 	isb	sy
 800d85a:	f3bf 8f4f 	dsb	sy
 800d85e:	617b      	str	r3, [r7, #20]
}
 800d860:	bf00      	nop
 800d862:	e7fe      	b.n	800d862 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d06e      	beq.n	800d948 <pvPortMalloc+0x150>
 800d86a:	4b47      	ldr	r3, [pc, #284]	; (800d988 <pvPortMalloc+0x190>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	687a      	ldr	r2, [r7, #4]
 800d870:	429a      	cmp	r2, r3
 800d872:	d869      	bhi.n	800d948 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d874:	4b45      	ldr	r3, [pc, #276]	; (800d98c <pvPortMalloc+0x194>)
 800d876:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d878:	4b44      	ldr	r3, [pc, #272]	; (800d98c <pvPortMalloc+0x194>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d87e:	e004      	b.n	800d88a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d882:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d88c:	685b      	ldr	r3, [r3, #4]
 800d88e:	687a      	ldr	r2, [r7, #4]
 800d890:	429a      	cmp	r2, r3
 800d892:	d903      	bls.n	800d89c <pvPortMalloc+0xa4>
 800d894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d1f1      	bne.n	800d880 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d89c:	4b38      	ldr	r3, [pc, #224]	; (800d980 <pvPortMalloc+0x188>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d050      	beq.n	800d948 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d8a6:	6a3b      	ldr	r3, [r7, #32]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	2208      	movs	r2, #8
 800d8ac:	4413      	add	r3, r2
 800d8ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b2:	681a      	ldr	r2, [r3, #0]
 800d8b4:	6a3b      	ldr	r3, [r7, #32]
 800d8b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ba:	685a      	ldr	r2, [r3, #4]
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	1ad2      	subs	r2, r2, r3
 800d8c0:	2308      	movs	r3, #8
 800d8c2:	005b      	lsls	r3, r3, #1
 800d8c4:	429a      	cmp	r2, r3
 800d8c6:	d91f      	bls.n	800d908 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d8c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	4413      	add	r3, r2
 800d8ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d8d0:	69bb      	ldr	r3, [r7, #24]
 800d8d2:	f003 0307 	and.w	r3, r3, #7
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d00a      	beq.n	800d8f0 <pvPortMalloc+0xf8>
	__asm volatile
 800d8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8de:	f383 8811 	msr	BASEPRI, r3
 800d8e2:	f3bf 8f6f 	isb	sy
 800d8e6:	f3bf 8f4f 	dsb	sy
 800d8ea:	613b      	str	r3, [r7, #16]
}
 800d8ec:	bf00      	nop
 800d8ee:	e7fe      	b.n	800d8ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f2:	685a      	ldr	r2, [r3, #4]
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	1ad2      	subs	r2, r2, r3
 800d8f8:	69bb      	ldr	r3, [r7, #24]
 800d8fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fe:	687a      	ldr	r2, [r7, #4]
 800d900:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d902:	69b8      	ldr	r0, [r7, #24]
 800d904:	f000 f90c 	bl	800db20 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d908:	4b1f      	ldr	r3, [pc, #124]	; (800d988 <pvPortMalloc+0x190>)
 800d90a:	681a      	ldr	r2, [r3, #0]
 800d90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90e:	685b      	ldr	r3, [r3, #4]
 800d910:	1ad3      	subs	r3, r2, r3
 800d912:	4a1d      	ldr	r2, [pc, #116]	; (800d988 <pvPortMalloc+0x190>)
 800d914:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d916:	4b1c      	ldr	r3, [pc, #112]	; (800d988 <pvPortMalloc+0x190>)
 800d918:	681a      	ldr	r2, [r3, #0]
 800d91a:	4b1d      	ldr	r3, [pc, #116]	; (800d990 <pvPortMalloc+0x198>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	429a      	cmp	r2, r3
 800d920:	d203      	bcs.n	800d92a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d922:	4b19      	ldr	r3, [pc, #100]	; (800d988 <pvPortMalloc+0x190>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	4a1a      	ldr	r2, [pc, #104]	; (800d990 <pvPortMalloc+0x198>)
 800d928:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d92c:	685a      	ldr	r2, [r3, #4]
 800d92e:	4b15      	ldr	r3, [pc, #84]	; (800d984 <pvPortMalloc+0x18c>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	431a      	orrs	r2, r3
 800d934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d936:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93a:	2200      	movs	r2, #0
 800d93c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d93e:	4b15      	ldr	r3, [pc, #84]	; (800d994 <pvPortMalloc+0x19c>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	3301      	adds	r3, #1
 800d944:	4a13      	ldr	r2, [pc, #76]	; (800d994 <pvPortMalloc+0x19c>)
 800d946:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d948:	f7fe fcd4 	bl	800c2f4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800d94c:	69fb      	ldr	r3, [r7, #28]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d101      	bne.n	800d956 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800d952:	f7f2 fddd 	bl	8000510 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d956:	69fb      	ldr	r3, [r7, #28]
 800d958:	f003 0307 	and.w	r3, r3, #7
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d00a      	beq.n	800d976 <pvPortMalloc+0x17e>
	__asm volatile
 800d960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d964:	f383 8811 	msr	BASEPRI, r3
 800d968:	f3bf 8f6f 	isb	sy
 800d96c:	f3bf 8f4f 	dsb	sy
 800d970:	60fb      	str	r3, [r7, #12]
}
 800d972:	bf00      	nop
 800d974:	e7fe      	b.n	800d974 <pvPortMalloc+0x17c>
	return pvReturn;
 800d976:	69fb      	ldr	r3, [r7, #28]
}
 800d978:	4618      	mov	r0, r3
 800d97a:	3728      	adds	r7, #40	; 0x28
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}
 800d980:	20009194 	.word	0x20009194
 800d984:	200091a8 	.word	0x200091a8
 800d988:	20009198 	.word	0x20009198
 800d98c:	2000918c 	.word	0x2000918c
 800d990:	2000919c 	.word	0x2000919c
 800d994:	200091a0 	.word	0x200091a0

0800d998 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b086      	sub	sp, #24
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d04d      	beq.n	800da46 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d9aa:	2308      	movs	r3, #8
 800d9ac:	425b      	negs	r3, r3
 800d9ae:	697a      	ldr	r2, [r7, #20]
 800d9b0:	4413      	add	r3, r2
 800d9b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	685a      	ldr	r2, [r3, #4]
 800d9bc:	4b24      	ldr	r3, [pc, #144]	; (800da50 <vPortFree+0xb8>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	4013      	ands	r3, r2
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d10a      	bne.n	800d9dc <vPortFree+0x44>
	__asm volatile
 800d9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ca:	f383 8811 	msr	BASEPRI, r3
 800d9ce:	f3bf 8f6f 	isb	sy
 800d9d2:	f3bf 8f4f 	dsb	sy
 800d9d6:	60fb      	str	r3, [r7, #12]
}
 800d9d8:	bf00      	nop
 800d9da:	e7fe      	b.n	800d9da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d9dc:	693b      	ldr	r3, [r7, #16]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d00a      	beq.n	800d9fa <vPortFree+0x62>
	__asm volatile
 800d9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e8:	f383 8811 	msr	BASEPRI, r3
 800d9ec:	f3bf 8f6f 	isb	sy
 800d9f0:	f3bf 8f4f 	dsb	sy
 800d9f4:	60bb      	str	r3, [r7, #8]
}
 800d9f6:	bf00      	nop
 800d9f8:	e7fe      	b.n	800d9f8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d9fa:	693b      	ldr	r3, [r7, #16]
 800d9fc:	685a      	ldr	r2, [r3, #4]
 800d9fe:	4b14      	ldr	r3, [pc, #80]	; (800da50 <vPortFree+0xb8>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	4013      	ands	r3, r2
 800da04:	2b00      	cmp	r3, #0
 800da06:	d01e      	beq.n	800da46 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800da08:	693b      	ldr	r3, [r7, #16]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d11a      	bne.n	800da46 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800da10:	693b      	ldr	r3, [r7, #16]
 800da12:	685a      	ldr	r2, [r3, #4]
 800da14:	4b0e      	ldr	r3, [pc, #56]	; (800da50 <vPortFree+0xb8>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	43db      	mvns	r3, r3
 800da1a:	401a      	ands	r2, r3
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800da20:	f7fe fc5a 	bl	800c2d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800da24:	693b      	ldr	r3, [r7, #16]
 800da26:	685a      	ldr	r2, [r3, #4]
 800da28:	4b0a      	ldr	r3, [pc, #40]	; (800da54 <vPortFree+0xbc>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	4413      	add	r3, r2
 800da2e:	4a09      	ldr	r2, [pc, #36]	; (800da54 <vPortFree+0xbc>)
 800da30:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800da32:	6938      	ldr	r0, [r7, #16]
 800da34:	f000 f874 	bl	800db20 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800da38:	4b07      	ldr	r3, [pc, #28]	; (800da58 <vPortFree+0xc0>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	3301      	adds	r3, #1
 800da3e:	4a06      	ldr	r2, [pc, #24]	; (800da58 <vPortFree+0xc0>)
 800da40:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800da42:	f7fe fc57 	bl	800c2f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800da46:	bf00      	nop
 800da48:	3718      	adds	r7, #24
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}
 800da4e:	bf00      	nop
 800da50:	200091a8 	.word	0x200091a8
 800da54:	20009198 	.word	0x20009198
 800da58:	200091a4 	.word	0x200091a4

0800da5c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800da5c:	b480      	push	{r7}
 800da5e:	b085      	sub	sp, #20
 800da60:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800da62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800da66:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800da68:	4b27      	ldr	r3, [pc, #156]	; (800db08 <prvHeapInit+0xac>)
 800da6a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	f003 0307 	and.w	r3, r3, #7
 800da72:	2b00      	cmp	r3, #0
 800da74:	d00c      	beq.n	800da90 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	3307      	adds	r3, #7
 800da7a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	f023 0307 	bic.w	r3, r3, #7
 800da82:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800da84:	68ba      	ldr	r2, [r7, #8]
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	1ad3      	subs	r3, r2, r3
 800da8a:	4a1f      	ldr	r2, [pc, #124]	; (800db08 <prvHeapInit+0xac>)
 800da8c:	4413      	add	r3, r2
 800da8e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800da94:	4a1d      	ldr	r2, [pc, #116]	; (800db0c <prvHeapInit+0xb0>)
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800da9a:	4b1c      	ldr	r3, [pc, #112]	; (800db0c <prvHeapInit+0xb0>)
 800da9c:	2200      	movs	r2, #0
 800da9e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	68ba      	ldr	r2, [r7, #8]
 800daa4:	4413      	add	r3, r2
 800daa6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800daa8:	2208      	movs	r2, #8
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	1a9b      	subs	r3, r3, r2
 800daae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	f023 0307 	bic.w	r3, r3, #7
 800dab6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	4a15      	ldr	r2, [pc, #84]	; (800db10 <prvHeapInit+0xb4>)
 800dabc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dabe:	4b14      	ldr	r3, [pc, #80]	; (800db10 <prvHeapInit+0xb4>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	2200      	movs	r2, #0
 800dac4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dac6:	4b12      	ldr	r3, [pc, #72]	; (800db10 <prvHeapInit+0xb4>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	2200      	movs	r2, #0
 800dacc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	68fa      	ldr	r2, [r7, #12]
 800dad6:	1ad2      	subs	r2, r2, r3
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dadc:	4b0c      	ldr	r3, [pc, #48]	; (800db10 <prvHeapInit+0xb4>)
 800dade:	681a      	ldr	r2, [r3, #0]
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	685b      	ldr	r3, [r3, #4]
 800dae8:	4a0a      	ldr	r2, [pc, #40]	; (800db14 <prvHeapInit+0xb8>)
 800daea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	685b      	ldr	r3, [r3, #4]
 800daf0:	4a09      	ldr	r2, [pc, #36]	; (800db18 <prvHeapInit+0xbc>)
 800daf2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800daf4:	4b09      	ldr	r3, [pc, #36]	; (800db1c <prvHeapInit+0xc0>)
 800daf6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dafa:	601a      	str	r2, [r3, #0]
}
 800dafc:	bf00      	nop
 800dafe:	3714      	adds	r7, #20
 800db00:	46bd      	mov	sp, r7
 800db02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db06:	4770      	bx	lr
 800db08:	2000118c 	.word	0x2000118c
 800db0c:	2000918c 	.word	0x2000918c
 800db10:	20009194 	.word	0x20009194
 800db14:	2000919c 	.word	0x2000919c
 800db18:	20009198 	.word	0x20009198
 800db1c:	200091a8 	.word	0x200091a8

0800db20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800db20:	b480      	push	{r7}
 800db22:	b085      	sub	sp, #20
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800db28:	4b28      	ldr	r3, [pc, #160]	; (800dbcc <prvInsertBlockIntoFreeList+0xac>)
 800db2a:	60fb      	str	r3, [r7, #12]
 800db2c:	e002      	b.n	800db34 <prvInsertBlockIntoFreeList+0x14>
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	60fb      	str	r3, [r7, #12]
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	687a      	ldr	r2, [r7, #4]
 800db3a:	429a      	cmp	r2, r3
 800db3c:	d8f7      	bhi.n	800db2e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	685b      	ldr	r3, [r3, #4]
 800db46:	68ba      	ldr	r2, [r7, #8]
 800db48:	4413      	add	r3, r2
 800db4a:	687a      	ldr	r2, [r7, #4]
 800db4c:	429a      	cmp	r2, r3
 800db4e:	d108      	bne.n	800db62 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	685a      	ldr	r2, [r3, #4]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	685b      	ldr	r3, [r3, #4]
 800db58:	441a      	add	r2, r3
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	685b      	ldr	r3, [r3, #4]
 800db6a:	68ba      	ldr	r2, [r7, #8]
 800db6c:	441a      	add	r2, r3
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	429a      	cmp	r2, r3
 800db74:	d118      	bne.n	800dba8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	681a      	ldr	r2, [r3, #0]
 800db7a:	4b15      	ldr	r3, [pc, #84]	; (800dbd0 <prvInsertBlockIntoFreeList+0xb0>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	429a      	cmp	r2, r3
 800db80:	d00d      	beq.n	800db9e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	685a      	ldr	r2, [r3, #4]
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	685b      	ldr	r3, [r3, #4]
 800db8c:	441a      	add	r2, r3
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	681a      	ldr	r2, [r3, #0]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	601a      	str	r2, [r3, #0]
 800db9c:	e008      	b.n	800dbb0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800db9e:	4b0c      	ldr	r3, [pc, #48]	; (800dbd0 <prvInsertBlockIntoFreeList+0xb0>)
 800dba0:	681a      	ldr	r2, [r3, #0]
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	601a      	str	r2, [r3, #0]
 800dba6:	e003      	b.n	800dbb0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	681a      	ldr	r2, [r3, #0]
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dbb0:	68fa      	ldr	r2, [r7, #12]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	d002      	beq.n	800dbbe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	687a      	ldr	r2, [r7, #4]
 800dbbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dbbe:	bf00      	nop
 800dbc0:	3714      	adds	r7, #20
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc8:	4770      	bx	lr
 800dbca:	bf00      	nop
 800dbcc:	2000918c 	.word	0x2000918c
 800dbd0:	20009194 	.word	0x20009194

0800dbd4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800dbd8:	2200      	movs	r2, #0
 800dbda:	490e      	ldr	r1, [pc, #56]	; (800dc14 <MX_USB_HOST_Init+0x40>)
 800dbdc:	480e      	ldr	r0, [pc, #56]	; (800dc18 <MX_USB_HOST_Init+0x44>)
 800dbde:	f7fb f99f 	bl	8008f20 <USBH_Init>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d001      	beq.n	800dbec <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800dbe8:	f7f3 f984 	bl	8000ef4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800dbec:	490b      	ldr	r1, [pc, #44]	; (800dc1c <MX_USB_HOST_Init+0x48>)
 800dbee:	480a      	ldr	r0, [pc, #40]	; (800dc18 <MX_USB_HOST_Init+0x44>)
 800dbf0:	f7fb fa46 	bl	8009080 <USBH_RegisterClass>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d001      	beq.n	800dbfe <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800dbfa:	f7f3 f97b 	bl	8000ef4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800dbfe:	4806      	ldr	r0, [pc, #24]	; (800dc18 <MX_USB_HOST_Init+0x44>)
 800dc00:	f7fb faca 	bl	8009198 <USBH_Start>
 800dc04:	4603      	mov	r3, r0
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d001      	beq.n	800dc0e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800dc0a:	f7f3 f973 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800dc0e:	bf00      	nop
 800dc10:	bd80      	pop	{r7, pc}
 800dc12:	bf00      	nop
 800dc14:	0800dc21 	.word	0x0800dc21
 800dc18:	200091ac 	.word	0x200091ac
 800dc1c:	2000000c 	.word	0x2000000c

0800dc20 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b083      	sub	sp, #12
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	460b      	mov	r3, r1
 800dc2a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800dc2c:	78fb      	ldrb	r3, [r7, #3]
 800dc2e:	3b01      	subs	r3, #1
 800dc30:	2b04      	cmp	r3, #4
 800dc32:	d819      	bhi.n	800dc68 <USBH_UserProcess+0x48>
 800dc34:	a201      	add	r2, pc, #4	; (adr r2, 800dc3c <USBH_UserProcess+0x1c>)
 800dc36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc3a:	bf00      	nop
 800dc3c:	0800dc69 	.word	0x0800dc69
 800dc40:	0800dc59 	.word	0x0800dc59
 800dc44:	0800dc69 	.word	0x0800dc69
 800dc48:	0800dc61 	.word	0x0800dc61
 800dc4c:	0800dc51 	.word	0x0800dc51
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800dc50:	4b09      	ldr	r3, [pc, #36]	; (800dc78 <USBH_UserProcess+0x58>)
 800dc52:	2203      	movs	r2, #3
 800dc54:	701a      	strb	r2, [r3, #0]
  break;
 800dc56:	e008      	b.n	800dc6a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800dc58:	4b07      	ldr	r3, [pc, #28]	; (800dc78 <USBH_UserProcess+0x58>)
 800dc5a:	2202      	movs	r2, #2
 800dc5c:	701a      	strb	r2, [r3, #0]
  break;
 800dc5e:	e004      	b.n	800dc6a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800dc60:	4b05      	ldr	r3, [pc, #20]	; (800dc78 <USBH_UserProcess+0x58>)
 800dc62:	2201      	movs	r2, #1
 800dc64:	701a      	strb	r2, [r3, #0]
  break;
 800dc66:	e000      	b.n	800dc6a <USBH_UserProcess+0x4a>

  default:
  break;
 800dc68:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800dc6a:	bf00      	nop
 800dc6c:	370c      	adds	r7, #12
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc74:	4770      	bx	lr
 800dc76:	bf00      	nop
 800dc78:	20009590 	.word	0x20009590

0800dc7c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b08a      	sub	sp, #40	; 0x28
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dc84:	f107 0314 	add.w	r3, r7, #20
 800dc88:	2200      	movs	r2, #0
 800dc8a:	601a      	str	r2, [r3, #0]
 800dc8c:	605a      	str	r2, [r3, #4]
 800dc8e:	609a      	str	r2, [r3, #8]
 800dc90:	60da      	str	r2, [r3, #12]
 800dc92:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	4a24      	ldr	r2, [pc, #144]	; (800dd2c <HAL_HCD_MspInit+0xb0>)
 800dc9a:	4293      	cmp	r3, r2
 800dc9c:	d141      	bne.n	800dd22 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dc9e:	2300      	movs	r3, #0
 800dca0:	613b      	str	r3, [r7, #16]
 800dca2:	4b23      	ldr	r3, [pc, #140]	; (800dd30 <HAL_HCD_MspInit+0xb4>)
 800dca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dca6:	4a22      	ldr	r2, [pc, #136]	; (800dd30 <HAL_HCD_MspInit+0xb4>)
 800dca8:	f043 0302 	orr.w	r3, r3, #2
 800dcac:	6313      	str	r3, [r2, #48]	; 0x30
 800dcae:	4b20      	ldr	r3, [pc, #128]	; (800dd30 <HAL_HCD_MspInit+0xb4>)
 800dcb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcb2:	f003 0302 	and.w	r3, r3, #2
 800dcb6:	613b      	str	r3, [r7, #16]
 800dcb8:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800dcba:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800dcbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dcc0:	2302      	movs	r3, #2
 800dcc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dcc8:	2300      	movs	r3, #0
 800dcca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800dccc:	230c      	movs	r3, #12
 800dcce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dcd0:	f107 0314 	add.w	r3, r7, #20
 800dcd4:	4619      	mov	r1, r3
 800dcd6:	4817      	ldr	r0, [pc, #92]	; (800dd34 <HAL_HCD_MspInit+0xb8>)
 800dcd8:	f7f4 f9f4 	bl	80020c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800dcdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dce2:	2300      	movs	r3, #0
 800dce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dce6:	2300      	movs	r3, #0
 800dce8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800dcea:	f107 0314 	add.w	r3, r7, #20
 800dcee:	4619      	mov	r1, r3
 800dcf0:	4810      	ldr	r0, [pc, #64]	; (800dd34 <HAL_HCD_MspInit+0xb8>)
 800dcf2:	f7f4 f9e7 	bl	80020c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	60fb      	str	r3, [r7, #12]
 800dcfa:	4b0d      	ldr	r3, [pc, #52]	; (800dd30 <HAL_HCD_MspInit+0xb4>)
 800dcfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcfe:	4a0c      	ldr	r2, [pc, #48]	; (800dd30 <HAL_HCD_MspInit+0xb4>)
 800dd00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dd04:	6313      	str	r3, [r2, #48]	; 0x30
 800dd06:	4b0a      	ldr	r3, [pc, #40]	; (800dd30 <HAL_HCD_MspInit+0xb4>)
 800dd08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dd0e:	60fb      	str	r3, [r7, #12]
 800dd10:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800dd12:	2200      	movs	r2, #0
 800dd14:	2105      	movs	r1, #5
 800dd16:	204d      	movs	r0, #77	; 0x4d
 800dd18:	f7f3 ff10 	bl	8001b3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800dd1c:	204d      	movs	r0, #77	; 0x4d
 800dd1e:	f7f3 ff29 	bl	8001b74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800dd22:	bf00      	nop
 800dd24:	3728      	adds	r7, #40	; 0x28
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}
 800dd2a:	bf00      	nop
 800dd2c:	40040000 	.word	0x40040000
 800dd30:	40023800 	.word	0x40023800
 800dd34:	40020400 	.word	0x40020400

0800dd38 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b082      	sub	sp, #8
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dd46:	4618      	mov	r0, r3
 800dd48:	f7fb fedd 	bl	8009b06 <USBH_LL_IncTimer>
}
 800dd4c:	bf00      	nop
 800dd4e:	3708      	adds	r7, #8
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}

0800dd54 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b082      	sub	sp, #8
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dd62:	4618      	mov	r0, r3
 800dd64:	f7fb ff21 	bl	8009baa <USBH_LL_Connect>
}
 800dd68:	bf00      	nop
 800dd6a:	3708      	adds	r7, #8
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}

0800dd70 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b082      	sub	sp, #8
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f7fb ff36 	bl	8009bf0 <USBH_LL_Disconnect>
}
 800dd84:	bf00      	nop
 800dd86:	3708      	adds	r7, #8
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}

0800dd8c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b082      	sub	sp, #8
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
 800dd94:	460b      	mov	r3, r1
 800dd96:	70fb      	strb	r3, [r7, #3]
 800dd98:	4613      	mov	r3, r2
 800dd9a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dda2:	4618      	mov	r0, r3
 800dda4:	f7fb ff6d 	bl	8009c82 <USBH_LL_NotifyURBChange>
#endif
}
 800dda8:	bf00      	nop
 800ddaa:	3708      	adds	r7, #8
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}

0800ddb0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b082      	sub	sp, #8
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f7fb fecb 	bl	8009b5a <USBH_LL_PortEnabled>
}
 800ddc4:	bf00      	nop
 800ddc6:	3708      	adds	r7, #8
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}

0800ddcc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b082      	sub	sp, #8
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ddda:	4618      	mov	r0, r3
 800dddc:	f7fb fed7 	bl	8009b8e <USBH_LL_PortDisabled>
}
 800dde0:	bf00      	nop
 800dde2:	3708      	adds	r7, #8
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}

0800dde8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b082      	sub	sp, #8
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d132      	bne.n	800de60 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800ddfa:	4a1c      	ldr	r2, [pc, #112]	; (800de6c <USBH_LL_Init+0x84>)
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	4a19      	ldr	r2, [pc, #100]	; (800de6c <USBH_LL_Init+0x84>)
 800de06:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800de0a:	4b18      	ldr	r3, [pc, #96]	; (800de6c <USBH_LL_Init+0x84>)
 800de0c:	4a18      	ldr	r2, [pc, #96]	; (800de70 <USBH_LL_Init+0x88>)
 800de0e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800de10:	4b16      	ldr	r3, [pc, #88]	; (800de6c <USBH_LL_Init+0x84>)
 800de12:	220c      	movs	r2, #12
 800de14:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800de16:	4b15      	ldr	r3, [pc, #84]	; (800de6c <USBH_LL_Init+0x84>)
 800de18:	2201      	movs	r2, #1
 800de1a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800de1c:	4b13      	ldr	r3, [pc, #76]	; (800de6c <USBH_LL_Init+0x84>)
 800de1e:	2200      	movs	r2, #0
 800de20:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800de22:	4b12      	ldr	r3, [pc, #72]	; (800de6c <USBH_LL_Init+0x84>)
 800de24:	2202      	movs	r2, #2
 800de26:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800de28:	4b10      	ldr	r3, [pc, #64]	; (800de6c <USBH_LL_Init+0x84>)
 800de2a:	2200      	movs	r2, #0
 800de2c:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800de2e:	4b0f      	ldr	r3, [pc, #60]	; (800de6c <USBH_LL_Init+0x84>)
 800de30:	2200      	movs	r2, #0
 800de32:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800de34:	4b0d      	ldr	r3, [pc, #52]	; (800de6c <USBH_LL_Init+0x84>)
 800de36:	2200      	movs	r2, #0
 800de38:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800de3a:	4b0c      	ldr	r3, [pc, #48]	; (800de6c <USBH_LL_Init+0x84>)
 800de3c:	2200      	movs	r2, #0
 800de3e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800de40:	480a      	ldr	r0, [pc, #40]	; (800de6c <USBH_LL_Init+0x84>)
 800de42:	f7f4 fb37 	bl	80024b4 <HAL_HCD_Init>
 800de46:	4603      	mov	r3, r0
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d001      	beq.n	800de50 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800de4c:	f7f3 f852 	bl	8000ef4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800de50:	4806      	ldr	r0, [pc, #24]	; (800de6c <USBH_LL_Init+0x84>)
 800de52:	f7f4 ff1a 	bl	8002c8a <HAL_HCD_GetCurrentFrame>
 800de56:	4603      	mov	r3, r0
 800de58:	4619      	mov	r1, r3
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	f7fb fe44 	bl	8009ae8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800de60:	2300      	movs	r3, #0
}
 800de62:	4618      	mov	r0, r3
 800de64:	3708      	adds	r7, #8
 800de66:	46bd      	mov	sp, r7
 800de68:	bd80      	pop	{r7, pc}
 800de6a:	bf00      	nop
 800de6c:	20009594 	.word	0x20009594
 800de70:	40040000 	.word	0x40040000

0800de74 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b084      	sub	sp, #16
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de7c:	2300      	movs	r3, #0
 800de7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800de80:	2300      	movs	r3, #0
 800de82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800de8a:	4618      	mov	r0, r3
 800de8c:	f7f4 fe87 	bl	8002b9e <HAL_HCD_Start>
 800de90:	4603      	mov	r3, r0
 800de92:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800de94:	7bfb      	ldrb	r3, [r7, #15]
 800de96:	4618      	mov	r0, r3
 800de98:	f000 f95c 	bl	800e154 <USBH_Get_USB_Status>
 800de9c:	4603      	mov	r3, r0
 800de9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dea0:	7bbb      	ldrb	r3, [r7, #14]
}
 800dea2:	4618      	mov	r0, r3
 800dea4:	3710      	adds	r7, #16
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}

0800deaa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800deaa:	b580      	push	{r7, lr}
 800deac:	b084      	sub	sp, #16
 800deae:	af00      	add	r7, sp, #0
 800deb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800deb2:	2300      	movs	r3, #0
 800deb4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800deb6:	2300      	movs	r3, #0
 800deb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dec0:	4618      	mov	r0, r3
 800dec2:	f7f4 fe8f 	bl	8002be4 <HAL_HCD_Stop>
 800dec6:	4603      	mov	r3, r0
 800dec8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800deca:	7bfb      	ldrb	r3, [r7, #15]
 800decc:	4618      	mov	r0, r3
 800dece:	f000 f941 	bl	800e154 <USBH_Get_USB_Status>
 800ded2:	4603      	mov	r3, r0
 800ded4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ded6:	7bbb      	ldrb	r3, [r7, #14]
}
 800ded8:	4618      	mov	r0, r3
 800deda:	3710      	adds	r7, #16
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}

0800dee0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b084      	sub	sp, #16
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800dee8:	2301      	movs	r3, #1
 800deea:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800def2:	4618      	mov	r0, r3
 800def4:	f7f4 fed7 	bl	8002ca6 <HAL_HCD_GetCurrentSpeed>
 800def8:	4603      	mov	r3, r0
 800defa:	2b02      	cmp	r3, #2
 800defc:	d00c      	beq.n	800df18 <USBH_LL_GetSpeed+0x38>
 800defe:	2b02      	cmp	r3, #2
 800df00:	d80d      	bhi.n	800df1e <USBH_LL_GetSpeed+0x3e>
 800df02:	2b00      	cmp	r3, #0
 800df04:	d002      	beq.n	800df0c <USBH_LL_GetSpeed+0x2c>
 800df06:	2b01      	cmp	r3, #1
 800df08:	d003      	beq.n	800df12 <USBH_LL_GetSpeed+0x32>
 800df0a:	e008      	b.n	800df1e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800df0c:	2300      	movs	r3, #0
 800df0e:	73fb      	strb	r3, [r7, #15]
    break;
 800df10:	e008      	b.n	800df24 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800df12:	2301      	movs	r3, #1
 800df14:	73fb      	strb	r3, [r7, #15]
    break;
 800df16:	e005      	b.n	800df24 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800df18:	2302      	movs	r3, #2
 800df1a:	73fb      	strb	r3, [r7, #15]
    break;
 800df1c:	e002      	b.n	800df24 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800df1e:	2301      	movs	r3, #1
 800df20:	73fb      	strb	r3, [r7, #15]
    break;
 800df22:	bf00      	nop
  }
  return  speed;
 800df24:	7bfb      	ldrb	r3, [r7, #15]
}
 800df26:	4618      	mov	r0, r3
 800df28:	3710      	adds	r7, #16
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}

0800df2e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800df2e:	b580      	push	{r7, lr}
 800df30:	b084      	sub	sp, #16
 800df32:	af00      	add	r7, sp, #0
 800df34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df36:	2300      	movs	r3, #0
 800df38:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800df3a:	2300      	movs	r3, #0
 800df3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800df44:	4618      	mov	r0, r3
 800df46:	f7f4 fe6a 	bl	8002c1e <HAL_HCD_ResetPort>
 800df4a:	4603      	mov	r3, r0
 800df4c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800df4e:	7bfb      	ldrb	r3, [r7, #15]
 800df50:	4618      	mov	r0, r3
 800df52:	f000 f8ff 	bl	800e154 <USBH_Get_USB_Status>
 800df56:	4603      	mov	r3, r0
 800df58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800df5c:	4618      	mov	r0, r3
 800df5e:	3710      	adds	r7, #16
 800df60:	46bd      	mov	sp, r7
 800df62:	bd80      	pop	{r7, pc}

0800df64 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b082      	sub	sp, #8
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	460b      	mov	r3, r1
 800df6e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800df76:	78fa      	ldrb	r2, [r7, #3]
 800df78:	4611      	mov	r1, r2
 800df7a:	4618      	mov	r0, r3
 800df7c:	f7f4 fe71 	bl	8002c62 <HAL_HCD_HC_GetXferCount>
 800df80:	4603      	mov	r3, r0
}
 800df82:	4618      	mov	r0, r3
 800df84:	3708      	adds	r7, #8
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}

0800df8a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800df8a:	b590      	push	{r4, r7, lr}
 800df8c:	b089      	sub	sp, #36	; 0x24
 800df8e:	af04      	add	r7, sp, #16
 800df90:	6078      	str	r0, [r7, #4]
 800df92:	4608      	mov	r0, r1
 800df94:	4611      	mov	r1, r2
 800df96:	461a      	mov	r2, r3
 800df98:	4603      	mov	r3, r0
 800df9a:	70fb      	strb	r3, [r7, #3]
 800df9c:	460b      	mov	r3, r1
 800df9e:	70bb      	strb	r3, [r7, #2]
 800dfa0:	4613      	mov	r3, r2
 800dfa2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800dfb2:	787c      	ldrb	r4, [r7, #1]
 800dfb4:	78ba      	ldrb	r2, [r7, #2]
 800dfb6:	78f9      	ldrb	r1, [r7, #3]
 800dfb8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dfba:	9302      	str	r3, [sp, #8]
 800dfbc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dfc0:	9301      	str	r3, [sp, #4]
 800dfc2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dfc6:	9300      	str	r3, [sp, #0]
 800dfc8:	4623      	mov	r3, r4
 800dfca:	f7f4 fad5 	bl	8002578 <HAL_HCD_HC_Init>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800dfd2:	7bfb      	ldrb	r3, [r7, #15]
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f000 f8bd 	bl	800e154 <USBH_Get_USB_Status>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfde:	7bbb      	ldrb	r3, [r7, #14]
}
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	3714      	adds	r7, #20
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd90      	pop	{r4, r7, pc}

0800dfe8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b084      	sub	sp, #16
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
 800dff0:	460b      	mov	r3, r1
 800dff2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dff4:	2300      	movs	r3, #0
 800dff6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dff8:	2300      	movs	r3, #0
 800dffa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e002:	78fa      	ldrb	r2, [r7, #3]
 800e004:	4611      	mov	r1, r2
 800e006:	4618      	mov	r0, r3
 800e008:	f7f4 fb45 	bl	8002696 <HAL_HCD_HC_Halt>
 800e00c:	4603      	mov	r3, r0
 800e00e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e010:	7bfb      	ldrb	r3, [r7, #15]
 800e012:	4618      	mov	r0, r3
 800e014:	f000 f89e 	bl	800e154 <USBH_Get_USB_Status>
 800e018:	4603      	mov	r3, r0
 800e01a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e01c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e01e:	4618      	mov	r0, r3
 800e020:	3710      	adds	r7, #16
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}

0800e026 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e026:	b590      	push	{r4, r7, lr}
 800e028:	b089      	sub	sp, #36	; 0x24
 800e02a:	af04      	add	r7, sp, #16
 800e02c:	6078      	str	r0, [r7, #4]
 800e02e:	4608      	mov	r0, r1
 800e030:	4611      	mov	r1, r2
 800e032:	461a      	mov	r2, r3
 800e034:	4603      	mov	r3, r0
 800e036:	70fb      	strb	r3, [r7, #3]
 800e038:	460b      	mov	r3, r1
 800e03a:	70bb      	strb	r3, [r7, #2]
 800e03c:	4613      	mov	r3, r2
 800e03e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e040:	2300      	movs	r3, #0
 800e042:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e044:	2300      	movs	r3, #0
 800e046:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e04e:	787c      	ldrb	r4, [r7, #1]
 800e050:	78ba      	ldrb	r2, [r7, #2]
 800e052:	78f9      	ldrb	r1, [r7, #3]
 800e054:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e058:	9303      	str	r3, [sp, #12]
 800e05a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e05c:	9302      	str	r3, [sp, #8]
 800e05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e060:	9301      	str	r3, [sp, #4]
 800e062:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e066:	9300      	str	r3, [sp, #0]
 800e068:	4623      	mov	r3, r4
 800e06a:	f7f4 fb37 	bl	80026dc <HAL_HCD_HC_SubmitRequest>
 800e06e:	4603      	mov	r3, r0
 800e070:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e072:	7bfb      	ldrb	r3, [r7, #15]
 800e074:	4618      	mov	r0, r3
 800e076:	f000 f86d 	bl	800e154 <USBH_Get_USB_Status>
 800e07a:	4603      	mov	r3, r0
 800e07c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e07e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e080:	4618      	mov	r0, r3
 800e082:	3714      	adds	r7, #20
 800e084:	46bd      	mov	sp, r7
 800e086:	bd90      	pop	{r4, r7, pc}

0800e088 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b082      	sub	sp, #8
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
 800e090:	460b      	mov	r3, r1
 800e092:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e09a:	78fa      	ldrb	r2, [r7, #3]
 800e09c:	4611      	mov	r1, r2
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f7f4 fdcb 	bl	8002c3a <HAL_HCD_HC_GetURBState>
 800e0a4:	4603      	mov	r3, r0
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3708      	adds	r7, #8
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}

0800e0ae <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e0ae:	b580      	push	{r7, lr}
 800e0b0:	b082      	sub	sp, #8
 800e0b2:	af00      	add	r7, sp, #0
 800e0b4:	6078      	str	r0, [r7, #4]
 800e0b6:	460b      	mov	r3, r1
 800e0b8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d103      	bne.n	800e0cc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800e0c4:	78fb      	ldrb	r3, [r7, #3]
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f000 f870 	bl	800e1ac <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e0cc:	20c8      	movs	r0, #200	; 0xc8
 800e0ce:	f7f3 fc59 	bl	8001984 <HAL_Delay>
  return USBH_OK;
 800e0d2:	2300      	movs	r3, #0
}
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	3708      	adds	r7, #8
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}

0800e0dc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e0dc:	b480      	push	{r7}
 800e0de:	b085      	sub	sp, #20
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
 800e0e4:	460b      	mov	r3, r1
 800e0e6:	70fb      	strb	r3, [r7, #3]
 800e0e8:	4613      	mov	r3, r2
 800e0ea:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e0f2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e0f4:	78fb      	ldrb	r3, [r7, #3]
 800e0f6:	68fa      	ldr	r2, [r7, #12]
 800e0f8:	212c      	movs	r1, #44	; 0x2c
 800e0fa:	fb01 f303 	mul.w	r3, r1, r3
 800e0fe:	4413      	add	r3, r2
 800e100:	333b      	adds	r3, #59	; 0x3b
 800e102:	781b      	ldrb	r3, [r3, #0]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d009      	beq.n	800e11c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e108:	78fb      	ldrb	r3, [r7, #3]
 800e10a:	68fa      	ldr	r2, [r7, #12]
 800e10c:	212c      	movs	r1, #44	; 0x2c
 800e10e:	fb01 f303 	mul.w	r3, r1, r3
 800e112:	4413      	add	r3, r2
 800e114:	3354      	adds	r3, #84	; 0x54
 800e116:	78ba      	ldrb	r2, [r7, #2]
 800e118:	701a      	strb	r2, [r3, #0]
 800e11a:	e008      	b.n	800e12e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e11c:	78fb      	ldrb	r3, [r7, #3]
 800e11e:	68fa      	ldr	r2, [r7, #12]
 800e120:	212c      	movs	r1, #44	; 0x2c
 800e122:	fb01 f303 	mul.w	r3, r1, r3
 800e126:	4413      	add	r3, r2
 800e128:	3355      	adds	r3, #85	; 0x55
 800e12a:	78ba      	ldrb	r2, [r7, #2]
 800e12c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e12e:	2300      	movs	r3, #0
}
 800e130:	4618      	mov	r0, r3
 800e132:	3714      	adds	r7, #20
 800e134:	46bd      	mov	sp, r7
 800e136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13a:	4770      	bx	lr

0800e13c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b082      	sub	sp, #8
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e144:	6878      	ldr	r0, [r7, #4]
 800e146:	f7f3 fc1d 	bl	8001984 <HAL_Delay>
}
 800e14a:	bf00      	nop
 800e14c:	3708      	adds	r7, #8
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}
	...

0800e154 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e154:	b480      	push	{r7}
 800e156:	b085      	sub	sp, #20
 800e158:	af00      	add	r7, sp, #0
 800e15a:	4603      	mov	r3, r0
 800e15c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e15e:	2300      	movs	r3, #0
 800e160:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e162:	79fb      	ldrb	r3, [r7, #7]
 800e164:	2b03      	cmp	r3, #3
 800e166:	d817      	bhi.n	800e198 <USBH_Get_USB_Status+0x44>
 800e168:	a201      	add	r2, pc, #4	; (adr r2, 800e170 <USBH_Get_USB_Status+0x1c>)
 800e16a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e16e:	bf00      	nop
 800e170:	0800e181 	.word	0x0800e181
 800e174:	0800e187 	.word	0x0800e187
 800e178:	0800e18d 	.word	0x0800e18d
 800e17c:	0800e193 	.word	0x0800e193
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e180:	2300      	movs	r3, #0
 800e182:	73fb      	strb	r3, [r7, #15]
    break;
 800e184:	e00b      	b.n	800e19e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e186:	2302      	movs	r3, #2
 800e188:	73fb      	strb	r3, [r7, #15]
    break;
 800e18a:	e008      	b.n	800e19e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e18c:	2301      	movs	r3, #1
 800e18e:	73fb      	strb	r3, [r7, #15]
    break;
 800e190:	e005      	b.n	800e19e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e192:	2302      	movs	r3, #2
 800e194:	73fb      	strb	r3, [r7, #15]
    break;
 800e196:	e002      	b.n	800e19e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e198:	2302      	movs	r3, #2
 800e19a:	73fb      	strb	r3, [r7, #15]
    break;
 800e19c:	bf00      	nop
  }
  return usb_status;
 800e19e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3714      	adds	r7, #20
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1aa:	4770      	bx	lr

0800e1ac <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b084      	sub	sp, #16
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e1b6:	79fb      	ldrb	r3, [r7, #7]
 800e1b8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800e1ba:	79fb      	ldrb	r3, [r7, #7]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d102      	bne.n	800e1c6 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	73fb      	strb	r3, [r7, #15]
 800e1c4:	e001      	b.n	800e1ca <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800e1ca:	7bfb      	ldrb	r3, [r7, #15]
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	2110      	movs	r1, #16
 800e1d0:	4803      	ldr	r0, [pc, #12]	; (800e1e0 <MX_DriverVbusHS+0x34>)
 800e1d2:	f7f4 f923 	bl	800241c <HAL_GPIO_WritePin>
}
 800e1d6:	bf00      	nop
 800e1d8:	3710      	adds	r7, #16
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}
 800e1de:	bf00      	nop
 800e1e0:	40020800 	.word	0x40020800

0800e1e4 <malloc>:
 800e1e4:	4b02      	ldr	r3, [pc, #8]	; (800e1f0 <malloc+0xc>)
 800e1e6:	4601      	mov	r1, r0
 800e1e8:	6818      	ldr	r0, [r3, #0]
 800e1ea:	f000 b82b 	b.w	800e244 <_malloc_r>
 800e1ee:	bf00      	nop
 800e1f0:	2000007c 	.word	0x2000007c

0800e1f4 <free>:
 800e1f4:	4b02      	ldr	r3, [pc, #8]	; (800e200 <free+0xc>)
 800e1f6:	4601      	mov	r1, r0
 800e1f8:	6818      	ldr	r0, [r3, #0]
 800e1fa:	f000 b957 	b.w	800e4ac <_free_r>
 800e1fe:	bf00      	nop
 800e200:	2000007c 	.word	0x2000007c

0800e204 <sbrk_aligned>:
 800e204:	b570      	push	{r4, r5, r6, lr}
 800e206:	4e0e      	ldr	r6, [pc, #56]	; (800e240 <sbrk_aligned+0x3c>)
 800e208:	460c      	mov	r4, r1
 800e20a:	6831      	ldr	r1, [r6, #0]
 800e20c:	4605      	mov	r5, r0
 800e20e:	b911      	cbnz	r1, 800e216 <sbrk_aligned+0x12>
 800e210:	f000 f902 	bl	800e418 <_sbrk_r>
 800e214:	6030      	str	r0, [r6, #0]
 800e216:	4621      	mov	r1, r4
 800e218:	4628      	mov	r0, r5
 800e21a:	f000 f8fd 	bl	800e418 <_sbrk_r>
 800e21e:	1c43      	adds	r3, r0, #1
 800e220:	d00a      	beq.n	800e238 <sbrk_aligned+0x34>
 800e222:	1cc4      	adds	r4, r0, #3
 800e224:	f024 0403 	bic.w	r4, r4, #3
 800e228:	42a0      	cmp	r0, r4
 800e22a:	d007      	beq.n	800e23c <sbrk_aligned+0x38>
 800e22c:	1a21      	subs	r1, r4, r0
 800e22e:	4628      	mov	r0, r5
 800e230:	f000 f8f2 	bl	800e418 <_sbrk_r>
 800e234:	3001      	adds	r0, #1
 800e236:	d101      	bne.n	800e23c <sbrk_aligned+0x38>
 800e238:	f04f 34ff 	mov.w	r4, #4294967295
 800e23c:	4620      	mov	r0, r4
 800e23e:	bd70      	pop	{r4, r5, r6, pc}
 800e240:	2000989c 	.word	0x2000989c

0800e244 <_malloc_r>:
 800e244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e248:	1ccd      	adds	r5, r1, #3
 800e24a:	f025 0503 	bic.w	r5, r5, #3
 800e24e:	3508      	adds	r5, #8
 800e250:	2d0c      	cmp	r5, #12
 800e252:	bf38      	it	cc
 800e254:	250c      	movcc	r5, #12
 800e256:	2d00      	cmp	r5, #0
 800e258:	4607      	mov	r7, r0
 800e25a:	db01      	blt.n	800e260 <_malloc_r+0x1c>
 800e25c:	42a9      	cmp	r1, r5
 800e25e:	d905      	bls.n	800e26c <_malloc_r+0x28>
 800e260:	230c      	movs	r3, #12
 800e262:	603b      	str	r3, [r7, #0]
 800e264:	2600      	movs	r6, #0
 800e266:	4630      	mov	r0, r6
 800e268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e26c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e340 <_malloc_r+0xfc>
 800e270:	f000 f868 	bl	800e344 <__malloc_lock>
 800e274:	f8d8 3000 	ldr.w	r3, [r8]
 800e278:	461c      	mov	r4, r3
 800e27a:	bb5c      	cbnz	r4, 800e2d4 <_malloc_r+0x90>
 800e27c:	4629      	mov	r1, r5
 800e27e:	4638      	mov	r0, r7
 800e280:	f7ff ffc0 	bl	800e204 <sbrk_aligned>
 800e284:	1c43      	adds	r3, r0, #1
 800e286:	4604      	mov	r4, r0
 800e288:	d155      	bne.n	800e336 <_malloc_r+0xf2>
 800e28a:	f8d8 4000 	ldr.w	r4, [r8]
 800e28e:	4626      	mov	r6, r4
 800e290:	2e00      	cmp	r6, #0
 800e292:	d145      	bne.n	800e320 <_malloc_r+0xdc>
 800e294:	2c00      	cmp	r4, #0
 800e296:	d048      	beq.n	800e32a <_malloc_r+0xe6>
 800e298:	6823      	ldr	r3, [r4, #0]
 800e29a:	4631      	mov	r1, r6
 800e29c:	4638      	mov	r0, r7
 800e29e:	eb04 0903 	add.w	r9, r4, r3
 800e2a2:	f000 f8b9 	bl	800e418 <_sbrk_r>
 800e2a6:	4581      	cmp	r9, r0
 800e2a8:	d13f      	bne.n	800e32a <_malloc_r+0xe6>
 800e2aa:	6821      	ldr	r1, [r4, #0]
 800e2ac:	1a6d      	subs	r5, r5, r1
 800e2ae:	4629      	mov	r1, r5
 800e2b0:	4638      	mov	r0, r7
 800e2b2:	f7ff ffa7 	bl	800e204 <sbrk_aligned>
 800e2b6:	3001      	adds	r0, #1
 800e2b8:	d037      	beq.n	800e32a <_malloc_r+0xe6>
 800e2ba:	6823      	ldr	r3, [r4, #0]
 800e2bc:	442b      	add	r3, r5
 800e2be:	6023      	str	r3, [r4, #0]
 800e2c0:	f8d8 3000 	ldr.w	r3, [r8]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d038      	beq.n	800e33a <_malloc_r+0xf6>
 800e2c8:	685a      	ldr	r2, [r3, #4]
 800e2ca:	42a2      	cmp	r2, r4
 800e2cc:	d12b      	bne.n	800e326 <_malloc_r+0xe2>
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	605a      	str	r2, [r3, #4]
 800e2d2:	e00f      	b.n	800e2f4 <_malloc_r+0xb0>
 800e2d4:	6822      	ldr	r2, [r4, #0]
 800e2d6:	1b52      	subs	r2, r2, r5
 800e2d8:	d41f      	bmi.n	800e31a <_malloc_r+0xd6>
 800e2da:	2a0b      	cmp	r2, #11
 800e2dc:	d917      	bls.n	800e30e <_malloc_r+0xca>
 800e2de:	1961      	adds	r1, r4, r5
 800e2e0:	42a3      	cmp	r3, r4
 800e2e2:	6025      	str	r5, [r4, #0]
 800e2e4:	bf18      	it	ne
 800e2e6:	6059      	strne	r1, [r3, #4]
 800e2e8:	6863      	ldr	r3, [r4, #4]
 800e2ea:	bf08      	it	eq
 800e2ec:	f8c8 1000 	streq.w	r1, [r8]
 800e2f0:	5162      	str	r2, [r4, r5]
 800e2f2:	604b      	str	r3, [r1, #4]
 800e2f4:	4638      	mov	r0, r7
 800e2f6:	f104 060b 	add.w	r6, r4, #11
 800e2fa:	f000 f829 	bl	800e350 <__malloc_unlock>
 800e2fe:	f026 0607 	bic.w	r6, r6, #7
 800e302:	1d23      	adds	r3, r4, #4
 800e304:	1af2      	subs	r2, r6, r3
 800e306:	d0ae      	beq.n	800e266 <_malloc_r+0x22>
 800e308:	1b9b      	subs	r3, r3, r6
 800e30a:	50a3      	str	r3, [r4, r2]
 800e30c:	e7ab      	b.n	800e266 <_malloc_r+0x22>
 800e30e:	42a3      	cmp	r3, r4
 800e310:	6862      	ldr	r2, [r4, #4]
 800e312:	d1dd      	bne.n	800e2d0 <_malloc_r+0x8c>
 800e314:	f8c8 2000 	str.w	r2, [r8]
 800e318:	e7ec      	b.n	800e2f4 <_malloc_r+0xb0>
 800e31a:	4623      	mov	r3, r4
 800e31c:	6864      	ldr	r4, [r4, #4]
 800e31e:	e7ac      	b.n	800e27a <_malloc_r+0x36>
 800e320:	4634      	mov	r4, r6
 800e322:	6876      	ldr	r6, [r6, #4]
 800e324:	e7b4      	b.n	800e290 <_malloc_r+0x4c>
 800e326:	4613      	mov	r3, r2
 800e328:	e7cc      	b.n	800e2c4 <_malloc_r+0x80>
 800e32a:	230c      	movs	r3, #12
 800e32c:	603b      	str	r3, [r7, #0]
 800e32e:	4638      	mov	r0, r7
 800e330:	f000 f80e 	bl	800e350 <__malloc_unlock>
 800e334:	e797      	b.n	800e266 <_malloc_r+0x22>
 800e336:	6025      	str	r5, [r4, #0]
 800e338:	e7dc      	b.n	800e2f4 <_malloc_r+0xb0>
 800e33a:	605b      	str	r3, [r3, #4]
 800e33c:	deff      	udf	#255	; 0xff
 800e33e:	bf00      	nop
 800e340:	20009898 	.word	0x20009898

0800e344 <__malloc_lock>:
 800e344:	4801      	ldr	r0, [pc, #4]	; (800e34c <__malloc_lock+0x8>)
 800e346:	f000 b8a1 	b.w	800e48c <__retarget_lock_acquire_recursive>
 800e34a:	bf00      	nop
 800e34c:	200099dc 	.word	0x200099dc

0800e350 <__malloc_unlock>:
 800e350:	4801      	ldr	r0, [pc, #4]	; (800e358 <__malloc_unlock+0x8>)
 800e352:	f000 b89c 	b.w	800e48e <__retarget_lock_release_recursive>
 800e356:	bf00      	nop
 800e358:	200099dc 	.word	0x200099dc

0800e35c <memset>:
 800e35c:	4402      	add	r2, r0
 800e35e:	4603      	mov	r3, r0
 800e360:	4293      	cmp	r3, r2
 800e362:	d100      	bne.n	800e366 <memset+0xa>
 800e364:	4770      	bx	lr
 800e366:	f803 1b01 	strb.w	r1, [r3], #1
 800e36a:	e7f9      	b.n	800e360 <memset+0x4>

0800e36c <_reclaim_reent>:
 800e36c:	4b29      	ldr	r3, [pc, #164]	; (800e414 <_reclaim_reent+0xa8>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	4283      	cmp	r3, r0
 800e372:	b570      	push	{r4, r5, r6, lr}
 800e374:	4604      	mov	r4, r0
 800e376:	d04b      	beq.n	800e410 <_reclaim_reent+0xa4>
 800e378:	69c3      	ldr	r3, [r0, #28]
 800e37a:	b143      	cbz	r3, 800e38e <_reclaim_reent+0x22>
 800e37c:	68db      	ldr	r3, [r3, #12]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d144      	bne.n	800e40c <_reclaim_reent+0xa0>
 800e382:	69e3      	ldr	r3, [r4, #28]
 800e384:	6819      	ldr	r1, [r3, #0]
 800e386:	b111      	cbz	r1, 800e38e <_reclaim_reent+0x22>
 800e388:	4620      	mov	r0, r4
 800e38a:	f000 f88f 	bl	800e4ac <_free_r>
 800e38e:	6961      	ldr	r1, [r4, #20]
 800e390:	b111      	cbz	r1, 800e398 <_reclaim_reent+0x2c>
 800e392:	4620      	mov	r0, r4
 800e394:	f000 f88a 	bl	800e4ac <_free_r>
 800e398:	69e1      	ldr	r1, [r4, #28]
 800e39a:	b111      	cbz	r1, 800e3a2 <_reclaim_reent+0x36>
 800e39c:	4620      	mov	r0, r4
 800e39e:	f000 f885 	bl	800e4ac <_free_r>
 800e3a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e3a4:	b111      	cbz	r1, 800e3ac <_reclaim_reent+0x40>
 800e3a6:	4620      	mov	r0, r4
 800e3a8:	f000 f880 	bl	800e4ac <_free_r>
 800e3ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e3ae:	b111      	cbz	r1, 800e3b6 <_reclaim_reent+0x4a>
 800e3b0:	4620      	mov	r0, r4
 800e3b2:	f000 f87b 	bl	800e4ac <_free_r>
 800e3b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e3b8:	b111      	cbz	r1, 800e3c0 <_reclaim_reent+0x54>
 800e3ba:	4620      	mov	r0, r4
 800e3bc:	f000 f876 	bl	800e4ac <_free_r>
 800e3c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e3c2:	b111      	cbz	r1, 800e3ca <_reclaim_reent+0x5e>
 800e3c4:	4620      	mov	r0, r4
 800e3c6:	f000 f871 	bl	800e4ac <_free_r>
 800e3ca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e3cc:	b111      	cbz	r1, 800e3d4 <_reclaim_reent+0x68>
 800e3ce:	4620      	mov	r0, r4
 800e3d0:	f000 f86c 	bl	800e4ac <_free_r>
 800e3d4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e3d6:	b111      	cbz	r1, 800e3de <_reclaim_reent+0x72>
 800e3d8:	4620      	mov	r0, r4
 800e3da:	f000 f867 	bl	800e4ac <_free_r>
 800e3de:	6a23      	ldr	r3, [r4, #32]
 800e3e0:	b1b3      	cbz	r3, 800e410 <_reclaim_reent+0xa4>
 800e3e2:	4620      	mov	r0, r4
 800e3e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e3e8:	4718      	bx	r3
 800e3ea:	5949      	ldr	r1, [r1, r5]
 800e3ec:	b941      	cbnz	r1, 800e400 <_reclaim_reent+0x94>
 800e3ee:	3504      	adds	r5, #4
 800e3f0:	69e3      	ldr	r3, [r4, #28]
 800e3f2:	2d80      	cmp	r5, #128	; 0x80
 800e3f4:	68d9      	ldr	r1, [r3, #12]
 800e3f6:	d1f8      	bne.n	800e3ea <_reclaim_reent+0x7e>
 800e3f8:	4620      	mov	r0, r4
 800e3fa:	f000 f857 	bl	800e4ac <_free_r>
 800e3fe:	e7c0      	b.n	800e382 <_reclaim_reent+0x16>
 800e400:	680e      	ldr	r6, [r1, #0]
 800e402:	4620      	mov	r0, r4
 800e404:	f000 f852 	bl	800e4ac <_free_r>
 800e408:	4631      	mov	r1, r6
 800e40a:	e7ef      	b.n	800e3ec <_reclaim_reent+0x80>
 800e40c:	2500      	movs	r5, #0
 800e40e:	e7ef      	b.n	800e3f0 <_reclaim_reent+0x84>
 800e410:	bd70      	pop	{r4, r5, r6, pc}
 800e412:	bf00      	nop
 800e414:	2000007c 	.word	0x2000007c

0800e418 <_sbrk_r>:
 800e418:	b538      	push	{r3, r4, r5, lr}
 800e41a:	4d06      	ldr	r5, [pc, #24]	; (800e434 <_sbrk_r+0x1c>)
 800e41c:	2300      	movs	r3, #0
 800e41e:	4604      	mov	r4, r0
 800e420:	4608      	mov	r0, r1
 800e422:	602b      	str	r3, [r5, #0]
 800e424:	f7f3 f9fa 	bl	800181c <_sbrk>
 800e428:	1c43      	adds	r3, r0, #1
 800e42a:	d102      	bne.n	800e432 <_sbrk_r+0x1a>
 800e42c:	682b      	ldr	r3, [r5, #0]
 800e42e:	b103      	cbz	r3, 800e432 <_sbrk_r+0x1a>
 800e430:	6023      	str	r3, [r4, #0]
 800e432:	bd38      	pop	{r3, r4, r5, pc}
 800e434:	200099d8 	.word	0x200099d8

0800e438 <__errno>:
 800e438:	4b01      	ldr	r3, [pc, #4]	; (800e440 <__errno+0x8>)
 800e43a:	6818      	ldr	r0, [r3, #0]
 800e43c:	4770      	bx	lr
 800e43e:	bf00      	nop
 800e440:	2000007c 	.word	0x2000007c

0800e444 <__libc_init_array>:
 800e444:	b570      	push	{r4, r5, r6, lr}
 800e446:	4d0d      	ldr	r5, [pc, #52]	; (800e47c <__libc_init_array+0x38>)
 800e448:	4c0d      	ldr	r4, [pc, #52]	; (800e480 <__libc_init_array+0x3c>)
 800e44a:	1b64      	subs	r4, r4, r5
 800e44c:	10a4      	asrs	r4, r4, #2
 800e44e:	2600      	movs	r6, #0
 800e450:	42a6      	cmp	r6, r4
 800e452:	d109      	bne.n	800e468 <__libc_init_array+0x24>
 800e454:	4d0b      	ldr	r5, [pc, #44]	; (800e484 <__libc_init_array+0x40>)
 800e456:	4c0c      	ldr	r4, [pc, #48]	; (800e488 <__libc_init_array+0x44>)
 800e458:	f000 f874 	bl	800e544 <_init>
 800e45c:	1b64      	subs	r4, r4, r5
 800e45e:	10a4      	asrs	r4, r4, #2
 800e460:	2600      	movs	r6, #0
 800e462:	42a6      	cmp	r6, r4
 800e464:	d105      	bne.n	800e472 <__libc_init_array+0x2e>
 800e466:	bd70      	pop	{r4, r5, r6, pc}
 800e468:	f855 3b04 	ldr.w	r3, [r5], #4
 800e46c:	4798      	blx	r3
 800e46e:	3601      	adds	r6, #1
 800e470:	e7ee      	b.n	800e450 <__libc_init_array+0xc>
 800e472:	f855 3b04 	ldr.w	r3, [r5], #4
 800e476:	4798      	blx	r3
 800e478:	3601      	adds	r6, #1
 800e47a:	e7f2      	b.n	800e462 <__libc_init_array+0x1e>
 800e47c:	0800e5d4 	.word	0x0800e5d4
 800e480:	0800e5d4 	.word	0x0800e5d4
 800e484:	0800e5d4 	.word	0x0800e5d4
 800e488:	0800e5d8 	.word	0x0800e5d8

0800e48c <__retarget_lock_acquire_recursive>:
 800e48c:	4770      	bx	lr

0800e48e <__retarget_lock_release_recursive>:
 800e48e:	4770      	bx	lr

0800e490 <memcpy>:
 800e490:	440a      	add	r2, r1
 800e492:	4291      	cmp	r1, r2
 800e494:	f100 33ff 	add.w	r3, r0, #4294967295
 800e498:	d100      	bne.n	800e49c <memcpy+0xc>
 800e49a:	4770      	bx	lr
 800e49c:	b510      	push	{r4, lr}
 800e49e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e4a6:	4291      	cmp	r1, r2
 800e4a8:	d1f9      	bne.n	800e49e <memcpy+0xe>
 800e4aa:	bd10      	pop	{r4, pc}

0800e4ac <_free_r>:
 800e4ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e4ae:	2900      	cmp	r1, #0
 800e4b0:	d044      	beq.n	800e53c <_free_r+0x90>
 800e4b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4b6:	9001      	str	r0, [sp, #4]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	f1a1 0404 	sub.w	r4, r1, #4
 800e4be:	bfb8      	it	lt
 800e4c0:	18e4      	addlt	r4, r4, r3
 800e4c2:	f7ff ff3f 	bl	800e344 <__malloc_lock>
 800e4c6:	4a1e      	ldr	r2, [pc, #120]	; (800e540 <_free_r+0x94>)
 800e4c8:	9801      	ldr	r0, [sp, #4]
 800e4ca:	6813      	ldr	r3, [r2, #0]
 800e4cc:	b933      	cbnz	r3, 800e4dc <_free_r+0x30>
 800e4ce:	6063      	str	r3, [r4, #4]
 800e4d0:	6014      	str	r4, [r2, #0]
 800e4d2:	b003      	add	sp, #12
 800e4d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4d8:	f7ff bf3a 	b.w	800e350 <__malloc_unlock>
 800e4dc:	42a3      	cmp	r3, r4
 800e4de:	d908      	bls.n	800e4f2 <_free_r+0x46>
 800e4e0:	6825      	ldr	r5, [r4, #0]
 800e4e2:	1961      	adds	r1, r4, r5
 800e4e4:	428b      	cmp	r3, r1
 800e4e6:	bf01      	itttt	eq
 800e4e8:	6819      	ldreq	r1, [r3, #0]
 800e4ea:	685b      	ldreq	r3, [r3, #4]
 800e4ec:	1949      	addeq	r1, r1, r5
 800e4ee:	6021      	streq	r1, [r4, #0]
 800e4f0:	e7ed      	b.n	800e4ce <_free_r+0x22>
 800e4f2:	461a      	mov	r2, r3
 800e4f4:	685b      	ldr	r3, [r3, #4]
 800e4f6:	b10b      	cbz	r3, 800e4fc <_free_r+0x50>
 800e4f8:	42a3      	cmp	r3, r4
 800e4fa:	d9fa      	bls.n	800e4f2 <_free_r+0x46>
 800e4fc:	6811      	ldr	r1, [r2, #0]
 800e4fe:	1855      	adds	r5, r2, r1
 800e500:	42a5      	cmp	r5, r4
 800e502:	d10b      	bne.n	800e51c <_free_r+0x70>
 800e504:	6824      	ldr	r4, [r4, #0]
 800e506:	4421      	add	r1, r4
 800e508:	1854      	adds	r4, r2, r1
 800e50a:	42a3      	cmp	r3, r4
 800e50c:	6011      	str	r1, [r2, #0]
 800e50e:	d1e0      	bne.n	800e4d2 <_free_r+0x26>
 800e510:	681c      	ldr	r4, [r3, #0]
 800e512:	685b      	ldr	r3, [r3, #4]
 800e514:	6053      	str	r3, [r2, #4]
 800e516:	440c      	add	r4, r1
 800e518:	6014      	str	r4, [r2, #0]
 800e51a:	e7da      	b.n	800e4d2 <_free_r+0x26>
 800e51c:	d902      	bls.n	800e524 <_free_r+0x78>
 800e51e:	230c      	movs	r3, #12
 800e520:	6003      	str	r3, [r0, #0]
 800e522:	e7d6      	b.n	800e4d2 <_free_r+0x26>
 800e524:	6825      	ldr	r5, [r4, #0]
 800e526:	1961      	adds	r1, r4, r5
 800e528:	428b      	cmp	r3, r1
 800e52a:	bf04      	itt	eq
 800e52c:	6819      	ldreq	r1, [r3, #0]
 800e52e:	685b      	ldreq	r3, [r3, #4]
 800e530:	6063      	str	r3, [r4, #4]
 800e532:	bf04      	itt	eq
 800e534:	1949      	addeq	r1, r1, r5
 800e536:	6021      	streq	r1, [r4, #0]
 800e538:	6054      	str	r4, [r2, #4]
 800e53a:	e7ca      	b.n	800e4d2 <_free_r+0x26>
 800e53c:	b003      	add	sp, #12
 800e53e:	bd30      	pop	{r4, r5, pc}
 800e540:	20009898 	.word	0x20009898

0800e544 <_init>:
 800e544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e546:	bf00      	nop
 800e548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e54a:	bc08      	pop	{r3}
 800e54c:	469e      	mov	lr, r3
 800e54e:	4770      	bx	lr

0800e550 <_fini>:
 800e550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e552:	bf00      	nop
 800e554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e556:	bc08      	pop	{r3}
 800e558:	469e      	mov	lr, r3
 800e55a:	4770      	bx	lr
