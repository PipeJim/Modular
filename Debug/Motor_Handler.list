
Motor_Handler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf60  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800d110  0800d110  0001d110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1a8  0800d1a8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800d1a8  0800d1a8  0001d1a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1b0  0800d1b0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1b0  0800d1b0  0001d1b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d1b4  0800d1b4  0001d1b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800d1b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00009884  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20009904  20009904  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002ca07  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000613a  00000000  00000000  0004cafa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002500  00000000  00000000  00052c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001ca9  00000000  00000000  00055138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b6cd  00000000  00000000  00056de1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002e14b  00000000  00000000  000824ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f60b2  00000000  00000000  000b05f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000a10c  00000000  00000000  001a66ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  001b07b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d0f8 	.word	0x0800d0f8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	0800d0f8 	.word	0x0800d0f8

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr

080004fa <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80004fa:	b480      	push	{r7}
 80004fc:	b083      	sub	sp, #12
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
 8000502:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr

08000510 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
	...

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000524:	f001 f8da 	bl	80016dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000528:	f000 f834 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052c:	f000 faa2 	bl	8000a74 <MX_GPIO_Init>
  MX_CRC_Init();
 8000530:	f000 f89a 	bl	8000668 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000534:	f000 f8ac 	bl	8000690 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000538:	f000 fa4c 	bl	80009d4 <MX_FMC_Init>
  MX_I2C3_Init();
 800053c:	f000 f8da 	bl	80006f4 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000540:	f000 f918 	bl	8000774 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000544:	f000 f996 	bl	8000874 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000548:	f000 f9ca 	bl	80008e0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800054c:	f000 fa18 	bl	8000980 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000550:	f009 fa0c 	bl	800996c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000554:	4a09      	ldr	r2, [pc, #36]	; (800057c <main+0x5c>)
 8000556:	2100      	movs	r1, #0
 8000558:	4809      	ldr	r0, [pc, #36]	; (8000580 <main+0x60>)
 800055a:	f009 fa51 	bl	8009a00 <osThreadNew>
 800055e:	4603      	mov	r3, r0
 8000560:	4a08      	ldr	r2, [pc, #32]	; (8000584 <main+0x64>)
 8000562:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000564:	4a08      	ldr	r2, [pc, #32]	; (8000588 <main+0x68>)
 8000566:	2100      	movs	r1, #0
 8000568:	4808      	ldr	r0, [pc, #32]	; (800058c <main+0x6c>)
 800056a:	f009 fa49 	bl	8009a00 <osThreadNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a07      	ldr	r2, [pc, #28]	; (8000590 <main+0x70>)
 8000572:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000574:	f009 fa1e 	bl	80099b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000578:	e7fe      	b.n	8000578 <main+0x58>
 800057a:	bf00      	nop
 800057c:	0800d148 	.word	0x0800d148
 8000580:	08000d39 	.word	0x08000d39
 8000584:	200002f8 	.word	0x200002f8
 8000588:	0800d16c 	.word	0x0800d16c
 800058c:	08000d71 	.word	0x08000d71
 8000590:	200002fc 	.word	0x200002fc

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	; 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	2230      	movs	r2, #48	; 0x30
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f00c fd0a 	bl	800cfbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	4b28      	ldr	r3, [pc, #160]	; (8000660 <SystemClock_Config+0xcc>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	4a27      	ldr	r2, [pc, #156]	; (8000660 <SystemClock_Config+0xcc>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	; 0x40
 80005c8:	4b25      	ldr	r3, [pc, #148]	; (8000660 <SystemClock_Config+0xcc>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	4b22      	ldr	r3, [pc, #136]	; (8000664 <SystemClock_Config+0xd0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005e0:	4a20      	ldr	r2, [pc, #128]	; (8000664 <SystemClock_Config+0xd0>)
 80005e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b1e      	ldr	r3, [pc, #120]	; (8000664 <SystemClock_Config+0xd0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f4:	2301      	movs	r3, #1
 80005f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fe:	2302      	movs	r3, #2
 8000600:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000602:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000608:	2304      	movs	r3, #4
 800060a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800060c:	2348      	movs	r3, #72	; 0x48
 800060e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000610:	2302      	movs	r3, #2
 8000612:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000614:	2303      	movs	r3, #3
 8000616:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 0320 	add.w	r3, r7, #32
 800061c:	4618      	mov	r0, r3
 800061e:	f003 fee3 	bl	80043e8 <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000628:	f000 fbc0 	bl	8000dac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	230f      	movs	r3, #15
 800062e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000630:	2302      	movs	r3, #2
 8000632:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	2102      	movs	r1, #2
 8000648:	4618      	mov	r0, r3
 800064a:	f004 f945 	bl	80048d8 <HAL_RCC_ClockConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000654:	f000 fbaa 	bl	8000dac <Error_Handler>
  }
}
 8000658:	bf00      	nop
 800065a:	3750      	adds	r7, #80	; 0x50
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_CRC_Init+0x20>)
 800066e:	4a07      	ldr	r2, [pc, #28]	; (800068c <MX_CRC_Init+0x24>)
 8000670:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_CRC_Init+0x20>)
 8000674:	f001 f97a 	bl	800196c <HAL_CRC_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800067e:	f000 fb95 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	2000009c 	.word	0x2000009c
 800068c:	40023000 	.word	0x40023000

08000690 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <MX_DMA2D_Init+0x5c>)
 8000696:	4a16      	ldr	r2, [pc, #88]	; (80006f0 <MX_DMA2D_Init+0x60>)
 8000698:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_DMA2D_Init+0x5c>)
 800069c:	2200      	movs	r2, #0
 800069e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_DMA2D_Init+0x5c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_DMA2D_Init+0x5c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_DMA2D_Init+0x5c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_DMA2D_Init+0x5c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_DMA2D_Init+0x5c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_DMA2D_Init+0x5c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006c4:	4809      	ldr	r0, [pc, #36]	; (80006ec <MX_DMA2D_Init+0x5c>)
 80006c6:	f001 f96d 	bl	80019a4 <HAL_DMA2D_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80006d0:	f000 fb6c 	bl	8000dac <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80006d4:	2101      	movs	r1, #1
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_DMA2D_Init+0x5c>)
 80006d8:	f001 fabe 	bl	8001c58 <HAL_DMA2D_ConfigLayer>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80006e2:	f000 fb63 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200000a4 	.word	0x200000a4
 80006f0:	4002b000 	.word	0x4002b000

080006f4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <MX_I2C3_Init+0x74>)
 80006fa:	4a1c      	ldr	r2, [pc, #112]	; (800076c <MX_I2C3_Init+0x78>)
 80006fc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80006fe:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <MX_I2C3_Init+0x74>)
 8000700:	4a1b      	ldr	r2, [pc, #108]	; (8000770 <MX_I2C3_Init+0x7c>)
 8000702:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000704:	4b18      	ldr	r3, [pc, #96]	; (8000768 <MX_I2C3_Init+0x74>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800070a:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_I2C3_Init+0x74>)
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000710:	4b15      	ldr	r3, [pc, #84]	; (8000768 <MX_I2C3_Init+0x74>)
 8000712:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000716:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000718:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_I2C3_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_I2C3_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000724:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_I2C3_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_I2C3_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000730:	480d      	ldr	r0, [pc, #52]	; (8000768 <MX_I2C3_Init+0x74>)
 8000732:	f003 f931 	bl	8003998 <HAL_I2C_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800073c:	f000 fb36 	bl	8000dac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000740:	2100      	movs	r1, #0
 8000742:	4809      	ldr	r0, [pc, #36]	; (8000768 <MX_I2C3_Init+0x74>)
 8000744:	f003 fa6c 	bl	8003c20 <HAL_I2CEx_ConfigAnalogFilter>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800074e:	f000 fb2d 	bl	8000dac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000752:	2100      	movs	r1, #0
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_I2C3_Init+0x74>)
 8000756:	f003 fa9f 	bl	8003c98 <HAL_I2CEx_ConfigDigitalFilter>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000760:	f000 fb24 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200000e4 	.word	0x200000e4
 800076c:	40005c00 	.word	0x40005c00
 8000770:	000186a0 	.word	0x000186a0

08000774 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08e      	sub	sp, #56	; 0x38
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	2234      	movs	r2, #52	; 0x34
 800077e:	2100      	movs	r1, #0
 8000780:	4618      	mov	r0, r3
 8000782:	f00c fc1b 	bl	800cfbc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000786:	4b39      	ldr	r3, [pc, #228]	; (800086c <MX_LTDC_Init+0xf8>)
 8000788:	4a39      	ldr	r2, [pc, #228]	; (8000870 <MX_LTDC_Init+0xfc>)
 800078a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800078c:	4b37      	ldr	r3, [pc, #220]	; (800086c <MX_LTDC_Init+0xf8>)
 800078e:	2200      	movs	r2, #0
 8000790:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000792:	4b36      	ldr	r3, [pc, #216]	; (800086c <MX_LTDC_Init+0xf8>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000798:	4b34      	ldr	r3, [pc, #208]	; (800086c <MX_LTDC_Init+0xf8>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800079e:	4b33      	ldr	r3, [pc, #204]	; (800086c <MX_LTDC_Init+0xf8>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80007a4:	4b31      	ldr	r3, [pc, #196]	; (800086c <MX_LTDC_Init+0xf8>)
 80007a6:	2209      	movs	r2, #9
 80007a8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80007aa:	4b30      	ldr	r3, [pc, #192]	; (800086c <MX_LTDC_Init+0xf8>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80007b0:	4b2e      	ldr	r3, [pc, #184]	; (800086c <MX_LTDC_Init+0xf8>)
 80007b2:	221d      	movs	r2, #29
 80007b4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80007b6:	4b2d      	ldr	r3, [pc, #180]	; (800086c <MX_LTDC_Init+0xf8>)
 80007b8:	2203      	movs	r2, #3
 80007ba:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80007bc:	4b2b      	ldr	r3, [pc, #172]	; (800086c <MX_LTDC_Init+0xf8>)
 80007be:	f240 120d 	movw	r2, #269	; 0x10d
 80007c2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80007c4:	4b29      	ldr	r3, [pc, #164]	; (800086c <MX_LTDC_Init+0xf8>)
 80007c6:	f240 1243 	movw	r2, #323	; 0x143
 80007ca:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80007cc:	4b27      	ldr	r3, [pc, #156]	; (800086c <MX_LTDC_Init+0xf8>)
 80007ce:	f240 1217 	movw	r2, #279	; 0x117
 80007d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80007d4:	4b25      	ldr	r3, [pc, #148]	; (800086c <MX_LTDC_Init+0xf8>)
 80007d6:	f240 1247 	movw	r2, #327	; 0x147
 80007da:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80007dc:	4b23      	ldr	r3, [pc, #140]	; (800086c <MX_LTDC_Init+0xf8>)
 80007de:	2200      	movs	r2, #0
 80007e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80007e4:	4b21      	ldr	r3, [pc, #132]	; (800086c <MX_LTDC_Init+0xf8>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80007ec:	4b1f      	ldr	r3, [pc, #124]	; (800086c <MX_LTDC_Init+0xf8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80007f4:	481d      	ldr	r0, [pc, #116]	; (800086c <MX_LTDC_Init+0xf8>)
 80007f6:	f003 fa8f 	bl	8003d18 <HAL_LTDC_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000800:	f000 fad4 	bl	8000dac <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000808:	23f0      	movs	r3, #240	; 0xf0
 800080a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000810:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000814:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000816:	2302      	movs	r3, #2
 8000818:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800081a:	23ff      	movs	r3, #255	; 0xff
 800081c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000822:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000826:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000828:	2307      	movs	r3, #7
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800082c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000832:	23f0      	movs	r3, #240	; 0xf0
 8000834:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000836:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800083a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2200      	movs	r2, #0
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_LTDC_Init+0xf8>)
 8000856:	f003 fbf1 	bl	800403c <HAL_LTDC_ConfigLayer>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000860:	f000 faa4 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	3738      	adds	r7, #56	; 0x38
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000138 	.word	0x20000138
 8000870:	40016800 	.word	0x40016800

08000874 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000878:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <MX_SPI5_Init+0x64>)
 800087a:	4a18      	ldr	r2, [pc, #96]	; (80008dc <MX_SPI5_Init+0x68>)
 800087c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800087e:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <MX_SPI5_Init+0x64>)
 8000880:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000884:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_SPI5_Init+0x64>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_SPI5_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_SPI5_Init+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_SPI5_Init+0x64>)
 800089a:	2200      	movs	r2, #0
 800089c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_SPI5_Init+0x64>)
 80008a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_SPI5_Init+0x64>)
 80008a8:	2218      	movs	r2, #24
 80008aa:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <MX_SPI5_Init+0x64>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_SPI5_Init+0x64>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <MX_SPI5_Init+0x64>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_SPI5_Init+0x64>)
 80008c0:	220a      	movs	r2, #10
 80008c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_SPI5_Init+0x64>)
 80008c6:	f004 fc4d 	bl	8005164 <HAL_SPI_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80008d0:	f000 fa6c 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200001e0 	.word	0x200001e0
 80008dc:	40015000 	.word	0x40015000

080008e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008e6:	f107 0308 	add.w	r3, r7, #8
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f4:	463b      	mov	r3, r7
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008fc:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <MX_TIM1_Init+0x98>)
 80008fe:	4a1f      	ldr	r2, [pc, #124]	; (800097c <MX_TIM1_Init+0x9c>)
 8000900:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000902:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <MX_TIM1_Init+0x98>)
 8000904:	2200      	movs	r2, #0
 8000906:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <MX_TIM1_Init+0x98>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800090e:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <MX_TIM1_Init+0x98>)
 8000910:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000914:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000916:	4b18      	ldr	r3, [pc, #96]	; (8000978 <MX_TIM1_Init+0x98>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800091c:	4b16      	ldr	r3, [pc, #88]	; (8000978 <MX_TIM1_Init+0x98>)
 800091e:	2200      	movs	r2, #0
 8000920:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <MX_TIM1_Init+0x98>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000928:	4813      	ldr	r0, [pc, #76]	; (8000978 <MX_TIM1_Init+0x98>)
 800092a:	f004 fca4 	bl	8005276 <HAL_TIM_Base_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000934:	f000 fa3a 	bl	8000dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800093e:	f107 0308 	add.w	r3, r7, #8
 8000942:	4619      	mov	r1, r3
 8000944:	480c      	ldr	r0, [pc, #48]	; (8000978 <MX_TIM1_Init+0x98>)
 8000946:	f004 fe5d 	bl	8005604 <HAL_TIM_ConfigClockSource>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000950:	f000 fa2c 	bl	8000dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000954:	2300      	movs	r3, #0
 8000956:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800095c:	463b      	mov	r3, r7
 800095e:	4619      	mov	r1, r3
 8000960:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_TIM1_Init+0x98>)
 8000962:	f005 f879 	bl	8005a58 <HAL_TIMEx_MasterConfigSynchronization>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800096c:	f000 fa1e 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000238 	.word	0x20000238
 800097c:	40010000 	.word	0x40010000

08000980 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 8000986:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <MX_USART1_UART_Init+0x50>)
 8000988:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 800098c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000990:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009b8:	f005 f8de 	bl	8005b78 <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009c2:	f000 f9f3 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000280 	.word	0x20000280
 80009d0:	40011000 	.word	0x40011000

080009d4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b088      	sub	sp, #32
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
 80009e8:	615a      	str	r2, [r3, #20]
 80009ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80009ec:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <MX_FMC_Init+0x98>)
 80009ee:	4a20      	ldr	r2, [pc, #128]	; (8000a70 <MX_FMC_Init+0x9c>)
 80009f0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80009f2:	4b1e      	ldr	r3, [pc, #120]	; (8000a6c <MX_FMC_Init+0x98>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80009f8:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <MX_FMC_Init+0x98>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80009fe:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a00:	2204      	movs	r2, #4
 8000a02:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a04:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a06:	2210      	movs	r2, #16
 8000a08:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a0c:	2240      	movs	r2, #64	; 0x40
 8000a0e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a10:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a12:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000a16:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a24:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a32:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a38:	2307      	movs	r3, #7
 8000a3a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000a40:	2307      	movs	r3, #7
 8000a42:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000a44:	2303      	movs	r3, #3
 8000a46:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	4619      	mov	r1, r3
 8000a54:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a56:	f004 fb51 	bl	80050fc <HAL_SDRAM_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000a60:	f000 f9a4 	bl	8000dac <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000a64:	bf00      	nop
 8000a66:	3720      	adds	r7, #32
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	200002c4 	.word	0x200002c4
 8000a70:	a0000140 	.word	0xa0000140

08000a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08e      	sub	sp, #56	; 0x38
 8000a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
 8000a8e:	4b8f      	ldr	r3, [pc, #572]	; (8000ccc <MX_GPIO_Init+0x258>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a8e      	ldr	r2, [pc, #568]	; (8000ccc <MX_GPIO_Init+0x258>)
 8000a94:	f043 0304 	orr.w	r3, r3, #4
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b8c      	ldr	r3, [pc, #560]	; (8000ccc <MX_GPIO_Init+0x258>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0304 	and.w	r3, r3, #4
 8000aa2:	623b      	str	r3, [r7, #32]
 8000aa4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
 8000aaa:	4b88      	ldr	r3, [pc, #544]	; (8000ccc <MX_GPIO_Init+0x258>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a87      	ldr	r2, [pc, #540]	; (8000ccc <MX_GPIO_Init+0x258>)
 8000ab0:	f043 0320 	orr.w	r3, r3, #32
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b85      	ldr	r3, [pc, #532]	; (8000ccc <MX_GPIO_Init+0x258>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0320 	and.w	r3, r3, #32
 8000abe:	61fb      	str	r3, [r7, #28]
 8000ac0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61bb      	str	r3, [r7, #24]
 8000ac6:	4b81      	ldr	r3, [pc, #516]	; (8000ccc <MX_GPIO_Init+0x258>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a80      	ldr	r2, [pc, #512]	; (8000ccc <MX_GPIO_Init+0x258>)
 8000acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b7e      	ldr	r3, [pc, #504]	; (8000ccc <MX_GPIO_Init+0x258>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ada:	61bb      	str	r3, [r7, #24]
 8000adc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	4b7a      	ldr	r3, [pc, #488]	; (8000ccc <MX_GPIO_Init+0x258>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a79      	ldr	r2, [pc, #484]	; (8000ccc <MX_GPIO_Init+0x258>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b77      	ldr	r3, [pc, #476]	; (8000ccc <MX_GPIO_Init+0x258>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	4b73      	ldr	r3, [pc, #460]	; (8000ccc <MX_GPIO_Init+0x258>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a72      	ldr	r2, [pc, #456]	; (8000ccc <MX_GPIO_Init+0x258>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b70      	ldr	r3, [pc, #448]	; (8000ccc <MX_GPIO_Init+0x258>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b6c      	ldr	r3, [pc, #432]	; (8000ccc <MX_GPIO_Init+0x258>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a6b      	ldr	r2, [pc, #428]	; (8000ccc <MX_GPIO_Init+0x258>)
 8000b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b69      	ldr	r3, [pc, #420]	; (8000ccc <MX_GPIO_Init+0x258>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	4b65      	ldr	r3, [pc, #404]	; (8000ccc <MX_GPIO_Init+0x258>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a64      	ldr	r2, [pc, #400]	; (8000ccc <MX_GPIO_Init+0x258>)
 8000b3c:	f043 0310 	orr.w	r3, r3, #16
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b62      	ldr	r3, [pc, #392]	; (8000ccc <MX_GPIO_Init+0x258>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0310 	and.w	r3, r3, #16
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	4b5e      	ldr	r3, [pc, #376]	; (8000ccc <MX_GPIO_Init+0x258>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a5d      	ldr	r2, [pc, #372]	; (8000ccc <MX_GPIO_Init+0x258>)
 8000b58:	f043 0308 	orr.w	r3, r3, #8
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b5b      	ldr	r3, [pc, #364]	; (8000ccc <MX_GPIO_Init+0x258>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0308 	and.w	r3, r3, #8
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOT_STP_GPIO_Port, MOT_STP_Pin, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2140      	movs	r1, #64	; 0x40
 8000b6e:	4858      	ldr	r0, [pc, #352]	; (8000cd0 <MX_GPIO_Init+0x25c>)
 8000b70:	f001 fab0 	bl	80020d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|MOT_DIR_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	211e      	movs	r1, #30
 8000b78:	4856      	ldr	r0, [pc, #344]	; (8000cd4 <MX_GPIO_Init+0x260>)
 8000b7a:	f001 faab 	bl	80020d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2180      	movs	r1, #128	; 0x80
 8000b82:	4855      	ldr	r0, [pc, #340]	; (8000cd8 <MX_GPIO_Init+0x264>)
 8000b84:	f001 faa6 	bl	80020d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000b8e:	4853      	ldr	r0, [pc, #332]	; (8000cdc <MX_GPIO_Init+0x268>)
 8000b90:	f001 faa0 	bl	80020d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000b9a:	4851      	ldr	r0, [pc, #324]	; (8000ce0 <MX_GPIO_Init+0x26c>)
 8000b9c:	f001 fa9a 	bl	80020d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MOT_STP_Pin */
  GPIO_InitStruct.Pin = MOT_STP_Pin;
 8000ba0:	2340      	movs	r3, #64	; 0x40
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MOT_STP_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4846      	ldr	r0, [pc, #280]	; (8000cd0 <MX_GPIO_Init+0x25c>)
 8000bb8:	f001 f8e0 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin MOT_DIR_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|MOT_DIR_Pin|OTG_FS_PSO_Pin;
 8000bbc:	231e      	movs	r3, #30
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4840      	ldr	r0, [pc, #256]	; (8000cd4 <MX_GPIO_Init+0x260>)
 8000bd4:	f001 f8d2 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bdc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000be0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bea:	4619      	mov	r1, r3
 8000bec:	483a      	ldr	r0, [pc, #232]	; (8000cd8 <MX_GPIO_Init+0x264>)
 8000bee:	f001 f8c5 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000bf2:	f248 0306 	movw	r3, #32774	; 0x8006
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bf8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	4833      	ldr	r0, [pc, #204]	; (8000cd8 <MX_GPIO_Init+0x264>)
 8000c0a:	f001 f8b7 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000c0e:	2380      	movs	r3, #128	; 0x80
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c22:	4619      	mov	r1, r3
 8000c24:	482c      	ldr	r0, [pc, #176]	; (8000cd8 <MX_GPIO_Init+0x264>)
 8000c26:	f001 f8a9 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000c2a:	2320      	movs	r3, #32
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c2e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4825      	ldr	r0, [pc, #148]	; (8000cd4 <MX_GPIO_Init+0x260>)
 8000c40:	f001 f89c 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c44:	2304      	movs	r3, #4
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c54:	4619      	mov	r1, r3
 8000c56:	4823      	ldr	r0, [pc, #140]	; (8000ce4 <MX_GPIO_Init+0x270>)
 8000c58:	f001 f890 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000c5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6e:	4619      	mov	r1, r3
 8000c70:	481a      	ldr	r0, [pc, #104]	; (8000cdc <MX_GPIO_Init+0x268>)
 8000c72:	f001 f883 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000c76:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	2300      	movs	r3, #0
 8000c86:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4813      	ldr	r0, [pc, #76]	; (8000cdc <MX_GPIO_Init+0x268>)
 8000c90:	f001 f874 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000c94:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000caa:	4619      	mov	r1, r3
 8000cac:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <MX_GPIO_Init+0x26c>)
 8000cae:	f001 f865 	bl	8001d7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2105      	movs	r1, #5
 8000cb6:	2006      	movs	r0, #6
 8000cb8:	f000 fe2e 	bl	8001918 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000cbc:	2006      	movs	r0, #6
 8000cbe:	f000 fe47 	bl	8001950 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cc2:	bf00      	nop
 8000cc4:	3738      	adds	r7, #56	; 0x38
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40021400 	.word	0x40021400
 8000cd4:	40020800 	.word	0x40020800
 8000cd8:	40020000 	.word	0x40020000
 8000cdc:	40020c00 	.word	0x40020c00
 8000ce0:	40021800 	.word	0x40021800
 8000ce4:	40020400 	.word	0x40020400

08000ce8 <Task_action>:

/* USER CODE BEGIN 4 */
void Task_action(char message)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
	uint8_t data[] = {message, '\n', '\r'};
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	733b      	strb	r3, [r7, #12]
 8000cf6:	230a      	movs	r3, #10
 8000cf8:	737b      	strb	r3, [r7, #13]
 8000cfa:	230d      	movs	r3, #13
 8000cfc:	73bb      	strb	r3, [r7, #14]
	HAL_UART_Transmit(&huart1, data, 3, 2);
 8000cfe:	f107 010c 	add.w	r1, r7, #12
 8000d02:	2302      	movs	r3, #2
 8000d04:	2203      	movs	r2, #3
 8000d06:	480a      	ldr	r0, [pc, #40]	; (8000d30 <Task_action+0x48>)
 8000d08:	f004 ff83 	bl	8005c12 <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000d0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d10:	4808      	ldr	r0, [pc, #32]	; (8000d34 <Task_action+0x4c>)
 8000d12:	f001 f9f8 	bl	8002106 <HAL_GPIO_TogglePin>
	osDelay(100);
 8000d16:	2064      	movs	r0, #100	; 0x64
 8000d18:	f008 ff04 	bl	8009b24 <osDelay>
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000d1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d20:	4804      	ldr	r0, [pc, #16]	; (8000d34 <Task_action+0x4c>)
 8000d22:	f001 f9f0 	bl	8002106 <HAL_GPIO_TogglePin>
}
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000280 	.word	0x20000280
 8000d34:	40021800 	.word	0x40021800

08000d38 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000d40:	f00b fd78 	bl	800c834 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  uint32_t i = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
  uint8_t max = 200;
 8000d48:	23c8      	movs	r3, #200	; 0xc8
 8000d4a:	72fb      	strb	r3, [r7, #11]
  /* Infinite loop */
  for(;;)
  {
	for (i = 0; i < max; ++i)
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	e009      	b.n	8000d66 <StartTask1+0x2e>
	{
		//HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
		Task_action('1');
 8000d52:	2031      	movs	r0, #49	; 0x31
 8000d54:	f7ff ffc8 	bl	8000ce8 <Task_action>
		osDelay(1000);
 8000d58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d5c:	f008 fee2 	bl	8009b24 <osDelay>
	for (i = 0; i < max; ++i)
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	3301      	adds	r3, #1
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	7afb      	ldrb	r3, [r7, #11]
 8000d68:	68fa      	ldr	r2, [r7, #12]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d3f1      	bcc.n	8000d52 <StartTask1+0x1a>
 8000d6e:	e7ed      	b.n	8000d4c <StartTask1+0x14>

08000d70 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	  Task_action('2');
 8000d78:	2032      	movs	r0, #50	; 0x32
 8000d7a:	f7ff ffb5 	bl	8000ce8 <Task_action>
	  osDelay(50);
 8000d7e:	2032      	movs	r0, #50	; 0x32
 8000d80:	f008 fed0 	bl	8009b24 <osDelay>
	  Task_action('2');
 8000d84:	e7f8      	b.n	8000d78 <StartTask2+0x8>
	...

08000d88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d101      	bne.n	8000d9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d9a:	f000 fcc1 	bl	8001720 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40001000 	.word	0x40001000

08000dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db0:	b672      	cpsid	i
}
 8000db2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <Error_Handler+0x8>
	...

08000db8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <HAL_MspInit+0x54>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc6:	4a11      	ldr	r2, [pc, #68]	; (8000e0c <HAL_MspInit+0x54>)
 8000dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dce:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <HAL_MspInit+0x54>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	603b      	str	r3, [r7, #0]
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <HAL_MspInit+0x54>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <HAL_MspInit+0x54>)
 8000de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dea:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <HAL_MspInit+0x54>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	210f      	movs	r1, #15
 8000dfa:	f06f 0001 	mvn.w	r0, #1
 8000dfe:	f000 fd8b 	bl	8001918 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40023800 	.word	0x40023800

08000e10 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <HAL_CRC_MspInit+0x3c>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d10d      	bne.n	8000e3e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <HAL_CRC_MspInit+0x40>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a09      	ldr	r2, [pc, #36]	; (8000e50 <HAL_CRC_MspInit+0x40>)
 8000e2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <HAL_CRC_MspInit+0x40>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e3e:	bf00      	nop
 8000e40:	3714      	adds	r7, #20
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40023000 	.word	0x40023000
 8000e50:	40023800 	.word	0x40023800

08000e54 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <HAL_DMA2D_MspInit+0x48>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d115      	bne.n	8000e92 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <HAL_DMA2D_MspInit+0x4c>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a0c      	ldr	r2, [pc, #48]	; (8000ea0 <HAL_DMA2D_MspInit+0x4c>)
 8000e70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <HAL_DMA2D_MspInit+0x4c>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2105      	movs	r1, #5
 8000e86:	205a      	movs	r0, #90	; 0x5a
 8000e88:	f000 fd46 	bl	8001918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000e8c:	205a      	movs	r0, #90	; 0x5a
 8000e8e:	f000 fd5f 	bl	8001950 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	4002b000 	.word	0x4002b000
 8000ea0:	40023800 	.word	0x40023800

08000ea4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a29      	ldr	r2, [pc, #164]	; (8000f68 <HAL_I2C_MspInit+0xc4>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d14b      	bne.n	8000f5e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	4b28      	ldr	r3, [pc, #160]	; (8000f6c <HAL_I2C_MspInit+0xc8>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a27      	ldr	r2, [pc, #156]	; (8000f6c <HAL_I2C_MspInit+0xc8>)
 8000ed0:	f043 0304 	orr.w	r3, r3, #4
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b25      	ldr	r3, [pc, #148]	; (8000f6c <HAL_I2C_MspInit+0xc8>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0304 	and.w	r3, r3, #4
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <HAL_I2C_MspInit+0xc8>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a20      	ldr	r2, [pc, #128]	; (8000f6c <HAL_I2C_MspInit+0xc8>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <HAL_I2C_MspInit+0xc8>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000efe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f04:	2312      	movs	r3, #18
 8000f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f10:	2304      	movs	r3, #4
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4815      	ldr	r0, [pc, #84]	; (8000f70 <HAL_I2C_MspInit+0xcc>)
 8000f1c:	f000 ff2e 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000f20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f26:	2312      	movs	r3, #18
 8000f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f32:	2304      	movs	r3, #4
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	480d      	ldr	r0, [pc, #52]	; (8000f74 <HAL_I2C_MspInit+0xd0>)
 8000f3e:	f000 ff1d 	bl	8001d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <HAL_I2C_MspInit+0xc8>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	4a08      	ldr	r2, [pc, #32]	; (8000f6c <HAL_I2C_MspInit+0xc8>)
 8000f4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f50:	6413      	str	r3, [r2, #64]	; 0x40
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_I2C_MspInit+0xc8>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000f5e:	bf00      	nop
 8000f60:	3728      	adds	r7, #40	; 0x28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40005c00 	.word	0x40005c00
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020800 	.word	0x40020800
 8000f74:	40020000 	.word	0x40020000

08000f78 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b09a      	sub	sp, #104	; 0x68
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f94:	2230      	movs	r2, #48	; 0x30
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f00c f80f 	bl	800cfbc <memset>
  if(hltdc->Instance==LTDC)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a85      	ldr	r2, [pc, #532]	; (80011b8 <HAL_LTDC_MspInit+0x240>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	f040 8102 	bne.w	80011ae <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000faa:	2308      	movs	r3, #8
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000fae:	2332      	movs	r3, #50	; 0x32
 8000fb0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f003 fedc 	bl	8004d7c <HAL_RCCEx_PeriphCLKConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000fca:	f7ff feef 	bl	8000dac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	623b      	str	r3, [r7, #32]
 8000fd2:	4b7a      	ldr	r3, [pc, #488]	; (80011bc <HAL_LTDC_MspInit+0x244>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	4a79      	ldr	r2, [pc, #484]	; (80011bc <HAL_LTDC_MspInit+0x244>)
 8000fd8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fde:	4b77      	ldr	r3, [pc, #476]	; (80011bc <HAL_LTDC_MspInit+0x244>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fe6:	623b      	str	r3, [r7, #32]
 8000fe8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
 8000fee:	4b73      	ldr	r3, [pc, #460]	; (80011bc <HAL_LTDC_MspInit+0x244>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a72      	ldr	r2, [pc, #456]	; (80011bc <HAL_LTDC_MspInit+0x244>)
 8000ff4:	f043 0320 	orr.w	r3, r3, #32
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b70      	ldr	r3, [pc, #448]	; (80011bc <HAL_LTDC_MspInit+0x244>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0320 	and.w	r3, r3, #32
 8001002:	61fb      	str	r3, [r7, #28]
 8001004:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	61bb      	str	r3, [r7, #24]
 800100a:	4b6c      	ldr	r3, [pc, #432]	; (80011bc <HAL_LTDC_MspInit+0x244>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a6b      	ldr	r2, [pc, #428]	; (80011bc <HAL_LTDC_MspInit+0x244>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b69      	ldr	r3, [pc, #420]	; (80011bc <HAL_LTDC_MspInit+0x244>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	61bb      	str	r3, [r7, #24]
 8001020:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	4b65      	ldr	r3, [pc, #404]	; (80011bc <HAL_LTDC_MspInit+0x244>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a64      	ldr	r2, [pc, #400]	; (80011bc <HAL_LTDC_MspInit+0x244>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b62      	ldr	r3, [pc, #392]	; (80011bc <HAL_LTDC_MspInit+0x244>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	4b5e      	ldr	r3, [pc, #376]	; (80011bc <HAL_LTDC_MspInit+0x244>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a5d      	ldr	r2, [pc, #372]	; (80011bc <HAL_LTDC_MspInit+0x244>)
 8001048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b5b      	ldr	r3, [pc, #364]	; (80011bc <HAL_LTDC_MspInit+0x244>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b57      	ldr	r3, [pc, #348]	; (80011bc <HAL_LTDC_MspInit+0x244>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a56      	ldr	r2, [pc, #344]	; (80011bc <HAL_LTDC_MspInit+0x244>)
 8001064:	f043 0304 	orr.w	r3, r3, #4
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b54      	ldr	r3, [pc, #336]	; (80011bc <HAL_LTDC_MspInit+0x244>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0304 	and.w	r3, r3, #4
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	4b50      	ldr	r3, [pc, #320]	; (80011bc <HAL_LTDC_MspInit+0x244>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a4f      	ldr	r2, [pc, #316]	; (80011bc <HAL_LTDC_MspInit+0x244>)
 8001080:	f043 0308 	orr.w	r3, r3, #8
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b4d      	ldr	r3, [pc, #308]	; (80011bc <HAL_LTDC_MspInit+0x244>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0308 	and.w	r3, r3, #8
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001096:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010a4:	230e      	movs	r3, #14
 80010a6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80010a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010ac:	4619      	mov	r1, r3
 80010ae:	4844      	ldr	r0, [pc, #272]	; (80011c0 <HAL_LTDC_MspInit+0x248>)
 80010b0:	f000 fe64 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80010b4:	f641 0358 	movw	r3, #6232	; 0x1858
 80010b8:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010c6:	230e      	movs	r3, #14
 80010c8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010ce:	4619      	mov	r1, r3
 80010d0:	483c      	ldr	r0, [pc, #240]	; (80011c4 <HAL_LTDC_MspInit+0x24c>)
 80010d2:	f000 fe53 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80010d6:	2303      	movs	r3, #3
 80010d8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80010e6:	2309      	movs	r3, #9
 80010e8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010ee:	4619      	mov	r1, r3
 80010f0:	4835      	ldr	r0, [pc, #212]	; (80011c8 <HAL_LTDC_MspInit+0x250>)
 80010f2:	f000 fe43 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80010f6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80010fa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001108:	230e      	movs	r3, #14
 800110a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001110:	4619      	mov	r1, r3
 8001112:	482d      	ldr	r0, [pc, #180]	; (80011c8 <HAL_LTDC_MspInit+0x250>)
 8001114:	f000 fe32 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001118:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800111c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2300      	movs	r3, #0
 8001128:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800112a:	230e      	movs	r3, #14
 800112c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800112e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001132:	4619      	mov	r1, r3
 8001134:	4825      	ldr	r0, [pc, #148]	; (80011cc <HAL_LTDC_MspInit+0x254>)
 8001136:	f000 fe21 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800113a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800113e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800114c:	230e      	movs	r3, #14
 800114e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001150:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001154:	4619      	mov	r1, r3
 8001156:	481e      	ldr	r0, [pc, #120]	; (80011d0 <HAL_LTDC_MspInit+0x258>)
 8001158:	f000 fe10 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800115c:	2348      	movs	r3, #72	; 0x48
 800115e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2300      	movs	r3, #0
 800116a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800116c:	230e      	movs	r3, #14
 800116e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001170:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001174:	4619      	mov	r1, r3
 8001176:	4817      	ldr	r0, [pc, #92]	; (80011d4 <HAL_LTDC_MspInit+0x25c>)
 8001178:	f000 fe00 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800117c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001180:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001182:	2302      	movs	r3, #2
 8001184:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2300      	movs	r3, #0
 800118c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800118e:	2309      	movs	r3, #9
 8001190:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001192:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001196:	4619      	mov	r1, r3
 8001198:	480c      	ldr	r0, [pc, #48]	; (80011cc <HAL_LTDC_MspInit+0x254>)
 800119a:	f000 fdef 	bl	8001d7c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2105      	movs	r1, #5
 80011a2:	2058      	movs	r0, #88	; 0x58
 80011a4:	f000 fbb8 	bl	8001918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80011a8:	2058      	movs	r0, #88	; 0x58
 80011aa:	f000 fbd1 	bl	8001950 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80011ae:	bf00      	nop
 80011b0:	3768      	adds	r7, #104	; 0x68
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40016800 	.word	0x40016800
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40021400 	.word	0x40021400
 80011c4:	40020000 	.word	0x40020000
 80011c8:	40020400 	.word	0x40020400
 80011cc:	40021800 	.word	0x40021800
 80011d0:	40020800 	.word	0x40020800
 80011d4:	40020c00 	.word	0x40020c00

080011d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a19      	ldr	r2, [pc, #100]	; (800125c <HAL_SPI_MspInit+0x84>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d12c      	bne.n	8001254 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <HAL_SPI_MspInit+0x88>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	4a17      	ldr	r2, [pc, #92]	; (8001260 <HAL_SPI_MspInit+0x88>)
 8001204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001208:	6453      	str	r3, [r2, #68]	; 0x44
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <HAL_SPI_MspInit+0x88>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <HAL_SPI_MspInit+0x88>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a10      	ldr	r2, [pc, #64]	; (8001260 <HAL_SPI_MspInit+0x88>)
 8001220:	f043 0320 	orr.w	r3, r3, #32
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <HAL_SPI_MspInit+0x88>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0320 	and.w	r3, r3, #32
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001232:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	2300      	movs	r3, #0
 8001242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001244:	2305      	movs	r3, #5
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <HAL_SPI_MspInit+0x8c>)
 8001250:	f000 fd94 	bl	8001d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001254:	bf00      	nop
 8001256:	3728      	adds	r7, #40	; 0x28
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40015000 	.word	0x40015000
 8001260:	40023800 	.word	0x40023800
 8001264:	40021400 	.word	0x40021400

08001268 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <HAL_TIM_Base_MspInit+0x3c>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d10d      	bne.n	8001296 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <HAL_TIM_Base_MspInit+0x40>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	4a09      	ldr	r2, [pc, #36]	; (80012a8 <HAL_TIM_Base_MspInit+0x40>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6453      	str	r3, [r2, #68]	; 0x44
 800128a:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <HAL_TIM_Base_MspInit+0x40>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001296:	bf00      	nop
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40010000 	.word	0x40010000
 80012a8:	40023800 	.word	0x40023800

080012ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a19      	ldr	r2, [pc, #100]	; (8001330 <HAL_UART_MspInit+0x84>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d12c      	bne.n	8001328 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <HAL_UART_MspInit+0x88>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	4a17      	ldr	r2, [pc, #92]	; (8001334 <HAL_UART_MspInit+0x88>)
 80012d8:	f043 0310 	orr.w	r3, r3, #16
 80012dc:	6453      	str	r3, [r2, #68]	; 0x44
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <HAL_UART_MspInit+0x88>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	f003 0310 	and.w	r3, r3, #16
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <HAL_UART_MspInit+0x88>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a10      	ldr	r2, [pc, #64]	; (8001334 <HAL_UART_MspInit+0x88>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HAL_UART_MspInit+0x88>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001306:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800130a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001314:	2303      	movs	r3, #3
 8001316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001318:	2307      	movs	r3, #7
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	4805      	ldr	r0, [pc, #20]	; (8001338 <HAL_UART_MspInit+0x8c>)
 8001324:	f000 fd2a 	bl	8001d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001328:	bf00      	nop
 800132a:	3728      	adds	r7, #40	; 0x28
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40011000 	.word	0x40011000
 8001334:	40023800 	.word	0x40023800
 8001338:	40020000 	.word	0x40020000

0800133c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001350:	4b3b      	ldr	r3, [pc, #236]	; (8001440 <HAL_FMC_MspInit+0x104>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d16f      	bne.n	8001438 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001358:	4b39      	ldr	r3, [pc, #228]	; (8001440 <HAL_FMC_MspInit+0x104>)
 800135a:	2201      	movs	r2, #1
 800135c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	603b      	str	r3, [r7, #0]
 8001362:	4b38      	ldr	r3, [pc, #224]	; (8001444 <HAL_FMC_MspInit+0x108>)
 8001364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001366:	4a37      	ldr	r2, [pc, #220]	; (8001444 <HAL_FMC_MspInit+0x108>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6393      	str	r3, [r2, #56]	; 0x38
 800136e:	4b35      	ldr	r3, [pc, #212]	; (8001444 <HAL_FMC_MspInit+0x108>)
 8001370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800137a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800137e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	2302      	movs	r3, #2
 8001382:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001388:	2303      	movs	r3, #3
 800138a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800138c:	230c      	movs	r3, #12
 800138e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	4619      	mov	r1, r3
 8001394:	482c      	ldr	r0, [pc, #176]	; (8001448 <HAL_FMC_MspInit+0x10c>)
 8001396:	f000 fcf1 	bl	8001d7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800139a:	2301      	movs	r3, #1
 800139c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013aa:	230c      	movs	r3, #12
 80013ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	4619      	mov	r1, r3
 80013b2:	4826      	ldr	r0, [pc, #152]	; (800144c <HAL_FMC_MspInit+0x110>)
 80013b4:	f000 fce2 	bl	8001d7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80013b8:	f248 1333 	movw	r3, #33075	; 0x8133
 80013bc:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c6:	2303      	movs	r3, #3
 80013c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013ca:	230c      	movs	r3, #12
 80013cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	4619      	mov	r1, r3
 80013d2:	481f      	ldr	r0, [pc, #124]	; (8001450 <HAL_FMC_MspInit+0x114>)
 80013d4:	f000 fcd2 	bl	8001d7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80013d8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80013dc:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e6:	2303      	movs	r3, #3
 80013e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013ea:	230c      	movs	r3, #12
 80013ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	4619      	mov	r1, r3
 80013f2:	4818      	ldr	r0, [pc, #96]	; (8001454 <HAL_FMC_MspInit+0x118>)
 80013f4:	f000 fcc2 	bl	8001d7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80013f8:	f24c 7303 	movw	r3, #50947	; 0xc703
 80013fc:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001406:	2303      	movs	r3, #3
 8001408:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800140a:	230c      	movs	r3, #12
 800140c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	4619      	mov	r1, r3
 8001412:	4811      	ldr	r0, [pc, #68]	; (8001458 <HAL_FMC_MspInit+0x11c>)
 8001414:	f000 fcb2 	bl	8001d7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001418:	2360      	movs	r3, #96	; 0x60
 800141a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141c:	2302      	movs	r3, #2
 800141e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001428:	230c      	movs	r3, #12
 800142a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	4619      	mov	r1, r3
 8001430:	480a      	ldr	r0, [pc, #40]	; (800145c <HAL_FMC_MspInit+0x120>)
 8001432:	f000 fca3 	bl	8001d7c <HAL_GPIO_Init>
 8001436:	e000      	b.n	800143a <HAL_FMC_MspInit+0xfe>
    return;
 8001438:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000300 	.word	0x20000300
 8001444:	40023800 	.word	0x40023800
 8001448:	40021400 	.word	0x40021400
 800144c:	40020800 	.word	0x40020800
 8001450:	40021800 	.word	0x40021800
 8001454:	40021000 	.word	0x40021000
 8001458:	40020c00 	.word	0x40020c00
 800145c:	40020400 	.word	0x40020400

08001460 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001468:	f7ff ff68 	bl	800133c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08e      	sub	sp, #56	; 0x38
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800147c:	2300      	movs	r3, #0
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001480:	2300      	movs	r3, #0
 8001482:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	4b33      	ldr	r3, [pc, #204]	; (8001558 <HAL_InitTick+0xe4>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	4a32      	ldr	r2, [pc, #200]	; (8001558 <HAL_InitTick+0xe4>)
 800148e:	f043 0310 	orr.w	r3, r3, #16
 8001492:	6413      	str	r3, [r2, #64]	; 0x40
 8001494:	4b30      	ldr	r3, [pc, #192]	; (8001558 <HAL_InitTick+0xe4>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	f003 0310 	and.w	r3, r3, #16
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014a0:	f107 0210 	add.w	r2, r7, #16
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4611      	mov	r1, r2
 80014aa:	4618      	mov	r0, r3
 80014ac:	f003 fc34 	bl	8004d18 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80014b0:	6a3b      	ldr	r3, [r7, #32]
 80014b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80014b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d103      	bne.n	80014c2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014ba:	f003 fc05 	bl	8004cc8 <HAL_RCC_GetPCLK1Freq>
 80014be:	6378      	str	r0, [r7, #52]	; 0x34
 80014c0:	e004      	b.n	80014cc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80014c2:	f003 fc01 	bl	8004cc8 <HAL_RCC_GetPCLK1Freq>
 80014c6:	4603      	mov	r3, r0
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ce:	4a23      	ldr	r2, [pc, #140]	; (800155c <HAL_InitTick+0xe8>)
 80014d0:	fba2 2303 	umull	r2, r3, r2, r3
 80014d4:	0c9b      	lsrs	r3, r3, #18
 80014d6:	3b01      	subs	r3, #1
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80014da:	4b21      	ldr	r3, [pc, #132]	; (8001560 <HAL_InitTick+0xec>)
 80014dc:	4a21      	ldr	r2, [pc, #132]	; (8001564 <HAL_InitTick+0xf0>)
 80014de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80014e0:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <HAL_InitTick+0xec>)
 80014e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014e6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80014e8:	4a1d      	ldr	r2, [pc, #116]	; (8001560 <HAL_InitTick+0xec>)
 80014ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ec:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80014ee:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <HAL_InitTick+0xec>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f4:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <HAL_InitTick+0xec>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fa:	4b19      	ldr	r3, [pc, #100]	; (8001560 <HAL_InitTick+0xec>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001500:	4817      	ldr	r0, [pc, #92]	; (8001560 <HAL_InitTick+0xec>)
 8001502:	f003 feb8 	bl	8005276 <HAL_TIM_Base_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800150c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001510:	2b00      	cmp	r3, #0
 8001512:	d11b      	bne.n	800154c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001514:	4812      	ldr	r0, [pc, #72]	; (8001560 <HAL_InitTick+0xec>)
 8001516:	f003 fefd 	bl	8005314 <HAL_TIM_Base_Start_IT>
 800151a:	4603      	mov	r3, r0
 800151c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001520:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001524:	2b00      	cmp	r3, #0
 8001526:	d111      	bne.n	800154c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001528:	2036      	movs	r0, #54	; 0x36
 800152a:	f000 fa11 	bl	8001950 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b0f      	cmp	r3, #15
 8001532:	d808      	bhi.n	8001546 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001534:	2200      	movs	r2, #0
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	2036      	movs	r0, #54	; 0x36
 800153a:	f000 f9ed 	bl	8001918 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800153e:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <HAL_InitTick+0xf4>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	e002      	b.n	800154c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800154c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001550:	4618      	mov	r0, r3
 8001552:	3738      	adds	r7, #56	; 0x38
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40023800 	.word	0x40023800
 800155c:	431bde83 	.word	0x431bde83
 8001560:	20000304 	.word	0x20000304
 8001564:	40001000 	.word	0x40001000
 8001568:	20000004 	.word	0x20000004

0800156c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <NMI_Handler+0x4>

08001572 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001576:	e7fe      	b.n	8001576 <HardFault_Handler+0x4>

08001578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800157c:	e7fe      	b.n	800157c <MemManage_Handler+0x4>

0800157e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001582:	e7fe      	b.n	8001582 <BusFault_Handler+0x4>

08001584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <UsageFault_Handler+0x4>

0800158a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800159c:	2001      	movs	r0, #1
 800159e:	f000 fdcd 	bl	800213c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015ac:	4802      	ldr	r0, [pc, #8]	; (80015b8 <TIM6_DAC_IRQHandler+0x10>)
 80015ae:	f003 ff21 	bl	80053f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000304 	.word	0x20000304

080015bc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80015c0:	4802      	ldr	r0, [pc, #8]	; (80015cc <OTG_HS_IRQHandler+0x10>)
 80015c2:	f001 f849 	bl	8002658 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200094b8 	.word	0x200094b8

080015d0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <LTDC_IRQHandler+0x10>)
 80015d6:	f002 fc6f 	bl	8003eb8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000138 	.word	0x20000138

080015e4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80015e8:	4802      	ldr	r0, [pc, #8]	; (80015f4 <DMA2D_IRQHandler+0x10>)
 80015ea:	f000 fa24 	bl	8001a36 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200000a4 	.word	0x200000a4

080015f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001600:	4a14      	ldr	r2, [pc, #80]	; (8001654 <_sbrk+0x5c>)
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <_sbrk+0x60>)
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800160c:	4b13      	ldr	r3, [pc, #76]	; (800165c <_sbrk+0x64>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d102      	bne.n	800161a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <_sbrk+0x64>)
 8001616:	4a12      	ldr	r2, [pc, #72]	; (8001660 <_sbrk+0x68>)
 8001618:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <_sbrk+0x64>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	429a      	cmp	r2, r3
 8001626:	d207      	bcs.n	8001638 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001628:	f00b fce0 	bl	800cfec <__errno>
 800162c:	4603      	mov	r3, r0
 800162e:	220c      	movs	r2, #12
 8001630:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001632:	f04f 33ff 	mov.w	r3, #4294967295
 8001636:	e009      	b.n	800164c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <_sbrk+0x64>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800163e:	4b07      	ldr	r3, [pc, #28]	; (800165c <_sbrk+0x64>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	4a05      	ldr	r2, [pc, #20]	; (800165c <_sbrk+0x64>)
 8001648:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800164a:	68fb      	ldr	r3, [r7, #12]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20030000 	.word	0x20030000
 8001658:	00000400 	.word	0x00000400
 800165c:	2000034c 	.word	0x2000034c
 8001660:	20009908 	.word	0x20009908

08001664 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <SystemInit+0x20>)
 800166a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800166e:	4a05      	ldr	r2, [pc, #20]	; (8001684 <SystemInit+0x20>)
 8001670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001688:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016c0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800168c:	480d      	ldr	r0, [pc, #52]	; (80016c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800168e:	490e      	ldr	r1, [pc, #56]	; (80016c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001690:	4a0e      	ldr	r2, [pc, #56]	; (80016cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001694:	e002      	b.n	800169c <LoopCopyDataInit>

08001696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169a:	3304      	adds	r3, #4

0800169c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800169c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a0:	d3f9      	bcc.n	8001696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a2:	4a0b      	ldr	r2, [pc, #44]	; (80016d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016a4:	4c0b      	ldr	r4, [pc, #44]	; (80016d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a8:	e001      	b.n	80016ae <LoopFillZerobss>

080016aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ac:	3204      	adds	r2, #4

080016ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b0:	d3fb      	bcc.n	80016aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016b2:	f7ff ffd7 	bl	8001664 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016b6:	f00b fc9f 	bl	800cff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ba:	f7fe ff31 	bl	8000520 <main>
  bx  lr    
 80016be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80016c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80016c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80016cc:	0800d1b8 	.word	0x0800d1b8
  ldr r2, =_sbss
 80016d0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80016d4:	20009904 	.word	0x20009904

080016d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d8:	e7fe      	b.n	80016d8 <ADC_IRQHandler>
	...

080016dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016e0:	4b0e      	ldr	r3, [pc, #56]	; (800171c <HAL_Init+0x40>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0d      	ldr	r2, [pc, #52]	; (800171c <HAL_Init+0x40>)
 80016e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_Init+0x40>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a0a      	ldr	r2, [pc, #40]	; (800171c <HAL_Init+0x40>)
 80016f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <HAL_Init+0x40>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a07      	ldr	r2, [pc, #28]	; (800171c <HAL_Init+0x40>)
 80016fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001702:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001704:	2003      	movs	r0, #3
 8001706:	f000 f8fc 	bl	8001902 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800170a:	200f      	movs	r0, #15
 800170c:	f7ff feb2 	bl	8001474 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001710:	f7ff fb52 	bl	8000db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40023c00 	.word	0x40023c00

08001720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_IncTick+0x20>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_IncTick+0x24>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4413      	add	r3, r2
 8001730:	4a04      	ldr	r2, [pc, #16]	; (8001744 <HAL_IncTick+0x24>)
 8001732:	6013      	str	r3, [r2, #0]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20000008 	.word	0x20000008
 8001744:	20000350 	.word	0x20000350

08001748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return uwTick;
 800174c:	4b03      	ldr	r3, [pc, #12]	; (800175c <HAL_GetTick+0x14>)
 800174e:	681b      	ldr	r3, [r3, #0]
}
 8001750:	4618      	mov	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20000350 	.word	0x20000350

08001760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001768:	f7ff ffee 	bl	8001748 <HAL_GetTick>
 800176c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001778:	d005      	beq.n	8001786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_Delay+0x44>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4413      	add	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001786:	bf00      	nop
 8001788:	f7ff ffde 	bl	8001748 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	429a      	cmp	r2, r3
 8001796:	d8f7      	bhi.n	8001788 <HAL_Delay+0x28>
  {
  }
}
 8001798:	bf00      	nop
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000008 	.word	0x20000008

080017a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c4:	4013      	ands	r3, r2
 80017c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017da:	4a04      	ldr	r2, [pc, #16]	; (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	60d3      	str	r3, [r2, #12]
}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <__NVIC_GetPriorityGrouping+0x18>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	f003 0307 	and.w	r3, r3, #7
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	2b00      	cmp	r3, #0
 800181c:	db0b      	blt.n	8001836 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	f003 021f 	and.w	r2, r3, #31
 8001824:	4907      	ldr	r1, [pc, #28]	; (8001844 <__NVIC_EnableIRQ+0x38>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	095b      	lsrs	r3, r3, #5
 800182c:	2001      	movs	r0, #1
 800182e:	fa00 f202 	lsl.w	r2, r0, r2
 8001832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000e100 	.word	0xe000e100

08001848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	2b00      	cmp	r3, #0
 800185a:	db0a      	blt.n	8001872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	490c      	ldr	r1, [pc, #48]	; (8001894 <__NVIC_SetPriority+0x4c>)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	0112      	lsls	r2, r2, #4
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	440b      	add	r3, r1
 800186c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001870:	e00a      	b.n	8001888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4908      	ldr	r1, [pc, #32]	; (8001898 <__NVIC_SetPriority+0x50>)
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	3b04      	subs	r3, #4
 8001880:	0112      	lsls	r2, r2, #4
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	440b      	add	r3, r1
 8001886:	761a      	strb	r2, [r3, #24]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000e100 	.word	0xe000e100
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	; 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f1c3 0307 	rsb	r3, r3, #7
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	bf28      	it	cs
 80018ba:	2304      	movcs	r3, #4
 80018bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3304      	adds	r3, #4
 80018c2:	2b06      	cmp	r3, #6
 80018c4:	d902      	bls.n	80018cc <NVIC_EncodePriority+0x30>
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3b03      	subs	r3, #3
 80018ca:	e000      	b.n	80018ce <NVIC_EncodePriority+0x32>
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	f04f 32ff 	mov.w	r2, #4294967295
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43da      	mvns	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	401a      	ands	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	43d9      	mvns	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	4313      	orrs	r3, r2
         );
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3724      	adds	r7, #36	; 0x24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff ff4c 	bl	80017a8 <__NVIC_SetPriorityGrouping>
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800192a:	f7ff ff61 	bl	80017f0 <__NVIC_GetPriorityGrouping>
 800192e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	68b9      	ldr	r1, [r7, #8]
 8001934:	6978      	ldr	r0, [r7, #20]
 8001936:	f7ff ffb1 	bl	800189c <NVIC_EncodePriority>
 800193a:	4602      	mov	r2, r0
 800193c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001940:	4611      	mov	r1, r2
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff ff80 	bl	8001848 <__NVIC_SetPriority>
}
 8001948:	bf00      	nop
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff ff54 	bl	800180c <__NVIC_EnableIRQ>
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e00e      	b.n	800199c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	795b      	ldrb	r3, [r3, #5]
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b00      	cmp	r3, #0
 8001986:	d105      	bne.n	8001994 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7ff fa3e 	bl	8000e10 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e03b      	b.n	8001a2e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d106      	bne.n	80019d0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff fa42 	bl	8000e54 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2202      	movs	r2, #2
 80019d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f4:	f023 0107 	bic.w	r1, r3, #7
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a0e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	68d1      	ldr	r1, [r2, #12]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6812      	ldr	r2, [r2, #0]
 8001a1a:	430b      	orrs	r3, r1
 8001a1c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b084      	sub	sp, #16
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d026      	beq.n	8001aa6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d021      	beq.n	8001aa6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a70:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a76:	f043 0201 	orr.w	r2, r3, #1
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2201      	movs	r2, #1
 8001a84:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2204      	movs	r2, #4
 8001a8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f003 0320 	and.w	r3, r3, #32
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d026      	beq.n	8001afe <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d021      	beq.n	8001afe <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ac8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2220      	movs	r2, #32
 8001ad0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad6:	f043 0202 	orr.w	r2, r3, #2
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2204      	movs	r2, #4
 8001ae2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f003 0308 	and.w	r3, r3, #8
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d026      	beq.n	8001b56 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d021      	beq.n	8001b56 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b20:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2208      	movs	r2, #8
 8001b28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b2e:	f043 0204 	orr.w	r2, r3, #4
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2204      	movs	r2, #4
 8001b3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d013      	beq.n	8001b88 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00e      	beq.n	8001b88 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b78:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2204      	movs	r2, #4
 8001b80:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 f853 	bl	8001c2e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d024      	beq.n	8001bdc <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d01f      	beq.n	8001bdc <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001baa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 0310 	and.w	r3, r3, #16
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d01f      	beq.n	8001c26 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d01a      	beq.n	8001c26 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bfe:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2210      	movs	r2, #16
 8001c06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 f80e 	bl	8001c42 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b087      	sub	sp, #28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d101      	bne.n	8001c78 <HAL_DMA2D_ConfigLayer+0x20>
 8001c74:	2302      	movs	r3, #2
 8001c76:	e079      	b.n	8001d6c <HAL_DMA2D_ConfigLayer+0x114>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2202      	movs	r2, #2
 8001c84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	3318      	adds	r3, #24
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	041b      	lsls	r3, r3, #16
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001ca2:	4b35      	ldr	r3, [pc, #212]	; (8001d78 <HAL_DMA2D_ConfigLayer+0x120>)
 8001ca4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b0a      	cmp	r3, #10
 8001cac:	d003      	beq.n	8001cb6 <HAL_DMA2D_ConfigLayer+0x5e>
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b09      	cmp	r3, #9
 8001cb4:	d107      	bne.n	8001cc6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	e005      	b.n	8001cd2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	061b      	lsls	r3, r3, #24
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d120      	bne.n	8001d1a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	ea02 0103 	and.w	r1, r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	430a      	orrs	r2, r1
 8001cee:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b0a      	cmp	r3, #10
 8001d00:	d003      	beq.n	8001d0a <HAL_DMA2D_ConfigLayer+0xb2>
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b09      	cmp	r3, #9
 8001d08:	d127      	bne.n	8001d5a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001d16:	629a      	str	r2, [r3, #40]	; 0x28
 8001d18:	e01f      	b.n	8001d5a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	69da      	ldr	r2, [r3, #28]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	ea02 0103 	and.w	r1, r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b0a      	cmp	r3, #10
 8001d42:	d003      	beq.n	8001d4c <HAL_DMA2D_ConfigLayer+0xf4>
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b09      	cmp	r3, #9
 8001d4a:	d106      	bne.n	8001d5a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001d58:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	371c      	adds	r7, #28
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	ff03000f 	.word	0xff03000f

08001d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b089      	sub	sp, #36	; 0x24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
 8001d96:	e177      	b.n	8002088 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d98:	2201      	movs	r2, #1
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	4013      	ands	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	f040 8166 	bne.w	8002082 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d005      	beq.n	8001dce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d130      	bne.n	8001e30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	2203      	movs	r2, #3
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e04:	2201      	movs	r2, #1
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	091b      	lsrs	r3, r3, #4
 8001e1a:	f003 0201 	and.w	r2, r3, #1
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	2b03      	cmp	r3, #3
 8001e3a:	d017      	beq.n	8001e6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	2203      	movs	r2, #3
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0303 	and.w	r3, r3, #3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d123      	bne.n	8001ec0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	08da      	lsrs	r2, r3, #3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3208      	adds	r2, #8
 8001e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	220f      	movs	r2, #15
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	691a      	ldr	r2, [r3, #16]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	08da      	lsrs	r2, r3, #3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3208      	adds	r2, #8
 8001eba:	69b9      	ldr	r1, [r7, #24]
 8001ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	2203      	movs	r2, #3
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 0203 	and.w	r2, r3, #3
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 80c0 	beq.w	8002082 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	4b66      	ldr	r3, [pc, #408]	; (80020a0 <HAL_GPIO_Init+0x324>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	4a65      	ldr	r2, [pc, #404]	; (80020a0 <HAL_GPIO_Init+0x324>)
 8001f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f10:	6453      	str	r3, [r2, #68]	; 0x44
 8001f12:	4b63      	ldr	r3, [pc, #396]	; (80020a0 <HAL_GPIO_Init+0x324>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f1e:	4a61      	ldr	r2, [pc, #388]	; (80020a4 <HAL_GPIO_Init+0x328>)
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	089b      	lsrs	r3, r3, #2
 8001f24:	3302      	adds	r3, #2
 8001f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	220f      	movs	r2, #15
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a58      	ldr	r2, [pc, #352]	; (80020a8 <HAL_GPIO_Init+0x32c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d037      	beq.n	8001fba <HAL_GPIO_Init+0x23e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a57      	ldr	r2, [pc, #348]	; (80020ac <HAL_GPIO_Init+0x330>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d031      	beq.n	8001fb6 <HAL_GPIO_Init+0x23a>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a56      	ldr	r2, [pc, #344]	; (80020b0 <HAL_GPIO_Init+0x334>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d02b      	beq.n	8001fb2 <HAL_GPIO_Init+0x236>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a55      	ldr	r2, [pc, #340]	; (80020b4 <HAL_GPIO_Init+0x338>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d025      	beq.n	8001fae <HAL_GPIO_Init+0x232>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a54      	ldr	r2, [pc, #336]	; (80020b8 <HAL_GPIO_Init+0x33c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d01f      	beq.n	8001faa <HAL_GPIO_Init+0x22e>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a53      	ldr	r2, [pc, #332]	; (80020bc <HAL_GPIO_Init+0x340>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d019      	beq.n	8001fa6 <HAL_GPIO_Init+0x22a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a52      	ldr	r2, [pc, #328]	; (80020c0 <HAL_GPIO_Init+0x344>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d013      	beq.n	8001fa2 <HAL_GPIO_Init+0x226>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a51      	ldr	r2, [pc, #324]	; (80020c4 <HAL_GPIO_Init+0x348>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d00d      	beq.n	8001f9e <HAL_GPIO_Init+0x222>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a50      	ldr	r2, [pc, #320]	; (80020c8 <HAL_GPIO_Init+0x34c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d007      	beq.n	8001f9a <HAL_GPIO_Init+0x21e>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a4f      	ldr	r2, [pc, #316]	; (80020cc <HAL_GPIO_Init+0x350>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d101      	bne.n	8001f96 <HAL_GPIO_Init+0x21a>
 8001f92:	2309      	movs	r3, #9
 8001f94:	e012      	b.n	8001fbc <HAL_GPIO_Init+0x240>
 8001f96:	230a      	movs	r3, #10
 8001f98:	e010      	b.n	8001fbc <HAL_GPIO_Init+0x240>
 8001f9a:	2308      	movs	r3, #8
 8001f9c:	e00e      	b.n	8001fbc <HAL_GPIO_Init+0x240>
 8001f9e:	2307      	movs	r3, #7
 8001fa0:	e00c      	b.n	8001fbc <HAL_GPIO_Init+0x240>
 8001fa2:	2306      	movs	r3, #6
 8001fa4:	e00a      	b.n	8001fbc <HAL_GPIO_Init+0x240>
 8001fa6:	2305      	movs	r3, #5
 8001fa8:	e008      	b.n	8001fbc <HAL_GPIO_Init+0x240>
 8001faa:	2304      	movs	r3, #4
 8001fac:	e006      	b.n	8001fbc <HAL_GPIO_Init+0x240>
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e004      	b.n	8001fbc <HAL_GPIO_Init+0x240>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e002      	b.n	8001fbc <HAL_GPIO_Init+0x240>
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <HAL_GPIO_Init+0x240>
 8001fba:	2300      	movs	r3, #0
 8001fbc:	69fa      	ldr	r2, [r7, #28]
 8001fbe:	f002 0203 	and.w	r2, r2, #3
 8001fc2:	0092      	lsls	r2, r2, #2
 8001fc4:	4093      	lsls	r3, r2
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fcc:	4935      	ldr	r1, [pc, #212]	; (80020a4 <HAL_GPIO_Init+0x328>)
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	089b      	lsrs	r3, r3, #2
 8001fd2:	3302      	adds	r3, #2
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fda:	4b3d      	ldr	r3, [pc, #244]	; (80020d0 <HAL_GPIO_Init+0x354>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ffe:	4a34      	ldr	r2, [pc, #208]	; (80020d0 <HAL_GPIO_Init+0x354>)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002004:	4b32      	ldr	r3, [pc, #200]	; (80020d0 <HAL_GPIO_Init+0x354>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002028:	4a29      	ldr	r2, [pc, #164]	; (80020d0 <HAL_GPIO_Init+0x354>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800202e:	4b28      	ldr	r3, [pc, #160]	; (80020d0 <HAL_GPIO_Init+0x354>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002052:	4a1f      	ldr	r2, [pc, #124]	; (80020d0 <HAL_GPIO_Init+0x354>)
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002058:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <HAL_GPIO_Init+0x354>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4313      	orrs	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800207c:	4a14      	ldr	r2, [pc, #80]	; (80020d0 <HAL_GPIO_Init+0x354>)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3301      	adds	r3, #1
 8002086:	61fb      	str	r3, [r7, #28]
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	2b0f      	cmp	r3, #15
 800208c:	f67f ae84 	bls.w	8001d98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002090:	bf00      	nop
 8002092:	bf00      	nop
 8002094:	3724      	adds	r7, #36	; 0x24
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40013800 	.word	0x40013800
 80020a8:	40020000 	.word	0x40020000
 80020ac:	40020400 	.word	0x40020400
 80020b0:	40020800 	.word	0x40020800
 80020b4:	40020c00 	.word	0x40020c00
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40021400 	.word	0x40021400
 80020c0:	40021800 	.word	0x40021800
 80020c4:	40021c00 	.word	0x40021c00
 80020c8:	40022000 	.word	0x40022000
 80020cc:	40022400 	.word	0x40022400
 80020d0:	40013c00 	.word	0x40013c00

080020d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	807b      	strh	r3, [r7, #2]
 80020e0:	4613      	mov	r3, r2
 80020e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020e4:	787b      	ldrb	r3, [r7, #1]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ea:	887a      	ldrh	r2, [r7, #2]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020f0:	e003      	b.n	80020fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020f2:	887b      	ldrh	r3, [r7, #2]
 80020f4:	041a      	lsls	r2, r3, #16
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	619a      	str	r2, [r3, #24]
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002106:	b480      	push	{r7}
 8002108:	b085      	sub	sp, #20
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	460b      	mov	r3, r1
 8002110:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002118:	887a      	ldrh	r2, [r7, #2]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	4013      	ands	r3, r2
 800211e:	041a      	lsls	r2, r3, #16
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	43d9      	mvns	r1, r3
 8002124:	887b      	ldrh	r3, [r7, #2]
 8002126:	400b      	ands	r3, r1
 8002128:	431a      	orrs	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	619a      	str	r2, [r3, #24]
}
 800212e:	bf00      	nop
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
	...

0800213c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002146:	4b08      	ldr	r3, [pc, #32]	; (8002168 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002148:	695a      	ldr	r2, [r3, #20]
 800214a:	88fb      	ldrh	r3, [r7, #6]
 800214c:	4013      	ands	r3, r2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d006      	beq.n	8002160 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002152:	4a05      	ldr	r2, [pc, #20]	; (8002168 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002154:	88fb      	ldrh	r3, [r7, #6]
 8002156:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002158:	88fb      	ldrh	r3, [r7, #6]
 800215a:	4618      	mov	r0, r3
 800215c:	f000 f806 	bl	800216c <HAL_GPIO_EXTI_Callback>
  }
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40013c00 	.word	0x40013c00

0800216c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002182:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002184:	b08f      	sub	sp, #60	; 0x3c
 8002186:	af0a      	add	r7, sp, #40	; 0x28
 8002188:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e054      	b.n	800223e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d106      	bne.n	80021b4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f00a fb94 	bl	800c8dc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2203      	movs	r2, #3
 80021b8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d102      	bne.n	80021ce <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f004 f9ca 	bl	800656c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	603b      	str	r3, [r7, #0]
 80021de:	687e      	ldr	r6, [r7, #4]
 80021e0:	466d      	mov	r5, sp
 80021e2:	f106 0410 	add.w	r4, r6, #16
 80021e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80021f6:	1d33      	adds	r3, r6, #4
 80021f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021fa:	6838      	ldr	r0, [r7, #0]
 80021fc:	f004 f944 	bl	8006488 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2101      	movs	r1, #1
 8002206:	4618      	mov	r0, r3
 8002208:	f004 f9c1 	bl	800658e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	603b      	str	r3, [r7, #0]
 8002212:	687e      	ldr	r6, [r7, #4]
 8002214:	466d      	mov	r5, sp
 8002216:	f106 0410 	add.w	r4, r6, #16
 800221a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800221c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800221e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002220:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002222:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002226:	e885 0003 	stmia.w	r5, {r0, r1}
 800222a:	1d33      	adds	r3, r6, #4
 800222c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800222e:	6838      	ldr	r0, [r7, #0]
 8002230:	f004 fb4a 	bl	80068c8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002246 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002246:	b590      	push	{r4, r7, lr}
 8002248:	b089      	sub	sp, #36	; 0x24
 800224a:	af04      	add	r7, sp, #16
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	4608      	mov	r0, r1
 8002250:	4611      	mov	r1, r2
 8002252:	461a      	mov	r2, r3
 8002254:	4603      	mov	r3, r0
 8002256:	70fb      	strb	r3, [r7, #3]
 8002258:	460b      	mov	r3, r1
 800225a:	70bb      	strb	r3, [r7, #2]
 800225c:	4613      	mov	r3, r2
 800225e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <HAL_HCD_HC_Init+0x28>
 800226a:	2302      	movs	r3, #2
 800226c:	e076      	b.n	800235c <HAL_HCD_HC_Init+0x116>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002276:	78fb      	ldrb	r3, [r7, #3]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	212c      	movs	r1, #44	; 0x2c
 800227c:	fb01 f303 	mul.w	r3, r1, r3
 8002280:	4413      	add	r3, r2
 8002282:	333d      	adds	r3, #61	; 0x3d
 8002284:	2200      	movs	r2, #0
 8002286:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	212c      	movs	r1, #44	; 0x2c
 800228e:	fb01 f303 	mul.w	r3, r1, r3
 8002292:	4413      	add	r3, r2
 8002294:	3338      	adds	r3, #56	; 0x38
 8002296:	787a      	ldrb	r2, [r7, #1]
 8002298:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	212c      	movs	r1, #44	; 0x2c
 80022a0:	fb01 f303 	mul.w	r3, r1, r3
 80022a4:	4413      	add	r3, r2
 80022a6:	3340      	adds	r3, #64	; 0x40
 80022a8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80022aa:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80022ac:	78fb      	ldrb	r3, [r7, #3]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	212c      	movs	r1, #44	; 0x2c
 80022b2:	fb01 f303 	mul.w	r3, r1, r3
 80022b6:	4413      	add	r3, r2
 80022b8:	3339      	adds	r3, #57	; 0x39
 80022ba:	78fa      	ldrb	r2, [r7, #3]
 80022bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80022be:	78fb      	ldrb	r3, [r7, #3]
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	212c      	movs	r1, #44	; 0x2c
 80022c4:	fb01 f303 	mul.w	r3, r1, r3
 80022c8:	4413      	add	r3, r2
 80022ca:	333f      	adds	r3, #63	; 0x3f
 80022cc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80022d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80022d2:	78fb      	ldrb	r3, [r7, #3]
 80022d4:	78ba      	ldrb	r2, [r7, #2]
 80022d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022da:	b2d0      	uxtb	r0, r2
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	212c      	movs	r1, #44	; 0x2c
 80022e0:	fb01 f303 	mul.w	r3, r1, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	333a      	adds	r3, #58	; 0x3a
 80022e8:	4602      	mov	r2, r0
 80022ea:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80022ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	da09      	bge.n	8002308 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80022f4:	78fb      	ldrb	r3, [r7, #3]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	212c      	movs	r1, #44	; 0x2c
 80022fa:	fb01 f303 	mul.w	r3, r1, r3
 80022fe:	4413      	add	r3, r2
 8002300:	333b      	adds	r3, #59	; 0x3b
 8002302:	2201      	movs	r2, #1
 8002304:	701a      	strb	r2, [r3, #0]
 8002306:	e008      	b.n	800231a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002308:	78fb      	ldrb	r3, [r7, #3]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	212c      	movs	r1, #44	; 0x2c
 800230e:	fb01 f303 	mul.w	r3, r1, r3
 8002312:	4413      	add	r3, r2
 8002314:	333b      	adds	r3, #59	; 0x3b
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800231a:	78fb      	ldrb	r3, [r7, #3]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	212c      	movs	r1, #44	; 0x2c
 8002320:	fb01 f303 	mul.w	r3, r1, r3
 8002324:	4413      	add	r3, r2
 8002326:	333c      	adds	r3, #60	; 0x3c
 8002328:	f897 2020 	ldrb.w	r2, [r7, #32]
 800232c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6818      	ldr	r0, [r3, #0]
 8002332:	787c      	ldrb	r4, [r7, #1]
 8002334:	78ba      	ldrb	r2, [r7, #2]
 8002336:	78f9      	ldrb	r1, [r7, #3]
 8002338:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800233a:	9302      	str	r3, [sp, #8]
 800233c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002340:	9301      	str	r3, [sp, #4]
 8002342:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	4623      	mov	r3, r4
 800234a:	f004 fc43 	bl	8006bd4 <USB_HC_Init>
 800234e:	4603      	mov	r3, r0
 8002350:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800235a:	7bfb      	ldrb	r3, [r7, #15]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	bd90      	pop	{r4, r7, pc}

08002364 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <HAL_HCD_HC_Halt+0x1e>
 800237e:	2302      	movs	r3, #2
 8002380:	e00f      	b.n	80023a2 <HAL_HCD_HC_Halt+0x3e>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	78fa      	ldrb	r2, [r7, #3]
 8002390:	4611      	mov	r1, r2
 8002392:	4618      	mov	r0, r3
 8002394:	f004 fe93 	bl	80070be <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	4608      	mov	r0, r1
 80023b6:	4611      	mov	r1, r2
 80023b8:	461a      	mov	r2, r3
 80023ba:	4603      	mov	r3, r0
 80023bc:	70fb      	strb	r3, [r7, #3]
 80023be:	460b      	mov	r3, r1
 80023c0:	70bb      	strb	r3, [r7, #2]
 80023c2:	4613      	mov	r3, r2
 80023c4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80023c6:	78fb      	ldrb	r3, [r7, #3]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	212c      	movs	r1, #44	; 0x2c
 80023cc:	fb01 f303 	mul.w	r3, r1, r3
 80023d0:	4413      	add	r3, r2
 80023d2:	333b      	adds	r3, #59	; 0x3b
 80023d4:	78ba      	ldrb	r2, [r7, #2]
 80023d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80023d8:	78fb      	ldrb	r3, [r7, #3]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	212c      	movs	r1, #44	; 0x2c
 80023de:	fb01 f303 	mul.w	r3, r1, r3
 80023e2:	4413      	add	r3, r2
 80023e4:	333f      	adds	r3, #63	; 0x3f
 80023e6:	787a      	ldrb	r2, [r7, #1]
 80023e8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80023ea:	7c3b      	ldrb	r3, [r7, #16]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d112      	bne.n	8002416 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80023f0:	78fb      	ldrb	r3, [r7, #3]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	212c      	movs	r1, #44	; 0x2c
 80023f6:	fb01 f303 	mul.w	r3, r1, r3
 80023fa:	4413      	add	r3, r2
 80023fc:	3342      	adds	r3, #66	; 0x42
 80023fe:	2203      	movs	r2, #3
 8002400:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002402:	78fb      	ldrb	r3, [r7, #3]
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	212c      	movs	r1, #44	; 0x2c
 8002408:	fb01 f303 	mul.w	r3, r1, r3
 800240c:	4413      	add	r3, r2
 800240e:	333d      	adds	r3, #61	; 0x3d
 8002410:	7f3a      	ldrb	r2, [r7, #28]
 8002412:	701a      	strb	r2, [r3, #0]
 8002414:	e008      	b.n	8002428 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002416:	78fb      	ldrb	r3, [r7, #3]
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	212c      	movs	r1, #44	; 0x2c
 800241c:	fb01 f303 	mul.w	r3, r1, r3
 8002420:	4413      	add	r3, r2
 8002422:	3342      	adds	r3, #66	; 0x42
 8002424:	2202      	movs	r2, #2
 8002426:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002428:	787b      	ldrb	r3, [r7, #1]
 800242a:	2b03      	cmp	r3, #3
 800242c:	f200 80c6 	bhi.w	80025bc <HAL_HCD_HC_SubmitRequest+0x210>
 8002430:	a201      	add	r2, pc, #4	; (adr r2, 8002438 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002436:	bf00      	nop
 8002438:	08002449 	.word	0x08002449
 800243c:	080025a9 	.word	0x080025a9
 8002440:	080024ad 	.word	0x080024ad
 8002444:	0800252b 	.word	0x0800252b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002448:	7c3b      	ldrb	r3, [r7, #16]
 800244a:	2b01      	cmp	r3, #1
 800244c:	f040 80b8 	bne.w	80025c0 <HAL_HCD_HC_SubmitRequest+0x214>
 8002450:	78bb      	ldrb	r3, [r7, #2]
 8002452:	2b00      	cmp	r3, #0
 8002454:	f040 80b4 	bne.w	80025c0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002458:	8b3b      	ldrh	r3, [r7, #24]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d108      	bne.n	8002470 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800245e:	78fb      	ldrb	r3, [r7, #3]
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	212c      	movs	r1, #44	; 0x2c
 8002464:	fb01 f303 	mul.w	r3, r1, r3
 8002468:	4413      	add	r3, r2
 800246a:	3355      	adds	r3, #85	; 0x55
 800246c:	2201      	movs	r2, #1
 800246e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	212c      	movs	r1, #44	; 0x2c
 8002476:	fb01 f303 	mul.w	r3, r1, r3
 800247a:	4413      	add	r3, r2
 800247c:	3355      	adds	r3, #85	; 0x55
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d109      	bne.n	8002498 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002484:	78fb      	ldrb	r3, [r7, #3]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	212c      	movs	r1, #44	; 0x2c
 800248a:	fb01 f303 	mul.w	r3, r1, r3
 800248e:	4413      	add	r3, r2
 8002490:	3342      	adds	r3, #66	; 0x42
 8002492:	2200      	movs	r2, #0
 8002494:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002496:	e093      	b.n	80025c0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002498:	78fb      	ldrb	r3, [r7, #3]
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	212c      	movs	r1, #44	; 0x2c
 800249e:	fb01 f303 	mul.w	r3, r1, r3
 80024a2:	4413      	add	r3, r2
 80024a4:	3342      	adds	r3, #66	; 0x42
 80024a6:	2202      	movs	r2, #2
 80024a8:	701a      	strb	r2, [r3, #0]
      break;
 80024aa:	e089      	b.n	80025c0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80024ac:	78bb      	ldrb	r3, [r7, #2]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d11d      	bne.n	80024ee <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80024b2:	78fb      	ldrb	r3, [r7, #3]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	212c      	movs	r1, #44	; 0x2c
 80024b8:	fb01 f303 	mul.w	r3, r1, r3
 80024bc:	4413      	add	r3, r2
 80024be:	3355      	adds	r3, #85	; 0x55
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d109      	bne.n	80024da <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024c6:	78fb      	ldrb	r3, [r7, #3]
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	212c      	movs	r1, #44	; 0x2c
 80024cc:	fb01 f303 	mul.w	r3, r1, r3
 80024d0:	4413      	add	r3, r2
 80024d2:	3342      	adds	r3, #66	; 0x42
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80024d8:	e073      	b.n	80025c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024da:	78fb      	ldrb	r3, [r7, #3]
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	212c      	movs	r1, #44	; 0x2c
 80024e0:	fb01 f303 	mul.w	r3, r1, r3
 80024e4:	4413      	add	r3, r2
 80024e6:	3342      	adds	r3, #66	; 0x42
 80024e8:	2202      	movs	r2, #2
 80024ea:	701a      	strb	r2, [r3, #0]
      break;
 80024ec:	e069      	b.n	80025c2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80024ee:	78fb      	ldrb	r3, [r7, #3]
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	212c      	movs	r1, #44	; 0x2c
 80024f4:	fb01 f303 	mul.w	r3, r1, r3
 80024f8:	4413      	add	r3, r2
 80024fa:	3354      	adds	r3, #84	; 0x54
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d109      	bne.n	8002516 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002502:	78fb      	ldrb	r3, [r7, #3]
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	212c      	movs	r1, #44	; 0x2c
 8002508:	fb01 f303 	mul.w	r3, r1, r3
 800250c:	4413      	add	r3, r2
 800250e:	3342      	adds	r3, #66	; 0x42
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
      break;
 8002514:	e055      	b.n	80025c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002516:	78fb      	ldrb	r3, [r7, #3]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	212c      	movs	r1, #44	; 0x2c
 800251c:	fb01 f303 	mul.w	r3, r1, r3
 8002520:	4413      	add	r3, r2
 8002522:	3342      	adds	r3, #66	; 0x42
 8002524:	2202      	movs	r2, #2
 8002526:	701a      	strb	r2, [r3, #0]
      break;
 8002528:	e04b      	b.n	80025c2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800252a:	78bb      	ldrb	r3, [r7, #2]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d11d      	bne.n	800256c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	212c      	movs	r1, #44	; 0x2c
 8002536:	fb01 f303 	mul.w	r3, r1, r3
 800253a:	4413      	add	r3, r2
 800253c:	3355      	adds	r3, #85	; 0x55
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d109      	bne.n	8002558 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002544:	78fb      	ldrb	r3, [r7, #3]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	212c      	movs	r1, #44	; 0x2c
 800254a:	fb01 f303 	mul.w	r3, r1, r3
 800254e:	4413      	add	r3, r2
 8002550:	3342      	adds	r3, #66	; 0x42
 8002552:	2200      	movs	r2, #0
 8002554:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002556:	e034      	b.n	80025c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	212c      	movs	r1, #44	; 0x2c
 800255e:	fb01 f303 	mul.w	r3, r1, r3
 8002562:	4413      	add	r3, r2
 8002564:	3342      	adds	r3, #66	; 0x42
 8002566:	2202      	movs	r2, #2
 8002568:	701a      	strb	r2, [r3, #0]
      break;
 800256a:	e02a      	b.n	80025c2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	212c      	movs	r1, #44	; 0x2c
 8002572:	fb01 f303 	mul.w	r3, r1, r3
 8002576:	4413      	add	r3, r2
 8002578:	3354      	adds	r3, #84	; 0x54
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d109      	bne.n	8002594 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002580:	78fb      	ldrb	r3, [r7, #3]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	212c      	movs	r1, #44	; 0x2c
 8002586:	fb01 f303 	mul.w	r3, r1, r3
 800258a:	4413      	add	r3, r2
 800258c:	3342      	adds	r3, #66	; 0x42
 800258e:	2200      	movs	r2, #0
 8002590:	701a      	strb	r2, [r3, #0]
      break;
 8002592:	e016      	b.n	80025c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002594:	78fb      	ldrb	r3, [r7, #3]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	212c      	movs	r1, #44	; 0x2c
 800259a:	fb01 f303 	mul.w	r3, r1, r3
 800259e:	4413      	add	r3, r2
 80025a0:	3342      	adds	r3, #66	; 0x42
 80025a2:	2202      	movs	r2, #2
 80025a4:	701a      	strb	r2, [r3, #0]
      break;
 80025a6:	e00c      	b.n	80025c2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	212c      	movs	r1, #44	; 0x2c
 80025ae:	fb01 f303 	mul.w	r3, r1, r3
 80025b2:	4413      	add	r3, r2
 80025b4:	3342      	adds	r3, #66	; 0x42
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]
      break;
 80025ba:	e002      	b.n	80025c2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80025bc:	bf00      	nop
 80025be:	e000      	b.n	80025c2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80025c0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80025c2:	78fb      	ldrb	r3, [r7, #3]
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	212c      	movs	r1, #44	; 0x2c
 80025c8:	fb01 f303 	mul.w	r3, r1, r3
 80025cc:	4413      	add	r3, r2
 80025ce:	3344      	adds	r3, #68	; 0x44
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80025d4:	78fb      	ldrb	r3, [r7, #3]
 80025d6:	8b3a      	ldrh	r2, [r7, #24]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	202c      	movs	r0, #44	; 0x2c
 80025dc:	fb00 f303 	mul.w	r3, r0, r3
 80025e0:	440b      	add	r3, r1
 80025e2:	334c      	adds	r3, #76	; 0x4c
 80025e4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80025e6:	78fb      	ldrb	r3, [r7, #3]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	212c      	movs	r1, #44	; 0x2c
 80025ec:	fb01 f303 	mul.w	r3, r1, r3
 80025f0:	4413      	add	r3, r2
 80025f2:	3360      	adds	r3, #96	; 0x60
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80025f8:	78fb      	ldrb	r3, [r7, #3]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	212c      	movs	r1, #44	; 0x2c
 80025fe:	fb01 f303 	mul.w	r3, r1, r3
 8002602:	4413      	add	r3, r2
 8002604:	3350      	adds	r3, #80	; 0x50
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800260a:	78fb      	ldrb	r3, [r7, #3]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	212c      	movs	r1, #44	; 0x2c
 8002610:	fb01 f303 	mul.w	r3, r1, r3
 8002614:	4413      	add	r3, r2
 8002616:	3339      	adds	r3, #57	; 0x39
 8002618:	78fa      	ldrb	r2, [r7, #3]
 800261a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800261c:	78fb      	ldrb	r3, [r7, #3]
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	212c      	movs	r1, #44	; 0x2c
 8002622:	fb01 f303 	mul.w	r3, r1, r3
 8002626:	4413      	add	r3, r2
 8002628:	3361      	adds	r3, #97	; 0x61
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	78fb      	ldrb	r3, [r7, #3]
 8002634:	222c      	movs	r2, #44	; 0x2c
 8002636:	fb02 f303 	mul.w	r3, r2, r3
 800263a:	3338      	adds	r3, #56	; 0x38
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	18d1      	adds	r1, r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	b2db      	uxtb	r3, r3
 8002646:	461a      	mov	r2, r3
 8002648:	f004 fbe6 	bl	8006e18 <USB_HC_StartXfer>
 800264c:	4603      	mov	r3, r0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop

08002658 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f004 f8e7 	bl	8006842 <USB_GetMode>
 8002674:	4603      	mov	r3, r0
 8002676:	2b01      	cmp	r3, #1
 8002678:	f040 80f6 	bne.w	8002868 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f004 f8cb 	bl	800681c <USB_ReadInterrupts>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80ec 	beq.w	8002866 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f004 f8c2 	bl	800681c <USB_ReadInterrupts>
 8002698:	4603      	mov	r3, r0
 800269a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800269e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026a2:	d104      	bne.n	80026ae <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80026ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f004 f8b2 	bl	800681c <USB_ReadInterrupts>
 80026b8:	4603      	mov	r3, r0
 80026ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026c2:	d104      	bne.n	80026ce <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80026cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f004 f8a2 	bl	800681c <USB_ReadInterrupts>
 80026d8:	4603      	mov	r3, r0
 80026da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026e2:	d104      	bne.n	80026ee <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80026ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f004 f892 	bl	800681c <USB_ReadInterrupts>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d103      	bne.n	800270a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2202      	movs	r2, #2
 8002708:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f004 f884 	bl	800681c <USB_ReadInterrupts>
 8002714:	4603      	mov	r3, r0
 8002716:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800271a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800271e:	d11c      	bne.n	800275a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002728:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10f      	bne.n	800275a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800273a:	2110      	movs	r1, #16
 800273c:	6938      	ldr	r0, [r7, #16]
 800273e:	f003 ff73 	bl	8006628 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002742:	6938      	ldr	r0, [r7, #16]
 8002744:	f003 ffa4 	bl	8006690 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2101      	movs	r1, #1
 800274e:	4618      	mov	r0, r3
 8002750:	f004 f97a 	bl	8006a48 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f00a f93b 	bl	800c9d0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f004 f85c 	bl	800681c <USB_ReadInterrupts>
 8002764:	4603      	mov	r3, r0
 8002766:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800276a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800276e:	d102      	bne.n	8002776 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f001 f89e 	bl	80038b2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f004 f84e 	bl	800681c <USB_ReadInterrupts>
 8002780:	4603      	mov	r3, r0
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b08      	cmp	r3, #8
 8002788:	d106      	bne.n	8002798 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f00a f904 	bl	800c998 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2208      	movs	r2, #8
 8002796:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f004 f83d 	bl	800681c <USB_ReadInterrupts>
 80027a2:	4603      	mov	r3, r0
 80027a4:	f003 0310 	and.w	r3, r3, #16
 80027a8:	2b10      	cmp	r3, #16
 80027aa:	d101      	bne.n	80027b0 <HAL_HCD_IRQHandler+0x158>
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <HAL_HCD_IRQHandler+0x15a>
 80027b0:	2300      	movs	r3, #0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d012      	beq.n	80027dc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699a      	ldr	r2, [r3, #24]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0210 	bic.w	r2, r2, #16
 80027c4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 ffa1 	bl	800370e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699a      	ldr	r2, [r3, #24]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0210 	orr.w	r2, r2, #16
 80027da:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f004 f81b 	bl	800681c <USB_ReadInterrupts>
 80027e6:	4603      	mov	r3, r0
 80027e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027f0:	d13a      	bne.n	8002868 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f004 fc50 	bl	800709c <USB_HC_ReadInterrupt>
 80027fc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	e025      	b.n	8002850 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	fa22 f303 	lsr.w	r3, r2, r3
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b00      	cmp	r3, #0
 8002816:	d018      	beq.n	800284a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4413      	add	r3, r2
 8002820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800282a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800282e:	d106      	bne.n	800283e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	b2db      	uxtb	r3, r3
 8002834:	4619      	mov	r1, r3
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f8ab 	bl	8002992 <HCD_HC_IN_IRQHandler>
 800283c:	e005      	b.n	800284a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	4619      	mov	r1, r3
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 fbf9 	bl	800303c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	3301      	adds	r3, #1
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	429a      	cmp	r2, r3
 8002858:	d3d4      	bcc.n	8002804 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002862:	615a      	str	r2, [r3, #20]
 8002864:	e000      	b.n	8002868 <HAL_HCD_IRQHandler+0x210>
      return;
 8002866:	bf00      	nop
    }
  }
}
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <HAL_HCD_Start+0x16>
 8002880:	2302      	movs	r3, #2
 8002882:	e013      	b.n	80028ac <HAL_HCD_Start+0x3e>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2101      	movs	r1, #1
 8002892:	4618      	mov	r0, r3
 8002894:	f004 f93c 	bl	8006b10 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f003 fe54 	bl	800654a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_HCD_Stop+0x16>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e00d      	b.n	80028e6 <HAL_HCD_Stop+0x32>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f004 fd2a 	bl	8007330 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f004 f8de 	bl	8006abc <USB_ResetPort>
 8002900:	4603      	mov	r3, r0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	460b      	mov	r3, r1
 8002914:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002916:	78fb      	ldrb	r3, [r7, #3]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	212c      	movs	r1, #44	; 0x2c
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	4413      	add	r3, r2
 8002922:	3360      	adds	r3, #96	; 0x60
 8002924:	781b      	ldrb	r3, [r3, #0]
}
 8002926:	4618      	mov	r0, r3
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	460b      	mov	r3, r1
 800293c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800293e:	78fb      	ldrb	r3, [r7, #3]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	212c      	movs	r1, #44	; 0x2c
 8002944:	fb01 f303 	mul.w	r3, r1, r3
 8002948:	4413      	add	r3, r2
 800294a:	3350      	adds	r3, #80	; 0x50
 800294c:	681b      	ldr	r3, [r3, #0]
}
 800294e:	4618      	mov	r0, r3
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b082      	sub	sp, #8
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f004 f922 	bl	8006bb0 <USB_GetCurrentFrame>
 800296c:	4603      	mov	r3, r0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f004 f8fd 	bl	8006b82 <USB_GetHostSpeed>
 8002988:	4603      	mov	r3, r0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b086      	sub	sp, #24
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	460b      	mov	r3, r1
 800299c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	015a      	lsls	r2, r3, #5
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d11a      	bne.n	80029f8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	015a      	lsls	r2, r3, #5
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4413      	add	r3, r2
 80029ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ce:	461a      	mov	r2, r3
 80029d0:	2304      	movs	r3, #4
 80029d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	212c      	movs	r1, #44	; 0x2c
 80029da:	fb01 f303 	mul.w	r3, r1, r3
 80029de:	4413      	add	r3, r2
 80029e0:	3361      	adds	r3, #97	; 0x61
 80029e2:	2206      	movs	r2, #6
 80029e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	4611      	mov	r1, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f004 fb64 	bl	80070be <USB_HC_Halt>
 80029f6:	e0af      	b.n	8002b58 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	015a      	lsls	r2, r3, #5
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4413      	add	r3, r2
 8002a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a0e:	d11b      	bne.n	8002a48 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a22:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	212c      	movs	r1, #44	; 0x2c
 8002a2a:	fb01 f303 	mul.w	r3, r1, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	3361      	adds	r3, #97	; 0x61
 8002a32:	2207      	movs	r2, #7
 8002a34:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	4611      	mov	r1, r2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f004 fb3c 	bl	80070be <USB_HC_Halt>
 8002a46:	e087      	b.n	8002b58 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	015a      	lsls	r2, r3, #5
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4413      	add	r3, r2
 8002a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 0320 	and.w	r3, r3, #32
 8002a5a:	2b20      	cmp	r3, #32
 8002a5c:	d109      	bne.n	8002a72 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	015a      	lsls	r2, r3, #5
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	4413      	add	r3, r2
 8002a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	2320      	movs	r3, #32
 8002a6e:	6093      	str	r3, [r2, #8]
 8002a70:	e072      	b.n	8002b58 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	015a      	lsls	r2, r3, #5
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4413      	add	r3, r2
 8002a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	d11a      	bne.n	8002abe <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a94:	461a      	mov	r2, r3
 8002a96:	2308      	movs	r3, #8
 8002a98:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	212c      	movs	r1, #44	; 0x2c
 8002aa0:	fb01 f303 	mul.w	r3, r1, r3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3361      	adds	r3, #97	; 0x61
 8002aa8:	2205      	movs	r2, #5
 8002aaa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	4611      	mov	r1, r2
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f004 fb01 	bl	80070be <USB_HC_Halt>
 8002abc:	e04c      	b.n	8002b58 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	015a      	lsls	r2, r3, #5
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ad4:	d11b      	bne.n	8002b0e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	015a      	lsls	r2, r3, #5
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ae8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	212c      	movs	r1, #44	; 0x2c
 8002af0:	fb01 f303 	mul.w	r3, r1, r3
 8002af4:	4413      	add	r3, r2
 8002af6:	3361      	adds	r3, #97	; 0x61
 8002af8:	2208      	movs	r2, #8
 8002afa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	4611      	mov	r1, r2
 8002b06:	4618      	mov	r0, r3
 8002b08:	f004 fad9 	bl	80070be <USB_HC_Halt>
 8002b0c:	e024      	b.n	8002b58 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	015a      	lsls	r2, r3, #5
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4413      	add	r3, r2
 8002b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b20:	2b80      	cmp	r3, #128	; 0x80
 8002b22:	d119      	bne.n	8002b58 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	015a      	lsls	r2, r3, #5
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b30:	461a      	mov	r2, r3
 8002b32:	2380      	movs	r3, #128	; 0x80
 8002b34:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	212c      	movs	r1, #44	; 0x2c
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	4413      	add	r3, r2
 8002b42:	3361      	adds	r3, #97	; 0x61
 8002b44:	2206      	movs	r2, #6
 8002b46:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	4611      	mov	r1, r2
 8002b52:	4618      	mov	r0, r3
 8002b54:	f004 fab3 	bl	80070be <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	015a      	lsls	r2, r3, #5
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	4413      	add	r3, r2
 8002b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b6e:	d112      	bne.n	8002b96 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	4611      	mov	r1, r2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f004 fa9f 	bl	80070be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b92:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002b94:	e24e      	b.n	8003034 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	f040 80df 	bne.w	8002d6c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d019      	beq.n	8002bea <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	212c      	movs	r1, #44	; 0x2c
 8002bbc:	fb01 f303 	mul.w	r3, r1, r3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3348      	adds	r3, #72	; 0x48
 8002bc4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	0159      	lsls	r1, r3, #5
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	440b      	add	r3, r1
 8002bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002bd8:	1ad2      	subs	r2, r2, r3
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	202c      	movs	r0, #44	; 0x2c
 8002be0:	fb00 f303 	mul.w	r3, r0, r3
 8002be4:	440b      	add	r3, r1
 8002be6:	3350      	adds	r3, #80	; 0x50
 8002be8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	212c      	movs	r1, #44	; 0x2c
 8002bf0:	fb01 f303 	mul.w	r3, r1, r3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3361      	adds	r3, #97	; 0x61
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	212c      	movs	r1, #44	; 0x2c
 8002c02:	fb01 f303 	mul.w	r3, r1, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	335c      	adds	r3, #92	; 0x5c
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	015a      	lsls	r2, r3, #5
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	212c      	movs	r1, #44	; 0x2c
 8002c26:	fb01 f303 	mul.w	r3, r1, r3
 8002c2a:	4413      	add	r3, r2
 8002c2c:	333f      	adds	r3, #63	; 0x3f
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d009      	beq.n	8002c48 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	212c      	movs	r1, #44	; 0x2c
 8002c3a:	fb01 f303 	mul.w	r3, r1, r3
 8002c3e:	4413      	add	r3, r2
 8002c40:	333f      	adds	r3, #63	; 0x3f
 8002c42:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d111      	bne.n	8002c6c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	4611      	mov	r1, r2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f004 fa33 	bl	80070be <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	015a      	lsls	r2, r3, #5
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4413      	add	r3, r2
 8002c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c64:	461a      	mov	r2, r3
 8002c66:	2310      	movs	r3, #16
 8002c68:	6093      	str	r3, [r2, #8]
 8002c6a:	e03a      	b.n	8002ce2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	212c      	movs	r1, #44	; 0x2c
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	333f      	adds	r3, #63	; 0x3f
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b03      	cmp	r3, #3
 8002c7e:	d009      	beq.n	8002c94 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	212c      	movs	r1, #44	; 0x2c
 8002c86:	fb01 f303 	mul.w	r3, r1, r3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	333f      	adds	r3, #63	; 0x3f
 8002c8e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d126      	bne.n	8002ce2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	0151      	lsls	r1, r2, #5
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	440a      	add	r2, r1
 8002caa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002cb2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	212c      	movs	r1, #44	; 0x2c
 8002cba:	fb01 f303 	mul.w	r3, r1, r3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3360      	adds	r3, #96	; 0x60
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	b2d9      	uxtb	r1, r3
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	202c      	movs	r0, #44	; 0x2c
 8002cd0:	fb00 f303 	mul.w	r3, r0, r3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3360      	adds	r3, #96	; 0x60
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f009 fe85 	bl	800c9ec <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d12b      	bne.n	8002d42 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	212c      	movs	r1, #44	; 0x2c
 8002cf0:	fb01 f303 	mul.w	r3, r1, r3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3348      	adds	r3, #72	; 0x48
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	202c      	movs	r0, #44	; 0x2c
 8002d00:	fb00 f202 	mul.w	r2, r0, r2
 8002d04:	440a      	add	r2, r1
 8002d06:	3240      	adds	r2, #64	; 0x40
 8002d08:	8812      	ldrh	r2, [r2, #0]
 8002d0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 818e 	beq.w	8003034 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	212c      	movs	r1, #44	; 0x2c
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	3354      	adds	r3, #84	; 0x54
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	f083 0301 	eor.w	r3, r3, #1
 8002d2c:	b2d8      	uxtb	r0, r3
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	212c      	movs	r1, #44	; 0x2c
 8002d34:	fb01 f303 	mul.w	r3, r1, r3
 8002d38:	4413      	add	r3, r2
 8002d3a:	3354      	adds	r3, #84	; 0x54
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	701a      	strb	r2, [r3, #0]
}
 8002d40:	e178      	b.n	8003034 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	212c      	movs	r1, #44	; 0x2c
 8002d48:	fb01 f303 	mul.w	r3, r1, r3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3354      	adds	r3, #84	; 0x54
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	f083 0301 	eor.w	r3, r3, #1
 8002d56:	b2d8      	uxtb	r0, r3
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	212c      	movs	r1, #44	; 0x2c
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	4413      	add	r3, r2
 8002d64:	3354      	adds	r3, #84	; 0x54
 8002d66:	4602      	mov	r2, r0
 8002d68:	701a      	strb	r2, [r3, #0]
}
 8002d6a:	e163      	b.n	8003034 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	f040 80f6 	bne.w	8002f70 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	212c      	movs	r1, #44	; 0x2c
 8002d8a:	fb01 f303 	mul.w	r3, r1, r3
 8002d8e:	4413      	add	r3, r2
 8002d90:	3361      	adds	r3, #97	; 0x61
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d109      	bne.n	8002dac <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	212c      	movs	r1, #44	; 0x2c
 8002d9e:	fb01 f303 	mul.w	r3, r1, r3
 8002da2:	4413      	add	r3, r2
 8002da4:	3360      	adds	r3, #96	; 0x60
 8002da6:	2201      	movs	r2, #1
 8002da8:	701a      	strb	r2, [r3, #0]
 8002daa:	e0c9      	b.n	8002f40 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	212c      	movs	r1, #44	; 0x2c
 8002db2:	fb01 f303 	mul.w	r3, r1, r3
 8002db6:	4413      	add	r3, r2
 8002db8:	3361      	adds	r3, #97	; 0x61
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b05      	cmp	r3, #5
 8002dbe:	d109      	bne.n	8002dd4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	212c      	movs	r1, #44	; 0x2c
 8002dc6:	fb01 f303 	mul.w	r3, r1, r3
 8002dca:	4413      	add	r3, r2
 8002dcc:	3360      	adds	r3, #96	; 0x60
 8002dce:	2205      	movs	r2, #5
 8002dd0:	701a      	strb	r2, [r3, #0]
 8002dd2:	e0b5      	b.n	8002f40 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	212c      	movs	r1, #44	; 0x2c
 8002dda:	fb01 f303 	mul.w	r3, r1, r3
 8002dde:	4413      	add	r3, r2
 8002de0:	3361      	adds	r3, #97	; 0x61
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b06      	cmp	r3, #6
 8002de6:	d009      	beq.n	8002dfc <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	212c      	movs	r1, #44	; 0x2c
 8002dee:	fb01 f303 	mul.w	r3, r1, r3
 8002df2:	4413      	add	r3, r2
 8002df4:	3361      	adds	r3, #97	; 0x61
 8002df6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d150      	bne.n	8002e9e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	212c      	movs	r1, #44	; 0x2c
 8002e02:	fb01 f303 	mul.w	r3, r1, r3
 8002e06:	4413      	add	r3, r2
 8002e08:	335c      	adds	r3, #92	; 0x5c
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	1c5a      	adds	r2, r3, #1
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	202c      	movs	r0, #44	; 0x2c
 8002e14:	fb00 f303 	mul.w	r3, r0, r3
 8002e18:	440b      	add	r3, r1
 8002e1a:	335c      	adds	r3, #92	; 0x5c
 8002e1c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	212c      	movs	r1, #44	; 0x2c
 8002e24:	fb01 f303 	mul.w	r3, r1, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	335c      	adds	r3, #92	; 0x5c
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d912      	bls.n	8002e58 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	212c      	movs	r1, #44	; 0x2c
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	335c      	adds	r3, #92	; 0x5c
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	212c      	movs	r1, #44	; 0x2c
 8002e4a:	fb01 f303 	mul.w	r3, r1, r3
 8002e4e:	4413      	add	r3, r2
 8002e50:	3360      	adds	r3, #96	; 0x60
 8002e52:	2204      	movs	r2, #4
 8002e54:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e56:	e073      	b.n	8002f40 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	212c      	movs	r1, #44	; 0x2c
 8002e5e:	fb01 f303 	mul.w	r3, r1, r3
 8002e62:	4413      	add	r3, r2
 8002e64:	3360      	adds	r3, #96	; 0x60
 8002e66:	2202      	movs	r2, #2
 8002e68:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	015a      	lsls	r2, r3, #5
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4413      	add	r3, r2
 8002e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e80:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e88:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	015a      	lsls	r2, r3, #5
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e96:	461a      	mov	r2, r3
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e9c:	e050      	b.n	8002f40 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	212c      	movs	r1, #44	; 0x2c
 8002ea4:	fb01 f303 	mul.w	r3, r1, r3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3361      	adds	r3, #97	; 0x61
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b03      	cmp	r3, #3
 8002eb0:	d122      	bne.n	8002ef8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	212c      	movs	r1, #44	; 0x2c
 8002eb8:	fb01 f303 	mul.w	r3, r1, r3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	3360      	adds	r3, #96	; 0x60
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002eda:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ee2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	015a      	lsls	r2, r3, #5
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	4413      	add	r3, r2
 8002eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	e023      	b.n	8002f40 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	212c      	movs	r1, #44	; 0x2c
 8002efe:	fb01 f303 	mul.w	r3, r1, r3
 8002f02:	4413      	add	r3, r2
 8002f04:	3361      	adds	r3, #97	; 0x61
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b07      	cmp	r3, #7
 8002f0a:	d119      	bne.n	8002f40 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	212c      	movs	r1, #44	; 0x2c
 8002f12:	fb01 f303 	mul.w	r3, r1, r3
 8002f16:	4413      	add	r3, r2
 8002f18:	335c      	adds	r3, #92	; 0x5c
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	202c      	movs	r0, #44	; 0x2c
 8002f24:	fb00 f303 	mul.w	r3, r0, r3
 8002f28:	440b      	add	r3, r1
 8002f2a:	335c      	adds	r3, #92	; 0x5c
 8002f2c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	212c      	movs	r1, #44	; 0x2c
 8002f34:	fb01 f303 	mul.w	r3, r1, r3
 8002f38:	4413      	add	r3, r2
 8002f3a:	3360      	adds	r3, #96	; 0x60
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	2302      	movs	r3, #2
 8002f50:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	b2d9      	uxtb	r1, r3
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	202c      	movs	r0, #44	; 0x2c
 8002f5c:	fb00 f303 	mul.w	r3, r0, r3
 8002f60:	4413      	add	r3, r2
 8002f62:	3360      	adds	r3, #96	; 0x60
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	461a      	mov	r2, r3
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f009 fd3f 	bl	800c9ec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f6e:	e061      	b.n	8003034 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	015a      	lsls	r2, r3, #5
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4413      	add	r3, r2
 8002f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 0310 	and.w	r3, r3, #16
 8002f82:	2b10      	cmp	r3, #16
 8002f84:	d156      	bne.n	8003034 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	212c      	movs	r1, #44	; 0x2c
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	4413      	add	r3, r2
 8002f92:	333f      	adds	r3, #63	; 0x3f
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b03      	cmp	r3, #3
 8002f98:	d111      	bne.n	8002fbe <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	212c      	movs	r1, #44	; 0x2c
 8002fa0:	fb01 f303 	mul.w	r3, r1, r3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	335c      	adds	r3, #92	; 0x5c
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f004 f881 	bl	80070be <USB_HC_Halt>
 8002fbc:	e031      	b.n	8003022 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	212c      	movs	r1, #44	; 0x2c
 8002fc4:	fb01 f303 	mul.w	r3, r1, r3
 8002fc8:	4413      	add	r3, r2
 8002fca:	333f      	adds	r3, #63	; 0x3f
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d009      	beq.n	8002fe6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	212c      	movs	r1, #44	; 0x2c
 8002fd8:	fb01 f303 	mul.w	r3, r1, r3
 8002fdc:	4413      	add	r3, r2
 8002fde:	333f      	adds	r3, #63	; 0x3f
 8002fe0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d11d      	bne.n	8003022 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	212c      	movs	r1, #44	; 0x2c
 8002fec:	fb01 f303 	mul.w	r3, r1, r3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	335c      	adds	r3, #92	; 0x5c
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d110      	bne.n	8003022 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	212c      	movs	r1, #44	; 0x2c
 8003006:	fb01 f303 	mul.w	r3, r1, r3
 800300a:	4413      	add	r3, r2
 800300c:	3361      	adds	r3, #97	; 0x61
 800300e:	2203      	movs	r2, #3
 8003010:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	4611      	mov	r1, r2
 800301c:	4618      	mov	r0, r3
 800301e:	f004 f84e 	bl	80070be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	015a      	lsls	r2, r3, #5
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	4413      	add	r3, r2
 800302a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302e:	461a      	mov	r2, r3
 8003030:	2310      	movs	r3, #16
 8003032:	6093      	str	r3, [r2, #8]
}
 8003034:	bf00      	nop
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003052:	78fb      	ldrb	r3, [r7, #3]
 8003054:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	4413      	add	r3, r2
 800305e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b04      	cmp	r3, #4
 800306a:	d11a      	bne.n	80030a2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	015a      	lsls	r2, r3, #5
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	4413      	add	r3, r2
 8003074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003078:	461a      	mov	r2, r3
 800307a:	2304      	movs	r3, #4
 800307c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	212c      	movs	r1, #44	; 0x2c
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	4413      	add	r3, r2
 800308a:	3361      	adds	r3, #97	; 0x61
 800308c:	2206      	movs	r2, #6
 800308e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	4611      	mov	r1, r2
 800309a:	4618      	mov	r0, r3
 800309c:	f004 f80f 	bl	80070be <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80030a0:	e331      	b.n	8003706 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 0320 	and.w	r3, r3, #32
 80030b4:	2b20      	cmp	r3, #32
 80030b6:	d12e      	bne.n	8003116 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c4:	461a      	mov	r2, r3
 80030c6:	2320      	movs	r3, #32
 80030c8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	212c      	movs	r1, #44	; 0x2c
 80030d0:	fb01 f303 	mul.w	r3, r1, r3
 80030d4:	4413      	add	r3, r2
 80030d6:	333d      	adds	r3, #61	; 0x3d
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	f040 8313 	bne.w	8003706 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	212c      	movs	r1, #44	; 0x2c
 80030e6:	fb01 f303 	mul.w	r3, r1, r3
 80030ea:	4413      	add	r3, r2
 80030ec:	333d      	adds	r3, #61	; 0x3d
 80030ee:	2200      	movs	r2, #0
 80030f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	212c      	movs	r1, #44	; 0x2c
 80030f8:	fb01 f303 	mul.w	r3, r1, r3
 80030fc:	4413      	add	r3, r2
 80030fe:	3360      	adds	r3, #96	; 0x60
 8003100:	2202      	movs	r2, #2
 8003102:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	b2d2      	uxtb	r2, r2
 800310c:	4611      	mov	r1, r2
 800310e:	4618      	mov	r0, r3
 8003110:	f003 ffd5 	bl	80070be <USB_HC_Halt>
}
 8003114:	e2f7      	b.n	8003706 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	015a      	lsls	r2, r3, #5
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	4413      	add	r3, r2
 800311e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800312c:	d112      	bne.n	8003154 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	015a      	lsls	r2, r3, #5
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	4413      	add	r3, r2
 8003136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313a:	461a      	mov	r2, r3
 800313c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003140:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	4611      	mov	r1, r2
 800314c:	4618      	mov	r0, r3
 800314e:	f003 ffb6 	bl	80070be <USB_HC_Halt>
}
 8003152:	e2d8      	b.n	8003706 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	015a      	lsls	r2, r3, #5
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	4413      	add	r3, r2
 800315c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b01      	cmp	r3, #1
 8003168:	d140      	bne.n	80031ec <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	212c      	movs	r1, #44	; 0x2c
 8003170:	fb01 f303 	mul.w	r3, r1, r3
 8003174:	4413      	add	r3, r2
 8003176:	335c      	adds	r3, #92	; 0x5c
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	4413      	add	r3, r2
 8003184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318e:	2b40      	cmp	r3, #64	; 0x40
 8003190:	d111      	bne.n	80031b6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	212c      	movs	r1, #44	; 0x2c
 8003198:	fb01 f303 	mul.w	r3, r1, r3
 800319c:	4413      	add	r3, r2
 800319e:	333d      	adds	r3, #61	; 0x3d
 80031a0:	2201      	movs	r2, #1
 80031a2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	015a      	lsls	r2, r3, #5
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	4413      	add	r3, r2
 80031ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b0:	461a      	mov	r2, r3
 80031b2:	2340      	movs	r3, #64	; 0x40
 80031b4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	015a      	lsls	r2, r3, #5
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	4413      	add	r3, r2
 80031be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c2:	461a      	mov	r2, r3
 80031c4:	2301      	movs	r3, #1
 80031c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	212c      	movs	r1, #44	; 0x2c
 80031ce:	fb01 f303 	mul.w	r3, r1, r3
 80031d2:	4413      	add	r3, r2
 80031d4:	3361      	adds	r3, #97	; 0x61
 80031d6:	2201      	movs	r2, #1
 80031d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	4611      	mov	r1, r2
 80031e4:	4618      	mov	r0, r3
 80031e6:	f003 ff6a 	bl	80070be <USB_HC_Halt>
}
 80031ea:	e28c      	b.n	8003706 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	015a      	lsls	r2, r3, #5
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	4413      	add	r3, r2
 80031f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fe:	2b40      	cmp	r3, #64	; 0x40
 8003200:	d12c      	bne.n	800325c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	212c      	movs	r1, #44	; 0x2c
 8003208:	fb01 f303 	mul.w	r3, r1, r3
 800320c:	4413      	add	r3, r2
 800320e:	3361      	adds	r3, #97	; 0x61
 8003210:	2204      	movs	r2, #4
 8003212:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	212c      	movs	r1, #44	; 0x2c
 800321a:	fb01 f303 	mul.w	r3, r1, r3
 800321e:	4413      	add	r3, r2
 8003220:	333d      	adds	r3, #61	; 0x3d
 8003222:	2201      	movs	r2, #1
 8003224:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	212c      	movs	r1, #44	; 0x2c
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	4413      	add	r3, r2
 8003232:	335c      	adds	r3, #92	; 0x5c
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	4611      	mov	r1, r2
 8003242:	4618      	mov	r0, r3
 8003244:	f003 ff3b 	bl	80070be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	4413      	add	r3, r2
 8003250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003254:	461a      	mov	r2, r3
 8003256:	2340      	movs	r3, #64	; 0x40
 8003258:	6093      	str	r3, [r2, #8]
}
 800325a:	e254      	b.n	8003706 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	4413      	add	r3, r2
 8003264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b08      	cmp	r3, #8
 8003270:	d11a      	bne.n	80032a8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	015a      	lsls	r2, r3, #5
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	4413      	add	r3, r2
 800327a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800327e:	461a      	mov	r2, r3
 8003280:	2308      	movs	r3, #8
 8003282:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	212c      	movs	r1, #44	; 0x2c
 800328a:	fb01 f303 	mul.w	r3, r1, r3
 800328e:	4413      	add	r3, r2
 8003290:	3361      	adds	r3, #97	; 0x61
 8003292:	2205      	movs	r2, #5
 8003294:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	4611      	mov	r1, r2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f003 ff0c 	bl	80070be <USB_HC_Halt>
}
 80032a6:	e22e      	b.n	8003706 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	015a      	lsls	r2, r3, #5
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	2b10      	cmp	r3, #16
 80032bc:	d140      	bne.n	8003340 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	212c      	movs	r1, #44	; 0x2c
 80032c4:	fb01 f303 	mul.w	r3, r1, r3
 80032c8:	4413      	add	r3, r2
 80032ca:	335c      	adds	r3, #92	; 0x5c
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	212c      	movs	r1, #44	; 0x2c
 80032d6:	fb01 f303 	mul.w	r3, r1, r3
 80032da:	4413      	add	r3, r2
 80032dc:	3361      	adds	r3, #97	; 0x61
 80032de:	2203      	movs	r2, #3
 80032e0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	212c      	movs	r1, #44	; 0x2c
 80032e8:	fb01 f303 	mul.w	r3, r1, r3
 80032ec:	4413      	add	r3, r2
 80032ee:	333d      	adds	r3, #61	; 0x3d
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d112      	bne.n	800331c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	212c      	movs	r1, #44	; 0x2c
 80032fc:	fb01 f303 	mul.w	r3, r1, r3
 8003300:	4413      	add	r3, r2
 8003302:	333c      	adds	r3, #60	; 0x3c
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d108      	bne.n	800331c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	212c      	movs	r1, #44	; 0x2c
 8003310:	fb01 f303 	mul.w	r3, r1, r3
 8003314:	4413      	add	r3, r2
 8003316:	333d      	adds	r3, #61	; 0x3d
 8003318:	2201      	movs	r2, #1
 800331a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	4611      	mov	r1, r2
 8003326:	4618      	mov	r0, r3
 8003328:	f003 fec9 	bl	80070be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	4413      	add	r3, r2
 8003334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003338:	461a      	mov	r2, r3
 800333a:	2310      	movs	r3, #16
 800333c:	6093      	str	r3, [r2, #8]
}
 800333e:	e1e2      	b.n	8003706 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	4413      	add	r3, r2
 8003348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003352:	2b80      	cmp	r3, #128	; 0x80
 8003354:	d164      	bne.n	8003420 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d111      	bne.n	8003382 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	212c      	movs	r1, #44	; 0x2c
 8003364:	fb01 f303 	mul.w	r3, r1, r3
 8003368:	4413      	add	r3, r2
 800336a:	3361      	adds	r3, #97	; 0x61
 800336c:	2206      	movs	r2, #6
 800336e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	4611      	mov	r1, r2
 800337a:	4618      	mov	r0, r3
 800337c:	f003 fe9f 	bl	80070be <USB_HC_Halt>
 8003380:	e044      	b.n	800340c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	212c      	movs	r1, #44	; 0x2c
 8003388:	fb01 f303 	mul.w	r3, r1, r3
 800338c:	4413      	add	r3, r2
 800338e:	335c      	adds	r3, #92	; 0x5c
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	202c      	movs	r0, #44	; 0x2c
 800339a:	fb00 f303 	mul.w	r3, r0, r3
 800339e:	440b      	add	r3, r1
 80033a0:	335c      	adds	r3, #92	; 0x5c
 80033a2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	212c      	movs	r1, #44	; 0x2c
 80033aa:	fb01 f303 	mul.w	r3, r1, r3
 80033ae:	4413      	add	r3, r2
 80033b0:	335c      	adds	r3, #92	; 0x5c
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d920      	bls.n	80033fa <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	212c      	movs	r1, #44	; 0x2c
 80033be:	fb01 f303 	mul.w	r3, r1, r3
 80033c2:	4413      	add	r3, r2
 80033c4:	335c      	adds	r3, #92	; 0x5c
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	212c      	movs	r1, #44	; 0x2c
 80033d0:	fb01 f303 	mul.w	r3, r1, r3
 80033d4:	4413      	add	r3, r2
 80033d6:	3360      	adds	r3, #96	; 0x60
 80033d8:	2204      	movs	r2, #4
 80033da:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	b2d9      	uxtb	r1, r3
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	202c      	movs	r0, #44	; 0x2c
 80033e6:	fb00 f303 	mul.w	r3, r0, r3
 80033ea:	4413      	add	r3, r2
 80033ec:	3360      	adds	r3, #96	; 0x60
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	461a      	mov	r2, r3
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f009 fafa 	bl	800c9ec <HAL_HCD_HC_NotifyURBChange_Callback>
 80033f8:	e008      	b.n	800340c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	212c      	movs	r1, #44	; 0x2c
 8003400:	fb01 f303 	mul.w	r3, r1, r3
 8003404:	4413      	add	r3, r2
 8003406:	3360      	adds	r3, #96	; 0x60
 8003408:	2202      	movs	r2, #2
 800340a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	4413      	add	r3, r2
 8003414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003418:	461a      	mov	r2, r3
 800341a:	2380      	movs	r3, #128	; 0x80
 800341c:	6093      	str	r3, [r2, #8]
}
 800341e:	e172      	b.n	8003706 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	4413      	add	r3, r2
 8003428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003436:	d11b      	bne.n	8003470 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	212c      	movs	r1, #44	; 0x2c
 800343e:	fb01 f303 	mul.w	r3, r1, r3
 8003442:	4413      	add	r3, r2
 8003444:	3361      	adds	r3, #97	; 0x61
 8003446:	2208      	movs	r2, #8
 8003448:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	b2d2      	uxtb	r2, r2
 8003452:	4611      	mov	r1, r2
 8003454:	4618      	mov	r0, r3
 8003456:	f003 fe32 	bl	80070be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	015a      	lsls	r2, r3, #5
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	4413      	add	r3, r2
 8003462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003466:	461a      	mov	r2, r3
 8003468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800346c:	6093      	str	r3, [r2, #8]
}
 800346e:	e14a      	b.n	8003706 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	4413      	add	r3, r2
 8003478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b02      	cmp	r3, #2
 8003484:	f040 813f 	bne.w	8003706 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	212c      	movs	r1, #44	; 0x2c
 800348e:	fb01 f303 	mul.w	r3, r1, r3
 8003492:	4413      	add	r3, r2
 8003494:	3361      	adds	r3, #97	; 0x61
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d17d      	bne.n	8003598 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	212c      	movs	r1, #44	; 0x2c
 80034a2:	fb01 f303 	mul.w	r3, r1, r3
 80034a6:	4413      	add	r3, r2
 80034a8:	3360      	adds	r3, #96	; 0x60
 80034aa:	2201      	movs	r2, #1
 80034ac:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	212c      	movs	r1, #44	; 0x2c
 80034b4:	fb01 f303 	mul.w	r3, r1, r3
 80034b8:	4413      	add	r3, r2
 80034ba:	333f      	adds	r3, #63	; 0x3f
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d00a      	beq.n	80034d8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	212c      	movs	r1, #44	; 0x2c
 80034c8:	fb01 f303 	mul.w	r3, r1, r3
 80034cc:	4413      	add	r3, r2
 80034ce:	333f      	adds	r3, #63	; 0x3f
 80034d0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80034d2:	2b03      	cmp	r3, #3
 80034d4:	f040 8100 	bne.w	80036d8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d113      	bne.n	8003508 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	212c      	movs	r1, #44	; 0x2c
 80034e6:	fb01 f303 	mul.w	r3, r1, r3
 80034ea:	4413      	add	r3, r2
 80034ec:	3355      	adds	r3, #85	; 0x55
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	f083 0301 	eor.w	r3, r3, #1
 80034f4:	b2d8      	uxtb	r0, r3
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	212c      	movs	r1, #44	; 0x2c
 80034fc:	fb01 f303 	mul.w	r3, r1, r3
 8003500:	4413      	add	r3, r2
 8003502:	3355      	adds	r3, #85	; 0x55
 8003504:	4602      	mov	r2, r0
 8003506:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	2b01      	cmp	r3, #1
 800350e:	f040 80e3 	bne.w	80036d8 <HCD_HC_OUT_IRQHandler+0x69c>
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	212c      	movs	r1, #44	; 0x2c
 8003518:	fb01 f303 	mul.w	r3, r1, r3
 800351c:	4413      	add	r3, r2
 800351e:	334c      	adds	r3, #76	; 0x4c
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 80d8 	beq.w	80036d8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	212c      	movs	r1, #44	; 0x2c
 800352e:	fb01 f303 	mul.w	r3, r1, r3
 8003532:	4413      	add	r3, r2
 8003534:	334c      	adds	r3, #76	; 0x4c
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	202c      	movs	r0, #44	; 0x2c
 800353e:	fb00 f202 	mul.w	r2, r0, r2
 8003542:	440a      	add	r2, r1
 8003544:	3240      	adds	r2, #64	; 0x40
 8003546:	8812      	ldrh	r2, [r2, #0]
 8003548:	4413      	add	r3, r2
 800354a:	3b01      	subs	r3, #1
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	202c      	movs	r0, #44	; 0x2c
 8003552:	fb00 f202 	mul.w	r2, r0, r2
 8003556:	440a      	add	r2, r1
 8003558:	3240      	adds	r2, #64	; 0x40
 800355a:	8812      	ldrh	r2, [r2, #0]
 800355c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003560:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 80b5 	beq.w	80036d8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	212c      	movs	r1, #44	; 0x2c
 8003574:	fb01 f303 	mul.w	r3, r1, r3
 8003578:	4413      	add	r3, r2
 800357a:	3355      	adds	r3, #85	; 0x55
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	f083 0301 	eor.w	r3, r3, #1
 8003582:	b2d8      	uxtb	r0, r3
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	212c      	movs	r1, #44	; 0x2c
 800358a:	fb01 f303 	mul.w	r3, r1, r3
 800358e:	4413      	add	r3, r2
 8003590:	3355      	adds	r3, #85	; 0x55
 8003592:	4602      	mov	r2, r0
 8003594:	701a      	strb	r2, [r3, #0]
 8003596:	e09f      	b.n	80036d8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	212c      	movs	r1, #44	; 0x2c
 800359e:	fb01 f303 	mul.w	r3, r1, r3
 80035a2:	4413      	add	r3, r2
 80035a4:	3361      	adds	r3, #97	; 0x61
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b03      	cmp	r3, #3
 80035aa:	d109      	bne.n	80035c0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	212c      	movs	r1, #44	; 0x2c
 80035b2:	fb01 f303 	mul.w	r3, r1, r3
 80035b6:	4413      	add	r3, r2
 80035b8:	3360      	adds	r3, #96	; 0x60
 80035ba:	2202      	movs	r2, #2
 80035bc:	701a      	strb	r2, [r3, #0]
 80035be:	e08b      	b.n	80036d8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	212c      	movs	r1, #44	; 0x2c
 80035c6:	fb01 f303 	mul.w	r3, r1, r3
 80035ca:	4413      	add	r3, r2
 80035cc:	3361      	adds	r3, #97	; 0x61
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	d109      	bne.n	80035e8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	212c      	movs	r1, #44	; 0x2c
 80035da:	fb01 f303 	mul.w	r3, r1, r3
 80035de:	4413      	add	r3, r2
 80035e0:	3360      	adds	r3, #96	; 0x60
 80035e2:	2202      	movs	r2, #2
 80035e4:	701a      	strb	r2, [r3, #0]
 80035e6:	e077      	b.n	80036d8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	212c      	movs	r1, #44	; 0x2c
 80035ee:	fb01 f303 	mul.w	r3, r1, r3
 80035f2:	4413      	add	r3, r2
 80035f4:	3361      	adds	r3, #97	; 0x61
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b05      	cmp	r3, #5
 80035fa:	d109      	bne.n	8003610 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	212c      	movs	r1, #44	; 0x2c
 8003602:	fb01 f303 	mul.w	r3, r1, r3
 8003606:	4413      	add	r3, r2
 8003608:	3360      	adds	r3, #96	; 0x60
 800360a:	2205      	movs	r2, #5
 800360c:	701a      	strb	r2, [r3, #0]
 800360e:	e063      	b.n	80036d8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	212c      	movs	r1, #44	; 0x2c
 8003616:	fb01 f303 	mul.w	r3, r1, r3
 800361a:	4413      	add	r3, r2
 800361c:	3361      	adds	r3, #97	; 0x61
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b06      	cmp	r3, #6
 8003622:	d009      	beq.n	8003638 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	212c      	movs	r1, #44	; 0x2c
 800362a:	fb01 f303 	mul.w	r3, r1, r3
 800362e:	4413      	add	r3, r2
 8003630:	3361      	adds	r3, #97	; 0x61
 8003632:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003634:	2b08      	cmp	r3, #8
 8003636:	d14f      	bne.n	80036d8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	212c      	movs	r1, #44	; 0x2c
 800363e:	fb01 f303 	mul.w	r3, r1, r3
 8003642:	4413      	add	r3, r2
 8003644:	335c      	adds	r3, #92	; 0x5c
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	202c      	movs	r0, #44	; 0x2c
 8003650:	fb00 f303 	mul.w	r3, r0, r3
 8003654:	440b      	add	r3, r1
 8003656:	335c      	adds	r3, #92	; 0x5c
 8003658:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	212c      	movs	r1, #44	; 0x2c
 8003660:	fb01 f303 	mul.w	r3, r1, r3
 8003664:	4413      	add	r3, r2
 8003666:	335c      	adds	r3, #92	; 0x5c
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b02      	cmp	r3, #2
 800366c:	d912      	bls.n	8003694 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	212c      	movs	r1, #44	; 0x2c
 8003674:	fb01 f303 	mul.w	r3, r1, r3
 8003678:	4413      	add	r3, r2
 800367a:	335c      	adds	r3, #92	; 0x5c
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	212c      	movs	r1, #44	; 0x2c
 8003686:	fb01 f303 	mul.w	r3, r1, r3
 800368a:	4413      	add	r3, r2
 800368c:	3360      	adds	r3, #96	; 0x60
 800368e:	2204      	movs	r2, #4
 8003690:	701a      	strb	r2, [r3, #0]
 8003692:	e021      	b.n	80036d8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	212c      	movs	r1, #44	; 0x2c
 800369a:	fb01 f303 	mul.w	r3, r1, r3
 800369e:	4413      	add	r3, r2
 80036a0:	3360      	adds	r3, #96	; 0x60
 80036a2:	2202      	movs	r2, #2
 80036a4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036bc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036c4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	015a      	lsls	r2, r3, #5
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d2:	461a      	mov	r2, r3
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e4:	461a      	mov	r2, r3
 80036e6:	2302      	movs	r3, #2
 80036e8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	b2d9      	uxtb	r1, r3
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	202c      	movs	r0, #44	; 0x2c
 80036f4:	fb00 f303 	mul.w	r3, r0, r3
 80036f8:	4413      	add	r3, r2
 80036fa:	3360      	adds	r3, #96	; 0x60
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	461a      	mov	r2, r3
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f009 f973 	bl	800c9ec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003706:	bf00      	nop
 8003708:	3720      	adds	r7, #32
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b08a      	sub	sp, #40	; 0x28
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	0c5b      	lsrs	r3, r3, #17
 8003734:	f003 030f 	and.w	r3, r3, #15
 8003738:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	091b      	lsrs	r3, r3, #4
 800373e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003742:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	2b02      	cmp	r3, #2
 8003748:	d004      	beq.n	8003754 <HCD_RXQLVL_IRQHandler+0x46>
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	2b05      	cmp	r3, #5
 800374e:	f000 80a9 	beq.w	80038a4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003752:	e0aa      	b.n	80038aa <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 80a6 	beq.w	80038a8 <HCD_RXQLVL_IRQHandler+0x19a>
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	212c      	movs	r1, #44	; 0x2c
 8003762:	fb01 f303 	mul.w	r3, r1, r3
 8003766:	4413      	add	r3, r2
 8003768:	3344      	adds	r3, #68	; 0x44
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 809b 	beq.w	80038a8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	212c      	movs	r1, #44	; 0x2c
 8003778:	fb01 f303 	mul.w	r3, r1, r3
 800377c:	4413      	add	r3, r2
 800377e:	3350      	adds	r3, #80	; 0x50
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	441a      	add	r2, r3
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	202c      	movs	r0, #44	; 0x2c
 800378c:	fb00 f303 	mul.w	r3, r0, r3
 8003790:	440b      	add	r3, r1
 8003792:	334c      	adds	r3, #76	; 0x4c
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	429a      	cmp	r2, r3
 8003798:	d87a      	bhi.n	8003890 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6818      	ldr	r0, [r3, #0]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	212c      	movs	r1, #44	; 0x2c
 80037a4:	fb01 f303 	mul.w	r3, r1, r3
 80037a8:	4413      	add	r3, r2
 80037aa:	3344      	adds	r3, #68	; 0x44
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	b292      	uxth	r2, r2
 80037b2:	4619      	mov	r1, r3
 80037b4:	f002 ffda 	bl	800676c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	212c      	movs	r1, #44	; 0x2c
 80037be:	fb01 f303 	mul.w	r3, r1, r3
 80037c2:	4413      	add	r3, r2
 80037c4:	3344      	adds	r3, #68	; 0x44
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	441a      	add	r2, r3
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	202c      	movs	r0, #44	; 0x2c
 80037d2:	fb00 f303 	mul.w	r3, r0, r3
 80037d6:	440b      	add	r3, r1
 80037d8:	3344      	adds	r3, #68	; 0x44
 80037da:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	212c      	movs	r1, #44	; 0x2c
 80037e2:	fb01 f303 	mul.w	r3, r1, r3
 80037e6:	4413      	add	r3, r2
 80037e8:	3350      	adds	r3, #80	; 0x50
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	441a      	add	r2, r3
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	202c      	movs	r0, #44	; 0x2c
 80037f6:	fb00 f303 	mul.w	r3, r0, r3
 80037fa:	440b      	add	r3, r1
 80037fc:	3350      	adds	r3, #80	; 0x50
 80037fe:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	4413      	add	r3, r2
 8003808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	0cdb      	lsrs	r3, r3, #19
 8003810:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003814:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	212c      	movs	r1, #44	; 0x2c
 800381c:	fb01 f303 	mul.w	r3, r1, r3
 8003820:	4413      	add	r3, r2
 8003822:	3340      	adds	r3, #64	; 0x40
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	461a      	mov	r2, r3
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	4293      	cmp	r3, r2
 800382c:	d13c      	bne.n	80038a8 <HCD_RXQLVL_IRQHandler+0x19a>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d039      	beq.n	80038a8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	015a      	lsls	r2, r3, #5
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	4413      	add	r3, r2
 800383c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800384a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003852:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	4413      	add	r3, r2
 800385c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003860:	461a      	mov	r2, r3
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	212c      	movs	r1, #44	; 0x2c
 800386c:	fb01 f303 	mul.w	r3, r1, r3
 8003870:	4413      	add	r3, r2
 8003872:	3354      	adds	r3, #84	; 0x54
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	f083 0301 	eor.w	r3, r3, #1
 800387a:	b2d8      	uxtb	r0, r3
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	212c      	movs	r1, #44	; 0x2c
 8003882:	fb01 f303 	mul.w	r3, r1, r3
 8003886:	4413      	add	r3, r2
 8003888:	3354      	adds	r3, #84	; 0x54
 800388a:	4602      	mov	r2, r0
 800388c:	701a      	strb	r2, [r3, #0]
      break;
 800388e:	e00b      	b.n	80038a8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	212c      	movs	r1, #44	; 0x2c
 8003896:	fb01 f303 	mul.w	r3, r1, r3
 800389a:	4413      	add	r3, r2
 800389c:	3360      	adds	r3, #96	; 0x60
 800389e:	2204      	movs	r2, #4
 80038a0:	701a      	strb	r2, [r3, #0]
      break;
 80038a2:	e001      	b.n	80038a8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80038a4:	bf00      	nop
 80038a6:	e000      	b.n	80038aa <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80038a8:	bf00      	nop
  }
}
 80038aa:	bf00      	nop
 80038ac:	3728      	adds	r7, #40	; 0x28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b086      	sub	sp, #24
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80038de:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d10b      	bne.n	8003902 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d102      	bne.n	80038fa <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f009 f85d 	bl	800c9b4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	f043 0302 	orr.w	r3, r3, #2
 8003900:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f003 0308 	and.w	r3, r3, #8
 8003908:	2b08      	cmp	r3, #8
 800390a:	d132      	bne.n	8003972 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	f043 0308 	orr.w	r3, r3, #8
 8003912:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 0304 	and.w	r3, r3, #4
 800391a:	2b04      	cmp	r3, #4
 800391c:	d126      	bne.n	800396c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	2b02      	cmp	r3, #2
 8003924:	d113      	bne.n	800394e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800392c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003930:	d106      	bne.n	8003940 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2102      	movs	r1, #2
 8003938:	4618      	mov	r0, r3
 800393a:	f003 f885 	bl	8006a48 <USB_InitFSLSPClkSel>
 800393e:	e011      	b.n	8003964 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2101      	movs	r1, #1
 8003946:	4618      	mov	r0, r3
 8003948:	f003 f87e 	bl	8006a48 <USB_InitFSLSPClkSel>
 800394c:	e00a      	b.n	8003964 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d106      	bne.n	8003964 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800395c:	461a      	mov	r2, r3
 800395e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003962:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f009 f853 	bl	800ca10 <HAL_HCD_PortEnabled_Callback>
 800396a:	e002      	b.n	8003972 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f009 f85d 	bl	800ca2c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f003 0320 	and.w	r3, r3, #32
 8003978:	2b20      	cmp	r3, #32
 800397a:	d103      	bne.n	8003984 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f043 0320 	orr.w	r3, r3, #32
 8003982:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800398a:	461a      	mov	r2, r3
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	6013      	str	r3, [r2, #0]
}
 8003990:	bf00      	nop
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e12b      	b.n	8003c02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d106      	bne.n	80039c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7fd fa70 	bl	8000ea4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2224      	movs	r2, #36	; 0x24
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0201 	bic.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039fc:	f001 f964 	bl	8004cc8 <HAL_RCC_GetPCLK1Freq>
 8003a00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	4a81      	ldr	r2, [pc, #516]	; (8003c0c <HAL_I2C_Init+0x274>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d807      	bhi.n	8003a1c <HAL_I2C_Init+0x84>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4a80      	ldr	r2, [pc, #512]	; (8003c10 <HAL_I2C_Init+0x278>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	bf94      	ite	ls
 8003a14:	2301      	movls	r3, #1
 8003a16:	2300      	movhi	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	e006      	b.n	8003a2a <HAL_I2C_Init+0x92>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4a7d      	ldr	r2, [pc, #500]	; (8003c14 <HAL_I2C_Init+0x27c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	bf94      	ite	ls
 8003a24:	2301      	movls	r3, #1
 8003a26:	2300      	movhi	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e0e7      	b.n	8003c02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4a78      	ldr	r2, [pc, #480]	; (8003c18 <HAL_I2C_Init+0x280>)
 8003a36:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3a:	0c9b      	lsrs	r3, r3, #18
 8003a3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	4a6a      	ldr	r2, [pc, #424]	; (8003c0c <HAL_I2C_Init+0x274>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d802      	bhi.n	8003a6c <HAL_I2C_Init+0xd4>
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	e009      	b.n	8003a80 <HAL_I2C_Init+0xe8>
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a72:	fb02 f303 	mul.w	r3, r2, r3
 8003a76:	4a69      	ldr	r2, [pc, #420]	; (8003c1c <HAL_I2C_Init+0x284>)
 8003a78:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7c:	099b      	lsrs	r3, r3, #6
 8003a7e:	3301      	adds	r3, #1
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6812      	ldr	r2, [r2, #0]
 8003a84:	430b      	orrs	r3, r1
 8003a86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	495c      	ldr	r1, [pc, #368]	; (8003c0c <HAL_I2C_Init+0x274>)
 8003a9c:	428b      	cmp	r3, r1
 8003a9e:	d819      	bhi.n	8003ad4 <HAL_I2C_Init+0x13c>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	1e59      	subs	r1, r3, #1
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aae:	1c59      	adds	r1, r3, #1
 8003ab0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ab4:	400b      	ands	r3, r1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <HAL_I2C_Init+0x138>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	1e59      	subs	r1, r3, #1
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ac8:	3301      	adds	r3, #1
 8003aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ace:	e051      	b.n	8003b74 <HAL_I2C_Init+0x1dc>
 8003ad0:	2304      	movs	r3, #4
 8003ad2:	e04f      	b.n	8003b74 <HAL_I2C_Init+0x1dc>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d111      	bne.n	8003b00 <HAL_I2C_Init+0x168>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	1e58      	subs	r0, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6859      	ldr	r1, [r3, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	440b      	add	r3, r1
 8003aea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aee:	3301      	adds	r3, #1
 8003af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	bf0c      	ite	eq
 8003af8:	2301      	moveq	r3, #1
 8003afa:	2300      	movne	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	e012      	b.n	8003b26 <HAL_I2C_Init+0x18e>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	1e58      	subs	r0, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6859      	ldr	r1, [r3, #4]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	0099      	lsls	r1, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b16:	3301      	adds	r3, #1
 8003b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	bf0c      	ite	eq
 8003b20:	2301      	moveq	r3, #1
 8003b22:	2300      	movne	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_I2C_Init+0x196>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e022      	b.n	8003b74 <HAL_I2C_Init+0x1dc>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10e      	bne.n	8003b54 <HAL_I2C_Init+0x1bc>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	1e58      	subs	r0, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6859      	ldr	r1, [r3, #4]
 8003b3e:	460b      	mov	r3, r1
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	440b      	add	r3, r1
 8003b44:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b48:	3301      	adds	r3, #1
 8003b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b52:	e00f      	b.n	8003b74 <HAL_I2C_Init+0x1dc>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	1e58      	subs	r0, r3, #1
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6859      	ldr	r1, [r3, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	440b      	add	r3, r1
 8003b62:	0099      	lsls	r1, r3, #2
 8003b64:	440b      	add	r3, r1
 8003b66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	6809      	ldr	r1, [r1, #0]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69da      	ldr	r2, [r3, #28]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ba2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6911      	ldr	r1, [r2, #16]
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	68d2      	ldr	r2, [r2, #12]
 8003bae:	4311      	orrs	r1, r2
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6812      	ldr	r2, [r2, #0]
 8003bb4:	430b      	orrs	r3, r1
 8003bb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695a      	ldr	r2, [r3, #20]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0201 	orr.w	r2, r2, #1
 8003be2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2220      	movs	r2, #32
 8003bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	000186a0 	.word	0x000186a0
 8003c10:	001e847f 	.word	0x001e847f
 8003c14:	003d08ff 	.word	0x003d08ff
 8003c18:	431bde83 	.word	0x431bde83
 8003c1c:	10624dd3 	.word	0x10624dd3

08003c20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b20      	cmp	r3, #32
 8003c34:	d129      	bne.n	8003c8a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2224      	movs	r2, #36	; 0x24
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0201 	bic.w	r2, r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0210 	bic.w	r2, r2, #16
 8003c5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f042 0201 	orr.w	r2, r2, #1
 8003c7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2220      	movs	r2, #32
 8003c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	e000      	b.n	8003c8c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003c8a:	2302      	movs	r3, #2
  }
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b20      	cmp	r3, #32
 8003cb0:	d12a      	bne.n	8003d08 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2224      	movs	r2, #36	; 0x24
 8003cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0201 	bic.w	r2, r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003cd2:	89fb      	ldrh	r3, [r7, #14]
 8003cd4:	f023 030f 	bic.w	r3, r3, #15
 8003cd8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	89fb      	ldrh	r3, [r7, #14]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	89fa      	ldrh	r2, [r7, #14]
 8003cea:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0201 	orr.w	r2, r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	e000      	b.n	8003d0a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003d08:	2302      	movs	r3, #2
  }
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
	...

08003d18 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e0bf      	b.n	8003eaa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d106      	bne.n	8003d44 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7fd f91a 	bl	8000f78 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003d5a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6999      	ldr	r1, [r3, #24]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d70:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6899      	ldr	r1, [r3, #8]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	4b4a      	ldr	r3, [pc, #296]	; (8003eb4 <HAL_LTDC_Init+0x19c>)
 8003d8c:	400b      	ands	r3, r1
 8003d8e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	041b      	lsls	r3, r3, #16
 8003d96:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6899      	ldr	r1, [r3, #8]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	699a      	ldr	r2, [r3, #24]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	431a      	orrs	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68d9      	ldr	r1, [r3, #12]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	4b3e      	ldr	r3, [pc, #248]	; (8003eb4 <HAL_LTDC_Init+0x19c>)
 8003dba:	400b      	ands	r3, r1
 8003dbc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	041b      	lsls	r3, r3, #16
 8003dc4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68d9      	ldr	r1, [r3, #12]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a1a      	ldr	r2, [r3, #32]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6919      	ldr	r1, [r3, #16]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	4b33      	ldr	r3, [pc, #204]	; (8003eb4 <HAL_LTDC_Init+0x19c>)
 8003de8:	400b      	ands	r3, r1
 8003dea:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	041b      	lsls	r3, r3, #16
 8003df2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6919      	ldr	r1, [r3, #16]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6959      	ldr	r1, [r3, #20]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	4b27      	ldr	r3, [pc, #156]	; (8003eb4 <HAL_LTDC_Init+0x19c>)
 8003e16:	400b      	ands	r3, r1
 8003e18:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1e:	041b      	lsls	r3, r3, #16
 8003e20:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6959      	ldr	r1, [r3, #20]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e3e:	021b      	lsls	r3, r3, #8
 8003e40:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003e48:	041b      	lsls	r3, r3, #16
 8003e4a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0206 	orr.w	r2, r2, #6
 8003e86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699a      	ldr	r2, [r3, #24]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0201 	orr.w	r2, r2, #1
 8003e96:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	f000f800 	.word	0xf000f800

08003eb8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ece:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f003 0304 	and.w	r3, r3, #4
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d023      	beq.n	8003f22 <HAL_LTDC_IRQHandler+0x6a>
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d01e      	beq.n	8003f22 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0204 	bic.w	r2, r2, #4
 8003ef2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2204      	movs	r2, #4
 8003efa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f02:	f043 0201 	orr.w	r2, r3, #1
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2204      	movs	r2, #4
 8003f10:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f86f 	bl	8004000 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d023      	beq.n	8003f74 <HAL_LTDC_IRQHandler+0xbc>
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d01e      	beq.n	8003f74 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0202 	bic.w	r2, r2, #2
 8003f44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f54:	f043 0202 	orr.w	r2, r3, #2
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2204      	movs	r2, #4
 8003f62:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f846 	bl	8004000 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d01b      	beq.n	8003fb6 <HAL_LTDC_IRQHandler+0xfe>
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d016      	beq.n	8003fb6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0201 	bic.w	r2, r2, #1
 8003f96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f82f 	bl	8004014 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f003 0308 	and.w	r3, r3, #8
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d01b      	beq.n	8003ff8 <HAL_LTDC_IRQHandler+0x140>
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d016      	beq.n	8003ff8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0208 	bic.w	r2, r2, #8
 8003fd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2208      	movs	r2, #8
 8003fe0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f818 	bl	8004028 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003ff8:	bf00      	nop
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800403c:	b5b0      	push	{r4, r5, r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800404e:	2b01      	cmp	r3, #1
 8004050:	d101      	bne.n	8004056 <HAL_LTDC_ConfigLayer+0x1a>
 8004052:	2302      	movs	r3, #2
 8004054:	e02c      	b.n	80040b0 <HAL_LTDC_ConfigLayer+0x74>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2202      	movs	r2, #2
 8004062:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2134      	movs	r1, #52	; 0x34
 800406c:	fb01 f303 	mul.w	r3, r1, r3
 8004070:	4413      	add	r3, r2
 8004072:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	4614      	mov	r4, r2
 800407a:	461d      	mov	r5, r3
 800407c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800407e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004088:	682b      	ldr	r3, [r5, #0]
 800408a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	68b9      	ldr	r1, [r7, #8]
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 f811 	bl	80040b8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2201      	movs	r2, #1
 800409c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bdb0      	pop	{r4, r5, r7, pc}

080040b8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b089      	sub	sp, #36	; 0x24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	0c1b      	lsrs	r3, r3, #16
 80040d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040d4:	4413      	add	r3, r2
 80040d6:	041b      	lsls	r3, r3, #16
 80040d8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	01db      	lsls	r3, r3, #7
 80040e4:	4413      	add	r3, r2
 80040e6:	3384      	adds	r3, #132	; 0x84
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	6812      	ldr	r2, [r2, #0]
 80040ee:	4611      	mov	r1, r2
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	01d2      	lsls	r2, r2, #7
 80040f4:	440a      	add	r2, r1
 80040f6:	3284      	adds	r2, #132	; 0x84
 80040f8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80040fc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	0c1b      	lsrs	r3, r3, #16
 800410a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800410e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004110:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4619      	mov	r1, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	01db      	lsls	r3, r3, #7
 800411c:	440b      	add	r3, r1
 800411e:	3384      	adds	r3, #132	; 0x84
 8004120:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004126:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004136:	4413      	add	r3, r2
 8004138:	041b      	lsls	r3, r3, #16
 800413a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	461a      	mov	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	01db      	lsls	r3, r3, #7
 8004146:	4413      	add	r3, r2
 8004148:	3384      	adds	r3, #132	; 0x84
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	6812      	ldr	r2, [r2, #0]
 8004150:	4611      	mov	r1, r2
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	01d2      	lsls	r2, r2, #7
 8004156:	440a      	add	r2, r1
 8004158:	3284      	adds	r2, #132	; 0x84
 800415a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800415e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800416e:	4413      	add	r3, r2
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4619      	mov	r1, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	01db      	lsls	r3, r3, #7
 800417c:	440b      	add	r3, r1
 800417e:	3384      	adds	r3, #132	; 0x84
 8004180:	4619      	mov	r1, r3
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	4313      	orrs	r3, r2
 8004186:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	01db      	lsls	r3, r3, #7
 8004192:	4413      	add	r3, r2
 8004194:	3384      	adds	r3, #132	; 0x84
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	6812      	ldr	r2, [r2, #0]
 800419c:	4611      	mov	r1, r2
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	01d2      	lsls	r2, r2, #7
 80041a2:	440a      	add	r2, r1
 80041a4:	3284      	adds	r2, #132	; 0x84
 80041a6:	f023 0307 	bic.w	r3, r3, #7
 80041aa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	01db      	lsls	r3, r3, #7
 80041b6:	4413      	add	r3, r2
 80041b8:	3384      	adds	r3, #132	; 0x84
 80041ba:	461a      	mov	r2, r3
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80041c8:	021b      	lsls	r3, r3, #8
 80041ca:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80041d2:	041b      	lsls	r3, r3, #16
 80041d4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	061b      	lsls	r3, r3, #24
 80041dc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	461a      	mov	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	01db      	lsls	r3, r3, #7
 80041e8:	4413      	add	r3, r2
 80041ea:	3384      	adds	r3, #132	; 0x84
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	461a      	mov	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	01db      	lsls	r3, r3, #7
 80041f8:	4413      	add	r3, r2
 80041fa:	3384      	adds	r3, #132	; 0x84
 80041fc:	461a      	mov	r2, r3
 80041fe:	2300      	movs	r3, #0
 8004200:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004208:	461a      	mov	r2, r3
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	431a      	orrs	r2, r3
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	431a      	orrs	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4619      	mov	r1, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	01db      	lsls	r3, r3, #7
 800421c:	440b      	add	r3, r1
 800421e:	3384      	adds	r3, #132	; 0x84
 8004220:	4619      	mov	r1, r3
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	4313      	orrs	r3, r2
 8004226:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	461a      	mov	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	01db      	lsls	r3, r3, #7
 8004232:	4413      	add	r3, r2
 8004234:	3384      	adds	r3, #132	; 0x84
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	6812      	ldr	r2, [r2, #0]
 800423c:	4611      	mov	r1, r2
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	01d2      	lsls	r2, r2, #7
 8004242:	440a      	add	r2, r1
 8004244:	3284      	adds	r2, #132	; 0x84
 8004246:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800424a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	461a      	mov	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	01db      	lsls	r3, r3, #7
 8004256:	4413      	add	r3, r2
 8004258:	3384      	adds	r3, #132	; 0x84
 800425a:	461a      	mov	r2, r3
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	01db      	lsls	r3, r3, #7
 800426c:	4413      	add	r3, r2
 800426e:	3384      	adds	r3, #132	; 0x84
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	6812      	ldr	r2, [r2, #0]
 8004276:	4611      	mov	r1, r2
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	01d2      	lsls	r2, r2, #7
 800427c:	440a      	add	r2, r1
 800427e:	3284      	adds	r2, #132	; 0x84
 8004280:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004284:	f023 0307 	bic.w	r3, r3, #7
 8004288:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	69da      	ldr	r2, [r3, #28]
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	68f9      	ldr	r1, [r7, #12]
 8004294:	6809      	ldr	r1, [r1, #0]
 8004296:	4608      	mov	r0, r1
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	01c9      	lsls	r1, r1, #7
 800429c:	4401      	add	r1, r0
 800429e:	3184      	adds	r1, #132	; 0x84
 80042a0:	4313      	orrs	r3, r2
 80042a2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	461a      	mov	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	01db      	lsls	r3, r3, #7
 80042ae:	4413      	add	r3, r2
 80042b0:	3384      	adds	r3, #132	; 0x84
 80042b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	461a      	mov	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	01db      	lsls	r3, r3, #7
 80042be:	4413      	add	r3, r2
 80042c0:	3384      	adds	r3, #132	; 0x84
 80042c2:	461a      	mov	r2, r3
 80042c4:	2300      	movs	r3, #0
 80042c6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	461a      	mov	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	01db      	lsls	r3, r3, #7
 80042d2:	4413      	add	r3, r2
 80042d4:	3384      	adds	r3, #132	; 0x84
 80042d6:	461a      	mov	r2, r3
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d102      	bne.n	80042ec <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80042e6:	2304      	movs	r3, #4
 80042e8:	61fb      	str	r3, [r7, #28]
 80042ea:	e01b      	b.n	8004324 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d102      	bne.n	80042fa <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80042f4:	2303      	movs	r3, #3
 80042f6:	61fb      	str	r3, [r7, #28]
 80042f8:	e014      	b.n	8004324 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d00b      	beq.n	800431a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004306:	2b02      	cmp	r3, #2
 8004308:	d007      	beq.n	800431a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800430e:	2b03      	cmp	r3, #3
 8004310:	d003      	beq.n	800431a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004316:	2b07      	cmp	r3, #7
 8004318:	d102      	bne.n	8004320 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800431a:	2302      	movs	r3, #2
 800431c:	61fb      	str	r3, [r7, #28]
 800431e:	e001      	b.n	8004324 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004320:	2301      	movs	r3, #1
 8004322:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	461a      	mov	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	01db      	lsls	r3, r3, #7
 800432e:	4413      	add	r3, r2
 8004330:	3384      	adds	r3, #132	; 0x84
 8004332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	6812      	ldr	r2, [r2, #0]
 8004338:	4611      	mov	r1, r2
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	01d2      	lsls	r2, r2, #7
 800433e:	440a      	add	r2, r1
 8004340:	3284      	adds	r2, #132	; 0x84
 8004342:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004346:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434c:	69fa      	ldr	r2, [r7, #28]
 800434e:	fb02 f303 	mul.w	r3, r2, r3
 8004352:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	6859      	ldr	r1, [r3, #4]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	1acb      	subs	r3, r1, r3
 800435e:	69f9      	ldr	r1, [r7, #28]
 8004360:	fb01 f303 	mul.w	r3, r1, r3
 8004364:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004366:	68f9      	ldr	r1, [r7, #12]
 8004368:	6809      	ldr	r1, [r1, #0]
 800436a:	4608      	mov	r0, r1
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	01c9      	lsls	r1, r1, #7
 8004370:	4401      	add	r1, r0
 8004372:	3184      	adds	r1, #132	; 0x84
 8004374:	4313      	orrs	r3, r2
 8004376:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	461a      	mov	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	01db      	lsls	r3, r3, #7
 8004382:	4413      	add	r3, r2
 8004384:	3384      	adds	r3, #132	; 0x84
 8004386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	6812      	ldr	r2, [r2, #0]
 800438c:	4611      	mov	r1, r2
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	01d2      	lsls	r2, r2, #7
 8004392:	440a      	add	r2, r1
 8004394:	3284      	adds	r2, #132	; 0x84
 8004396:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800439a:	f023 0307 	bic.w	r3, r3, #7
 800439e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	461a      	mov	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	01db      	lsls	r3, r3, #7
 80043aa:	4413      	add	r3, r2
 80043ac:	3384      	adds	r3, #132	; 0x84
 80043ae:	461a      	mov	r2, r3
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	461a      	mov	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	01db      	lsls	r3, r3, #7
 80043c0:	4413      	add	r3, r2
 80043c2:	3384      	adds	r3, #132	; 0x84
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	6812      	ldr	r2, [r2, #0]
 80043ca:	4611      	mov	r1, r2
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	01d2      	lsls	r2, r2, #7
 80043d0:	440a      	add	r2, r1
 80043d2:	3284      	adds	r2, #132	; 0x84
 80043d4:	f043 0301 	orr.w	r3, r3, #1
 80043d8:	6013      	str	r3, [r2, #0]
}
 80043da:	bf00      	nop
 80043dc:	3724      	adds	r7, #36	; 0x24
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
	...

080043e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e267      	b.n	80048ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d075      	beq.n	80044f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004406:	4b88      	ldr	r3, [pc, #544]	; (8004628 <HAL_RCC_OscConfig+0x240>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 030c 	and.w	r3, r3, #12
 800440e:	2b04      	cmp	r3, #4
 8004410:	d00c      	beq.n	800442c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004412:	4b85      	ldr	r3, [pc, #532]	; (8004628 <HAL_RCC_OscConfig+0x240>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800441a:	2b08      	cmp	r3, #8
 800441c:	d112      	bne.n	8004444 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800441e:	4b82      	ldr	r3, [pc, #520]	; (8004628 <HAL_RCC_OscConfig+0x240>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004426:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800442a:	d10b      	bne.n	8004444 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800442c:	4b7e      	ldr	r3, [pc, #504]	; (8004628 <HAL_RCC_OscConfig+0x240>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d05b      	beq.n	80044f0 <HAL_RCC_OscConfig+0x108>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d157      	bne.n	80044f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e242      	b.n	80048ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800444c:	d106      	bne.n	800445c <HAL_RCC_OscConfig+0x74>
 800444e:	4b76      	ldr	r3, [pc, #472]	; (8004628 <HAL_RCC_OscConfig+0x240>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a75      	ldr	r2, [pc, #468]	; (8004628 <HAL_RCC_OscConfig+0x240>)
 8004454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	e01d      	b.n	8004498 <HAL_RCC_OscConfig+0xb0>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004464:	d10c      	bne.n	8004480 <HAL_RCC_OscConfig+0x98>
 8004466:	4b70      	ldr	r3, [pc, #448]	; (8004628 <HAL_RCC_OscConfig+0x240>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a6f      	ldr	r2, [pc, #444]	; (8004628 <HAL_RCC_OscConfig+0x240>)
 800446c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	4b6d      	ldr	r3, [pc, #436]	; (8004628 <HAL_RCC_OscConfig+0x240>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a6c      	ldr	r2, [pc, #432]	; (8004628 <HAL_RCC_OscConfig+0x240>)
 8004478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	e00b      	b.n	8004498 <HAL_RCC_OscConfig+0xb0>
 8004480:	4b69      	ldr	r3, [pc, #420]	; (8004628 <HAL_RCC_OscConfig+0x240>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a68      	ldr	r2, [pc, #416]	; (8004628 <HAL_RCC_OscConfig+0x240>)
 8004486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800448a:	6013      	str	r3, [r2, #0]
 800448c:	4b66      	ldr	r3, [pc, #408]	; (8004628 <HAL_RCC_OscConfig+0x240>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a65      	ldr	r2, [pc, #404]	; (8004628 <HAL_RCC_OscConfig+0x240>)
 8004492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004496:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d013      	beq.n	80044c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a0:	f7fd f952 	bl	8001748 <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044a8:	f7fd f94e 	bl	8001748 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b64      	cmp	r3, #100	; 0x64
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e207      	b.n	80048ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ba:	4b5b      	ldr	r3, [pc, #364]	; (8004628 <HAL_RCC_OscConfig+0x240>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0f0      	beq.n	80044a8 <HAL_RCC_OscConfig+0xc0>
 80044c6:	e014      	b.n	80044f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c8:	f7fd f93e 	bl	8001748 <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044d0:	f7fd f93a 	bl	8001748 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b64      	cmp	r3, #100	; 0x64
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e1f3      	b.n	80048ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044e2:	4b51      	ldr	r3, [pc, #324]	; (8004628 <HAL_RCC_OscConfig+0x240>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1f0      	bne.n	80044d0 <HAL_RCC_OscConfig+0xe8>
 80044ee:	e000      	b.n	80044f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d063      	beq.n	80045c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044fe:	4b4a      	ldr	r3, [pc, #296]	; (8004628 <HAL_RCC_OscConfig+0x240>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 030c 	and.w	r3, r3, #12
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00b      	beq.n	8004522 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800450a:	4b47      	ldr	r3, [pc, #284]	; (8004628 <HAL_RCC_OscConfig+0x240>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004512:	2b08      	cmp	r3, #8
 8004514:	d11c      	bne.n	8004550 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004516:	4b44      	ldr	r3, [pc, #272]	; (8004628 <HAL_RCC_OscConfig+0x240>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d116      	bne.n	8004550 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004522:	4b41      	ldr	r3, [pc, #260]	; (8004628 <HAL_RCC_OscConfig+0x240>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d005      	beq.n	800453a <HAL_RCC_OscConfig+0x152>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d001      	beq.n	800453a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e1c7      	b.n	80048ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800453a:	4b3b      	ldr	r3, [pc, #236]	; (8004628 <HAL_RCC_OscConfig+0x240>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	4937      	ldr	r1, [pc, #220]	; (8004628 <HAL_RCC_OscConfig+0x240>)
 800454a:	4313      	orrs	r3, r2
 800454c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800454e:	e03a      	b.n	80045c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d020      	beq.n	800459a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004558:	4b34      	ldr	r3, [pc, #208]	; (800462c <HAL_RCC_OscConfig+0x244>)
 800455a:	2201      	movs	r2, #1
 800455c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455e:	f7fd f8f3 	bl	8001748 <HAL_GetTick>
 8004562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004564:	e008      	b.n	8004578 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004566:	f7fd f8ef 	bl	8001748 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e1a8      	b.n	80048ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004578:	4b2b      	ldr	r3, [pc, #172]	; (8004628 <HAL_RCC_OscConfig+0x240>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0f0      	beq.n	8004566 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004584:	4b28      	ldr	r3, [pc, #160]	; (8004628 <HAL_RCC_OscConfig+0x240>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	00db      	lsls	r3, r3, #3
 8004592:	4925      	ldr	r1, [pc, #148]	; (8004628 <HAL_RCC_OscConfig+0x240>)
 8004594:	4313      	orrs	r3, r2
 8004596:	600b      	str	r3, [r1, #0]
 8004598:	e015      	b.n	80045c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800459a:	4b24      	ldr	r3, [pc, #144]	; (800462c <HAL_RCC_OscConfig+0x244>)
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a0:	f7fd f8d2 	bl	8001748 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045a8:	f7fd f8ce 	bl	8001748 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e187      	b.n	80048ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ba:	4b1b      	ldr	r3, [pc, #108]	; (8004628 <HAL_RCC_OscConfig+0x240>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1f0      	bne.n	80045a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0308 	and.w	r3, r3, #8
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d036      	beq.n	8004640 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d016      	beq.n	8004608 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045da:	4b15      	ldr	r3, [pc, #84]	; (8004630 <HAL_RCC_OscConfig+0x248>)
 80045dc:	2201      	movs	r2, #1
 80045de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e0:	f7fd f8b2 	bl	8001748 <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045e8:	f7fd f8ae 	bl	8001748 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e167      	b.n	80048ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045fa:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <HAL_RCC_OscConfig+0x240>)
 80045fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0f0      	beq.n	80045e8 <HAL_RCC_OscConfig+0x200>
 8004606:	e01b      	b.n	8004640 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004608:	4b09      	ldr	r3, [pc, #36]	; (8004630 <HAL_RCC_OscConfig+0x248>)
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800460e:	f7fd f89b 	bl	8001748 <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004614:	e00e      	b.n	8004634 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004616:	f7fd f897 	bl	8001748 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d907      	bls.n	8004634 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e150      	b.n	80048ca <HAL_RCC_OscConfig+0x4e2>
 8004628:	40023800 	.word	0x40023800
 800462c:	42470000 	.word	0x42470000
 8004630:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004634:	4b88      	ldr	r3, [pc, #544]	; (8004858 <HAL_RCC_OscConfig+0x470>)
 8004636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1ea      	bne.n	8004616 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 8097 	beq.w	800477c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800464e:	2300      	movs	r3, #0
 8004650:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004652:	4b81      	ldr	r3, [pc, #516]	; (8004858 <HAL_RCC_OscConfig+0x470>)
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10f      	bne.n	800467e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800465e:	2300      	movs	r3, #0
 8004660:	60bb      	str	r3, [r7, #8]
 8004662:	4b7d      	ldr	r3, [pc, #500]	; (8004858 <HAL_RCC_OscConfig+0x470>)
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	4a7c      	ldr	r2, [pc, #496]	; (8004858 <HAL_RCC_OscConfig+0x470>)
 8004668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800466c:	6413      	str	r3, [r2, #64]	; 0x40
 800466e:	4b7a      	ldr	r3, [pc, #488]	; (8004858 <HAL_RCC_OscConfig+0x470>)
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004676:	60bb      	str	r3, [r7, #8]
 8004678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800467a:	2301      	movs	r3, #1
 800467c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800467e:	4b77      	ldr	r3, [pc, #476]	; (800485c <HAL_RCC_OscConfig+0x474>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004686:	2b00      	cmp	r3, #0
 8004688:	d118      	bne.n	80046bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800468a:	4b74      	ldr	r3, [pc, #464]	; (800485c <HAL_RCC_OscConfig+0x474>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a73      	ldr	r2, [pc, #460]	; (800485c <HAL_RCC_OscConfig+0x474>)
 8004690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004696:	f7fd f857 	bl	8001748 <HAL_GetTick>
 800469a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800469c:	e008      	b.n	80046b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800469e:	f7fd f853 	bl	8001748 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e10c      	b.n	80048ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b0:	4b6a      	ldr	r3, [pc, #424]	; (800485c <HAL_RCC_OscConfig+0x474>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d0f0      	beq.n	800469e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d106      	bne.n	80046d2 <HAL_RCC_OscConfig+0x2ea>
 80046c4:	4b64      	ldr	r3, [pc, #400]	; (8004858 <HAL_RCC_OscConfig+0x470>)
 80046c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c8:	4a63      	ldr	r2, [pc, #396]	; (8004858 <HAL_RCC_OscConfig+0x470>)
 80046ca:	f043 0301 	orr.w	r3, r3, #1
 80046ce:	6713      	str	r3, [r2, #112]	; 0x70
 80046d0:	e01c      	b.n	800470c <HAL_RCC_OscConfig+0x324>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	2b05      	cmp	r3, #5
 80046d8:	d10c      	bne.n	80046f4 <HAL_RCC_OscConfig+0x30c>
 80046da:	4b5f      	ldr	r3, [pc, #380]	; (8004858 <HAL_RCC_OscConfig+0x470>)
 80046dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046de:	4a5e      	ldr	r2, [pc, #376]	; (8004858 <HAL_RCC_OscConfig+0x470>)
 80046e0:	f043 0304 	orr.w	r3, r3, #4
 80046e4:	6713      	str	r3, [r2, #112]	; 0x70
 80046e6:	4b5c      	ldr	r3, [pc, #368]	; (8004858 <HAL_RCC_OscConfig+0x470>)
 80046e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ea:	4a5b      	ldr	r2, [pc, #364]	; (8004858 <HAL_RCC_OscConfig+0x470>)
 80046ec:	f043 0301 	orr.w	r3, r3, #1
 80046f0:	6713      	str	r3, [r2, #112]	; 0x70
 80046f2:	e00b      	b.n	800470c <HAL_RCC_OscConfig+0x324>
 80046f4:	4b58      	ldr	r3, [pc, #352]	; (8004858 <HAL_RCC_OscConfig+0x470>)
 80046f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f8:	4a57      	ldr	r2, [pc, #348]	; (8004858 <HAL_RCC_OscConfig+0x470>)
 80046fa:	f023 0301 	bic.w	r3, r3, #1
 80046fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004700:	4b55      	ldr	r3, [pc, #340]	; (8004858 <HAL_RCC_OscConfig+0x470>)
 8004702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004704:	4a54      	ldr	r2, [pc, #336]	; (8004858 <HAL_RCC_OscConfig+0x470>)
 8004706:	f023 0304 	bic.w	r3, r3, #4
 800470a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d015      	beq.n	8004740 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004714:	f7fd f818 	bl	8001748 <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800471a:	e00a      	b.n	8004732 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800471c:	f7fd f814 	bl	8001748 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	f241 3288 	movw	r2, #5000	; 0x1388
 800472a:	4293      	cmp	r3, r2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e0cb      	b.n	80048ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004732:	4b49      	ldr	r3, [pc, #292]	; (8004858 <HAL_RCC_OscConfig+0x470>)
 8004734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0ee      	beq.n	800471c <HAL_RCC_OscConfig+0x334>
 800473e:	e014      	b.n	800476a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004740:	f7fd f802 	bl	8001748 <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004746:	e00a      	b.n	800475e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004748:	f7fc fffe 	bl	8001748 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	f241 3288 	movw	r2, #5000	; 0x1388
 8004756:	4293      	cmp	r3, r2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e0b5      	b.n	80048ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800475e:	4b3e      	ldr	r3, [pc, #248]	; (8004858 <HAL_RCC_OscConfig+0x470>)
 8004760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1ee      	bne.n	8004748 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800476a:	7dfb      	ldrb	r3, [r7, #23]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d105      	bne.n	800477c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004770:	4b39      	ldr	r3, [pc, #228]	; (8004858 <HAL_RCC_OscConfig+0x470>)
 8004772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004774:	4a38      	ldr	r2, [pc, #224]	; (8004858 <HAL_RCC_OscConfig+0x470>)
 8004776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800477a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 80a1 	beq.w	80048c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004786:	4b34      	ldr	r3, [pc, #208]	; (8004858 <HAL_RCC_OscConfig+0x470>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f003 030c 	and.w	r3, r3, #12
 800478e:	2b08      	cmp	r3, #8
 8004790:	d05c      	beq.n	800484c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	2b02      	cmp	r3, #2
 8004798:	d141      	bne.n	800481e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800479a:	4b31      	ldr	r3, [pc, #196]	; (8004860 <HAL_RCC_OscConfig+0x478>)
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a0:	f7fc ffd2 	bl	8001748 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047a8:	f7fc ffce 	bl	8001748 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e087      	b.n	80048ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ba:	4b27      	ldr	r3, [pc, #156]	; (8004858 <HAL_RCC_OscConfig+0x470>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1f0      	bne.n	80047a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	69da      	ldr	r2, [r3, #28]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	019b      	lsls	r3, r3, #6
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047dc:	085b      	lsrs	r3, r3, #1
 80047de:	3b01      	subs	r3, #1
 80047e0:	041b      	lsls	r3, r3, #16
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e8:	061b      	lsls	r3, r3, #24
 80047ea:	491b      	ldr	r1, [pc, #108]	; (8004858 <HAL_RCC_OscConfig+0x470>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047f0:	4b1b      	ldr	r3, [pc, #108]	; (8004860 <HAL_RCC_OscConfig+0x478>)
 80047f2:	2201      	movs	r2, #1
 80047f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f6:	f7fc ffa7 	bl	8001748 <HAL_GetTick>
 80047fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047fc:	e008      	b.n	8004810 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047fe:	f7fc ffa3 	bl	8001748 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d901      	bls.n	8004810 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e05c      	b.n	80048ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004810:	4b11      	ldr	r3, [pc, #68]	; (8004858 <HAL_RCC_OscConfig+0x470>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d0f0      	beq.n	80047fe <HAL_RCC_OscConfig+0x416>
 800481c:	e054      	b.n	80048c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800481e:	4b10      	ldr	r3, [pc, #64]	; (8004860 <HAL_RCC_OscConfig+0x478>)
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004824:	f7fc ff90 	bl	8001748 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800482c:	f7fc ff8c 	bl	8001748 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e045      	b.n	80048ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800483e:	4b06      	ldr	r3, [pc, #24]	; (8004858 <HAL_RCC_OscConfig+0x470>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1f0      	bne.n	800482c <HAL_RCC_OscConfig+0x444>
 800484a:	e03d      	b.n	80048c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d107      	bne.n	8004864 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e038      	b.n	80048ca <HAL_RCC_OscConfig+0x4e2>
 8004858:	40023800 	.word	0x40023800
 800485c:	40007000 	.word	0x40007000
 8004860:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004864:	4b1b      	ldr	r3, [pc, #108]	; (80048d4 <HAL_RCC_OscConfig+0x4ec>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d028      	beq.n	80048c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800487c:	429a      	cmp	r2, r3
 800487e:	d121      	bne.n	80048c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800488a:	429a      	cmp	r2, r3
 800488c:	d11a      	bne.n	80048c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004894:	4013      	ands	r3, r2
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800489a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800489c:	4293      	cmp	r3, r2
 800489e:	d111      	bne.n	80048c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048aa:	085b      	lsrs	r3, r3, #1
 80048ac:	3b01      	subs	r3, #1
 80048ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d107      	bne.n	80048c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d001      	beq.n	80048c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e000      	b.n	80048ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	40023800 	.word	0x40023800

080048d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e0cc      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048ec:	4b68      	ldr	r3, [pc, #416]	; (8004a90 <HAL_RCC_ClockConfig+0x1b8>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 030f 	and.w	r3, r3, #15
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d90c      	bls.n	8004914 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048fa:	4b65      	ldr	r3, [pc, #404]	; (8004a90 <HAL_RCC_ClockConfig+0x1b8>)
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	b2d2      	uxtb	r2, r2
 8004900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004902:	4b63      	ldr	r3, [pc, #396]	; (8004a90 <HAL_RCC_ClockConfig+0x1b8>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 030f 	and.w	r3, r3, #15
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	429a      	cmp	r2, r3
 800490e:	d001      	beq.n	8004914 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e0b8      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d020      	beq.n	8004962 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	d005      	beq.n	8004938 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800492c:	4b59      	ldr	r3, [pc, #356]	; (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	4a58      	ldr	r2, [pc, #352]	; (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004932:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004936:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0308 	and.w	r3, r3, #8
 8004940:	2b00      	cmp	r3, #0
 8004942:	d005      	beq.n	8004950 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004944:	4b53      	ldr	r3, [pc, #332]	; (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	4a52      	ldr	r2, [pc, #328]	; (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 800494a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800494e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004950:	4b50      	ldr	r3, [pc, #320]	; (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	494d      	ldr	r1, [pc, #308]	; (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 800495e:	4313      	orrs	r3, r2
 8004960:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d044      	beq.n	80049f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d107      	bne.n	8004986 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004976:	4b47      	ldr	r3, [pc, #284]	; (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d119      	bne.n	80049b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e07f      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2b02      	cmp	r3, #2
 800498c:	d003      	beq.n	8004996 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004992:	2b03      	cmp	r3, #3
 8004994:	d107      	bne.n	80049a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004996:	4b3f      	ldr	r3, [pc, #252]	; (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d109      	bne.n	80049b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e06f      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049a6:	4b3b      	ldr	r3, [pc, #236]	; (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e067      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049b6:	4b37      	ldr	r3, [pc, #220]	; (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f023 0203 	bic.w	r2, r3, #3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	4934      	ldr	r1, [pc, #208]	; (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049c8:	f7fc febe 	bl	8001748 <HAL_GetTick>
 80049cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ce:	e00a      	b.n	80049e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049d0:	f7fc feba 	bl	8001748 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	f241 3288 	movw	r2, #5000	; 0x1388
 80049de:	4293      	cmp	r3, r2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e04f      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049e6:	4b2b      	ldr	r3, [pc, #172]	; (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f003 020c 	and.w	r2, r3, #12
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d1eb      	bne.n	80049d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049f8:	4b25      	ldr	r3, [pc, #148]	; (8004a90 <HAL_RCC_ClockConfig+0x1b8>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 030f 	and.w	r3, r3, #15
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d20c      	bcs.n	8004a20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a06:	4b22      	ldr	r3, [pc, #136]	; (8004a90 <HAL_RCC_ClockConfig+0x1b8>)
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	b2d2      	uxtb	r2, r2
 8004a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a0e:	4b20      	ldr	r3, [pc, #128]	; (8004a90 <HAL_RCC_ClockConfig+0x1b8>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 030f 	and.w	r3, r3, #15
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d001      	beq.n	8004a20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e032      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d008      	beq.n	8004a3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a2c:	4b19      	ldr	r3, [pc, #100]	; (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	4916      	ldr	r1, [pc, #88]	; (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0308 	and.w	r3, r3, #8
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d009      	beq.n	8004a5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a4a:	4b12      	ldr	r3, [pc, #72]	; (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	00db      	lsls	r3, r3, #3
 8004a58:	490e      	ldr	r1, [pc, #56]	; (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a5e:	f000 f821 	bl	8004aa4 <HAL_RCC_GetSysClockFreq>
 8004a62:	4602      	mov	r2, r0
 8004a64:	4b0b      	ldr	r3, [pc, #44]	; (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	091b      	lsrs	r3, r3, #4
 8004a6a:	f003 030f 	and.w	r3, r3, #15
 8004a6e:	490a      	ldr	r1, [pc, #40]	; (8004a98 <HAL_RCC_ClockConfig+0x1c0>)
 8004a70:	5ccb      	ldrb	r3, [r1, r3]
 8004a72:	fa22 f303 	lsr.w	r3, r2, r3
 8004a76:	4a09      	ldr	r2, [pc, #36]	; (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 8004a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a7a:	4b09      	ldr	r3, [pc, #36]	; (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fc fcf8 	bl	8001474 <HAL_InitTick>

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	40023c00 	.word	0x40023c00
 8004a94:	40023800 	.word	0x40023800
 8004a98:	0800d190 	.word	0x0800d190
 8004a9c:	20000000 	.word	0x20000000
 8004aa0:	20000004 	.word	0x20000004

08004aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aa8:	b094      	sub	sp, #80	; 0x50
 8004aaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	647b      	str	r3, [r7, #68]	; 0x44
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004abc:	4b79      	ldr	r3, [pc, #484]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f003 030c 	and.w	r3, r3, #12
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d00d      	beq.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x40>
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	f200 80e1 	bhi.w	8004c90 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d002      	beq.n	8004ad8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	d003      	beq.n	8004ade <HAL_RCC_GetSysClockFreq+0x3a>
 8004ad6:	e0db      	b.n	8004c90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ad8:	4b73      	ldr	r3, [pc, #460]	; (8004ca8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ada:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004adc:	e0db      	b.n	8004c96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ade:	4b73      	ldr	r3, [pc, #460]	; (8004cac <HAL_RCC_GetSysClockFreq+0x208>)
 8004ae0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ae2:	e0d8      	b.n	8004c96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ae4:	4b6f      	ldr	r3, [pc, #444]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aee:	4b6d      	ldr	r3, [pc, #436]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d063      	beq.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004afa:	4b6a      	ldr	r3, [pc, #424]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	099b      	lsrs	r3, r3, #6
 8004b00:	2200      	movs	r2, #0
 8004b02:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b04:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b0c:	633b      	str	r3, [r7, #48]	; 0x30
 8004b0e:	2300      	movs	r3, #0
 8004b10:	637b      	str	r3, [r7, #52]	; 0x34
 8004b12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004b16:	4622      	mov	r2, r4
 8004b18:	462b      	mov	r3, r5
 8004b1a:	f04f 0000 	mov.w	r0, #0
 8004b1e:	f04f 0100 	mov.w	r1, #0
 8004b22:	0159      	lsls	r1, r3, #5
 8004b24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b28:	0150      	lsls	r0, r2, #5
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	4621      	mov	r1, r4
 8004b30:	1a51      	subs	r1, r2, r1
 8004b32:	6139      	str	r1, [r7, #16]
 8004b34:	4629      	mov	r1, r5
 8004b36:	eb63 0301 	sbc.w	r3, r3, r1
 8004b3a:	617b      	str	r3, [r7, #20]
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b48:	4659      	mov	r1, fp
 8004b4a:	018b      	lsls	r3, r1, #6
 8004b4c:	4651      	mov	r1, sl
 8004b4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b52:	4651      	mov	r1, sl
 8004b54:	018a      	lsls	r2, r1, #6
 8004b56:	4651      	mov	r1, sl
 8004b58:	ebb2 0801 	subs.w	r8, r2, r1
 8004b5c:	4659      	mov	r1, fp
 8004b5e:	eb63 0901 	sbc.w	r9, r3, r1
 8004b62:	f04f 0200 	mov.w	r2, #0
 8004b66:	f04f 0300 	mov.w	r3, #0
 8004b6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b76:	4690      	mov	r8, r2
 8004b78:	4699      	mov	r9, r3
 8004b7a:	4623      	mov	r3, r4
 8004b7c:	eb18 0303 	adds.w	r3, r8, r3
 8004b80:	60bb      	str	r3, [r7, #8]
 8004b82:	462b      	mov	r3, r5
 8004b84:	eb49 0303 	adc.w	r3, r9, r3
 8004b88:	60fb      	str	r3, [r7, #12]
 8004b8a:	f04f 0200 	mov.w	r2, #0
 8004b8e:	f04f 0300 	mov.w	r3, #0
 8004b92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b96:	4629      	mov	r1, r5
 8004b98:	024b      	lsls	r3, r1, #9
 8004b9a:	4621      	mov	r1, r4
 8004b9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ba0:	4621      	mov	r1, r4
 8004ba2:	024a      	lsls	r2, r1, #9
 8004ba4:	4610      	mov	r0, r2
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004baa:	2200      	movs	r2, #0
 8004bac:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bb0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bb4:	f7fb fb1c 	bl	80001f0 <__aeabi_uldivmod>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bc0:	e058      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bc2:	4b38      	ldr	r3, [pc, #224]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	099b      	lsrs	r3, r3, #6
 8004bc8:	2200      	movs	r2, #0
 8004bca:	4618      	mov	r0, r3
 8004bcc:	4611      	mov	r1, r2
 8004bce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004bd2:	623b      	str	r3, [r7, #32]
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8004bd8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004bdc:	4642      	mov	r2, r8
 8004bde:	464b      	mov	r3, r9
 8004be0:	f04f 0000 	mov.w	r0, #0
 8004be4:	f04f 0100 	mov.w	r1, #0
 8004be8:	0159      	lsls	r1, r3, #5
 8004bea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bee:	0150      	lsls	r0, r2, #5
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4641      	mov	r1, r8
 8004bf6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bfa:	4649      	mov	r1, r9
 8004bfc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c00:	f04f 0200 	mov.w	r2, #0
 8004c04:	f04f 0300 	mov.w	r3, #0
 8004c08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c14:	ebb2 040a 	subs.w	r4, r2, sl
 8004c18:	eb63 050b 	sbc.w	r5, r3, fp
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	f04f 0300 	mov.w	r3, #0
 8004c24:	00eb      	lsls	r3, r5, #3
 8004c26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c2a:	00e2      	lsls	r2, r4, #3
 8004c2c:	4614      	mov	r4, r2
 8004c2e:	461d      	mov	r5, r3
 8004c30:	4643      	mov	r3, r8
 8004c32:	18e3      	adds	r3, r4, r3
 8004c34:	603b      	str	r3, [r7, #0]
 8004c36:	464b      	mov	r3, r9
 8004c38:	eb45 0303 	adc.w	r3, r5, r3
 8004c3c:	607b      	str	r3, [r7, #4]
 8004c3e:	f04f 0200 	mov.w	r2, #0
 8004c42:	f04f 0300 	mov.w	r3, #0
 8004c46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c4a:	4629      	mov	r1, r5
 8004c4c:	028b      	lsls	r3, r1, #10
 8004c4e:	4621      	mov	r1, r4
 8004c50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c54:	4621      	mov	r1, r4
 8004c56:	028a      	lsls	r2, r1, #10
 8004c58:	4610      	mov	r0, r2
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c5e:	2200      	movs	r2, #0
 8004c60:	61bb      	str	r3, [r7, #24]
 8004c62:	61fa      	str	r2, [r7, #28]
 8004c64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c68:	f7fb fac2 	bl	80001f0 <__aeabi_uldivmod>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	460b      	mov	r3, r1
 8004c70:	4613      	mov	r3, r2
 8004c72:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c74:	4b0b      	ldr	r3, [pc, #44]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	0c1b      	lsrs	r3, r3, #16
 8004c7a:	f003 0303 	and.w	r3, r3, #3
 8004c7e:	3301      	adds	r3, #1
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004c84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c8e:	e002      	b.n	8004c96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c90:	4b05      	ldr	r3, [pc, #20]	; (8004ca8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3750      	adds	r7, #80	; 0x50
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ca2:	bf00      	nop
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	00f42400 	.word	0x00f42400
 8004cac:	007a1200 	.word	0x007a1200

08004cb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cb4:	4b03      	ldr	r3, [pc, #12]	; (8004cc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	20000000 	.word	0x20000000

08004cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ccc:	f7ff fff0 	bl	8004cb0 <HAL_RCC_GetHCLKFreq>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	4b05      	ldr	r3, [pc, #20]	; (8004ce8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	0a9b      	lsrs	r3, r3, #10
 8004cd8:	f003 0307 	and.w	r3, r3, #7
 8004cdc:	4903      	ldr	r1, [pc, #12]	; (8004cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cde:	5ccb      	ldrb	r3, [r1, r3]
 8004ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40023800 	.word	0x40023800
 8004cec:	0800d1a0 	.word	0x0800d1a0

08004cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004cf4:	f7ff ffdc 	bl	8004cb0 <HAL_RCC_GetHCLKFreq>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	0b5b      	lsrs	r3, r3, #13
 8004d00:	f003 0307 	and.w	r3, r3, #7
 8004d04:	4903      	ldr	r1, [pc, #12]	; (8004d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d06:	5ccb      	ldrb	r3, [r1, r3]
 8004d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	40023800 	.word	0x40023800
 8004d14:	0800d1a0 	.word	0x0800d1a0

08004d18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	220f      	movs	r2, #15
 8004d26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d28:	4b12      	ldr	r3, [pc, #72]	; (8004d74 <HAL_RCC_GetClockConfig+0x5c>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 0203 	and.w	r2, r3, #3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d34:	4b0f      	ldr	r3, [pc, #60]	; (8004d74 <HAL_RCC_GetClockConfig+0x5c>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d40:	4b0c      	ldr	r3, [pc, #48]	; (8004d74 <HAL_RCC_GetClockConfig+0x5c>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004d4c:	4b09      	ldr	r3, [pc, #36]	; (8004d74 <HAL_RCC_GetClockConfig+0x5c>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	08db      	lsrs	r3, r3, #3
 8004d52:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d5a:	4b07      	ldr	r3, [pc, #28]	; (8004d78 <HAL_RCC_GetClockConfig+0x60>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 020f 	and.w	r2, r3, #15
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	601a      	str	r2, [r3, #0]
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	40023800 	.word	0x40023800
 8004d78:	40023c00 	.word	0x40023c00

08004d7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10b      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d105      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d075      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004db0:	4b91      	ldr	r3, [pc, #580]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004db6:	f7fc fcc7 	bl	8001748 <HAL_GetTick>
 8004dba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004dbc:	e008      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004dbe:	f7fc fcc3 	bl	8001748 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e189      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004dd0:	4b8a      	ldr	r3, [pc, #552]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1f0      	bne.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d009      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	019a      	lsls	r2, r3, #6
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	071b      	lsls	r3, r3, #28
 8004df4:	4981      	ldr	r1, [pc, #516]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d01f      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e08:	4b7c      	ldr	r3, [pc, #496]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e0e:	0f1b      	lsrs	r3, r3, #28
 8004e10:	f003 0307 	and.w	r3, r3, #7
 8004e14:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	019a      	lsls	r2, r3, #6
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	061b      	lsls	r3, r3, #24
 8004e22:	431a      	orrs	r2, r3
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	071b      	lsls	r3, r3, #28
 8004e28:	4974      	ldr	r1, [pc, #464]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004e30:	4b72      	ldr	r3, [pc, #456]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e36:	f023 021f 	bic.w	r2, r3, #31
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	496e      	ldr	r1, [pc, #440]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00d      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	019a      	lsls	r2, r3, #6
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	061b      	lsls	r3, r3, #24
 8004e60:	431a      	orrs	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	071b      	lsls	r3, r3, #28
 8004e68:	4964      	ldr	r1, [pc, #400]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e70:	4b61      	ldr	r3, [pc, #388]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004e72:	2201      	movs	r2, #1
 8004e74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e76:	f7fc fc67 	bl	8001748 <HAL_GetTick>
 8004e7a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e7c:	e008      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e7e:	f7fc fc63 	bl	8001748 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e129      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e90:	4b5a      	ldr	r3, [pc, #360]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d0f0      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d105      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d079      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004eb4:	4b52      	ldr	r3, [pc, #328]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004eba:	f7fc fc45 	bl	8001748 <HAL_GetTick>
 8004ebe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ec0:	e008      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004ec2:	f7fc fc41 	bl	8001748 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e107      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ed4:	4b49      	ldr	r3, [pc, #292]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004edc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ee0:	d0ef      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0304 	and.w	r3, r3, #4
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d020      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004eee:	4b43      	ldr	r3, [pc, #268]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef4:	0f1b      	lsrs	r3, r3, #28
 8004ef6:	f003 0307 	and.w	r3, r3, #7
 8004efa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	019a      	lsls	r2, r3, #6
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	061b      	lsls	r3, r3, #24
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	071b      	lsls	r3, r3, #28
 8004f0e:	493b      	ldr	r1, [pc, #236]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004f16:	4b39      	ldr	r3, [pc, #228]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	3b01      	subs	r3, #1
 8004f26:	021b      	lsls	r3, r3, #8
 8004f28:	4934      	ldr	r1, [pc, #208]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0308 	and.w	r3, r3, #8
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d01e      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f3c:	4b2f      	ldr	r3, [pc, #188]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f42:	0e1b      	lsrs	r3, r3, #24
 8004f44:	f003 030f 	and.w	r3, r3, #15
 8004f48:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	019a      	lsls	r2, r3, #6
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	061b      	lsls	r3, r3, #24
 8004f54:	431a      	orrs	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	071b      	lsls	r3, r3, #28
 8004f5c:	4927      	ldr	r1, [pc, #156]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f64:	4b25      	ldr	r3, [pc, #148]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f6a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	4922      	ldr	r1, [pc, #136]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004f7a:	4b21      	ldr	r3, [pc, #132]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f80:	f7fc fbe2 	bl	8001748 <HAL_GetTick>
 8004f84:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f86:	e008      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004f88:	f7fc fbde 	bl	8001748 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e0a4      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f9a:	4b18      	ldr	r3, [pc, #96]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fa6:	d1ef      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0320 	and.w	r3, r3, #32
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 808b 	beq.w	80050cc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	4b10      	ldr	r3, [pc, #64]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	4a0f      	ldr	r2, [pc, #60]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8004fc6:	4b0d      	ldr	r3, [pc, #52]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004fd2:	4b0c      	ldr	r3, [pc, #48]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a0b      	ldr	r2, [pc, #44]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fdc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004fde:	f7fc fbb3 	bl	8001748 <HAL_GetTick>
 8004fe2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004fe4:	e010      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004fe6:	f7fc fbaf 	bl	8001748 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d909      	bls.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e075      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004ff8:	42470068 	.word	0x42470068
 8004ffc:	40023800 	.word	0x40023800
 8005000:	42470070 	.word	0x42470070
 8005004:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005008:	4b38      	ldr	r3, [pc, #224]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0e8      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005014:	4b36      	ldr	r3, [pc, #216]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005018:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800501c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d02f      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005028:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	429a      	cmp	r2, r3
 8005030:	d028      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005032:	4b2f      	ldr	r3, [pc, #188]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800503a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800503c:	4b2d      	ldr	r3, [pc, #180]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800503e:	2201      	movs	r2, #1
 8005040:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005042:	4b2c      	ldr	r3, [pc, #176]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005048:	4a29      	ldr	r2, [pc, #164]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800504e:	4b28      	ldr	r3, [pc, #160]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b01      	cmp	r3, #1
 8005058:	d114      	bne.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800505a:	f7fc fb75 	bl	8001748 <HAL_GetTick>
 800505e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005060:	e00a      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005062:	f7fc fb71 	bl	8001748 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005070:	4293      	cmp	r3, r2
 8005072:	d901      	bls.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e035      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005078:	4b1d      	ldr	r3, [pc, #116]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800507a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0ee      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005088:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800508c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005090:	d10d      	bne.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005092:	4b17      	ldr	r3, [pc, #92]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80050a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050a6:	4912      	ldr	r1, [pc, #72]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	608b      	str	r3, [r1, #8]
 80050ac:	e005      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80050ae:	4b10      	ldr	r3, [pc, #64]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	4a0f      	ldr	r2, [pc, #60]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050b4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80050b8:	6093      	str	r3, [r2, #8]
 80050ba:	4b0d      	ldr	r3, [pc, #52]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050c6:	490a      	ldr	r1, [pc, #40]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0310 	and.w	r3, r3, #16
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d004      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80050de:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80050e0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3718      	adds	r7, #24
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	40007000 	.word	0x40007000
 80050f0:	40023800 	.word	0x40023800
 80050f4:	42470e40 	.word	0x42470e40
 80050f8:	424711e0 	.word	0x424711e0

080050fc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e025      	b.n	800515c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b00      	cmp	r3, #0
 800511a:	d106      	bne.n	800512a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f7fc f99b 	bl	8001460 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2202      	movs	r2, #2
 800512e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	3304      	adds	r3, #4
 800513a:	4619      	mov	r1, r3
 800513c:	4610      	mov	r0, r2
 800513e:	f001 f8dd 	bl	80062fc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6818      	ldr	r0, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	461a      	mov	r2, r3
 800514c:	6839      	ldr	r1, [r7, #0]
 800514e:	f001 f932 	bl	80063b6 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3708      	adds	r7, #8
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e07b      	b.n	800526e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	2b00      	cmp	r3, #0
 800517c:	d108      	bne.n	8005190 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005186:	d009      	beq.n	800519c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	61da      	str	r2, [r3, #28]
 800518e:	e005      	b.n	800519c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d106      	bne.n	80051bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7fc f80e 	bl	80011d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80051e4:	431a      	orrs	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051ee:	431a      	orrs	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	431a      	orrs	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	431a      	orrs	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800520c:	431a      	orrs	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005220:	ea42 0103 	orr.w	r1, r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005228:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	0c1b      	lsrs	r3, r3, #16
 800523a:	f003 0104 	and.w	r1, r3, #4
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	f003 0210 	and.w	r2, r3, #16
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69da      	ldr	r2, [r3, #28]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800525c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3708      	adds	r7, #8
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b082      	sub	sp, #8
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e041      	b.n	800530c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800528e:	b2db      	uxtb	r3, r3
 8005290:	2b00      	cmp	r3, #0
 8005292:	d106      	bne.n	80052a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f7fb ffe3 	bl	8001268 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2202      	movs	r2, #2
 80052a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	3304      	adds	r3, #4
 80052b2:	4619      	mov	r1, r3
 80052b4:	4610      	mov	r0, r2
 80052b6:	f000 fa95 	bl	80057e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b01      	cmp	r3, #1
 8005326:	d001      	beq.n	800532c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e04e      	b.n	80053ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2202      	movs	r2, #2
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68da      	ldr	r2, [r3, #12]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 0201 	orr.w	r2, r2, #1
 8005342:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a23      	ldr	r2, [pc, #140]	; (80053d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d022      	beq.n	8005394 <HAL_TIM_Base_Start_IT+0x80>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005356:	d01d      	beq.n	8005394 <HAL_TIM_Base_Start_IT+0x80>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a1f      	ldr	r2, [pc, #124]	; (80053dc <HAL_TIM_Base_Start_IT+0xc8>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d018      	beq.n	8005394 <HAL_TIM_Base_Start_IT+0x80>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a1e      	ldr	r2, [pc, #120]	; (80053e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d013      	beq.n	8005394 <HAL_TIM_Base_Start_IT+0x80>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a1c      	ldr	r2, [pc, #112]	; (80053e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d00e      	beq.n	8005394 <HAL_TIM_Base_Start_IT+0x80>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a1b      	ldr	r2, [pc, #108]	; (80053e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d009      	beq.n	8005394 <HAL_TIM_Base_Start_IT+0x80>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a19      	ldr	r2, [pc, #100]	; (80053ec <HAL_TIM_Base_Start_IT+0xd8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d004      	beq.n	8005394 <HAL_TIM_Base_Start_IT+0x80>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a18      	ldr	r2, [pc, #96]	; (80053f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d111      	bne.n	80053b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f003 0307 	and.w	r3, r3, #7
 800539e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2b06      	cmp	r3, #6
 80053a4:	d010      	beq.n	80053c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f042 0201 	orr.w	r2, r2, #1
 80053b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b6:	e007      	b.n	80053c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 0201 	orr.w	r2, r2, #1
 80053c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40010000 	.word	0x40010000
 80053dc:	40000400 	.word	0x40000400
 80053e0:	40000800 	.word	0x40000800
 80053e4:	40000c00 	.word	0x40000c00
 80053e8:	40010400 	.word	0x40010400
 80053ec:	40014000 	.word	0x40014000
 80053f0:	40001800 	.word	0x40001800

080053f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b02      	cmp	r3, #2
 8005408:	d122      	bne.n	8005450 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b02      	cmp	r3, #2
 8005416:	d11b      	bne.n	8005450 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f06f 0202 	mvn.w	r2, #2
 8005420:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	f003 0303 	and.w	r3, r3, #3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f9b5 	bl	80057a6 <HAL_TIM_IC_CaptureCallback>
 800543c:	e005      	b.n	800544a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f9a7 	bl	8005792 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f9b8 	bl	80057ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	f003 0304 	and.w	r3, r3, #4
 800545a:	2b04      	cmp	r3, #4
 800545c:	d122      	bne.n	80054a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b04      	cmp	r3, #4
 800546a:	d11b      	bne.n	80054a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f06f 0204 	mvn.w	r2, #4
 8005474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2202      	movs	r2, #2
 800547a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f98b 	bl	80057a6 <HAL_TIM_IC_CaptureCallback>
 8005490:	e005      	b.n	800549e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f97d 	bl	8005792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f98e 	bl	80057ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	f003 0308 	and.w	r3, r3, #8
 80054ae:	2b08      	cmp	r3, #8
 80054b0:	d122      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f003 0308 	and.w	r3, r3, #8
 80054bc:	2b08      	cmp	r3, #8
 80054be:	d11b      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f06f 0208 	mvn.w	r2, #8
 80054c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2204      	movs	r2, #4
 80054ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f961 	bl	80057a6 <HAL_TIM_IC_CaptureCallback>
 80054e4:	e005      	b.n	80054f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f953 	bl	8005792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f964 	bl	80057ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	f003 0310 	and.w	r3, r3, #16
 8005502:	2b10      	cmp	r3, #16
 8005504:	d122      	bne.n	800554c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f003 0310 	and.w	r3, r3, #16
 8005510:	2b10      	cmp	r3, #16
 8005512:	d11b      	bne.n	800554c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f06f 0210 	mvn.w	r2, #16
 800551c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2208      	movs	r2, #8
 8005522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800552e:	2b00      	cmp	r3, #0
 8005530:	d003      	beq.n	800553a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f937 	bl	80057a6 <HAL_TIM_IC_CaptureCallback>
 8005538:	e005      	b.n	8005546 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f929 	bl	8005792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f93a 	bl	80057ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b01      	cmp	r3, #1
 8005558:	d10e      	bne.n	8005578 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b01      	cmp	r3, #1
 8005566:	d107      	bne.n	8005578 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f06f 0201 	mvn.w	r2, #1
 8005570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7fb fc08 	bl	8000d88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005582:	2b80      	cmp	r3, #128	; 0x80
 8005584:	d10e      	bne.n	80055a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005590:	2b80      	cmp	r3, #128	; 0x80
 8005592:	d107      	bne.n	80055a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800559c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 fae0 	bl	8005b64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ae:	2b40      	cmp	r3, #64	; 0x40
 80055b0:	d10e      	bne.n	80055d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055bc:	2b40      	cmp	r3, #64	; 0x40
 80055be:	d107      	bne.n	80055d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f8ff 	bl	80057ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	f003 0320 	and.w	r3, r3, #32
 80055da:	2b20      	cmp	r3, #32
 80055dc:	d10e      	bne.n	80055fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f003 0320 	and.w	r3, r3, #32
 80055e8:	2b20      	cmp	r3, #32
 80055ea:	d107      	bne.n	80055fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f06f 0220 	mvn.w	r2, #32
 80055f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 faaa 	bl	8005b50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055fc:	bf00      	nop
 80055fe:	3708      	adds	r7, #8
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800560e:	2300      	movs	r3, #0
 8005610:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005618:	2b01      	cmp	r3, #1
 800561a:	d101      	bne.n	8005620 <HAL_TIM_ConfigClockSource+0x1c>
 800561c:	2302      	movs	r3, #2
 800561e:	e0b4      	b.n	800578a <HAL_TIM_ConfigClockSource+0x186>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2202      	movs	r2, #2
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800563e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005646:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005658:	d03e      	beq.n	80056d8 <HAL_TIM_ConfigClockSource+0xd4>
 800565a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800565e:	f200 8087 	bhi.w	8005770 <HAL_TIM_ConfigClockSource+0x16c>
 8005662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005666:	f000 8086 	beq.w	8005776 <HAL_TIM_ConfigClockSource+0x172>
 800566a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800566e:	d87f      	bhi.n	8005770 <HAL_TIM_ConfigClockSource+0x16c>
 8005670:	2b70      	cmp	r3, #112	; 0x70
 8005672:	d01a      	beq.n	80056aa <HAL_TIM_ConfigClockSource+0xa6>
 8005674:	2b70      	cmp	r3, #112	; 0x70
 8005676:	d87b      	bhi.n	8005770 <HAL_TIM_ConfigClockSource+0x16c>
 8005678:	2b60      	cmp	r3, #96	; 0x60
 800567a:	d050      	beq.n	800571e <HAL_TIM_ConfigClockSource+0x11a>
 800567c:	2b60      	cmp	r3, #96	; 0x60
 800567e:	d877      	bhi.n	8005770 <HAL_TIM_ConfigClockSource+0x16c>
 8005680:	2b50      	cmp	r3, #80	; 0x50
 8005682:	d03c      	beq.n	80056fe <HAL_TIM_ConfigClockSource+0xfa>
 8005684:	2b50      	cmp	r3, #80	; 0x50
 8005686:	d873      	bhi.n	8005770 <HAL_TIM_ConfigClockSource+0x16c>
 8005688:	2b40      	cmp	r3, #64	; 0x40
 800568a:	d058      	beq.n	800573e <HAL_TIM_ConfigClockSource+0x13a>
 800568c:	2b40      	cmp	r3, #64	; 0x40
 800568e:	d86f      	bhi.n	8005770 <HAL_TIM_ConfigClockSource+0x16c>
 8005690:	2b30      	cmp	r3, #48	; 0x30
 8005692:	d064      	beq.n	800575e <HAL_TIM_ConfigClockSource+0x15a>
 8005694:	2b30      	cmp	r3, #48	; 0x30
 8005696:	d86b      	bhi.n	8005770 <HAL_TIM_ConfigClockSource+0x16c>
 8005698:	2b20      	cmp	r3, #32
 800569a:	d060      	beq.n	800575e <HAL_TIM_ConfigClockSource+0x15a>
 800569c:	2b20      	cmp	r3, #32
 800569e:	d867      	bhi.n	8005770 <HAL_TIM_ConfigClockSource+0x16c>
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d05c      	beq.n	800575e <HAL_TIM_ConfigClockSource+0x15a>
 80056a4:	2b10      	cmp	r3, #16
 80056a6:	d05a      	beq.n	800575e <HAL_TIM_ConfigClockSource+0x15a>
 80056a8:	e062      	b.n	8005770 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6818      	ldr	r0, [r3, #0]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	6899      	ldr	r1, [r3, #8]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	f000 f9ad 	bl	8005a18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	609a      	str	r2, [r3, #8]
      break;
 80056d6:	e04f      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6818      	ldr	r0, [r3, #0]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	6899      	ldr	r1, [r3, #8]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f000 f996 	bl	8005a18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689a      	ldr	r2, [r3, #8]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056fa:	609a      	str	r2, [r3, #8]
      break;
 80056fc:	e03c      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6818      	ldr	r0, [r3, #0]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	6859      	ldr	r1, [r3, #4]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	461a      	mov	r2, r3
 800570c:	f000 f90a 	bl	8005924 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2150      	movs	r1, #80	; 0x50
 8005716:	4618      	mov	r0, r3
 8005718:	f000 f963 	bl	80059e2 <TIM_ITRx_SetConfig>
      break;
 800571c:	e02c      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6818      	ldr	r0, [r3, #0]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	6859      	ldr	r1, [r3, #4]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	461a      	mov	r2, r3
 800572c:	f000 f929 	bl	8005982 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2160      	movs	r1, #96	; 0x60
 8005736:	4618      	mov	r0, r3
 8005738:	f000 f953 	bl	80059e2 <TIM_ITRx_SetConfig>
      break;
 800573c:	e01c      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6818      	ldr	r0, [r3, #0]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	6859      	ldr	r1, [r3, #4]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	461a      	mov	r2, r3
 800574c:	f000 f8ea 	bl	8005924 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2140      	movs	r1, #64	; 0x40
 8005756:	4618      	mov	r0, r3
 8005758:	f000 f943 	bl	80059e2 <TIM_ITRx_SetConfig>
      break;
 800575c:	e00c      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4619      	mov	r1, r3
 8005768:	4610      	mov	r0, r2
 800576a:	f000 f93a 	bl	80059e2 <TIM_ITRx_SetConfig>
      break;
 800576e:	e003      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	73fb      	strb	r3, [r7, #15]
      break;
 8005774:	e000      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005776:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005788:	7bfb      	ldrb	r3, [r7, #15]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005792:	b480      	push	{r7}
 8005794:	b083      	sub	sp, #12
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057ae:	bf00      	nop
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b083      	sub	sp, #12
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057c2:	bf00      	nop
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
	...

080057e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a40      	ldr	r2, [pc, #256]	; (80058f8 <TIM_Base_SetConfig+0x114>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d013      	beq.n	8005824 <TIM_Base_SetConfig+0x40>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005802:	d00f      	beq.n	8005824 <TIM_Base_SetConfig+0x40>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a3d      	ldr	r2, [pc, #244]	; (80058fc <TIM_Base_SetConfig+0x118>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d00b      	beq.n	8005824 <TIM_Base_SetConfig+0x40>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a3c      	ldr	r2, [pc, #240]	; (8005900 <TIM_Base_SetConfig+0x11c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d007      	beq.n	8005824 <TIM_Base_SetConfig+0x40>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a3b      	ldr	r2, [pc, #236]	; (8005904 <TIM_Base_SetConfig+0x120>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d003      	beq.n	8005824 <TIM_Base_SetConfig+0x40>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a3a      	ldr	r2, [pc, #232]	; (8005908 <TIM_Base_SetConfig+0x124>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d108      	bne.n	8005836 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	4313      	orrs	r3, r2
 8005834:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a2f      	ldr	r2, [pc, #188]	; (80058f8 <TIM_Base_SetConfig+0x114>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d02b      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005844:	d027      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a2c      	ldr	r2, [pc, #176]	; (80058fc <TIM_Base_SetConfig+0x118>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d023      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a2b      	ldr	r2, [pc, #172]	; (8005900 <TIM_Base_SetConfig+0x11c>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d01f      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a2a      	ldr	r2, [pc, #168]	; (8005904 <TIM_Base_SetConfig+0x120>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d01b      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a29      	ldr	r2, [pc, #164]	; (8005908 <TIM_Base_SetConfig+0x124>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d017      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a28      	ldr	r2, [pc, #160]	; (800590c <TIM_Base_SetConfig+0x128>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d013      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a27      	ldr	r2, [pc, #156]	; (8005910 <TIM_Base_SetConfig+0x12c>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d00f      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a26      	ldr	r2, [pc, #152]	; (8005914 <TIM_Base_SetConfig+0x130>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d00b      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a25      	ldr	r2, [pc, #148]	; (8005918 <TIM_Base_SetConfig+0x134>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d007      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a24      	ldr	r2, [pc, #144]	; (800591c <TIM_Base_SetConfig+0x138>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d003      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a23      	ldr	r2, [pc, #140]	; (8005920 <TIM_Base_SetConfig+0x13c>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d108      	bne.n	80058a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800589c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	689a      	ldr	r2, [r3, #8]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a0a      	ldr	r2, [pc, #40]	; (80058f8 <TIM_Base_SetConfig+0x114>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d003      	beq.n	80058dc <TIM_Base_SetConfig+0xf8>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a0c      	ldr	r2, [pc, #48]	; (8005908 <TIM_Base_SetConfig+0x124>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d103      	bne.n	80058e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	691a      	ldr	r2, [r3, #16]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	615a      	str	r2, [r3, #20]
}
 80058ea:	bf00      	nop
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	40010000 	.word	0x40010000
 80058fc:	40000400 	.word	0x40000400
 8005900:	40000800 	.word	0x40000800
 8005904:	40000c00 	.word	0x40000c00
 8005908:	40010400 	.word	0x40010400
 800590c:	40014000 	.word	0x40014000
 8005910:	40014400 	.word	0x40014400
 8005914:	40014800 	.word	0x40014800
 8005918:	40001800 	.word	0x40001800
 800591c:	40001c00 	.word	0x40001c00
 8005920:	40002000 	.word	0x40002000

08005924 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005924:	b480      	push	{r7}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	f023 0201 	bic.w	r2, r3, #1
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800594e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	011b      	lsls	r3, r3, #4
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	4313      	orrs	r3, r2
 8005958:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f023 030a 	bic.w	r3, r3, #10
 8005960:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	4313      	orrs	r3, r2
 8005968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	621a      	str	r2, [r3, #32]
}
 8005976:	bf00      	nop
 8005978:	371c      	adds	r7, #28
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005982:	b480      	push	{r7}
 8005984:	b087      	sub	sp, #28
 8005986:	af00      	add	r7, sp, #0
 8005988:	60f8      	str	r0, [r7, #12]
 800598a:	60b9      	str	r1, [r7, #8]
 800598c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	f023 0210 	bic.w	r2, r3, #16
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	031b      	lsls	r3, r3, #12
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	011b      	lsls	r3, r3, #4
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	621a      	str	r2, [r3, #32]
}
 80059d6:	bf00      	nop
 80059d8:	371c      	adds	r7, #28
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b085      	sub	sp, #20
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
 80059ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	f043 0307 	orr.w	r3, r3, #7
 8005a04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	609a      	str	r2, [r3, #8]
}
 8005a0c:	bf00      	nop
 8005a0e:	3714      	adds	r7, #20
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b087      	sub	sp, #28
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
 8005a24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	021a      	lsls	r2, r3, #8
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	609a      	str	r2, [r3, #8]
}
 8005a4c:	bf00      	nop
 8005a4e:	371c      	adds	r7, #28
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d101      	bne.n	8005a70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	e05a      	b.n	8005b26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a21      	ldr	r2, [pc, #132]	; (8005b34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d022      	beq.n	8005afa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005abc:	d01d      	beq.n	8005afa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a1d      	ldr	r2, [pc, #116]	; (8005b38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d018      	beq.n	8005afa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a1b      	ldr	r2, [pc, #108]	; (8005b3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d013      	beq.n	8005afa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a1a      	ldr	r2, [pc, #104]	; (8005b40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d00e      	beq.n	8005afa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a18      	ldr	r2, [pc, #96]	; (8005b44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d009      	beq.n	8005afa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a17      	ldr	r2, [pc, #92]	; (8005b48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d004      	beq.n	8005afa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a15      	ldr	r2, [pc, #84]	; (8005b4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d10c      	bne.n	8005b14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	40010000 	.word	0x40010000
 8005b38:	40000400 	.word	0x40000400
 8005b3c:	40000800 	.word	0x40000800
 8005b40:	40000c00 	.word	0x40000c00
 8005b44:	40010400 	.word	0x40010400
 8005b48:	40014000 	.word	0x40014000
 8005b4c:	40001800 	.word	0x40001800

08005b50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e03f      	b.n	8005c0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d106      	bne.n	8005ba4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7fb fb84 	bl	80012ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2224      	movs	r2, #36	; 0x24
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68da      	ldr	r2, [r3, #12]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 f929 	bl	8005e14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	691a      	ldr	r2, [r3, #16]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	695a      	ldr	r2, [r3, #20]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005be0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68da      	ldr	r2, [r3, #12]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bf0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2220      	movs	r2, #32
 8005c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b08a      	sub	sp, #40	; 0x28
 8005c16:	af02      	add	r7, sp, #8
 8005c18:	60f8      	str	r0, [r7, #12]
 8005c1a:	60b9      	str	r1, [r7, #8]
 8005c1c:	603b      	str	r3, [r7, #0]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c22:	2300      	movs	r3, #0
 8005c24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b20      	cmp	r3, #32
 8005c30:	d17c      	bne.n	8005d2c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d002      	beq.n	8005c3e <HAL_UART_Transmit+0x2c>
 8005c38:	88fb      	ldrh	r3, [r7, #6]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e075      	b.n	8005d2e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d101      	bne.n	8005c50 <HAL_UART_Transmit+0x3e>
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	e06e      	b.n	8005d2e <HAL_UART_Transmit+0x11c>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2221      	movs	r2, #33	; 0x21
 8005c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c66:	f7fb fd6f 	bl	8001748 <HAL_GetTick>
 8005c6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	88fa      	ldrh	r2, [r7, #6]
 8005c70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	88fa      	ldrh	r2, [r7, #6]
 8005c76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c80:	d108      	bne.n	8005c94 <HAL_UART_Transmit+0x82>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d104      	bne.n	8005c94 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	61bb      	str	r3, [r7, #24]
 8005c92:	e003      	b.n	8005c9c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005ca4:	e02a      	b.n	8005cfc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	9300      	str	r3, [sp, #0]
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	2200      	movs	r2, #0
 8005cae:	2180      	movs	r1, #128	; 0x80
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f000 f840 	bl	8005d36 <UART_WaitOnFlagUntilTimeout>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e036      	b.n	8005d2e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10b      	bne.n	8005cde <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	3302      	adds	r3, #2
 8005cda:	61bb      	str	r3, [r7, #24]
 8005cdc:	e007      	b.n	8005cee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	781a      	ldrb	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	3301      	adds	r3, #1
 8005cec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1cf      	bne.n	8005ca6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	2140      	movs	r1, #64	; 0x40
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f000 f810 	bl	8005d36 <UART_WaitOnFlagUntilTimeout>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e006      	b.n	8005d2e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2220      	movs	r2, #32
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	e000      	b.n	8005d2e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005d2c:	2302      	movs	r3, #2
  }
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3720      	adds	r7, #32
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b090      	sub	sp, #64	; 0x40
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	60f8      	str	r0, [r7, #12]
 8005d3e:	60b9      	str	r1, [r7, #8]
 8005d40:	603b      	str	r3, [r7, #0]
 8005d42:	4613      	mov	r3, r2
 8005d44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d46:	e050      	b.n	8005dea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4e:	d04c      	beq.n	8005dea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d007      	beq.n	8005d66 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d56:	f7fb fcf7 	bl	8001748 <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d241      	bcs.n	8005dea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	330c      	adds	r3, #12
 8005d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d70:	e853 3f00 	ldrex	r3, [r3]
 8005d74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	330c      	adds	r3, #12
 8005d84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d86:	637a      	str	r2, [r7, #52]	; 0x34
 8005d88:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d8e:	e841 2300 	strex	r3, r2, [r1]
 8005d92:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1e5      	bne.n	8005d66 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	3314      	adds	r3, #20
 8005da0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	e853 3f00 	ldrex	r3, [r3]
 8005da8:	613b      	str	r3, [r7, #16]
   return(result);
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	f023 0301 	bic.w	r3, r3, #1
 8005db0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	3314      	adds	r3, #20
 8005db8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dba:	623a      	str	r2, [r7, #32]
 8005dbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dbe:	69f9      	ldr	r1, [r7, #28]
 8005dc0:	6a3a      	ldr	r2, [r7, #32]
 8005dc2:	e841 2300 	strex	r3, r2, [r1]
 8005dc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1e5      	bne.n	8005d9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e00f      	b.n	8005e0a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	4013      	ands	r3, r2
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	bf0c      	ite	eq
 8005dfa:	2301      	moveq	r3, #1
 8005dfc:	2300      	movne	r3, #0
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	461a      	mov	r2, r3
 8005e02:	79fb      	ldrb	r3, [r7, #7]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d09f      	beq.n	8005d48 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3740      	adds	r7, #64	; 0x40
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
	...

08005e14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e18:	b0c0      	sub	sp, #256	; 0x100
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e30:	68d9      	ldr	r1, [r3, #12]
 8005e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	ea40 0301 	orr.w	r3, r0, r1
 8005e3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e42:	689a      	ldr	r2, [r3, #8]
 8005e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	431a      	orrs	r2, r3
 8005e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e58:	69db      	ldr	r3, [r3, #28]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e6c:	f021 010c 	bic.w	r1, r1, #12
 8005e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e7a:	430b      	orrs	r3, r1
 8005e7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e8e:	6999      	ldr	r1, [r3, #24]
 8005e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	ea40 0301 	orr.w	r3, r0, r1
 8005e9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	4b8f      	ldr	r3, [pc, #572]	; (80060e0 <UART_SetConfig+0x2cc>)
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d005      	beq.n	8005eb4 <UART_SetConfig+0xa0>
 8005ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	4b8d      	ldr	r3, [pc, #564]	; (80060e4 <UART_SetConfig+0x2d0>)
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d104      	bne.n	8005ebe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005eb4:	f7fe ff1c 	bl	8004cf0 <HAL_RCC_GetPCLK2Freq>
 8005eb8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005ebc:	e003      	b.n	8005ec6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ebe:	f7fe ff03 	bl	8004cc8 <HAL_RCC_GetPCLK1Freq>
 8005ec2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eca:	69db      	ldr	r3, [r3, #28]
 8005ecc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ed0:	f040 810c 	bne.w	80060ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ed4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ede:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005ee2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005ee6:	4622      	mov	r2, r4
 8005ee8:	462b      	mov	r3, r5
 8005eea:	1891      	adds	r1, r2, r2
 8005eec:	65b9      	str	r1, [r7, #88]	; 0x58
 8005eee:	415b      	adcs	r3, r3
 8005ef0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ef2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005ef6:	4621      	mov	r1, r4
 8005ef8:	eb12 0801 	adds.w	r8, r2, r1
 8005efc:	4629      	mov	r1, r5
 8005efe:	eb43 0901 	adc.w	r9, r3, r1
 8005f02:	f04f 0200 	mov.w	r2, #0
 8005f06:	f04f 0300 	mov.w	r3, #0
 8005f0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f16:	4690      	mov	r8, r2
 8005f18:	4699      	mov	r9, r3
 8005f1a:	4623      	mov	r3, r4
 8005f1c:	eb18 0303 	adds.w	r3, r8, r3
 8005f20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f24:	462b      	mov	r3, r5
 8005f26:	eb49 0303 	adc.w	r3, r9, r3
 8005f2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f3a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005f3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005f42:	460b      	mov	r3, r1
 8005f44:	18db      	adds	r3, r3, r3
 8005f46:	653b      	str	r3, [r7, #80]	; 0x50
 8005f48:	4613      	mov	r3, r2
 8005f4a:	eb42 0303 	adc.w	r3, r2, r3
 8005f4e:	657b      	str	r3, [r7, #84]	; 0x54
 8005f50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005f54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005f58:	f7fa f94a 	bl	80001f0 <__aeabi_uldivmod>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	460b      	mov	r3, r1
 8005f60:	4b61      	ldr	r3, [pc, #388]	; (80060e8 <UART_SetConfig+0x2d4>)
 8005f62:	fba3 2302 	umull	r2, r3, r3, r2
 8005f66:	095b      	lsrs	r3, r3, #5
 8005f68:	011c      	lsls	r4, r3, #4
 8005f6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f74:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005f78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005f7c:	4642      	mov	r2, r8
 8005f7e:	464b      	mov	r3, r9
 8005f80:	1891      	adds	r1, r2, r2
 8005f82:	64b9      	str	r1, [r7, #72]	; 0x48
 8005f84:	415b      	adcs	r3, r3
 8005f86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f8c:	4641      	mov	r1, r8
 8005f8e:	eb12 0a01 	adds.w	sl, r2, r1
 8005f92:	4649      	mov	r1, r9
 8005f94:	eb43 0b01 	adc.w	fp, r3, r1
 8005f98:	f04f 0200 	mov.w	r2, #0
 8005f9c:	f04f 0300 	mov.w	r3, #0
 8005fa0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005fa4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005fa8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fac:	4692      	mov	sl, r2
 8005fae:	469b      	mov	fp, r3
 8005fb0:	4643      	mov	r3, r8
 8005fb2:	eb1a 0303 	adds.w	r3, sl, r3
 8005fb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fba:	464b      	mov	r3, r9
 8005fbc:	eb4b 0303 	adc.w	r3, fp, r3
 8005fc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fd0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005fd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	18db      	adds	r3, r3, r3
 8005fdc:	643b      	str	r3, [r7, #64]	; 0x40
 8005fde:	4613      	mov	r3, r2
 8005fe0:	eb42 0303 	adc.w	r3, r2, r3
 8005fe4:	647b      	str	r3, [r7, #68]	; 0x44
 8005fe6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005fea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005fee:	f7fa f8ff 	bl	80001f0 <__aeabi_uldivmod>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	4611      	mov	r1, r2
 8005ff8:	4b3b      	ldr	r3, [pc, #236]	; (80060e8 <UART_SetConfig+0x2d4>)
 8005ffa:	fba3 2301 	umull	r2, r3, r3, r1
 8005ffe:	095b      	lsrs	r3, r3, #5
 8006000:	2264      	movs	r2, #100	; 0x64
 8006002:	fb02 f303 	mul.w	r3, r2, r3
 8006006:	1acb      	subs	r3, r1, r3
 8006008:	00db      	lsls	r3, r3, #3
 800600a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800600e:	4b36      	ldr	r3, [pc, #216]	; (80060e8 <UART_SetConfig+0x2d4>)
 8006010:	fba3 2302 	umull	r2, r3, r3, r2
 8006014:	095b      	lsrs	r3, r3, #5
 8006016:	005b      	lsls	r3, r3, #1
 8006018:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800601c:	441c      	add	r4, r3
 800601e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006022:	2200      	movs	r2, #0
 8006024:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006028:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800602c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006030:	4642      	mov	r2, r8
 8006032:	464b      	mov	r3, r9
 8006034:	1891      	adds	r1, r2, r2
 8006036:	63b9      	str	r1, [r7, #56]	; 0x38
 8006038:	415b      	adcs	r3, r3
 800603a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800603c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006040:	4641      	mov	r1, r8
 8006042:	1851      	adds	r1, r2, r1
 8006044:	6339      	str	r1, [r7, #48]	; 0x30
 8006046:	4649      	mov	r1, r9
 8006048:	414b      	adcs	r3, r1
 800604a:	637b      	str	r3, [r7, #52]	; 0x34
 800604c:	f04f 0200 	mov.w	r2, #0
 8006050:	f04f 0300 	mov.w	r3, #0
 8006054:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006058:	4659      	mov	r1, fp
 800605a:	00cb      	lsls	r3, r1, #3
 800605c:	4651      	mov	r1, sl
 800605e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006062:	4651      	mov	r1, sl
 8006064:	00ca      	lsls	r2, r1, #3
 8006066:	4610      	mov	r0, r2
 8006068:	4619      	mov	r1, r3
 800606a:	4603      	mov	r3, r0
 800606c:	4642      	mov	r2, r8
 800606e:	189b      	adds	r3, r3, r2
 8006070:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006074:	464b      	mov	r3, r9
 8006076:	460a      	mov	r2, r1
 8006078:	eb42 0303 	adc.w	r3, r2, r3
 800607c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800608c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006090:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006094:	460b      	mov	r3, r1
 8006096:	18db      	adds	r3, r3, r3
 8006098:	62bb      	str	r3, [r7, #40]	; 0x28
 800609a:	4613      	mov	r3, r2
 800609c:	eb42 0303 	adc.w	r3, r2, r3
 80060a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80060a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80060aa:	f7fa f8a1 	bl	80001f0 <__aeabi_uldivmod>
 80060ae:	4602      	mov	r2, r0
 80060b0:	460b      	mov	r3, r1
 80060b2:	4b0d      	ldr	r3, [pc, #52]	; (80060e8 <UART_SetConfig+0x2d4>)
 80060b4:	fba3 1302 	umull	r1, r3, r3, r2
 80060b8:	095b      	lsrs	r3, r3, #5
 80060ba:	2164      	movs	r1, #100	; 0x64
 80060bc:	fb01 f303 	mul.w	r3, r1, r3
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	00db      	lsls	r3, r3, #3
 80060c4:	3332      	adds	r3, #50	; 0x32
 80060c6:	4a08      	ldr	r2, [pc, #32]	; (80060e8 <UART_SetConfig+0x2d4>)
 80060c8:	fba2 2303 	umull	r2, r3, r2, r3
 80060cc:	095b      	lsrs	r3, r3, #5
 80060ce:	f003 0207 	and.w	r2, r3, #7
 80060d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4422      	add	r2, r4
 80060da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80060dc:	e106      	b.n	80062ec <UART_SetConfig+0x4d8>
 80060de:	bf00      	nop
 80060e0:	40011000 	.word	0x40011000
 80060e4:	40011400 	.word	0x40011400
 80060e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060f0:	2200      	movs	r2, #0
 80060f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80060fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80060fe:	4642      	mov	r2, r8
 8006100:	464b      	mov	r3, r9
 8006102:	1891      	adds	r1, r2, r2
 8006104:	6239      	str	r1, [r7, #32]
 8006106:	415b      	adcs	r3, r3
 8006108:	627b      	str	r3, [r7, #36]	; 0x24
 800610a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800610e:	4641      	mov	r1, r8
 8006110:	1854      	adds	r4, r2, r1
 8006112:	4649      	mov	r1, r9
 8006114:	eb43 0501 	adc.w	r5, r3, r1
 8006118:	f04f 0200 	mov.w	r2, #0
 800611c:	f04f 0300 	mov.w	r3, #0
 8006120:	00eb      	lsls	r3, r5, #3
 8006122:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006126:	00e2      	lsls	r2, r4, #3
 8006128:	4614      	mov	r4, r2
 800612a:	461d      	mov	r5, r3
 800612c:	4643      	mov	r3, r8
 800612e:	18e3      	adds	r3, r4, r3
 8006130:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006134:	464b      	mov	r3, r9
 8006136:	eb45 0303 	adc.w	r3, r5, r3
 800613a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800613e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800614a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800614e:	f04f 0200 	mov.w	r2, #0
 8006152:	f04f 0300 	mov.w	r3, #0
 8006156:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800615a:	4629      	mov	r1, r5
 800615c:	008b      	lsls	r3, r1, #2
 800615e:	4621      	mov	r1, r4
 8006160:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006164:	4621      	mov	r1, r4
 8006166:	008a      	lsls	r2, r1, #2
 8006168:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800616c:	f7fa f840 	bl	80001f0 <__aeabi_uldivmod>
 8006170:	4602      	mov	r2, r0
 8006172:	460b      	mov	r3, r1
 8006174:	4b60      	ldr	r3, [pc, #384]	; (80062f8 <UART_SetConfig+0x4e4>)
 8006176:	fba3 2302 	umull	r2, r3, r3, r2
 800617a:	095b      	lsrs	r3, r3, #5
 800617c:	011c      	lsls	r4, r3, #4
 800617e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006182:	2200      	movs	r2, #0
 8006184:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006188:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800618c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006190:	4642      	mov	r2, r8
 8006192:	464b      	mov	r3, r9
 8006194:	1891      	adds	r1, r2, r2
 8006196:	61b9      	str	r1, [r7, #24]
 8006198:	415b      	adcs	r3, r3
 800619a:	61fb      	str	r3, [r7, #28]
 800619c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061a0:	4641      	mov	r1, r8
 80061a2:	1851      	adds	r1, r2, r1
 80061a4:	6139      	str	r1, [r7, #16]
 80061a6:	4649      	mov	r1, r9
 80061a8:	414b      	adcs	r3, r1
 80061aa:	617b      	str	r3, [r7, #20]
 80061ac:	f04f 0200 	mov.w	r2, #0
 80061b0:	f04f 0300 	mov.w	r3, #0
 80061b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061b8:	4659      	mov	r1, fp
 80061ba:	00cb      	lsls	r3, r1, #3
 80061bc:	4651      	mov	r1, sl
 80061be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061c2:	4651      	mov	r1, sl
 80061c4:	00ca      	lsls	r2, r1, #3
 80061c6:	4610      	mov	r0, r2
 80061c8:	4619      	mov	r1, r3
 80061ca:	4603      	mov	r3, r0
 80061cc:	4642      	mov	r2, r8
 80061ce:	189b      	adds	r3, r3, r2
 80061d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80061d4:	464b      	mov	r3, r9
 80061d6:	460a      	mov	r2, r1
 80061d8:	eb42 0303 	adc.w	r3, r2, r3
 80061dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80061e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80061ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80061ec:	f04f 0200 	mov.w	r2, #0
 80061f0:	f04f 0300 	mov.w	r3, #0
 80061f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80061f8:	4649      	mov	r1, r9
 80061fa:	008b      	lsls	r3, r1, #2
 80061fc:	4641      	mov	r1, r8
 80061fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006202:	4641      	mov	r1, r8
 8006204:	008a      	lsls	r2, r1, #2
 8006206:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800620a:	f7f9 fff1 	bl	80001f0 <__aeabi_uldivmod>
 800620e:	4602      	mov	r2, r0
 8006210:	460b      	mov	r3, r1
 8006212:	4611      	mov	r1, r2
 8006214:	4b38      	ldr	r3, [pc, #224]	; (80062f8 <UART_SetConfig+0x4e4>)
 8006216:	fba3 2301 	umull	r2, r3, r3, r1
 800621a:	095b      	lsrs	r3, r3, #5
 800621c:	2264      	movs	r2, #100	; 0x64
 800621e:	fb02 f303 	mul.w	r3, r2, r3
 8006222:	1acb      	subs	r3, r1, r3
 8006224:	011b      	lsls	r3, r3, #4
 8006226:	3332      	adds	r3, #50	; 0x32
 8006228:	4a33      	ldr	r2, [pc, #204]	; (80062f8 <UART_SetConfig+0x4e4>)
 800622a:	fba2 2303 	umull	r2, r3, r2, r3
 800622e:	095b      	lsrs	r3, r3, #5
 8006230:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006234:	441c      	add	r4, r3
 8006236:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800623a:	2200      	movs	r2, #0
 800623c:	673b      	str	r3, [r7, #112]	; 0x70
 800623e:	677a      	str	r2, [r7, #116]	; 0x74
 8006240:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006244:	4642      	mov	r2, r8
 8006246:	464b      	mov	r3, r9
 8006248:	1891      	adds	r1, r2, r2
 800624a:	60b9      	str	r1, [r7, #8]
 800624c:	415b      	adcs	r3, r3
 800624e:	60fb      	str	r3, [r7, #12]
 8006250:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006254:	4641      	mov	r1, r8
 8006256:	1851      	adds	r1, r2, r1
 8006258:	6039      	str	r1, [r7, #0]
 800625a:	4649      	mov	r1, r9
 800625c:	414b      	adcs	r3, r1
 800625e:	607b      	str	r3, [r7, #4]
 8006260:	f04f 0200 	mov.w	r2, #0
 8006264:	f04f 0300 	mov.w	r3, #0
 8006268:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800626c:	4659      	mov	r1, fp
 800626e:	00cb      	lsls	r3, r1, #3
 8006270:	4651      	mov	r1, sl
 8006272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006276:	4651      	mov	r1, sl
 8006278:	00ca      	lsls	r2, r1, #3
 800627a:	4610      	mov	r0, r2
 800627c:	4619      	mov	r1, r3
 800627e:	4603      	mov	r3, r0
 8006280:	4642      	mov	r2, r8
 8006282:	189b      	adds	r3, r3, r2
 8006284:	66bb      	str	r3, [r7, #104]	; 0x68
 8006286:	464b      	mov	r3, r9
 8006288:	460a      	mov	r2, r1
 800628a:	eb42 0303 	adc.w	r3, r2, r3
 800628e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	663b      	str	r3, [r7, #96]	; 0x60
 800629a:	667a      	str	r2, [r7, #100]	; 0x64
 800629c:	f04f 0200 	mov.w	r2, #0
 80062a0:	f04f 0300 	mov.w	r3, #0
 80062a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80062a8:	4649      	mov	r1, r9
 80062aa:	008b      	lsls	r3, r1, #2
 80062ac:	4641      	mov	r1, r8
 80062ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062b2:	4641      	mov	r1, r8
 80062b4:	008a      	lsls	r2, r1, #2
 80062b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80062ba:	f7f9 ff99 	bl	80001f0 <__aeabi_uldivmod>
 80062be:	4602      	mov	r2, r0
 80062c0:	460b      	mov	r3, r1
 80062c2:	4b0d      	ldr	r3, [pc, #52]	; (80062f8 <UART_SetConfig+0x4e4>)
 80062c4:	fba3 1302 	umull	r1, r3, r3, r2
 80062c8:	095b      	lsrs	r3, r3, #5
 80062ca:	2164      	movs	r1, #100	; 0x64
 80062cc:	fb01 f303 	mul.w	r3, r1, r3
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	011b      	lsls	r3, r3, #4
 80062d4:	3332      	adds	r3, #50	; 0x32
 80062d6:	4a08      	ldr	r2, [pc, #32]	; (80062f8 <UART_SetConfig+0x4e4>)
 80062d8:	fba2 2303 	umull	r2, r3, r2, r3
 80062dc:	095b      	lsrs	r3, r3, #5
 80062de:	f003 020f 	and.w	r2, r3, #15
 80062e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4422      	add	r2, r4
 80062ea:	609a      	str	r2, [r3, #8]
}
 80062ec:	bf00      	nop
 80062ee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80062f2:	46bd      	mov	sp, r7
 80062f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062f8:	51eb851f 	.word	0x51eb851f

080062fc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d123      	bne.n	8006356 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006316:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800631a:	683a      	ldr	r2, [r7, #0]
 800631c:	6851      	ldr	r1, [r2, #4]
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	6892      	ldr	r2, [r2, #8]
 8006322:	4311      	orrs	r1, r2
 8006324:	683a      	ldr	r2, [r7, #0]
 8006326:	68d2      	ldr	r2, [r2, #12]
 8006328:	4311      	orrs	r1, r2
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	6912      	ldr	r2, [r2, #16]
 800632e:	4311      	orrs	r1, r2
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	6952      	ldr	r2, [r2, #20]
 8006334:	4311      	orrs	r1, r2
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	6992      	ldr	r2, [r2, #24]
 800633a:	4311      	orrs	r1, r2
 800633c:	683a      	ldr	r2, [r7, #0]
 800633e:	69d2      	ldr	r2, [r2, #28]
 8006340:	4311      	orrs	r1, r2
 8006342:	683a      	ldr	r2, [r7, #0]
 8006344:	6a12      	ldr	r2, [r2, #32]
 8006346:	4311      	orrs	r1, r2
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800634c:	430a      	orrs	r2, r1
 800634e:	431a      	orrs	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	e028      	b.n	80063a8 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	69d9      	ldr	r1, [r3, #28]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	4319      	orrs	r1, r3
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636c:	430b      	orrs	r3, r1
 800636e:	431a      	orrs	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800637c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006380:	683a      	ldr	r2, [r7, #0]
 8006382:	6851      	ldr	r1, [r2, #4]
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	6892      	ldr	r2, [r2, #8]
 8006388:	4311      	orrs	r1, r2
 800638a:	683a      	ldr	r2, [r7, #0]
 800638c:	68d2      	ldr	r2, [r2, #12]
 800638e:	4311      	orrs	r1, r2
 8006390:	683a      	ldr	r2, [r7, #0]
 8006392:	6912      	ldr	r2, [r2, #16]
 8006394:	4311      	orrs	r1, r2
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	6952      	ldr	r2, [r2, #20]
 800639a:	4311      	orrs	r1, r2
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	6992      	ldr	r2, [r2, #24]
 80063a0:	430a      	orrs	r2, r1
 80063a2:	431a      	orrs	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	370c      	adds	r7, #12
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b085      	sub	sp, #20
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	60f8      	str	r0, [r7, #12]
 80063be:	60b9      	str	r1, [r7, #8]
 80063c0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d128      	bne.n	800641a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	1e59      	subs	r1, r3, #1
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	3b01      	subs	r3, #1
 80063dc:	011b      	lsls	r3, r3, #4
 80063de:	4319      	orrs	r1, r3
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	3b01      	subs	r3, #1
 80063e6:	021b      	lsls	r3, r3, #8
 80063e8:	4319      	orrs	r1, r3
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	3b01      	subs	r3, #1
 80063f0:	031b      	lsls	r3, r3, #12
 80063f2:	4319      	orrs	r1, r3
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	3b01      	subs	r3, #1
 80063fa:	041b      	lsls	r3, r3, #16
 80063fc:	4319      	orrs	r1, r3
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	3b01      	subs	r3, #1
 8006404:	051b      	lsls	r3, r3, #20
 8006406:	4319      	orrs	r1, r3
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	3b01      	subs	r3, #1
 800640e:	061b      	lsls	r3, r3, #24
 8006410:	430b      	orrs	r3, r1
 8006412:	431a      	orrs	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	609a      	str	r2, [r3, #8]
 8006418:	e02f      	b.n	800647a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006422:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	68d2      	ldr	r2, [r2, #12]
 800642a:	3a01      	subs	r2, #1
 800642c:	0311      	lsls	r1, r2, #12
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	6952      	ldr	r2, [r2, #20]
 8006432:	3a01      	subs	r2, #1
 8006434:	0512      	lsls	r2, r2, #20
 8006436:	430a      	orrs	r2, r1
 8006438:	431a      	orrs	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	1e59      	subs	r1, r3, #1
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	3b01      	subs	r3, #1
 8006452:	011b      	lsls	r3, r3, #4
 8006454:	4319      	orrs	r1, r3
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	3b01      	subs	r3, #1
 800645c:	021b      	lsls	r3, r3, #8
 800645e:	4319      	orrs	r1, r3
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	3b01      	subs	r3, #1
 8006466:	041b      	lsls	r3, r3, #16
 8006468:	4319      	orrs	r1, r3
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	3b01      	subs	r3, #1
 8006470:	061b      	lsls	r3, r3, #24
 8006472:	430b      	orrs	r3, r1
 8006474:	431a      	orrs	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3714      	adds	r7, #20
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006488:	b084      	sub	sp, #16
 800648a:	b580      	push	{r7, lr}
 800648c:	b084      	sub	sp, #16
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
 8006492:	f107 001c 	add.w	r0, r7, #28
 8006496:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649c:	2b01      	cmp	r3, #1
 800649e:	d122      	bne.n	80064e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80064b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80064c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d105      	bne.n	80064da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f9c0 	bl	8006860 <USB_CoreReset>
 80064e0:	4603      	mov	r3, r0
 80064e2:	73fb      	strb	r3, [r7, #15]
 80064e4:	e01a      	b.n	800651c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f9b4 	bl	8006860 <USB_CoreReset>
 80064f8:	4603      	mov	r3, r0
 80064fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80064fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d106      	bne.n	8006510 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006506:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	639a      	str	r2, [r3, #56]	; 0x38
 800650e:	e005      	b.n	800651c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006514:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800651c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651e:	2b01      	cmp	r3, #1
 8006520:	d10b      	bne.n	800653a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f043 0206 	orr.w	r2, r3, #6
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f043 0220 	orr.w	r2, r3, #32
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800653a:	7bfb      	ldrb	r3, [r7, #15]
}
 800653c:	4618      	mov	r0, r3
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006546:	b004      	add	sp, #16
 8006548:	4770      	bx	lr

0800654a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800654a:	b480      	push	{r7}
 800654c:	b083      	sub	sp, #12
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f043 0201 	orr.w	r2, r3, #1
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f023 0201 	bic.w	r2, r3, #1
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	370c      	adds	r7, #12
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b084      	sub	sp, #16
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
 8006596:	460b      	mov	r3, r1
 8006598:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800659a:	2300      	movs	r3, #0
 800659c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80065aa:	78fb      	ldrb	r3, [r7, #3]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d115      	bne.n	80065dc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80065bc:	2001      	movs	r0, #1
 80065be:	f7fb f8cf 	bl	8001760 <HAL_Delay>
      ms++;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	3301      	adds	r3, #1
 80065c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f93a 	bl	8006842 <USB_GetMode>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d01e      	beq.n	8006612 <USB_SetCurrentMode+0x84>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2b31      	cmp	r3, #49	; 0x31
 80065d8:	d9f0      	bls.n	80065bc <USB_SetCurrentMode+0x2e>
 80065da:	e01a      	b.n	8006612 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80065dc:	78fb      	ldrb	r3, [r7, #3]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d115      	bne.n	800660e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80065ee:	2001      	movs	r0, #1
 80065f0:	f7fb f8b6 	bl	8001760 <HAL_Delay>
      ms++;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	3301      	adds	r3, #1
 80065f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f921 	bl	8006842 <USB_GetMode>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d005      	beq.n	8006612 <USB_SetCurrentMode+0x84>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2b31      	cmp	r3, #49	; 0x31
 800660a:	d9f0      	bls.n	80065ee <USB_SetCurrentMode+0x60>
 800660c:	e001      	b.n	8006612 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e005      	b.n	800661e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2b32      	cmp	r3, #50	; 0x32
 8006616:	d101      	bne.n	800661c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e000      	b.n	800661e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
	...

08006628 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006632:	2300      	movs	r3, #0
 8006634:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	3301      	adds	r3, #1
 800663a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4a13      	ldr	r2, [pc, #76]	; (800668c <USB_FlushTxFifo+0x64>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d901      	bls.n	8006648 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e01b      	b.n	8006680 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	2b00      	cmp	r3, #0
 800664e:	daf2      	bge.n	8006636 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006650:	2300      	movs	r3, #0
 8006652:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	019b      	lsls	r3, r3, #6
 8006658:	f043 0220 	orr.w	r2, r3, #32
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	3301      	adds	r3, #1
 8006664:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	4a08      	ldr	r2, [pc, #32]	; (800668c <USB_FlushTxFifo+0x64>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d901      	bls.n	8006672 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e006      	b.n	8006680 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	f003 0320 	and.w	r3, r3, #32
 800667a:	2b20      	cmp	r3, #32
 800667c:	d0f0      	beq.n	8006660 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	00030d40 	.word	0x00030d40

08006690 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006698:	2300      	movs	r3, #0
 800669a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	3301      	adds	r3, #1
 80066a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	4a11      	ldr	r2, [pc, #68]	; (80066ec <USB_FlushRxFifo+0x5c>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d901      	bls.n	80066ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e018      	b.n	80066e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	daf2      	bge.n	800669c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80066b6:	2300      	movs	r3, #0
 80066b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2210      	movs	r2, #16
 80066be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	3301      	adds	r3, #1
 80066c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	4a08      	ldr	r2, [pc, #32]	; (80066ec <USB_FlushRxFifo+0x5c>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d901      	bls.n	80066d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e006      	b.n	80066e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	f003 0310 	and.w	r3, r3, #16
 80066da:	2b10      	cmp	r3, #16
 80066dc:	d0f0      	beq.n	80066c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3714      	adds	r7, #20
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr
 80066ec:	00030d40 	.word	0x00030d40

080066f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b089      	sub	sp, #36	; 0x24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	4611      	mov	r1, r2
 80066fc:	461a      	mov	r2, r3
 80066fe:	460b      	mov	r3, r1
 8006700:	71fb      	strb	r3, [r7, #7]
 8006702:	4613      	mov	r3, r2
 8006704:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800670e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006712:	2b00      	cmp	r3, #0
 8006714:	d123      	bne.n	800675e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006716:	88bb      	ldrh	r3, [r7, #4]
 8006718:	3303      	adds	r3, #3
 800671a:	089b      	lsrs	r3, r3, #2
 800671c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800671e:	2300      	movs	r3, #0
 8006720:	61bb      	str	r3, [r7, #24]
 8006722:	e018      	b.n	8006756 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006724:	79fb      	ldrb	r3, [r7, #7]
 8006726:	031a      	lsls	r2, r3, #12
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	4413      	add	r3, r2
 800672c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006730:	461a      	mov	r2, r3
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	3301      	adds	r3, #1
 800673c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	3301      	adds	r3, #1
 8006742:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	3301      	adds	r3, #1
 8006748:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	3301      	adds	r3, #1
 800674e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	3301      	adds	r3, #1
 8006754:	61bb      	str	r3, [r7, #24]
 8006756:	69ba      	ldr	r2, [r7, #24]
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	429a      	cmp	r2, r3
 800675c:	d3e2      	bcc.n	8006724 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3724      	adds	r7, #36	; 0x24
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800676c:	b480      	push	{r7}
 800676e:	b08b      	sub	sp, #44	; 0x2c
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	4613      	mov	r3, r2
 8006778:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006782:	88fb      	ldrh	r3, [r7, #6]
 8006784:	089b      	lsrs	r3, r3, #2
 8006786:	b29b      	uxth	r3, r3
 8006788:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800678a:	88fb      	ldrh	r3, [r7, #6]
 800678c:	f003 0303 	and.w	r3, r3, #3
 8006790:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006792:	2300      	movs	r3, #0
 8006794:	623b      	str	r3, [r7, #32]
 8006796:	e014      	b.n	80067c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80067a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a6:	3301      	adds	r3, #1
 80067a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80067aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ac:	3301      	adds	r3, #1
 80067ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80067b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b2:	3301      	adds	r3, #1
 80067b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80067b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b8:	3301      	adds	r3, #1
 80067ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80067bc:	6a3b      	ldr	r3, [r7, #32]
 80067be:	3301      	adds	r3, #1
 80067c0:	623b      	str	r3, [r7, #32]
 80067c2:	6a3a      	ldr	r2, [r7, #32]
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d3e6      	bcc.n	8006798 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80067ca:	8bfb      	ldrh	r3, [r7, #30]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d01e      	beq.n	800680e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80067d0:	2300      	movs	r3, #0
 80067d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067da:	461a      	mov	r2, r3
 80067dc:	f107 0310 	add.w	r3, r7, #16
 80067e0:	6812      	ldr	r2, [r2, #0]
 80067e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	6a3b      	ldr	r3, [r7, #32]
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	00db      	lsls	r3, r3, #3
 80067ec:	fa22 f303 	lsr.w	r3, r2, r3
 80067f0:	b2da      	uxtb	r2, r3
 80067f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f4:	701a      	strb	r2, [r3, #0]
      i++;
 80067f6:	6a3b      	ldr	r3, [r7, #32]
 80067f8:	3301      	adds	r3, #1
 80067fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	3301      	adds	r3, #1
 8006800:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006802:	8bfb      	ldrh	r3, [r7, #30]
 8006804:	3b01      	subs	r3, #1
 8006806:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006808:	8bfb      	ldrh	r3, [r7, #30]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1ea      	bne.n	80067e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006810:	4618      	mov	r0, r3
 8006812:	372c      	adds	r7, #44	; 0x2c
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	695b      	ldr	r3, [r3, #20]
 8006828:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	4013      	ands	r3, r2
 8006832:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006834:	68fb      	ldr	r3, [r7, #12]
}
 8006836:	4618      	mov	r0, r3
 8006838:	3714      	adds	r7, #20
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr

08006842 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006842:	b480      	push	{r7}
 8006844:	b083      	sub	sp, #12
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	f003 0301 	and.w	r3, r3, #1
}
 8006852:	4618      	mov	r0, r3
 8006854:	370c      	adds	r7, #12
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
	...

08006860 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006868:	2300      	movs	r3, #0
 800686a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	3301      	adds	r3, #1
 8006870:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	4a13      	ldr	r2, [pc, #76]	; (80068c4 <USB_CoreReset+0x64>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d901      	bls.n	800687e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e01b      	b.n	80068b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	2b00      	cmp	r3, #0
 8006884:	daf2      	bge.n	800686c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006886:	2300      	movs	r3, #0
 8006888:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	f043 0201 	orr.w	r2, r3, #1
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	3301      	adds	r3, #1
 800689a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	4a09      	ldr	r2, [pc, #36]	; (80068c4 <USB_CoreReset+0x64>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d901      	bls.n	80068a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e006      	b.n	80068b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	f003 0301 	and.w	r3, r3, #1
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d0f0      	beq.n	8006896 <USB_CoreReset+0x36>

  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3714      	adds	r7, #20
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	00030d40 	.word	0x00030d40

080068c8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068c8:	b084      	sub	sp, #16
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b086      	sub	sp, #24
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
 80068d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80068d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80068da:	2300      	movs	r3, #0
 80068dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068e8:	461a      	mov	r2, r3
 80068ea:	2300      	movs	r3, #0
 80068ec:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fe:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800691a:	2b00      	cmp	r3, #0
 800691c:	d018      	beq.n	8006950 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800691e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006920:	2b01      	cmp	r3, #1
 8006922:	d10a      	bne.n	800693a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006932:	f043 0304 	orr.w	r3, r3, #4
 8006936:	6013      	str	r3, [r2, #0]
 8006938:	e014      	b.n	8006964 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006948:	f023 0304 	bic.w	r3, r3, #4
 800694c:	6013      	str	r3, [r2, #0]
 800694e:	e009      	b.n	8006964 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800695e:	f023 0304 	bic.w	r3, r3, #4
 8006962:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006964:	2110      	movs	r1, #16
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f7ff fe5e 	bl	8006628 <USB_FlushTxFifo>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7ff fe8a 	bl	8006690 <USB_FlushRxFifo>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d001      	beq.n	8006986 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006986:	2300      	movs	r3, #0
 8006988:	613b      	str	r3, [r7, #16]
 800698a:	e015      	b.n	80069b8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4413      	add	r3, r2
 8006994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006998:	461a      	mov	r2, r3
 800699a:	f04f 33ff 	mov.w	r3, #4294967295
 800699e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ac:	461a      	mov	r2, r3
 80069ae:	2300      	movs	r3, #0
 80069b0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	3301      	adds	r3, #1
 80069b6:	613b      	str	r3, [r7, #16]
 80069b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d3e5      	bcc.n	800698c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f04f 32ff 	mov.w	r2, #4294967295
 80069cc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00b      	beq.n	80069f2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069e0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a13      	ldr	r2, [pc, #76]	; (8006a34 <USB_HostInit+0x16c>)
 80069e6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a13      	ldr	r2, [pc, #76]	; (8006a38 <USB_HostInit+0x170>)
 80069ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80069f0:	e009      	b.n	8006a06 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2280      	movs	r2, #128	; 0x80
 80069f6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a10      	ldr	r2, [pc, #64]	; (8006a3c <USB_HostInit+0x174>)
 80069fc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a0f      	ldr	r2, [pc, #60]	; (8006a40 <USB_HostInit+0x178>)
 8006a02:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d105      	bne.n	8006a18 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	f043 0210 	orr.w	r2, r3, #16
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	699a      	ldr	r2, [r3, #24]
 8006a1c:	4b09      	ldr	r3, [pc, #36]	; (8006a44 <USB_HostInit+0x17c>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3718      	adds	r7, #24
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a30:	b004      	add	sp, #16
 8006a32:	4770      	bx	lr
 8006a34:	01000200 	.word	0x01000200
 8006a38:	00e00300 	.word	0x00e00300
 8006a3c:	00600080 	.word	0x00600080
 8006a40:	004000e0 	.word	0x004000e0
 8006a44:	a3200008 	.word	0xa3200008

08006a48 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	460b      	mov	r3, r1
 8006a52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006a66:	f023 0303 	bic.w	r3, r3, #3
 8006a6a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	78fb      	ldrb	r3, [r7, #3]
 8006a76:	f003 0303 	and.w	r3, r3, #3
 8006a7a:	68f9      	ldr	r1, [r7, #12]
 8006a7c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006a80:	4313      	orrs	r3, r2
 8006a82:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006a84:	78fb      	ldrb	r3, [r7, #3]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d107      	bne.n	8006a9a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a90:	461a      	mov	r2, r3
 8006a92:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006a96:	6053      	str	r3, [r2, #4]
 8006a98:	e009      	b.n	8006aae <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006a9a:	78fb      	ldrb	r3, [r7, #3]
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d106      	bne.n	8006aae <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	f241 7370 	movw	r3, #6000	; 0x1770
 8006aac:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006adc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aea:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006aec:	2064      	movs	r0, #100	; 0x64
 8006aee:	f7fa fe37 	bl	8001760 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006afa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006afe:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006b00:	200a      	movs	r0, #10
 8006b02:	f7fa fe2d 	bl	8001760 <HAL_Delay>

  return HAL_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	460b      	mov	r3, r1
 8006b1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006b20:	2300      	movs	r3, #0
 8006b22:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006b34:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d109      	bne.n	8006b54 <USB_DriveVbus+0x44>
 8006b40:	78fb      	ldrb	r3, [r7, #3]
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d106      	bne.n	8006b54 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006b4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006b52:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b5e:	d109      	bne.n	8006b74 <USB_DriveVbus+0x64>
 8006b60:	78fb      	ldrb	r3, [r7, #3]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d106      	bne.n	8006b74 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006b6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b72:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b085      	sub	sp, #20
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	0c5b      	lsrs	r3, r3, #17
 8006ba0:	f003 0303 	and.w	r3, r3, #3
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3714      	adds	r7, #20
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	b29b      	uxth	r3, r3
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3714      	adds	r7, #20
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
	...

08006bd4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b088      	sub	sp, #32
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	4608      	mov	r0, r1
 8006bde:	4611      	mov	r1, r2
 8006be0:	461a      	mov	r2, r3
 8006be2:	4603      	mov	r3, r0
 8006be4:	70fb      	strb	r3, [r7, #3]
 8006be6:	460b      	mov	r3, r1
 8006be8:	70bb      	strb	r3, [r7, #2]
 8006bea:	4613      	mov	r3, r2
 8006bec:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006bf6:	78fb      	ldrb	r3, [r7, #3]
 8006bf8:	015a      	lsls	r2, r3, #5
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c02:	461a      	mov	r2, r3
 8006c04:	f04f 33ff 	mov.w	r3, #4294967295
 8006c08:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006c0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	d87e      	bhi.n	8006d10 <USB_HC_Init+0x13c>
 8006c12:	a201      	add	r2, pc, #4	; (adr r2, 8006c18 <USB_HC_Init+0x44>)
 8006c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c18:	08006c29 	.word	0x08006c29
 8006c1c:	08006cd3 	.word	0x08006cd3
 8006c20:	08006c29 	.word	0x08006c29
 8006c24:	08006c95 	.word	0x08006c95
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c28:	78fb      	ldrb	r3, [r7, #3]
 8006c2a:	015a      	lsls	r2, r3, #5
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c34:	461a      	mov	r2, r3
 8006c36:	f240 439d 	movw	r3, #1181	; 0x49d
 8006c3a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006c3c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	da10      	bge.n	8006c66 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006c44:	78fb      	ldrb	r3, [r7, #3]
 8006c46:	015a      	lsls	r2, r3, #5
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	78fa      	ldrb	r2, [r7, #3]
 8006c54:	0151      	lsls	r1, r2, #5
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	440a      	add	r2, r1
 8006c5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c62:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006c64:	e057      	b.n	8006d16 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d051      	beq.n	8006d16 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006c72:	78fb      	ldrb	r3, [r7, #3]
 8006c74:	015a      	lsls	r2, r3, #5
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	4413      	add	r3, r2
 8006c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	78fa      	ldrb	r2, [r7, #3]
 8006c82:	0151      	lsls	r1, r2, #5
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	440a      	add	r2, r1
 8006c88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c8c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006c90:	60d3      	str	r3, [r2, #12]
      break;
 8006c92:	e040      	b.n	8006d16 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c94:	78fb      	ldrb	r3, [r7, #3]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	f240 639d 	movw	r3, #1693	; 0x69d
 8006ca6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006ca8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	da34      	bge.n	8006d1a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006cb0:	78fb      	ldrb	r3, [r7, #3]
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	78fa      	ldrb	r2, [r7, #3]
 8006cc0:	0151      	lsls	r1, r2, #5
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	440a      	add	r2, r1
 8006cc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cce:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006cd0:	e023      	b.n	8006d1a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006cd2:	78fb      	ldrb	r3, [r7, #3]
 8006cd4:	015a      	lsls	r2, r3, #5
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	4413      	add	r3, r2
 8006cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cde:	461a      	mov	r2, r3
 8006ce0:	f240 2325 	movw	r3, #549	; 0x225
 8006ce4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006ce6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	da17      	bge.n	8006d1e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006cee:	78fb      	ldrb	r3, [r7, #3]
 8006cf0:	015a      	lsls	r2, r3, #5
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	78fa      	ldrb	r2, [r7, #3]
 8006cfe:	0151      	lsls	r1, r2, #5
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	440a      	add	r2, r1
 8006d04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d08:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006d0c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006d0e:	e006      	b.n	8006d1e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	77fb      	strb	r3, [r7, #31]
      break;
 8006d14:	e004      	b.n	8006d20 <USB_HC_Init+0x14c>
      break;
 8006d16:	bf00      	nop
 8006d18:	e002      	b.n	8006d20 <USB_HC_Init+0x14c>
      break;
 8006d1a:	bf00      	nop
 8006d1c:	e000      	b.n	8006d20 <USB_HC_Init+0x14c>
      break;
 8006d1e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006d20:	78fb      	ldrb	r3, [r7, #3]
 8006d22:	015a      	lsls	r2, r3, #5
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	4413      	add	r3, r2
 8006d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	78fa      	ldrb	r2, [r7, #3]
 8006d30:	0151      	lsls	r1, r2, #5
 8006d32:	693a      	ldr	r2, [r7, #16]
 8006d34:	440a      	add	r2, r1
 8006d36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d3a:	f043 0302 	orr.w	r3, r3, #2
 8006d3e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d46:	699a      	ldr	r2, [r3, #24]
 8006d48:	78fb      	ldrb	r3, [r7, #3]
 8006d4a:	f003 030f 	and.w	r3, r3, #15
 8006d4e:	2101      	movs	r1, #1
 8006d50:	fa01 f303 	lsl.w	r3, r1, r3
 8006d54:	6939      	ldr	r1, [r7, #16]
 8006d56:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006d6a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	da03      	bge.n	8006d7a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d76:	61bb      	str	r3, [r7, #24]
 8006d78:	e001      	b.n	8006d7e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f7ff feff 	bl	8006b82 <USB_GetHostSpeed>
 8006d84:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006d86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d106      	bne.n	8006d9c <USB_HC_Init+0x1c8>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d003      	beq.n	8006d9c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006d94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006d98:	617b      	str	r3, [r7, #20]
 8006d9a:	e001      	b.n	8006da0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006da0:	787b      	ldrb	r3, [r7, #1]
 8006da2:	059b      	lsls	r3, r3, #22
 8006da4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006da8:	78bb      	ldrb	r3, [r7, #2]
 8006daa:	02db      	lsls	r3, r3, #11
 8006dac:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006db0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006db2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006db6:	049b      	lsls	r3, r3, #18
 8006db8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006dbc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006dbe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006dc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006dc4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006dca:	78fb      	ldrb	r3, [r7, #3]
 8006dcc:	0159      	lsls	r1, r3, #5
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	440b      	add	r3, r1
 8006dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dd6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006ddc:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006dde:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006de2:	2b03      	cmp	r3, #3
 8006de4:	d003      	beq.n	8006dee <USB_HC_Init+0x21a>
 8006de6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d10f      	bne.n	8006e0e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006dee:	78fb      	ldrb	r3, [r7, #3]
 8006df0:	015a      	lsls	r2, r3, #5
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	4413      	add	r3, r2
 8006df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	78fa      	ldrb	r2, [r7, #3]
 8006dfe:	0151      	lsls	r1, r2, #5
 8006e00:	693a      	ldr	r2, [r7, #16]
 8006e02:	440a      	add	r2, r1
 8006e04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e0c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006e0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3720      	adds	r7, #32
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b08c      	sub	sp, #48	; 0x30
 8006e1c:	af02      	add	r7, sp, #8
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	4613      	mov	r3, r2
 8006e24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	785b      	ldrb	r3, [r3, #1]
 8006e2e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006e30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e34:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d02d      	beq.n	8006e9e <USB_HC_StartXfer+0x86>
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	791b      	ldrb	r3, [r3, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d129      	bne.n	8006e9e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006e4a:	79fb      	ldrb	r3, [r7, #7]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d117      	bne.n	8006e80 <USB_HC_StartXfer+0x68>
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	79db      	ldrb	r3, [r3, #7]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d003      	beq.n	8006e60 <USB_HC_StartXfer+0x48>
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	79db      	ldrb	r3, [r3, #7]
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	d10f      	bne.n	8006e80 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	6a3b      	ldr	r3, [r7, #32]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	69fa      	ldr	r2, [r7, #28]
 8006e70:	0151      	lsls	r1, r2, #5
 8006e72:	6a3a      	ldr	r2, [r7, #32]
 8006e74:	440a      	add	r2, r1
 8006e76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e7e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006e80:	79fb      	ldrb	r3, [r7, #7]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10b      	bne.n	8006e9e <USB_HC_StartXfer+0x86>
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	795b      	ldrb	r3, [r3, #5]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d107      	bne.n	8006e9e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	785b      	ldrb	r3, [r3, #1]
 8006e92:	4619      	mov	r1, r3
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f000 fa0f 	bl	80072b8 <USB_DoPing>
      return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	e0f8      	b.n	8007090 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	695b      	ldr	r3, [r3, #20]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d018      	beq.n	8006ed8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	68ba      	ldr	r2, [r7, #8]
 8006eac:	8912      	ldrh	r2, [r2, #8]
 8006eae:	4413      	add	r3, r2
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	8912      	ldrh	r2, [r2, #8]
 8006eb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006eba:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006ebc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006ebe:	8b7b      	ldrh	r3, [r7, #26]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d90b      	bls.n	8006edc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006ec4:	8b7b      	ldrh	r3, [r7, #26]
 8006ec6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006ec8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	8912      	ldrh	r2, [r2, #8]
 8006ece:	fb03 f202 	mul.w	r2, r3, r2
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	611a      	str	r2, [r3, #16]
 8006ed6:	e001      	b.n	8006edc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	78db      	ldrb	r3, [r3, #3]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d007      	beq.n	8006ef4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006ee4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	8912      	ldrh	r2, [r2, #8]
 8006eea:	fb03 f202 	mul.w	r2, r3, r2
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	611a      	str	r2, [r3, #16]
 8006ef2:	e003      	b.n	8006efc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	695a      	ldr	r2, [r3, #20]
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f06:	04d9      	lsls	r1, r3, #19
 8006f08:	4b63      	ldr	r3, [pc, #396]	; (8007098 <USB_HC_StartXfer+0x280>)
 8006f0a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f0c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	7a9b      	ldrb	r3, [r3, #10]
 8006f12:	075b      	lsls	r3, r3, #29
 8006f14:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f18:	69f9      	ldr	r1, [r7, #28]
 8006f1a:	0148      	lsls	r0, r1, #5
 8006f1c:	6a39      	ldr	r1, [r7, #32]
 8006f1e:	4401      	add	r1, r0
 8006f20:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f24:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f26:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006f28:	79fb      	ldrb	r3, [r7, #7]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d009      	beq.n	8006f42 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	68d9      	ldr	r1, [r3, #12]
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	015a      	lsls	r2, r3, #5
 8006f36:	6a3b      	ldr	r3, [r7, #32]
 8006f38:	4413      	add	r3, r2
 8006f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f3e:	460a      	mov	r2, r1
 8006f40:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006f42:	6a3b      	ldr	r3, [r7, #32]
 8006f44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	bf0c      	ite	eq
 8006f52:	2301      	moveq	r3, #1
 8006f54:	2300      	movne	r3, #0
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	015a      	lsls	r2, r3, #5
 8006f5e:	6a3b      	ldr	r3, [r7, #32]
 8006f60:	4413      	add	r3, r2
 8006f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	69fa      	ldr	r2, [r7, #28]
 8006f6a:	0151      	lsls	r1, r2, #5
 8006f6c:	6a3a      	ldr	r2, [r7, #32]
 8006f6e:	440a      	add	r2, r1
 8006f70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f74:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f78:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	015a      	lsls	r2, r3, #5
 8006f7e:	6a3b      	ldr	r3, [r7, #32]
 8006f80:	4413      	add	r3, r2
 8006f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	7e7b      	ldrb	r3, [r7, #25]
 8006f8a:	075b      	lsls	r3, r3, #29
 8006f8c:	69f9      	ldr	r1, [r7, #28]
 8006f8e:	0148      	lsls	r0, r1, #5
 8006f90:	6a39      	ldr	r1, [r7, #32]
 8006f92:	4401      	add	r1, r0
 8006f94:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	015a      	lsls	r2, r3, #5
 8006fa0:	6a3b      	ldr	r3, [r7, #32]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006fb2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	78db      	ldrb	r3, [r3, #3]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d004      	beq.n	8006fc6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fc2:	613b      	str	r3, [r7, #16]
 8006fc4:	e003      	b.n	8006fce <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fcc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fd4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	015a      	lsls	r2, r3, #5
 8006fda:	6a3b      	ldr	r3, [r7, #32]
 8006fdc:	4413      	add	r3, r2
 8006fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006fe8:	79fb      	ldrb	r3, [r7, #7]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d001      	beq.n	8006ff2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	e04e      	b.n	8007090 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	78db      	ldrb	r3, [r3, #3]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d149      	bne.n	800708e <USB_HC_StartXfer+0x276>
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	695b      	ldr	r3, [r3, #20]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d045      	beq.n	800708e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	79db      	ldrb	r3, [r3, #7]
 8007006:	2b03      	cmp	r3, #3
 8007008:	d830      	bhi.n	800706c <USB_HC_StartXfer+0x254>
 800700a:	a201      	add	r2, pc, #4	; (adr r2, 8007010 <USB_HC_StartXfer+0x1f8>)
 800700c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007010:	08007021 	.word	0x08007021
 8007014:	08007045 	.word	0x08007045
 8007018:	08007021 	.word	0x08007021
 800701c:	08007045 	.word	0x08007045
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	695b      	ldr	r3, [r3, #20]
 8007024:	3303      	adds	r3, #3
 8007026:	089b      	lsrs	r3, r3, #2
 8007028:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800702a:	8afa      	ldrh	r2, [r7, #22]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007030:	b29b      	uxth	r3, r3
 8007032:	429a      	cmp	r2, r3
 8007034:	d91c      	bls.n	8007070 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	f043 0220 	orr.w	r2, r3, #32
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	619a      	str	r2, [r3, #24]
        }
        break;
 8007042:	e015      	b.n	8007070 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	695b      	ldr	r3, [r3, #20]
 8007048:	3303      	adds	r3, #3
 800704a:	089b      	lsrs	r3, r3, #2
 800704c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800704e:	8afa      	ldrh	r2, [r7, #22]
 8007050:	6a3b      	ldr	r3, [r7, #32]
 8007052:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	b29b      	uxth	r3, r3
 800705a:	429a      	cmp	r2, r3
 800705c:	d90a      	bls.n	8007074 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	699b      	ldr	r3, [r3, #24]
 8007062:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	619a      	str	r2, [r3, #24]
        }
        break;
 800706a:	e003      	b.n	8007074 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800706c:	bf00      	nop
 800706e:	e002      	b.n	8007076 <USB_HC_StartXfer+0x25e>
        break;
 8007070:	bf00      	nop
 8007072:	e000      	b.n	8007076 <USB_HC_StartXfer+0x25e>
        break;
 8007074:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	68d9      	ldr	r1, [r3, #12]
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	785a      	ldrb	r2, [r3, #1]
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	b29b      	uxth	r3, r3
 8007084:	2000      	movs	r0, #0
 8007086:	9000      	str	r0, [sp, #0]
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f7ff fb31 	bl	80066f0 <USB_WritePacket>
  }

  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3728      	adds	r7, #40	; 0x28
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	1ff80000 	.word	0x1ff80000

0800709c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070ae:	695b      	ldr	r3, [r3, #20]
 80070b0:	b29b      	uxth	r3, r3
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3714      	adds	r7, #20
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80070be:	b480      	push	{r7}
 80070c0:	b089      	sub	sp, #36	; 0x24
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
 80070c6:	460b      	mov	r3, r1
 80070c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80070ce:	78fb      	ldrb	r3, [r7, #3]
 80070d0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80070d2:	2300      	movs	r3, #0
 80070d4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	015a      	lsls	r2, r3, #5
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	4413      	add	r3, r2
 80070de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	0c9b      	lsrs	r3, r3, #18
 80070e6:	f003 0303 	and.w	r3, r3, #3
 80070ea:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	015a      	lsls	r2, r3, #5
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	4413      	add	r3, r2
 80070f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	0fdb      	lsrs	r3, r3, #31
 80070fc:	f003 0301 	and.w	r3, r3, #1
 8007100:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f003 0320 	and.w	r3, r3, #32
 800710a:	2b20      	cmp	r3, #32
 800710c:	d104      	bne.n	8007118 <USB_HC_Halt+0x5a>
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d101      	bne.n	8007118 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007114:	2300      	movs	r3, #0
 8007116:	e0c8      	b.n	80072aa <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d002      	beq.n	8007124 <USB_HC_Halt+0x66>
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	2b02      	cmp	r3, #2
 8007122:	d163      	bne.n	80071ec <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	015a      	lsls	r2, r3, #5
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	4413      	add	r3, r2
 800712c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	69ba      	ldr	r2, [r7, #24]
 8007134:	0151      	lsls	r1, r2, #5
 8007136:	69fa      	ldr	r2, [r7, #28]
 8007138:	440a      	add	r2, r1
 800713a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800713e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007142:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	f003 0320 	and.w	r3, r3, #32
 800714c:	2b00      	cmp	r3, #0
 800714e:	f040 80ab 	bne.w	80072a8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007156:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800715a:	2b00      	cmp	r3, #0
 800715c:	d133      	bne.n	80071c6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	015a      	lsls	r2, r3, #5
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	4413      	add	r3, r2
 8007166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	69ba      	ldr	r2, [r7, #24]
 800716e:	0151      	lsls	r1, r2, #5
 8007170:	69fa      	ldr	r2, [r7, #28]
 8007172:	440a      	add	r2, r1
 8007174:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007178:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800717c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	015a      	lsls	r2, r3, #5
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	4413      	add	r3, r2
 8007186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	69ba      	ldr	r2, [r7, #24]
 800718e:	0151      	lsls	r1, r2, #5
 8007190:	69fa      	ldr	r2, [r7, #28]
 8007192:	440a      	add	r2, r1
 8007194:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007198:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800719c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	3301      	adds	r3, #1
 80071a2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071aa:	d81d      	bhi.n	80071e8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	015a      	lsls	r2, r3, #5
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	4413      	add	r3, r2
 80071b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071c2:	d0ec      	beq.n	800719e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071c4:	e070      	b.n	80072a8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	015a      	lsls	r2, r3, #5
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	69ba      	ldr	r2, [r7, #24]
 80071d6:	0151      	lsls	r1, r2, #5
 80071d8:	69fa      	ldr	r2, [r7, #28]
 80071da:	440a      	add	r2, r1
 80071dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071e4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071e6:	e05f      	b.n	80072a8 <USB_HC_Halt+0x1ea>
            break;
 80071e8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071ea:	e05d      	b.n	80072a8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	015a      	lsls	r2, r3, #5
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	4413      	add	r3, r2
 80071f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	69ba      	ldr	r2, [r7, #24]
 80071fc:	0151      	lsls	r1, r2, #5
 80071fe:	69fa      	ldr	r2, [r7, #28]
 8007200:	440a      	add	r2, r1
 8007202:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007206:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800720a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007218:	2b00      	cmp	r3, #0
 800721a:	d133      	bne.n	8007284 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	015a      	lsls	r2, r3, #5
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	4413      	add	r3, r2
 8007224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	69ba      	ldr	r2, [r7, #24]
 800722c:	0151      	lsls	r1, r2, #5
 800722e:	69fa      	ldr	r2, [r7, #28]
 8007230:	440a      	add	r2, r1
 8007232:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007236:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800723a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	4413      	add	r3, r2
 8007244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	69ba      	ldr	r2, [r7, #24]
 800724c:	0151      	lsls	r1, r2, #5
 800724e:	69fa      	ldr	r2, [r7, #28]
 8007250:	440a      	add	r2, r1
 8007252:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007256:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800725a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	3301      	adds	r3, #1
 8007260:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007268:	d81d      	bhi.n	80072a6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	015a      	lsls	r2, r3, #5
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	4413      	add	r3, r2
 8007272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800727c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007280:	d0ec      	beq.n	800725c <USB_HC_Halt+0x19e>
 8007282:	e011      	b.n	80072a8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	015a      	lsls	r2, r3, #5
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	4413      	add	r3, r2
 800728c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	69ba      	ldr	r2, [r7, #24]
 8007294:	0151      	lsls	r1, r2, #5
 8007296:	69fa      	ldr	r2, [r7, #28]
 8007298:	440a      	add	r2, r1
 800729a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800729e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072a2:	6013      	str	r3, [r2, #0]
 80072a4:	e000      	b.n	80072a8 <USB_HC_Halt+0x1ea>
          break;
 80072a6:	bf00      	nop
    }
  }

  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3724      	adds	r7, #36	; 0x24
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
	...

080072b8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b087      	sub	sp, #28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	460b      	mov	r3, r1
 80072c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80072c8:	78fb      	ldrb	r3, [r7, #3]
 80072ca:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80072cc:	2301      	movs	r3, #1
 80072ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	04da      	lsls	r2, r3, #19
 80072d4:	4b15      	ldr	r3, [pc, #84]	; (800732c <USB_DoPing+0x74>)
 80072d6:	4013      	ands	r3, r2
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	0151      	lsls	r1, r2, #5
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	440a      	add	r2, r1
 80072e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072e8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	015a      	lsls	r2, r3, #5
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	4413      	add	r3, r2
 80072f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007300:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007308:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	015a      	lsls	r2, r3, #5
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	4413      	add	r3, r2
 8007312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007316:	461a      	mov	r2, r3
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	371c      	adds	r7, #28
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	1ff80000 	.word	0x1ff80000

08007330 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b088      	sub	sp, #32
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007338:	2300      	movs	r3, #0
 800733a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007340:	2300      	movs	r3, #0
 8007342:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f7ff f911 	bl	800656c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800734a:	2110      	movs	r1, #16
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f7ff f96b 	bl	8006628 <USB_FlushTxFifo>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f7ff f997 	bl	8006690 <USB_FlushRxFifo>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d001      	beq.n	800736c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800736c:	2300      	movs	r3, #0
 800736e:	61bb      	str	r3, [r7, #24]
 8007370:	e01f      	b.n	80073b2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	015a      	lsls	r2, r3, #5
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	4413      	add	r3, r2
 800737a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007388:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007390:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007398:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	015a      	lsls	r2, r3, #5
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073a6:	461a      	mov	r2, r3
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	3301      	adds	r3, #1
 80073b0:	61bb      	str	r3, [r7, #24]
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	2b0f      	cmp	r3, #15
 80073b6:	d9dc      	bls.n	8007372 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80073b8:	2300      	movs	r3, #0
 80073ba:	61bb      	str	r3, [r7, #24]
 80073bc:	e034      	b.n	8007428 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	015a      	lsls	r2, r3, #5
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	4413      	add	r3, r2
 80073c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073d4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073dc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80073e4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073f2:	461a      	mov	r2, r3
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	3301      	adds	r3, #1
 80073fc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007404:	d80c      	bhi.n	8007420 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	015a      	lsls	r2, r3, #5
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	4413      	add	r3, r2
 800740e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007418:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800741c:	d0ec      	beq.n	80073f8 <USB_StopHost+0xc8>
 800741e:	e000      	b.n	8007422 <USB_StopHost+0xf2>
        break;
 8007420:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	3301      	adds	r3, #1
 8007426:	61bb      	str	r3, [r7, #24]
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	2b0f      	cmp	r3, #15
 800742c:	d9c7      	bls.n	80073be <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007434:	461a      	mov	r2, r3
 8007436:	f04f 33ff 	mov.w	r3, #4294967295
 800743a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f04f 32ff 	mov.w	r2, #4294967295
 8007442:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f7ff f880 	bl	800654a <USB_EnableGlobalInt>

  return ret;
 800744a:	7ffb      	ldrb	r3, [r7, #31]
}
 800744c:	4618      	mov	r0, r3
 800744e:	3720      	adds	r7, #32
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007454:	b590      	push	{r4, r7, lr}
 8007456:	b089      	sub	sp, #36	; 0x24
 8007458:	af04      	add	r7, sp, #16
 800745a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800745c:	2301      	movs	r3, #1
 800745e:	2202      	movs	r2, #2
 8007460:	2102      	movs	r1, #2
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fcb2 	bl	8007dcc <USBH_FindInterface>
 8007468:	4603      	mov	r3, r0
 800746a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800746c:	7bfb      	ldrb	r3, [r7, #15]
 800746e:	2bff      	cmp	r3, #255	; 0xff
 8007470:	d002      	beq.n	8007478 <USBH_CDC_InterfaceInit+0x24>
 8007472:	7bfb      	ldrb	r3, [r7, #15]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d901      	bls.n	800747c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007478:	2302      	movs	r3, #2
 800747a:	e13d      	b.n	80076f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800747c:	7bfb      	ldrb	r3, [r7, #15]
 800747e:	4619      	mov	r1, r3
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 fc87 	bl	8007d94 <USBH_SelectInterface>
 8007486:	4603      	mov	r3, r0
 8007488:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800748a:	7bbb      	ldrb	r3, [r7, #14]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d001      	beq.n	8007494 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007490:	2302      	movs	r3, #2
 8007492:	e131      	b.n	80076f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800749a:	2050      	movs	r0, #80	; 0x50
 800749c:	f005 fcd2 	bl	800ce44 <malloc>
 80074a0:	4603      	mov	r3, r0
 80074a2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074aa:	69db      	ldr	r3, [r3, #28]
 80074ac:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d101      	bne.n	80074b8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80074b4:	2302      	movs	r3, #2
 80074b6:	e11f      	b.n	80076f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80074b8:	2250      	movs	r2, #80	; 0x50
 80074ba:	2100      	movs	r1, #0
 80074bc:	68b8      	ldr	r0, [r7, #8]
 80074be:	f005 fd7d 	bl	800cfbc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	211a      	movs	r1, #26
 80074c8:	fb01 f303 	mul.w	r3, r1, r3
 80074cc:	4413      	add	r3, r2
 80074ce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	b25b      	sxtb	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	da15      	bge.n	8007506 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80074da:	7bfb      	ldrb	r3, [r7, #15]
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	211a      	movs	r1, #26
 80074e0:	fb01 f303 	mul.w	r3, r1, r3
 80074e4:	4413      	add	r3, r2
 80074e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80074ea:	781a      	ldrb	r2, [r3, #0]
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80074f0:	7bfb      	ldrb	r3, [r7, #15]
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	211a      	movs	r1, #26
 80074f6:	fb01 f303 	mul.w	r3, r1, r3
 80074fa:	4413      	add	r3, r2
 80074fc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007500:	881a      	ldrh	r2, [r3, #0]
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	785b      	ldrb	r3, [r3, #1]
 800750a:	4619      	mov	r1, r3
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f002 f986 	bl	800981e <USBH_AllocPipe>
 8007512:	4603      	mov	r3, r0
 8007514:	461a      	mov	r2, r3
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	7819      	ldrb	r1, [r3, #0]
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	7858      	ldrb	r0, [r3, #1]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800752e:	68ba      	ldr	r2, [r7, #8]
 8007530:	8952      	ldrh	r2, [r2, #10]
 8007532:	9202      	str	r2, [sp, #8]
 8007534:	2203      	movs	r2, #3
 8007536:	9201      	str	r2, [sp, #4]
 8007538:	9300      	str	r3, [sp, #0]
 800753a:	4623      	mov	r3, r4
 800753c:	4602      	mov	r2, r0
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f002 f93e 	bl	80097c0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	2200      	movs	r2, #0
 800754a:	4619      	mov	r1, r3
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f005 fbf5 	bl	800cd3c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007552:	2300      	movs	r3, #0
 8007554:	2200      	movs	r2, #0
 8007556:	210a      	movs	r1, #10
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 fc37 	bl	8007dcc <USBH_FindInterface>
 800755e:	4603      	mov	r3, r0
 8007560:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007562:	7bfb      	ldrb	r3, [r7, #15]
 8007564:	2bff      	cmp	r3, #255	; 0xff
 8007566:	d002      	beq.n	800756e <USBH_CDC_InterfaceInit+0x11a>
 8007568:	7bfb      	ldrb	r3, [r7, #15]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d901      	bls.n	8007572 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800756e:	2302      	movs	r3, #2
 8007570:	e0c2      	b.n	80076f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007572:	7bfb      	ldrb	r3, [r7, #15]
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	211a      	movs	r1, #26
 8007578:	fb01 f303 	mul.w	r3, r1, r3
 800757c:	4413      	add	r3, r2
 800757e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	b25b      	sxtb	r3, r3
 8007586:	2b00      	cmp	r3, #0
 8007588:	da16      	bge.n	80075b8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800758a:	7bfb      	ldrb	r3, [r7, #15]
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	211a      	movs	r1, #26
 8007590:	fb01 f303 	mul.w	r3, r1, r3
 8007594:	4413      	add	r3, r2
 8007596:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800759a:	781a      	ldrb	r2, [r3, #0]
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80075a0:	7bfb      	ldrb	r3, [r7, #15]
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	211a      	movs	r1, #26
 80075a6:	fb01 f303 	mul.w	r3, r1, r3
 80075aa:	4413      	add	r3, r2
 80075ac:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80075b0:	881a      	ldrh	r2, [r3, #0]
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	835a      	strh	r2, [r3, #26]
 80075b6:	e015      	b.n	80075e4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80075b8:	7bfb      	ldrb	r3, [r7, #15]
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	211a      	movs	r1, #26
 80075be:	fb01 f303 	mul.w	r3, r1, r3
 80075c2:	4413      	add	r3, r2
 80075c4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80075c8:	781a      	ldrb	r2, [r3, #0]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80075ce:	7bfb      	ldrb	r3, [r7, #15]
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	211a      	movs	r1, #26
 80075d4:	fb01 f303 	mul.w	r3, r1, r3
 80075d8:	4413      	add	r3, r2
 80075da:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80075de:	881a      	ldrh	r2, [r3, #0]
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80075e4:	7bfb      	ldrb	r3, [r7, #15]
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	211a      	movs	r1, #26
 80075ea:	fb01 f303 	mul.w	r3, r1, r3
 80075ee:	4413      	add	r3, r2
 80075f0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	b25b      	sxtb	r3, r3
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	da16      	bge.n	800762a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80075fc:	7bfb      	ldrb	r3, [r7, #15]
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	211a      	movs	r1, #26
 8007602:	fb01 f303 	mul.w	r3, r1, r3
 8007606:	4413      	add	r3, r2
 8007608:	f203 3356 	addw	r3, r3, #854	; 0x356
 800760c:	781a      	ldrb	r2, [r3, #0]
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007612:	7bfb      	ldrb	r3, [r7, #15]
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	211a      	movs	r1, #26
 8007618:	fb01 f303 	mul.w	r3, r1, r3
 800761c:	4413      	add	r3, r2
 800761e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007622:	881a      	ldrh	r2, [r3, #0]
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	835a      	strh	r2, [r3, #26]
 8007628:	e015      	b.n	8007656 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800762a:	7bfb      	ldrb	r3, [r7, #15]
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	211a      	movs	r1, #26
 8007630:	fb01 f303 	mul.w	r3, r1, r3
 8007634:	4413      	add	r3, r2
 8007636:	f203 3356 	addw	r3, r3, #854	; 0x356
 800763a:	781a      	ldrb	r2, [r3, #0]
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007640:	7bfb      	ldrb	r3, [r7, #15]
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	211a      	movs	r1, #26
 8007646:	fb01 f303 	mul.w	r3, r1, r3
 800764a:	4413      	add	r3, r2
 800764c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007650:	881a      	ldrh	r2, [r3, #0]
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	7b9b      	ldrb	r3, [r3, #14]
 800765a:	4619      	mov	r1, r3
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f002 f8de 	bl	800981e <USBH_AllocPipe>
 8007662:	4603      	mov	r3, r0
 8007664:	461a      	mov	r2, r3
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	7bdb      	ldrb	r3, [r3, #15]
 800766e:	4619      	mov	r1, r3
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f002 f8d4 	bl	800981e <USBH_AllocPipe>
 8007676:	4603      	mov	r3, r0
 8007678:	461a      	mov	r2, r3
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	7b59      	ldrb	r1, [r3, #13]
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	7b98      	ldrb	r0, [r3, #14]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007692:	68ba      	ldr	r2, [r7, #8]
 8007694:	8b12      	ldrh	r2, [r2, #24]
 8007696:	9202      	str	r2, [sp, #8]
 8007698:	2202      	movs	r2, #2
 800769a:	9201      	str	r2, [sp, #4]
 800769c:	9300      	str	r3, [sp, #0]
 800769e:	4623      	mov	r3, r4
 80076a0:	4602      	mov	r2, r0
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f002 f88c 	bl	80097c0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	7b19      	ldrb	r1, [r3, #12]
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	7bd8      	ldrb	r0, [r3, #15]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	8b52      	ldrh	r2, [r2, #26]
 80076c0:	9202      	str	r2, [sp, #8]
 80076c2:	2202      	movs	r2, #2
 80076c4:	9201      	str	r2, [sp, #4]
 80076c6:	9300      	str	r3, [sp, #0]
 80076c8:	4623      	mov	r3, r4
 80076ca:	4602      	mov	r2, r0
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f002 f877 	bl	80097c0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	7b5b      	ldrb	r3, [r3, #13]
 80076de:	2200      	movs	r2, #0
 80076e0:	4619      	mov	r1, r3
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f005 fb2a 	bl	800cd3c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	7b1b      	ldrb	r3, [r3, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	4619      	mov	r1, r3
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f005 fb23 	bl	800cd3c <USBH_LL_SetToggle>

  return USBH_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3714      	adds	r7, #20
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd90      	pop	{r4, r7, pc}

08007700 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800770e:	69db      	ldr	r3, [r3, #28]
 8007710:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00e      	beq.n	8007738 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	4619      	mov	r1, r3
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f002 f86c 	bl	80097fe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	4619      	mov	r1, r3
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f002 f897 	bl	8009860 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	7b1b      	ldrb	r3, [r3, #12]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00e      	beq.n	800775e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	7b1b      	ldrb	r3, [r3, #12]
 8007744:	4619      	mov	r1, r3
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f002 f859 	bl	80097fe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	7b1b      	ldrb	r3, [r3, #12]
 8007750:	4619      	mov	r1, r3
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f002 f884 	bl	8009860 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	7b5b      	ldrb	r3, [r3, #13]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00e      	beq.n	8007784 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	7b5b      	ldrb	r3, [r3, #13]
 800776a:	4619      	mov	r1, r3
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f002 f846 	bl	80097fe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	7b5b      	ldrb	r3, [r3, #13]
 8007776:	4619      	mov	r1, r3
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f002 f871 	bl	8009860 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800778a:	69db      	ldr	r3, [r3, #28]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00b      	beq.n	80077a8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007796:	69db      	ldr	r3, [r3, #28]
 8007798:	4618      	mov	r0, r3
 800779a:	f005 fb5b 	bl	800ce54 <free>
    phost->pActiveClass->pData = 0U;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077a4:	2200      	movs	r2, #0
 80077a6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b084      	sub	sp, #16
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077c0:	69db      	ldr	r3, [r3, #28]
 80077c2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	3340      	adds	r3, #64	; 0x40
 80077c8:	4619      	mov	r1, r3
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f8b1 	bl	8007932 <GetLineCoding>
 80077d0:	4603      	mov	r3, r0
 80077d2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80077d4:	7afb      	ldrb	r3, [r7, #11]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d105      	bne.n	80077e6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077e0:	2102      	movs	r1, #2
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80077e6:	7afb      	ldrb	r3, [r7, #11]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80077f8:	2301      	movs	r3, #1
 80077fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80077fc:	2300      	movs	r3, #0
 80077fe:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007806:	69db      	ldr	r3, [r3, #28]
 8007808:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007810:	2b04      	cmp	r3, #4
 8007812:	d877      	bhi.n	8007904 <USBH_CDC_Process+0x114>
 8007814:	a201      	add	r2, pc, #4	; (adr r2, 800781c <USBH_CDC_Process+0x2c>)
 8007816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781a:	bf00      	nop
 800781c:	08007831 	.word	0x08007831
 8007820:	08007837 	.word	0x08007837
 8007824:	08007867 	.word	0x08007867
 8007828:	080078db 	.word	0x080078db
 800782c:	080078e9 	.word	0x080078e9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007830:	2300      	movs	r3, #0
 8007832:	73fb      	strb	r3, [r7, #15]
      break;
 8007834:	e06d      	b.n	8007912 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800783a:	4619      	mov	r1, r3
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 f897 	bl	8007970 <SetLineCoding>
 8007842:	4603      	mov	r3, r0
 8007844:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007846:	7bbb      	ldrb	r3, [r7, #14]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d104      	bne.n	8007856 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	2202      	movs	r2, #2
 8007850:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007854:	e058      	b.n	8007908 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007856:	7bbb      	ldrb	r3, [r7, #14]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d055      	beq.n	8007908 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	2204      	movs	r2, #4
 8007860:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007864:	e050      	b.n	8007908 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	3340      	adds	r3, #64	; 0x40
 800786a:	4619      	mov	r1, r3
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f860 	bl	8007932 <GetLineCoding>
 8007872:	4603      	mov	r3, r0
 8007874:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007876:	7bbb      	ldrb	r3, [r7, #14]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d126      	bne.n	80078ca <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800788e:	791b      	ldrb	r3, [r3, #4]
 8007890:	429a      	cmp	r2, r3
 8007892:	d13b      	bne.n	800790c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800789e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d133      	bne.n	800790c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078ae:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d12b      	bne.n	800790c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078bc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80078be:	429a      	cmp	r2, r3
 80078c0:	d124      	bne.n	800790c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f982 	bl	8007bcc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80078c8:	e020      	b.n	800790c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80078ca:	7bbb      	ldrb	r3, [r7, #14]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d01d      	beq.n	800790c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	2204      	movs	r2, #4
 80078d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80078d8:	e018      	b.n	800790c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f867 	bl	80079ae <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f8f6 	bl	8007ad2 <CDC_ProcessReception>
      break;
 80078e6:	e014      	b.n	8007912 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80078e8:	2100      	movs	r1, #0
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f001 f957 	bl	8008b9e <USBH_ClrFeature>
 80078f0:	4603      	mov	r3, r0
 80078f2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80078f4:	7bbb      	ldrb	r3, [r7, #14]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10a      	bne.n	8007910 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007902:	e005      	b.n	8007910 <USBH_CDC_Process+0x120>

    default:
      break;
 8007904:	bf00      	nop
 8007906:	e004      	b.n	8007912 <USBH_CDC_Process+0x122>
      break;
 8007908:	bf00      	nop
 800790a:	e002      	b.n	8007912 <USBH_CDC_Process+0x122>
      break;
 800790c:	bf00      	nop
 800790e:	e000      	b.n	8007912 <USBH_CDC_Process+0x122>
      break;
 8007910:	bf00      	nop

  }

  return status;
 8007912:	7bfb      	ldrb	r3, [r7, #15]
}
 8007914:	4618      	mov	r0, r3
 8007916:	3710      	adds	r7, #16
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	370c      	adds	r7, #12
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr

08007932 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b082      	sub	sp, #8
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
 800793a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	22a1      	movs	r2, #161	; 0xa1
 8007940:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2221      	movs	r2, #33	; 0x21
 8007946:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2207      	movs	r2, #7
 8007958:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2207      	movs	r2, #7
 800795e:	4619      	mov	r1, r3
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f001 fbeb 	bl	800913c <USBH_CtlReq>
 8007966:	4603      	mov	r3, r0
}
 8007968:	4618      	mov	r0, r3
 800796a:	3708      	adds	r7, #8
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2221      	movs	r2, #33	; 0x21
 800797e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2220      	movs	r2, #32
 8007984:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2207      	movs	r2, #7
 8007996:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	2207      	movs	r2, #7
 800799c:	4619      	mov	r1, r3
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f001 fbcc 	bl	800913c <USBH_CtlReq>
 80079a4:	4603      	mov	r3, r0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3708      	adds	r7, #8
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b086      	sub	sp, #24
 80079b2:	af02      	add	r7, sp, #8
 80079b4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079bc:	69db      	ldr	r3, [r3, #28]
 80079be:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80079c0:	2300      	movs	r3, #0
 80079c2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d002      	beq.n	80079d4 <CDC_ProcessTransmission+0x26>
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d023      	beq.n	8007a1a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80079d2:	e07a      	b.n	8007aca <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	8b12      	ldrh	r2, [r2, #24]
 80079dc:	4293      	cmp	r3, r2
 80079de:	d90b      	bls.n	80079f8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	69d9      	ldr	r1, [r3, #28]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	8b1a      	ldrh	r2, [r3, #24]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	7b5b      	ldrb	r3, [r3, #13]
 80079ec:	2001      	movs	r0, #1
 80079ee:	9000      	str	r0, [sp, #0]
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f001 fea2 	bl	800973a <USBH_BulkSendData>
 80079f6:	e00b      	b.n	8007a10 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	7b5b      	ldrb	r3, [r3, #13]
 8007a06:	2001      	movs	r0, #1
 8007a08:	9000      	str	r0, [sp, #0]
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f001 fe95 	bl	800973a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2202      	movs	r2, #2
 8007a14:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007a18:	e057      	b.n	8007aca <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	7b5b      	ldrb	r3, [r3, #13]
 8007a1e:	4619      	mov	r1, r3
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f005 f961 	bl	800cce8 <USBH_LL_GetURBState>
 8007a26:	4603      	mov	r3, r0
 8007a28:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007a2a:	7afb      	ldrb	r3, [r7, #11]
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d136      	bne.n	8007a9e <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	8b12      	ldrh	r2, [r2, #24]
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d90e      	bls.n	8007a5a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	8b12      	ldrh	r2, [r2, #24]
 8007a44:	1a9a      	subs	r2, r3, r2
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	69db      	ldr	r3, [r3, #28]
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	8b12      	ldrh	r2, [r2, #24]
 8007a52:	441a      	add	r2, r3
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	61da      	str	r2, [r3, #28]
 8007a58:	e002      	b.n	8007a60 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d004      	beq.n	8007a72 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8007a70:	e006      	b.n	8007a80 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f892 	bl	8007ba4 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2204      	movs	r2, #4
 8007a84:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007a94:	2300      	movs	r3, #0
 8007a96:	2200      	movs	r2, #0
 8007a98:	f002 f8d2 	bl	8009c40 <osMessageQueuePut>
      break;
 8007a9c:	e014      	b.n	8007ac8 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8007a9e:	7afb      	ldrb	r3, [r7, #11]
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	d111      	bne.n	8007ac8 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2204      	movs	r2, #4
 8007ab0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f002 f8bc 	bl	8009c40 <osMessageQueuePut>
      break;
 8007ac8:	bf00      	nop
  }
}
 8007aca:	bf00      	nop
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b086      	sub	sp, #24
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ae0:	69db      	ldr	r3, [r3, #28]
 8007ae2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007aee:	2b03      	cmp	r3, #3
 8007af0:	d002      	beq.n	8007af8 <CDC_ProcessReception+0x26>
 8007af2:	2b04      	cmp	r3, #4
 8007af4:	d00e      	beq.n	8007b14 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007af6:	e051      	b.n	8007b9c <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	6a19      	ldr	r1, [r3, #32]
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	8b5a      	ldrh	r2, [r3, #26]
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	7b1b      	ldrb	r3, [r3, #12]
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f001 fe3d 	bl	8009784 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	2204      	movs	r2, #4
 8007b0e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007b12:	e043      	b.n	8007b9c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	7b1b      	ldrb	r3, [r3, #12]
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f005 f8e4 	bl	800cce8 <USBH_LL_GetURBState>
 8007b20:	4603      	mov	r3, r0
 8007b22:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007b24:	7cfb      	ldrb	r3, [r7, #19]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d137      	bne.n	8007b9a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	7b1b      	ldrb	r3, [r3, #12]
 8007b2e:	4619      	mov	r1, r3
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f005 f847 	bl	800cbc4 <USBH_LL_GetLastXferSize>
 8007b36:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d016      	beq.n	8007b70 <CDC_ProcessReception+0x9e>
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	8b5b      	ldrh	r3, [r3, #26]
 8007b46:	461a      	mov	r2, r3
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d910      	bls.n	8007b70 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	1ad2      	subs	r2, r2, r3
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	6a1a      	ldr	r2, [r3, #32]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	441a      	add	r2, r3
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	2203      	movs	r2, #3
 8007b6a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8007b6e:	e006      	b.n	8007b7e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 f81d 	bl	8007bb8 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2204      	movs	r2, #4
 8007b82:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007b92:	2300      	movs	r3, #0
 8007b94:	2200      	movs	r2, #0
 8007b96:	f002 f853 	bl	8009c40 <osMessageQueuePut>
      break;
 8007b9a:	bf00      	nop
  }
}
 8007b9c:	bf00      	nop
 8007b9e:	3718      	adds	r7, #24
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007bc0:	bf00      	nop
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007bd4:	bf00      	nop
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	4613      	mov	r3, r2
 8007bec:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d101      	bne.n	8007bf8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007bf4:	2302      	movs	r3, #2
 8007bf6:	e044      	b.n	8007c82 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	79fa      	ldrb	r2, [r7, #7]
 8007bfc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f000 f841 	bl	8007c98 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d003      	beq.n	8007c44 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8007c44:	2200      	movs	r2, #0
 8007c46:	2104      	movs	r1, #4
 8007c48:	2010      	movs	r0, #16
 8007c4a:	f001 ff86 	bl	8009b5a <osMessageQueueNew>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8007c56:	4b0d      	ldr	r3, [pc, #52]	; (8007c8c <USBH_Init+0xac>)
 8007c58:	4a0d      	ldr	r2, [pc, #52]	; (8007c90 <USBH_Init+0xb0>)
 8007c5a:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8007c5c:	4b0b      	ldr	r3, [pc, #44]	; (8007c8c <USBH_Init+0xac>)
 8007c5e:	2280      	movs	r2, #128	; 0x80
 8007c60:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8007c62:	4b0a      	ldr	r3, [pc, #40]	; (8007c8c <USBH_Init+0xac>)
 8007c64:	2218      	movs	r2, #24
 8007c66:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8007c68:	4a08      	ldr	r2, [pc, #32]	; (8007c8c <USBH_Init+0xac>)
 8007c6a:	68f9      	ldr	r1, [r7, #12]
 8007c6c:	4809      	ldr	r0, [pc, #36]	; (8007c94 <USBH_Init+0xb4>)
 8007c6e:	f001 fec7 	bl	8009a00 <osThreadNew>
 8007c72:	4602      	mov	r2, r0
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f004 fee4 	bl	800ca48 <USBH_LL_Init>

  return USBH_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	20000354 	.word	0x20000354
 8007c90:	0800d124 	.word	0x0800d124
 8007c94:	08008915 	.word	0x08008915

08007c98 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	60fb      	str	r3, [r7, #12]
 8007ca8:	e009      	b.n	8007cbe <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	33e0      	adds	r3, #224	; 0xe0
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	4413      	add	r3, r2
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	60fb      	str	r3, [r7, #12]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2b0f      	cmp	r3, #15
 8007cc2:	d9f2      	bls.n	8007caa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	60fb      	str	r3, [r7, #12]
 8007cc8:	e009      	b.n	8007cde <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	60fb      	str	r3, [r7, #12]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ce4:	d3f1      	bcc.n	8007cca <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2240      	movs	r2, #64	; 0x40
 8007d0a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3714      	adds	r7, #20
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d016      	beq.n	8007d82 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10e      	bne.n	8007d7c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007d64:	1c59      	adds	r1, r3, #1
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	33de      	adds	r3, #222	; 0xde
 8007d70:	6839      	ldr	r1, [r7, #0]
 8007d72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007d76:	2300      	movs	r3, #0
 8007d78:	73fb      	strb	r3, [r7, #15]
 8007d7a:	e004      	b.n	8007d86 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007d7c:	2302      	movs	r3, #2
 8007d7e:	73fb      	strb	r3, [r7, #15]
 8007d80:	e001      	b.n	8007d86 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007d82:	2302      	movs	r3, #2
 8007d84:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3714      	adds	r7, #20
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007da0:	2300      	movs	r3, #0
 8007da2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007daa:	78fa      	ldrb	r2, [r7, #3]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d204      	bcs.n	8007dba <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	78fa      	ldrb	r2, [r7, #3]
 8007db4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007db8:	e001      	b.n	8007dbe <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007dba:	2302      	movs	r3, #2
 8007dbc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3714      	adds	r7, #20
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b087      	sub	sp, #28
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	4608      	mov	r0, r1
 8007dd6:	4611      	mov	r1, r2
 8007dd8:	461a      	mov	r2, r3
 8007dda:	4603      	mov	r3, r0
 8007ddc:	70fb      	strb	r3, [r7, #3]
 8007dde:	460b      	mov	r3, r1
 8007de0:	70bb      	strb	r3, [r7, #2]
 8007de2:	4613      	mov	r3, r2
 8007de4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007de6:	2300      	movs	r3, #0
 8007de8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007dea:	2300      	movs	r3, #0
 8007dec:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007df4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007df6:	e025      	b.n	8007e44 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007df8:	7dfb      	ldrb	r3, [r7, #23]
 8007dfa:	221a      	movs	r2, #26
 8007dfc:	fb02 f303 	mul.w	r3, r2, r3
 8007e00:	3308      	adds	r3, #8
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	4413      	add	r3, r2
 8007e06:	3302      	adds	r3, #2
 8007e08:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	795b      	ldrb	r3, [r3, #5]
 8007e0e:	78fa      	ldrb	r2, [r7, #3]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d002      	beq.n	8007e1a <USBH_FindInterface+0x4e>
 8007e14:	78fb      	ldrb	r3, [r7, #3]
 8007e16:	2bff      	cmp	r3, #255	; 0xff
 8007e18:	d111      	bne.n	8007e3e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007e1e:	78ba      	ldrb	r2, [r7, #2]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d002      	beq.n	8007e2a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007e24:	78bb      	ldrb	r3, [r7, #2]
 8007e26:	2bff      	cmp	r3, #255	; 0xff
 8007e28:	d109      	bne.n	8007e3e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007e2e:	787a      	ldrb	r2, [r7, #1]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d002      	beq.n	8007e3a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007e34:	787b      	ldrb	r3, [r7, #1]
 8007e36:	2bff      	cmp	r3, #255	; 0xff
 8007e38:	d101      	bne.n	8007e3e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007e3a:	7dfb      	ldrb	r3, [r7, #23]
 8007e3c:	e006      	b.n	8007e4c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007e3e:	7dfb      	ldrb	r3, [r7, #23]
 8007e40:	3301      	adds	r3, #1
 8007e42:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007e44:	7dfb      	ldrb	r3, [r7, #23]
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d9d6      	bls.n	8007df8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007e4a:	23ff      	movs	r3, #255	; 0xff
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	371c      	adds	r7, #28
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f004 fe37 	bl	800cad4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007e66:	2101      	movs	r1, #1
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f004 ff50 	bl	800cd0e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b088      	sub	sp, #32
 8007e7c:	af04      	add	r7, sp, #16
 8007e7e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007e80:	2302      	movs	r3, #2
 8007e82:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007e84:	2300      	movs	r3, #0
 8007e86:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d102      	bne.n	8007e9a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2203      	movs	r2, #3
 8007e98:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	2b0b      	cmp	r3, #11
 8007ea2:	f200 8247 	bhi.w	8008334 <USBH_Process+0x4bc>
 8007ea6:	a201      	add	r2, pc, #4	; (adr r2, 8007eac <USBH_Process+0x34>)
 8007ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eac:	08007edd 	.word	0x08007edd
 8007eb0:	08007f2b 	.word	0x08007f2b
 8007eb4:	08007faf 	.word	0x08007faf
 8007eb8:	080082b3 	.word	0x080082b3
 8007ebc:	08008335 	.word	0x08008335
 8007ec0:	0800806f 	.word	0x0800806f
 8007ec4:	0800823d 	.word	0x0800823d
 8007ec8:	080080c1 	.word	0x080080c1
 8007ecc:	080080fd 	.word	0x080080fd
 8007ed0:	08008137 	.word	0x08008137
 8007ed4:	08008195 	.word	0x08008195
 8007ed8:	0800829b 	.word	0x0800829b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f000 8227 	beq.w	8008338 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2201      	movs	r2, #1
 8007eee:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007ef0:	20c8      	movs	r0, #200	; 0xc8
 8007ef2:	f004 ff53 	bl	800cd9c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f004 fe49 	bl	800cb8e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007f20:	2300      	movs	r3, #0
 8007f22:	2200      	movs	r2, #0
 8007f24:	f001 fe8c 	bl	8009c40 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8007f28:	e206      	b.n	8008338 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d107      	bne.n	8007f44 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2202      	movs	r2, #2
 8007f40:	701a      	strb	r2, [r3, #0]
 8007f42:	e025      	b.n	8007f90 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007f4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f4e:	d914      	bls.n	8007f7a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007f56:	3301      	adds	r3, #1
 8007f58:	b2da      	uxtb	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007f66:	2b03      	cmp	r3, #3
 8007f68:	d903      	bls.n	8007f72 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	220d      	movs	r2, #13
 8007f6e:	701a      	strb	r2, [r3, #0]
 8007f70:	e00e      	b.n	8007f90 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	701a      	strb	r2, [r3, #0]
 8007f78:	e00a      	b.n	8007f90 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007f80:	f103 020a 	add.w	r2, r3, #10
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007f8a:	200a      	movs	r0, #10
 8007f8c:	f004 ff06 	bl	800cd9c <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f001 fe4a 	bl	8009c40 <osMessageQueuePut>
#endif
#endif
      break;
 8007fac:	e1cb      	b.n	8008346 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d005      	beq.n	8007fc4 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007fbe:	2104      	movs	r1, #4
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007fc4:	2064      	movs	r0, #100	; 0x64
 8007fc6:	f004 fee9 	bl	800cd9c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f004 fdb8 	bl	800cb40 <USBH_LL_GetSpeed>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2205      	movs	r2, #5
 8007fde:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f001 fc1b 	bl	800981e <USBH_AllocPipe>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	461a      	mov	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007ff0:	2180      	movs	r1, #128	; 0x80
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f001 fc13 	bl	800981e <USBH_AllocPipe>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	7919      	ldrb	r1, [r3, #4]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008014:	b292      	uxth	r2, r2
 8008016:	9202      	str	r2, [sp, #8]
 8008018:	2200      	movs	r2, #0
 800801a:	9201      	str	r2, [sp, #4]
 800801c:	9300      	str	r3, [sp, #0]
 800801e:	4603      	mov	r3, r0
 8008020:	2280      	movs	r2, #128	; 0x80
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f001 fbcc 	bl	80097c0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	7959      	ldrb	r1, [r3, #5]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800803c:	b292      	uxth	r2, r2
 800803e:	9202      	str	r2, [sp, #8]
 8008040:	2200      	movs	r2, #0
 8008042:	9201      	str	r2, [sp, #4]
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	4603      	mov	r3, r0
 8008048:	2200      	movs	r2, #0
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f001 fbb8 	bl	80097c0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008064:	2300      	movs	r3, #0
 8008066:	2200      	movs	r2, #0
 8008068:	f001 fdea 	bl	8009c40 <osMessageQueuePut>
#endif
#endif
      break;
 800806c:	e16b      	b.n	8008346 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 f96e 	bl	8008350 <USBH_HandleEnum>
 8008074:	4603      	mov	r3, r0
 8008076:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008078:	7bbb      	ldrb	r3, [r7, #14]
 800807a:	b2db      	uxtb	r3, r3
 800807c:	2b00      	cmp	r3, #0
 800807e:	f040 815d 	bne.w	800833c <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008090:	2b01      	cmp	r3, #1
 8008092:	d103      	bne.n	800809c <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2208      	movs	r2, #8
 8008098:	701a      	strb	r2, [r3, #0]
 800809a:	e002      	b.n	80080a2 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2207      	movs	r2, #7
 80080a0:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2205      	movs	r2, #5
 80080a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80080b6:	2300      	movs	r3, #0
 80080b8:	2200      	movs	r2, #0
 80080ba:	f001 fdc1 	bl	8009c40 <osMessageQueuePut>
#endif
#endif
      }
      break;
 80080be:	e13d      	b.n	800833c <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	f000 813a 	beq.w	8008340 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80080d2:	2101      	movs	r1, #1
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2208      	movs	r2, #8
 80080dc:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2205      	movs	r2, #5
 80080e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80080f2:	2300      	movs	r3, #0
 80080f4:	2200      	movs	r2, #0
 80080f6:	f001 fda3 	bl	8009c40 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 80080fa:	e121      	b.n	8008340 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008102:	b29b      	uxth	r3, r3
 8008104:	4619      	mov	r1, r3
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fd02 	bl	8008b10 <USBH_SetCfg>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d102      	bne.n	8008118 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2209      	movs	r2, #9
 8008116:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800812c:	2300      	movs	r3, #0
 800812e:	2200      	movs	r2, #0
 8008130:	f001 fd86 	bl	8009c40 <osMessageQueuePut>
#endif
#endif
      break;
 8008134:	e107      	b.n	8008346 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800813c:	f003 0320 	and.w	r3, r3, #32
 8008140:	2b00      	cmp	r3, #0
 8008142:	d015      	beq.n	8008170 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008144:	2101      	movs	r1, #1
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 fd05 	bl	8008b56 <USBH_SetFeature>
 800814c:	4603      	mov	r3, r0
 800814e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008150:	7bbb      	ldrb	r3, [r7, #14]
 8008152:	b2db      	uxtb	r3, r3
 8008154:	2b00      	cmp	r3, #0
 8008156:	d103      	bne.n	8008160 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	220a      	movs	r2, #10
 800815c:	701a      	strb	r2, [r3, #0]
 800815e:	e00a      	b.n	8008176 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8008160:	7bbb      	ldrb	r3, [r7, #14]
 8008162:	b2db      	uxtb	r3, r3
 8008164:	2b03      	cmp	r3, #3
 8008166:	d106      	bne.n	8008176 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	220a      	movs	r2, #10
 800816c:	701a      	strb	r2, [r3, #0]
 800816e:	e002      	b.n	8008176 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	220a      	movs	r2, #10
 8008174:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2201      	movs	r2, #1
 800817a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800818a:	2300      	movs	r3, #0
 800818c:	2200      	movs	r2, #0
 800818e:	f001 fd57 	bl	8009c40 <osMessageQueuePut>
#endif
#endif
      break;
 8008192:	e0d8      	b.n	8008346 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800819a:	2b00      	cmp	r3, #0
 800819c:	d03f      	beq.n	800821e <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80081a6:	2300      	movs	r3, #0
 80081a8:	73fb      	strb	r3, [r7, #15]
 80081aa:	e016      	b.n	80081da <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80081ac:	7bfa      	ldrb	r2, [r7, #15]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	32de      	adds	r2, #222	; 0xde
 80081b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b6:	791a      	ldrb	r2, [r3, #4]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80081be:	429a      	cmp	r2, r3
 80081c0:	d108      	bne.n	80081d4 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 80081c2:	7bfa      	ldrb	r2, [r7, #15]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	32de      	adds	r2, #222	; 0xde
 80081c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80081d2:	e005      	b.n	80081e0 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80081d4:	7bfb      	ldrb	r3, [r7, #15]
 80081d6:	3301      	adds	r3, #1
 80081d8:	73fb      	strb	r3, [r7, #15]
 80081da:	7bfb      	ldrb	r3, [r7, #15]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d0e5      	beq.n	80081ac <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d016      	beq.n	8008218 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	4798      	blx	r3
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d109      	bne.n	8008210 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2206      	movs	r2, #6
 8008200:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008208:	2103      	movs	r1, #3
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	4798      	blx	r3
 800820e:	e006      	b.n	800821e <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	220d      	movs	r2, #13
 8008214:	701a      	strb	r2, [r3, #0]
 8008216:	e002      	b.n	800821e <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	220d      	movs	r2, #13
 800821c:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2205      	movs	r2, #5
 8008222:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008232:	2300      	movs	r3, #0
 8008234:	2200      	movs	r2, #0
 8008236:	f001 fd03 	bl	8009c40 <osMessageQueuePut>
#endif
#endif
      break;
 800823a:	e084      	b.n	8008346 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008242:	2b00      	cmp	r3, #0
 8008244:	d017      	beq.n	8008276 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	4798      	blx	r3
 8008252:	4603      	mov	r3, r0
 8008254:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008256:	7bbb      	ldrb	r3, [r7, #14]
 8008258:	b2db      	uxtb	r3, r3
 800825a:	2b00      	cmp	r3, #0
 800825c:	d103      	bne.n	8008266 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	220b      	movs	r2, #11
 8008262:	701a      	strb	r2, [r3, #0]
 8008264:	e00a      	b.n	800827c <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 8008266:	7bbb      	ldrb	r3, [r7, #14]
 8008268:	b2db      	uxtb	r3, r3
 800826a:	2b02      	cmp	r3, #2
 800826c:	d106      	bne.n	800827c <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	220d      	movs	r2, #13
 8008272:	701a      	strb	r2, [r3, #0]
 8008274:	e002      	b.n	800827c <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	220d      	movs	r2, #13
 800827a:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2205      	movs	r2, #5
 8008280:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008290:	2300      	movs	r3, #0
 8008292:	2200      	movs	r2, #0
 8008294:	f001 fcd4 	bl	8009c40 <osMessageQueuePut>
#endif
#endif
      break;
 8008298:	e055      	b.n	8008346 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d04f      	beq.n	8008344 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082aa:	695b      	ldr	r3, [r3, #20]
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	4798      	blx	r3
      }
      break;
 80082b0:	e048      	b.n	8008344 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f7ff fcec 	bl	8007c98 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d009      	beq.n	80082de <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d005      	beq.n	80082f4 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082ee:	2105      	movs	r1, #5
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d107      	bne.n	8008310 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f7ff fda5 	bl	8007e58 <USBH_Start>
 800830e:	e002      	b.n	8008316 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f004 fbdf 	bl	800cad4 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2201      	movs	r2, #1
 800831a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800832a:	2300      	movs	r3, #0
 800832c:	2200      	movs	r2, #0
 800832e:	f001 fc87 	bl	8009c40 <osMessageQueuePut>
#endif
#endif
      break;
 8008332:	e008      	b.n	8008346 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 8008334:	bf00      	nop
 8008336:	e006      	b.n	8008346 <USBH_Process+0x4ce>
      break;
 8008338:	bf00      	nop
 800833a:	e004      	b.n	8008346 <USBH_Process+0x4ce>
      break;
 800833c:	bf00      	nop
 800833e:	e002      	b.n	8008346 <USBH_Process+0x4ce>
    break;
 8008340:	bf00      	nop
 8008342:	e000      	b.n	8008346 <USBH_Process+0x4ce>
      break;
 8008344:	bf00      	nop
  }
  return USBH_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b088      	sub	sp, #32
 8008354:	af04      	add	r7, sp, #16
 8008356:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008358:	2301      	movs	r3, #1
 800835a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800835c:	2301      	movs	r3, #1
 800835e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	785b      	ldrb	r3, [r3, #1]
 8008364:	2b07      	cmp	r3, #7
 8008366:	f200 8208 	bhi.w	800877a <USBH_HandleEnum+0x42a>
 800836a:	a201      	add	r2, pc, #4	; (adr r2, 8008370 <USBH_HandleEnum+0x20>)
 800836c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008370:	08008391 	.word	0x08008391
 8008374:	0800844f 	.word	0x0800844f
 8008378:	080084b9 	.word	0x080084b9
 800837c:	08008547 	.word	0x08008547
 8008380:	080085b1 	.word	0x080085b1
 8008384:	08008621 	.word	0x08008621
 8008388:	080086bd 	.word	0x080086bd
 800838c:	0800873b 	.word	0x0800873b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008390:	2108      	movs	r1, #8
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 faec 	bl	8008970 <USBH_Get_DevDesc>
 8008398:	4603      	mov	r3, r0
 800839a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800839c:	7bbb      	ldrb	r3, [r7, #14]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d130      	bne.n	8008404 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2201      	movs	r2, #1
 80083b0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	7919      	ldrb	r1, [r3, #4]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80083c6:	b292      	uxth	r2, r2
 80083c8:	9202      	str	r2, [sp, #8]
 80083ca:	2200      	movs	r2, #0
 80083cc:	9201      	str	r2, [sp, #4]
 80083ce:	9300      	str	r3, [sp, #0]
 80083d0:	4603      	mov	r3, r0
 80083d2:	2280      	movs	r2, #128	; 0x80
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f001 f9f3 	bl	80097c0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	7959      	ldrb	r1, [r3, #5]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80083ee:	b292      	uxth	r2, r2
 80083f0:	9202      	str	r2, [sp, #8]
 80083f2:	2200      	movs	r2, #0
 80083f4:	9201      	str	r2, [sp, #4]
 80083f6:	9300      	str	r3, [sp, #0]
 80083f8:	4603      	mov	r3, r0
 80083fa:	2200      	movs	r2, #0
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f001 f9df 	bl	80097c0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008402:	e1bc      	b.n	800877e <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008404:	7bbb      	ldrb	r3, [r7, #14]
 8008406:	2b03      	cmp	r3, #3
 8008408:	f040 81b9 	bne.w	800877e <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008412:	3301      	adds	r3, #1
 8008414:	b2da      	uxtb	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008422:	2b03      	cmp	r3, #3
 8008424:	d903      	bls.n	800842e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	220d      	movs	r2, #13
 800842a:	701a      	strb	r2, [r3, #0]
      break;
 800842c:	e1a7      	b.n	800877e <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	795b      	ldrb	r3, [r3, #5]
 8008432:	4619      	mov	r1, r3
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f001 fa13 	bl	8009860 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	791b      	ldrb	r3, [r3, #4]
 800843e:	4619      	mov	r1, r3
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f001 fa0d 	bl	8009860 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	701a      	strb	r2, [r3, #0]
      break;
 800844c:	e197      	b.n	800877e <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800844e:	2112      	movs	r1, #18
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 fa8d 	bl	8008970 <USBH_Get_DevDesc>
 8008456:	4603      	mov	r3, r0
 8008458:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800845a:	7bbb      	ldrb	r3, [r7, #14]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d103      	bne.n	8008468 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2202      	movs	r2, #2
 8008464:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008466:	e18c      	b.n	8008782 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008468:	7bbb      	ldrb	r3, [r7, #14]
 800846a:	2b03      	cmp	r3, #3
 800846c:	f040 8189 	bne.w	8008782 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008476:	3301      	adds	r3, #1
 8008478:	b2da      	uxtb	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008486:	2b03      	cmp	r3, #3
 8008488:	d903      	bls.n	8008492 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	220d      	movs	r2, #13
 800848e:	701a      	strb	r2, [r3, #0]
      break;
 8008490:	e177      	b.n	8008782 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	795b      	ldrb	r3, [r3, #5]
 8008496:	4619      	mov	r1, r3
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f001 f9e1 	bl	8009860 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	791b      	ldrb	r3, [r3, #4]
 80084a2:	4619      	mov	r1, r3
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f001 f9db 	bl	8009860 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	701a      	strb	r2, [r3, #0]
      break;
 80084b6:	e164      	b.n	8008782 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80084b8:	2101      	movs	r1, #1
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fb04 	bl	8008ac8 <USBH_SetAddress>
 80084c0:	4603      	mov	r3, r0
 80084c2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80084c4:	7bbb      	ldrb	r3, [r7, #14]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d132      	bne.n	8008530 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80084ca:	2002      	movs	r0, #2
 80084cc:	f004 fc66 	bl	800cd9c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2203      	movs	r2, #3
 80084dc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	7919      	ldrb	r1, [r3, #4]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80084f2:	b292      	uxth	r2, r2
 80084f4:	9202      	str	r2, [sp, #8]
 80084f6:	2200      	movs	r2, #0
 80084f8:	9201      	str	r2, [sp, #4]
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	4603      	mov	r3, r0
 80084fe:	2280      	movs	r2, #128	; 0x80
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f001 f95d 	bl	80097c0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	7959      	ldrb	r1, [r3, #5]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800851a:	b292      	uxth	r2, r2
 800851c:	9202      	str	r2, [sp, #8]
 800851e:	2200      	movs	r2, #0
 8008520:	9201      	str	r2, [sp, #4]
 8008522:	9300      	str	r3, [sp, #0]
 8008524:	4603      	mov	r3, r0
 8008526:	2200      	movs	r2, #0
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f001 f949 	bl	80097c0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800852e:	e12a      	b.n	8008786 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008530:	7bbb      	ldrb	r3, [r7, #14]
 8008532:	2b03      	cmp	r3, #3
 8008534:	f040 8127 	bne.w	8008786 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	220d      	movs	r2, #13
 800853c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	705a      	strb	r2, [r3, #1]
      break;
 8008544:	e11f      	b.n	8008786 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008546:	2109      	movs	r1, #9
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 fa39 	bl	80089c0 <USBH_Get_CfgDesc>
 800854e:	4603      	mov	r3, r0
 8008550:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008552:	7bbb      	ldrb	r3, [r7, #14]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d103      	bne.n	8008560 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2204      	movs	r2, #4
 800855c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800855e:	e114      	b.n	800878a <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008560:	7bbb      	ldrb	r3, [r7, #14]
 8008562:	2b03      	cmp	r3, #3
 8008564:	f040 8111 	bne.w	800878a <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800856e:	3301      	adds	r3, #1
 8008570:	b2da      	uxtb	r2, r3
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800857e:	2b03      	cmp	r3, #3
 8008580:	d903      	bls.n	800858a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	220d      	movs	r2, #13
 8008586:	701a      	strb	r2, [r3, #0]
      break;
 8008588:	e0ff      	b.n	800878a <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	795b      	ldrb	r3, [r3, #5]
 800858e:	4619      	mov	r1, r3
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f001 f965 	bl	8009860 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	791b      	ldrb	r3, [r3, #4]
 800859a:	4619      	mov	r1, r3
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f001 f95f 	bl	8009860 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	701a      	strb	r2, [r3, #0]
      break;
 80085ae:	e0ec      	b.n	800878a <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80085b6:	4619      	mov	r1, r3
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 fa01 	bl	80089c0 <USBH_Get_CfgDesc>
 80085be:	4603      	mov	r3, r0
 80085c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80085c2:	7bbb      	ldrb	r3, [r7, #14]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d103      	bne.n	80085d0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2205      	movs	r2, #5
 80085cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80085ce:	e0de      	b.n	800878e <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085d0:	7bbb      	ldrb	r3, [r7, #14]
 80085d2:	2b03      	cmp	r3, #3
 80085d4:	f040 80db 	bne.w	800878e <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085de:	3301      	adds	r3, #1
 80085e0:	b2da      	uxtb	r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085ee:	2b03      	cmp	r3, #3
 80085f0:	d903      	bls.n	80085fa <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	220d      	movs	r2, #13
 80085f6:	701a      	strb	r2, [r3, #0]
      break;
 80085f8:	e0c9      	b.n	800878e <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	795b      	ldrb	r3, [r3, #5]
 80085fe:	4619      	mov	r1, r3
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f001 f92d 	bl	8009860 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	791b      	ldrb	r3, [r3, #4]
 800860a:	4619      	mov	r1, r3
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f001 f927 	bl	8009860 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	701a      	strb	r2, [r3, #0]
      break;
 800861e:	e0b6      	b.n	800878e <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008626:	2b00      	cmp	r3, #0
 8008628:	d036      	beq.n	8008698 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008636:	23ff      	movs	r3, #255	; 0xff
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 f9e5 	bl	8008a08 <USBH_Get_StringDesc>
 800863e:	4603      	mov	r3, r0
 8008640:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008642:	7bbb      	ldrb	r3, [r7, #14]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d111      	bne.n	800866c <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2206      	movs	r2, #6
 800864c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2205      	movs	r2, #5
 8008652:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008662:	2300      	movs	r3, #0
 8008664:	2200      	movs	r2, #0
 8008666:	f001 faeb 	bl	8009c40 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800866a:	e092      	b.n	8008792 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800866c:	7bbb      	ldrb	r3, [r7, #14]
 800866e:	2b03      	cmp	r3, #3
 8008670:	f040 808f 	bne.w	8008792 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2206      	movs	r2, #6
 8008678:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2205      	movs	r2, #5
 800867e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800868e:	2300      	movs	r3, #0
 8008690:	2200      	movs	r2, #0
 8008692:	f001 fad5 	bl	8009c40 <osMessageQueuePut>
      break;
 8008696:	e07c      	b.n	8008792 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2206      	movs	r2, #6
 800869c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2205      	movs	r2, #5
 80086a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80086b2:	2300      	movs	r3, #0
 80086b4:	2200      	movs	r2, #0
 80086b6:	f001 fac3 	bl	8009c40 <osMessageQueuePut>
      break;
 80086ba:	e06a      	b.n	8008792 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d027      	beq.n	8008716 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80086d2:	23ff      	movs	r3, #255	; 0xff
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 f997 	bl	8008a08 <USBH_Get_StringDesc>
 80086da:	4603      	mov	r3, r0
 80086dc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80086de:	7bbb      	ldrb	r3, [r7, #14]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d103      	bne.n	80086ec <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2207      	movs	r2, #7
 80086e8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80086ea:	e054      	b.n	8008796 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086ec:	7bbb      	ldrb	r3, [r7, #14]
 80086ee:	2b03      	cmp	r3, #3
 80086f0:	d151      	bne.n	8008796 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2207      	movs	r2, #7
 80086f6:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2205      	movs	r2, #5
 80086fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800870c:	2300      	movs	r3, #0
 800870e:	2200      	movs	r2, #0
 8008710:	f001 fa96 	bl	8009c40 <osMessageQueuePut>
      break;
 8008714:	e03f      	b.n	8008796 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2207      	movs	r2, #7
 800871a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2205      	movs	r2, #5
 8008720:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008730:	2300      	movs	r3, #0
 8008732:	2200      	movs	r2, #0
 8008734:	f001 fa84 	bl	8009c40 <osMessageQueuePut>
      break;
 8008738:	e02d      	b.n	8008796 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008740:	2b00      	cmp	r3, #0
 8008742:	d017      	beq.n	8008774 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008750:	23ff      	movs	r3, #255	; 0xff
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 f958 	bl	8008a08 <USBH_Get_StringDesc>
 8008758:	4603      	mov	r3, r0
 800875a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800875c:	7bbb      	ldrb	r3, [r7, #14]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d102      	bne.n	8008768 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008762:	2300      	movs	r3, #0
 8008764:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008766:	e018      	b.n	800879a <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008768:	7bbb      	ldrb	r3, [r7, #14]
 800876a:	2b03      	cmp	r3, #3
 800876c:	d115      	bne.n	800879a <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800876e:	2300      	movs	r3, #0
 8008770:	73fb      	strb	r3, [r7, #15]
      break;
 8008772:	e012      	b.n	800879a <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8008774:	2300      	movs	r3, #0
 8008776:	73fb      	strb	r3, [r7, #15]
      break;
 8008778:	e00f      	b.n	800879a <USBH_HandleEnum+0x44a>

    default:
      break;
 800877a:	bf00      	nop
 800877c:	e00e      	b.n	800879c <USBH_HandleEnum+0x44c>
      break;
 800877e:	bf00      	nop
 8008780:	e00c      	b.n	800879c <USBH_HandleEnum+0x44c>
      break;
 8008782:	bf00      	nop
 8008784:	e00a      	b.n	800879c <USBH_HandleEnum+0x44c>
      break;
 8008786:	bf00      	nop
 8008788:	e008      	b.n	800879c <USBH_HandleEnum+0x44c>
      break;
 800878a:	bf00      	nop
 800878c:	e006      	b.n	800879c <USBH_HandleEnum+0x44c>
      break;
 800878e:	bf00      	nop
 8008790:	e004      	b.n	800879c <USBH_HandleEnum+0x44c>
      break;
 8008792:	bf00      	nop
 8008794:	e002      	b.n	800879c <USBH_HandleEnum+0x44c>
      break;
 8008796:	bf00      	nop
 8008798:	e000      	b.n	800879c <USBH_HandleEnum+0x44c>
      break;
 800879a:	bf00      	nop
  }
  return Status;
 800879c:	7bfb      	ldrb	r3, [r7, #15]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop

080087a8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	683a      	ldr	r2, [r7, #0]
 80087b6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80087ba:	bf00      	nop
 80087bc:	370c      	adds	r7, #12
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr

080087c6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b082      	sub	sp, #8
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80087d4:	1c5a      	adds	r2, r3, #1
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 f804 	bl	80087ea <USBH_HandleSof>
}
 80087e2:	bf00      	nop
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b082      	sub	sp, #8
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	2b0b      	cmp	r3, #11
 80087fa:	d10a      	bne.n	8008812 <USBH_HandleSof+0x28>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008802:	2b00      	cmp	r3, #0
 8008804:	d005      	beq.n	8008812 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800880c:	699b      	ldr	r3, [r3, #24]
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	4798      	blx	r3
  }
}
 8008812:	bf00      	nop
 8008814:	3708      	adds	r7, #8
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b082      	sub	sp, #8
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2201      	movs	r2, #1
 8008826:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2201      	movs	r2, #1
 800882e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800883e:	2300      	movs	r3, #0
 8008840:	2200      	movs	r2, #0
 8008842:	f001 f9fd 	bl	8009c40 <osMessageQueuePut>
#endif
#endif

  return;
 8008846:	bf00      	nop
}
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800884e:	b480      	push	{r7}
 8008850:	b083      	sub	sp, #12
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800885e:	bf00      	nop
}
 8008860:	370c      	adds	r7, #12
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr

0800886a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b082      	sub	sp, #8
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2201      	movs	r2, #1
 8008876:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2201      	movs	r2, #1
 800888e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800889e:	2300      	movs	r3, #0
 80088a0:	2200      	movs	r2, #0
 80088a2:	f001 f9cd 	bl	8009c40 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3708      	adds	r7, #8
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f004 f91a 	bl	800cb0a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	791b      	ldrb	r3, [r3, #4]
 80088da:	4619      	mov	r1, r3
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 ffbf 	bl	8009860 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	795b      	ldrb	r3, [r3, #5]
 80088e6:	4619      	mov	r1, r3
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 ffb9 	bl	8009860 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2201      	movs	r2, #1
 80088f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008902:	2300      	movs	r3, #0
 8008904:	2200      	movs	r2, #0
 8008906:	f001 f99b 	bl	8009c40 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	3708      	adds	r7, #8
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8008928:	f04f 33ff 	mov.w	r3, #4294967295
 800892c:	2200      	movs	r2, #0
 800892e:	f001 f9e7 	bl	8009d00 <osMessageQueueGet>
 8008932:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1f0      	bne.n	800891c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f7ff fa9c 	bl	8007e78 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8008940:	e7ec      	b.n	800891c <USBH_Process_OS+0x8>

08008942 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b082      	sub	sp, #8
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2201      	movs	r2, #1
 800894e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800895e:	2300      	movs	r3, #0
 8008960:	2200      	movs	r2, #0
 8008962:	f001 f96d 	bl	8009c40 <osMessageQueuePut>
#endif

  return USBH_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3708      	adds	r7, #8
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b086      	sub	sp, #24
 8008974:	af02      	add	r7, sp, #8
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	460b      	mov	r3, r1
 800897a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008982:	78fb      	ldrb	r3, [r7, #3]
 8008984:	b29b      	uxth	r3, r3
 8008986:	9300      	str	r3, [sp, #0]
 8008988:	4613      	mov	r3, r2
 800898a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800898e:	2100      	movs	r1, #0
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 f864 	bl	8008a5e <USBH_GetDescriptor>
 8008996:	4603      	mov	r3, r0
 8008998:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800899a:	7bfb      	ldrb	r3, [r7, #15]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d10a      	bne.n	80089b6 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f203 3026 	addw	r0, r3, #806	; 0x326
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80089ac:	78fa      	ldrb	r2, [r7, #3]
 80089ae:	b292      	uxth	r2, r2
 80089b0:	4619      	mov	r1, r3
 80089b2:	f000 f919 	bl	8008be8 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80089b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b086      	sub	sp, #24
 80089c4:	af02      	add	r7, sp, #8
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	460b      	mov	r3, r1
 80089ca:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	331c      	adds	r3, #28
 80089d0:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80089d2:	887b      	ldrh	r3, [r7, #2]
 80089d4:	9300      	str	r3, [sp, #0]
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089dc:	2100      	movs	r1, #0
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 f83d 	bl	8008a5e <USBH_GetDescriptor>
 80089e4:	4603      	mov	r3, r0
 80089e6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80089e8:	7bfb      	ldrb	r3, [r7, #15]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d107      	bne.n	80089fe <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80089ee:	887b      	ldrh	r3, [r7, #2]
 80089f0:	461a      	mov	r2, r3
 80089f2:	68b9      	ldr	r1, [r7, #8]
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 f989 	bl	8008d0c <USBH_ParseCfgDesc>
 80089fa:	4603      	mov	r3, r0
 80089fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80089fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b088      	sub	sp, #32
 8008a0c:	af02      	add	r7, sp, #8
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	607a      	str	r2, [r7, #4]
 8008a12:	461a      	mov	r2, r3
 8008a14:	460b      	mov	r3, r1
 8008a16:	72fb      	strb	r3, [r7, #11]
 8008a18:	4613      	mov	r3, r2
 8008a1a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8008a1c:	7afb      	ldrb	r3, [r7, #11]
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008a24:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008a2c:	893b      	ldrh	r3, [r7, #8]
 8008a2e:	9300      	str	r3, [sp, #0]
 8008a30:	460b      	mov	r3, r1
 8008a32:	2100      	movs	r1, #0
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f000 f812 	bl	8008a5e <USBH_GetDescriptor>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008a3e:	7dfb      	ldrb	r3, [r7, #23]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d107      	bne.n	8008a54 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008a4a:	893a      	ldrh	r2, [r7, #8]
 8008a4c:	6879      	ldr	r1, [r7, #4]
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f000 fb26 	bl	80090a0 <USBH_ParseStringDesc>
  }

  return status;
 8008a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3718      	adds	r7, #24
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b084      	sub	sp, #16
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	60f8      	str	r0, [r7, #12]
 8008a66:	607b      	str	r3, [r7, #4]
 8008a68:	460b      	mov	r3, r1
 8008a6a:	72fb      	strb	r3, [r7, #11]
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	789b      	ldrb	r3, [r3, #2]
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d11c      	bne.n	8008ab2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008a78:	7afb      	ldrb	r3, [r7, #11]
 8008a7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008a7e:	b2da      	uxtb	r2, r3
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2206      	movs	r2, #6
 8008a88:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	893a      	ldrh	r2, [r7, #8]
 8008a8e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008a90:	893b      	ldrh	r3, [r7, #8]
 8008a92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008a96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a9a:	d104      	bne.n	8008aa6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f240 4209 	movw	r2, #1033	; 0x409
 8008aa2:	829a      	strh	r2, [r3, #20]
 8008aa4:	e002      	b.n	8008aac <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	8b3a      	ldrh	r2, [r7, #24]
 8008ab0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008ab2:	8b3b      	ldrh	r3, [r7, #24]
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	6879      	ldr	r1, [r7, #4]
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f000 fb3f 	bl	800913c <USBH_CtlReq>
 8008abe:	4603      	mov	r3, r0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	789b      	ldrb	r3, [r3, #2]
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d10f      	bne.n	8008afc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2205      	movs	r2, #5
 8008ae6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008ae8:	78fb      	ldrb	r3, [r7, #3]
 8008aea:	b29a      	uxth	r2, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2200      	movs	r2, #0
 8008af4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008afc:	2200      	movs	r2, #0
 8008afe:	2100      	movs	r1, #0
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 fb1b 	bl	800913c <USBH_CtlReq>
 8008b06:	4603      	mov	r3, r0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3708      	adds	r7, #8
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	460b      	mov	r3, r1
 8008b1a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	789b      	ldrb	r3, [r3, #2]
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d10e      	bne.n	8008b42 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2209      	movs	r2, #9
 8008b2e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	887a      	ldrh	r2, [r7, #2]
 8008b34:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008b42:	2200      	movs	r2, #0
 8008b44:	2100      	movs	r1, #0
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 faf8 	bl	800913c <USBH_CtlReq>
 8008b4c:	4603      	mov	r3, r0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3708      	adds	r7, #8
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b082      	sub	sp, #8
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
 8008b5e:	460b      	mov	r3, r1
 8008b60:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	789b      	ldrb	r3, [r3, #2]
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d10f      	bne.n	8008b8a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2203      	movs	r2, #3
 8008b74:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008b76:	78fb      	ldrb	r3, [r7, #3]
 8008b78:	b29a      	uxth	r2, r3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	2100      	movs	r1, #0
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 fad4 	bl	800913c <USBH_CtlReq>
 8008b94:	4603      	mov	r3, r0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3708      	adds	r7, #8
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	b082      	sub	sp, #8
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	789b      	ldrb	r3, [r3, #2]
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d10f      	bne.n	8008bd2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2202      	movs	r2, #2
 8008bb6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008bc4:	78fb      	ldrb	r3, [r7, #3]
 8008bc6:	b29a      	uxth	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 fab0 	bl	800913c <USBH_CtlReq>
 8008bdc:	4603      	mov	r3, r0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3708      	adds	r7, #8
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
	...

08008be8 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	781a      	ldrb	r2, [r3, #0]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	785a      	ldrb	r2, [r3, #1]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	3302      	adds	r3, #2
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	b29a      	uxth	r2, r3
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	3303      	adds	r3, #3
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	021b      	lsls	r3, r3, #8
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	b29a      	uxth	r2, r3
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	791a      	ldrb	r2, [r3, #4]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	795a      	ldrb	r2, [r3, #5]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	799a      	ldrb	r2, [r3, #6]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	79da      	ldrb	r2, [r3, #7]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	79db      	ldrb	r3, [r3, #7]
 8008c46:	2b20      	cmp	r3, #32
 8008c48:	dc0f      	bgt.n	8008c6a <USBH_ParseDevDesc+0x82>
 8008c4a:	2b08      	cmp	r3, #8
 8008c4c:	db14      	blt.n	8008c78 <USBH_ParseDevDesc+0x90>
 8008c4e:	3b08      	subs	r3, #8
 8008c50:	4a2d      	ldr	r2, [pc, #180]	; (8008d08 <USBH_ParseDevDesc+0x120>)
 8008c52:	fa22 f303 	lsr.w	r3, r2, r3
 8008c56:	f003 0301 	and.w	r3, r3, #1
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	bf14      	ite	ne
 8008c5e:	2301      	movne	r3, #1
 8008c60:	2300      	moveq	r3, #0
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d102      	bne.n	8008c6e <USBH_ParseDevDesc+0x86>
 8008c68:	e006      	b.n	8008c78 <USBH_ParseDevDesc+0x90>
 8008c6a:	2b40      	cmp	r3, #64	; 0x40
 8008c6c:	d104      	bne.n	8008c78 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	79da      	ldrb	r2, [r3, #7]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	71da      	strb	r2, [r3, #7]
      break;
 8008c76:	e003      	b.n	8008c80 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2240      	movs	r2, #64	; 0x40
 8008c7c:	71da      	strb	r2, [r3, #7]
      break;
 8008c7e:	bf00      	nop
  }

  if (length > 8U)
 8008c80:	88fb      	ldrh	r3, [r7, #6]
 8008c82:	2b08      	cmp	r3, #8
 8008c84:	d939      	bls.n	8008cfa <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	3308      	adds	r3, #8
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	b29a      	uxth	r2, r3
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	3309      	adds	r3, #9
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	021b      	lsls	r3, r3, #8
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	b29a      	uxth	r2, r3
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	330a      	adds	r3, #10
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	b29a      	uxth	r2, r3
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	330b      	adds	r3, #11
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	021b      	lsls	r3, r3, #8
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	b29a      	uxth	r2, r3
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	330c      	adds	r3, #12
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	b29a      	uxth	r2, r3
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	330d      	adds	r3, #13
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	021b      	lsls	r3, r3, #8
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	b29a      	uxth	r2, r3
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	7b9a      	ldrb	r2, [r3, #14]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	7bda      	ldrb	r2, [r3, #15]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	7c1a      	ldrb	r2, [r3, #16]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	7c5a      	ldrb	r2, [r3, #17]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	745a      	strb	r2, [r3, #17]
  }
}
 8008cfa:	bf00      	nop
 8008cfc:	3714      	adds	r7, #20
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	01000101 	.word	0x01000101

08008d0c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b08c      	sub	sp, #48	; 0x30
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	4613      	mov	r3, r2
 8008d18:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008d20:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008d22:	2300      	movs	r3, #0
 8008d24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008d32:	2300      	movs	r3, #0
 8008d34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	781a      	ldrb	r2, [r3, #0]
 8008d40:	6a3b      	ldr	r3, [r7, #32]
 8008d42:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	785a      	ldrb	r2, [r3, #1]
 8008d48:	6a3b      	ldr	r3, [r7, #32]
 8008d4a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	3302      	adds	r3, #2
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	3303      	adds	r3, #3
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	021b      	lsls	r3, r3, #8
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	4313      	orrs	r3, r2
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d68:	bf28      	it	cs
 8008d6a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008d6e:	b29a      	uxth	r2, r3
 8008d70:	6a3b      	ldr	r3, [r7, #32]
 8008d72:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	791a      	ldrb	r2, [r3, #4]
 8008d78:	6a3b      	ldr	r3, [r7, #32]
 8008d7a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	795a      	ldrb	r2, [r3, #5]
 8008d80:	6a3b      	ldr	r3, [r7, #32]
 8008d82:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	799a      	ldrb	r2, [r3, #6]
 8008d88:	6a3b      	ldr	r3, [r7, #32]
 8008d8a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	79da      	ldrb	r2, [r3, #7]
 8008d90:	6a3b      	ldr	r3, [r7, #32]
 8008d92:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	7a1a      	ldrb	r2, [r3, #8]
 8008d98:	6a3b      	ldr	r3, [r7, #32]
 8008d9a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008d9c:	6a3b      	ldr	r3, [r7, #32]
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	2b09      	cmp	r3, #9
 8008da2:	d002      	beq.n	8008daa <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008da4:	6a3b      	ldr	r3, [r7, #32]
 8008da6:	2209      	movs	r2, #9
 8008da8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008daa:	88fb      	ldrh	r3, [r7, #6]
 8008dac:	2b09      	cmp	r3, #9
 8008dae:	f240 809d 	bls.w	8008eec <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008db2:	2309      	movs	r3, #9
 8008db4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008db6:	2300      	movs	r3, #0
 8008db8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008dba:	e081      	b.n	8008ec0 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008dbc:	f107 0316 	add.w	r3, r7, #22
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dc4:	f000 f99f 	bl	8009106 <USBH_GetNextDesc>
 8008dc8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dcc:	785b      	ldrb	r3, [r3, #1]
 8008dce:	2b04      	cmp	r3, #4
 8008dd0:	d176      	bne.n	8008ec0 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	2b09      	cmp	r3, #9
 8008dd8:	d002      	beq.n	8008de0 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ddc:	2209      	movs	r2, #9
 8008dde:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008de0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008de4:	221a      	movs	r2, #26
 8008de6:	fb02 f303 	mul.w	r3, r2, r3
 8008dea:	3308      	adds	r3, #8
 8008dec:	6a3a      	ldr	r2, [r7, #32]
 8008dee:	4413      	add	r3, r2
 8008df0:	3302      	adds	r3, #2
 8008df2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008df4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008df6:	69f8      	ldr	r0, [r7, #28]
 8008df8:	f000 f87e 	bl	8008ef8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008e02:	2300      	movs	r3, #0
 8008e04:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008e06:	e043      	b.n	8008e90 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008e08:	f107 0316 	add.w	r3, r7, #22
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e10:	f000 f979 	bl	8009106 <USBH_GetNextDesc>
 8008e14:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e18:	785b      	ldrb	r3, [r3, #1]
 8008e1a:	2b05      	cmp	r3, #5
 8008e1c:	d138      	bne.n	8008e90 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	795b      	ldrb	r3, [r3, #5]
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d10f      	bne.n	8008e46 <USBH_ParseCfgDesc+0x13a>
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	799b      	ldrb	r3, [r3, #6]
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	d10b      	bne.n	8008e46 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	79db      	ldrb	r3, [r3, #7]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d10f      	bne.n	8008e56 <USBH_ParseCfgDesc+0x14a>
 8008e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	2b09      	cmp	r3, #9
 8008e3c:	d00b      	beq.n	8008e56 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e40:	2209      	movs	r2, #9
 8008e42:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008e44:	e007      	b.n	8008e56 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	2b07      	cmp	r3, #7
 8008e4c:	d004      	beq.n	8008e58 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e50:	2207      	movs	r2, #7
 8008e52:	701a      	strb	r2, [r3, #0]
 8008e54:	e000      	b.n	8008e58 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008e56:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e5c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008e60:	3201      	adds	r2, #1
 8008e62:	00d2      	lsls	r2, r2, #3
 8008e64:	211a      	movs	r1, #26
 8008e66:	fb01 f303 	mul.w	r3, r1, r3
 8008e6a:	4413      	add	r3, r2
 8008e6c:	3308      	adds	r3, #8
 8008e6e:	6a3a      	ldr	r2, [r7, #32]
 8008e70:	4413      	add	r3, r2
 8008e72:	3304      	adds	r3, #4
 8008e74:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008e76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e78:	69b9      	ldr	r1, [r7, #24]
 8008e7a:	68f8      	ldr	r0, [r7, #12]
 8008e7c:	f000 f86b 	bl	8008f56 <USBH_ParseEPDesc>
 8008e80:	4603      	mov	r3, r0
 8008e82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008e86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	791b      	ldrb	r3, [r3, #4]
 8008e94:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d204      	bcs.n	8008ea6 <USBH_ParseCfgDesc+0x19a>
 8008e9c:	6a3b      	ldr	r3, [r7, #32]
 8008e9e:	885a      	ldrh	r2, [r3, #2]
 8008ea0:	8afb      	ldrh	r3, [r7, #22]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d8b0      	bhi.n	8008e08 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	791b      	ldrb	r3, [r3, #4]
 8008eaa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d201      	bcs.n	8008eb6 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008eb2:	2303      	movs	r3, #3
 8008eb4:	e01c      	b.n	8008ef0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008eb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008eba:	3301      	adds	r3, #1
 8008ebc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d805      	bhi.n	8008ed4 <USBH_ParseCfgDesc+0x1c8>
 8008ec8:	6a3b      	ldr	r3, [r7, #32]
 8008eca:	885a      	ldrh	r2, [r3, #2]
 8008ecc:	8afb      	ldrh	r3, [r7, #22]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	f63f af74 	bhi.w	8008dbc <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008ed4:	6a3b      	ldr	r3, [r7, #32]
 8008ed6:	791b      	ldrb	r3, [r3, #4]
 8008ed8:	2b02      	cmp	r3, #2
 8008eda:	bf28      	it	cs
 8008edc:	2302      	movcs	r3, #2
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d201      	bcs.n	8008eec <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008ee8:	2303      	movs	r3, #3
 8008eea:	e001      	b.n	8008ef0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008eec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3730      	adds	r7, #48	; 0x30
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	781a      	ldrb	r2, [r3, #0]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	785a      	ldrb	r2, [r3, #1]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	789a      	ldrb	r2, [r3, #2]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	78da      	ldrb	r2, [r3, #3]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	791a      	ldrb	r2, [r3, #4]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	795a      	ldrb	r2, [r3, #5]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	799a      	ldrb	r2, [r3, #6]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	79da      	ldrb	r2, [r3, #7]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	7a1a      	ldrb	r2, [r3, #8]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	721a      	strb	r2, [r3, #8]
}
 8008f4a:	bf00      	nop
 8008f4c:	370c      	adds	r7, #12
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr

08008f56 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008f56:	b480      	push	{r7}
 8008f58:	b087      	sub	sp, #28
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	60f8      	str	r0, [r7, #12]
 8008f5e:	60b9      	str	r1, [r7, #8]
 8008f60:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008f62:	2300      	movs	r3, #0
 8008f64:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	781a      	ldrb	r2, [r3, #0]
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	785a      	ldrb	r2, [r3, #1]
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	789a      	ldrb	r2, [r3, #2]
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	78da      	ldrb	r2, [r3, #3]
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	3304      	adds	r3, #4
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	b29a      	uxth	r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	3305      	adds	r3, #5
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	021b      	lsls	r3, r3, #8
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	799a      	ldrb	r2, [r3, #6]
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	889b      	ldrh	r3, [r3, #4]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d102      	bne.n	8008fb8 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008fb2:	2303      	movs	r3, #3
 8008fb4:	75fb      	strb	r3, [r7, #23]
 8008fb6:	e033      	b.n	8009020 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	889b      	ldrh	r3, [r3, #4]
 8008fbc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008fc0:	f023 0307 	bic.w	r3, r3, #7
 8008fc4:	b29a      	uxth	r2, r3
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	889b      	ldrh	r3, [r3, #4]
 8008fce:	b21a      	sxth	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	3304      	adds	r3, #4
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	b299      	uxth	r1, r3
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	3305      	adds	r3, #5
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	021b      	lsls	r3, r3, #8
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	430b      	orrs	r3, r1
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d110      	bne.n	8009012 <USBH_ParseEPDesc+0xbc>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	3304      	adds	r3, #4
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	b299      	uxth	r1, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	3305      	adds	r3, #5
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	021b      	lsls	r3, r3, #8
 8009002:	b29b      	uxth	r3, r3
 8009004:	430b      	orrs	r3, r1
 8009006:	b29b      	uxth	r3, r3
 8009008:	b21b      	sxth	r3, r3
 800900a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800900e:	b21b      	sxth	r3, r3
 8009010:	e001      	b.n	8009016 <USBH_ParseEPDesc+0xc0>
 8009012:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009016:	4313      	orrs	r3, r2
 8009018:	b21b      	sxth	r3, r3
 800901a:	b29a      	uxth	r2, r3
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009026:	2b00      	cmp	r3, #0
 8009028:	d116      	bne.n	8009058 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	78db      	ldrb	r3, [r3, #3]
 800902e:	f003 0303 	and.w	r3, r3, #3
 8009032:	2b01      	cmp	r3, #1
 8009034:	d005      	beq.n	8009042 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	78db      	ldrb	r3, [r3, #3]
 800903a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800903e:	2b03      	cmp	r3, #3
 8009040:	d127      	bne.n	8009092 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	799b      	ldrb	r3, [r3, #6]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d003      	beq.n	8009052 <USBH_ParseEPDesc+0xfc>
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	799b      	ldrb	r3, [r3, #6]
 800904e:	2b10      	cmp	r3, #16
 8009050:	d91f      	bls.n	8009092 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009052:	2303      	movs	r3, #3
 8009054:	75fb      	strb	r3, [r7, #23]
 8009056:	e01c      	b.n	8009092 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	78db      	ldrb	r3, [r3, #3]
 800905c:	f003 0303 	and.w	r3, r3, #3
 8009060:	2b01      	cmp	r3, #1
 8009062:	d10a      	bne.n	800907a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	799b      	ldrb	r3, [r3, #6]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d003      	beq.n	8009074 <USBH_ParseEPDesc+0x11e>
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	799b      	ldrb	r3, [r3, #6]
 8009070:	2b10      	cmp	r3, #16
 8009072:	d90e      	bls.n	8009092 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009074:	2303      	movs	r3, #3
 8009076:	75fb      	strb	r3, [r7, #23]
 8009078:	e00b      	b.n	8009092 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	78db      	ldrb	r3, [r3, #3]
 800907e:	f003 0303 	and.w	r3, r3, #3
 8009082:	2b03      	cmp	r3, #3
 8009084:	d105      	bne.n	8009092 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	799b      	ldrb	r3, [r3, #6]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d101      	bne.n	8009092 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800908e:	2303      	movs	r3, #3
 8009090:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8009092:	7dfb      	ldrb	r3, [r7, #23]
}
 8009094:	4618      	mov	r0, r3
 8009096:	371c      	adds	r7, #28
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b087      	sub	sp, #28
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	4613      	mov	r3, r2
 80090ac:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	3301      	adds	r3, #1
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	2b03      	cmp	r3, #3
 80090b6:	d120      	bne.n	80090fa <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	1e9a      	subs	r2, r3, #2
 80090be:	88fb      	ldrh	r3, [r7, #6]
 80090c0:	4293      	cmp	r3, r2
 80090c2:	bf28      	it	cs
 80090c4:	4613      	movcs	r3, r2
 80090c6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	3302      	adds	r3, #2
 80090cc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80090ce:	2300      	movs	r3, #0
 80090d0:	82fb      	strh	r3, [r7, #22]
 80090d2:	e00b      	b.n	80090ec <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80090d4:	8afb      	ldrh	r3, [r7, #22]
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	4413      	add	r3, r2
 80090da:	781a      	ldrb	r2, [r3, #0]
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	701a      	strb	r2, [r3, #0]
      pdest++;
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	3301      	adds	r3, #1
 80090e4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80090e6:	8afb      	ldrh	r3, [r7, #22]
 80090e8:	3302      	adds	r3, #2
 80090ea:	82fb      	strh	r3, [r7, #22]
 80090ec:	8afa      	ldrh	r2, [r7, #22]
 80090ee:	8abb      	ldrh	r3, [r7, #20]
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d3ef      	bcc.n	80090d4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	2200      	movs	r2, #0
 80090f8:	701a      	strb	r2, [r3, #0]
  }
}
 80090fa:	bf00      	nop
 80090fc:	371c      	adds	r7, #28
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr

08009106 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009106:	b480      	push	{r7}
 8009108:	b085      	sub	sp, #20
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
 800910e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	881a      	ldrh	r2, [r3, #0]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	b29b      	uxth	r3, r3
 800911a:	4413      	add	r3, r2
 800911c:	b29a      	uxth	r2, r3
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4413      	add	r3, r2
 800912c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800912e:	68fb      	ldr	r3, [r7, #12]
}
 8009130:	4618      	mov	r0, r3
 8009132:	3714      	adds	r7, #20
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b086      	sub	sp, #24
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	4613      	mov	r3, r2
 8009148:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800914a:	2301      	movs	r3, #1
 800914c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	789b      	ldrb	r3, [r3, #2]
 8009152:	2b01      	cmp	r3, #1
 8009154:	d002      	beq.n	800915c <USBH_CtlReq+0x20>
 8009156:	2b02      	cmp	r3, #2
 8009158:	d01d      	beq.n	8009196 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800915a:	e043      	b.n	80091e4 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	68ba      	ldr	r2, [r7, #8]
 8009160:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	88fa      	ldrh	r2, [r7, #6]
 8009166:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2201      	movs	r2, #1
 800916c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2202      	movs	r2, #2
 8009172:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009174:	2301      	movs	r3, #1
 8009176:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2203      	movs	r2, #3
 800917c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800918c:	2300      	movs	r3, #0
 800918e:	2200      	movs	r2, #0
 8009190:	f000 fd56 	bl	8009c40 <osMessageQueuePut>
      break;
 8009194:	e026      	b.n	80091e4 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f000 f82a 	bl	80091f0 <USBH_HandleControl>
 800919c:	4603      	mov	r3, r0
 800919e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80091a0:	7dfb      	ldrb	r3, [r7, #23]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d002      	beq.n	80091ac <USBH_CtlReq+0x70>
 80091a6:	7dfb      	ldrb	r3, [r7, #23]
 80091a8:	2b03      	cmp	r3, #3
 80091aa:	d106      	bne.n	80091ba <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2201      	movs	r2, #1
 80091b0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2200      	movs	r2, #0
 80091b6:	761a      	strb	r2, [r3, #24]
 80091b8:	e005      	b.n	80091c6 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 80091ba:	7dfb      	ldrb	r3, [r7, #23]
 80091bc:	2b02      	cmp	r3, #2
 80091be:	d102      	bne.n	80091c6 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2201      	movs	r2, #1
 80091c4:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2203      	movs	r2, #3
 80091ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80091da:	2300      	movs	r3, #0
 80091dc:	2200      	movs	r2, #0
 80091de:	f000 fd2f 	bl	8009c40 <osMessageQueuePut>
      break;
 80091e2:	bf00      	nop
  }
  return status;
 80091e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3718      	adds	r7, #24
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
	...

080091f0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b086      	sub	sp, #24
 80091f4:	af02      	add	r7, sp, #8
 80091f6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80091f8:	2301      	movs	r3, #1
 80091fa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80091fc:	2300      	movs	r3, #0
 80091fe:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	7e1b      	ldrb	r3, [r3, #24]
 8009204:	3b01      	subs	r3, #1
 8009206:	2b0a      	cmp	r3, #10
 8009208:	f200 8229 	bhi.w	800965e <USBH_HandleControl+0x46e>
 800920c:	a201      	add	r2, pc, #4	; (adr r2, 8009214 <USBH_HandleControl+0x24>)
 800920e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009212:	bf00      	nop
 8009214:	08009241 	.word	0x08009241
 8009218:	0800925b 	.word	0x0800925b
 800921c:	080092fd 	.word	0x080092fd
 8009220:	08009323 	.word	0x08009323
 8009224:	080093af 	.word	0x080093af
 8009228:	080093d9 	.word	0x080093d9
 800922c:	0800949b 	.word	0x0800949b
 8009230:	080094bd 	.word	0x080094bd
 8009234:	0800954f 	.word	0x0800954f
 8009238:	08009575 	.word	0x08009575
 800923c:	08009607 	.word	0x08009607
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f103 0110 	add.w	r1, r3, #16
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	795b      	ldrb	r3, [r3, #5]
 800924a:	461a      	mov	r2, r3
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 fa17 	bl	8009680 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2202      	movs	r2, #2
 8009256:	761a      	strb	r2, [r3, #24]
      break;
 8009258:	e20c      	b.n	8009674 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	795b      	ldrb	r3, [r3, #5]
 800925e:	4619      	mov	r1, r3
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f003 fd41 	bl	800cce8 <USBH_LL_GetURBState>
 8009266:	4603      	mov	r3, r0
 8009268:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800926a:	7bbb      	ldrb	r3, [r7, #14]
 800926c:	2b01      	cmp	r3, #1
 800926e:	d12c      	bne.n	80092ca <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	7c1b      	ldrb	r3, [r3, #16]
 8009274:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009278:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	8adb      	ldrh	r3, [r3, #22]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00a      	beq.n	8009298 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009282:	7b7b      	ldrb	r3, [r7, #13]
 8009284:	2b80      	cmp	r3, #128	; 0x80
 8009286:	d103      	bne.n	8009290 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2203      	movs	r2, #3
 800928c:	761a      	strb	r2, [r3, #24]
 800928e:	e00d      	b.n	80092ac <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2205      	movs	r2, #5
 8009294:	761a      	strb	r2, [r3, #24]
 8009296:	e009      	b.n	80092ac <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8009298:	7b7b      	ldrb	r3, [r7, #13]
 800929a:	2b80      	cmp	r3, #128	; 0x80
 800929c:	d103      	bne.n	80092a6 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2209      	movs	r2, #9
 80092a2:	761a      	strb	r2, [r3, #24]
 80092a4:	e002      	b.n	80092ac <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2207      	movs	r2, #7
 80092aa:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2203      	movs	r2, #3
 80092b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80092c0:	2300      	movs	r3, #0
 80092c2:	2200      	movs	r2, #0
 80092c4:	f000 fcbc 	bl	8009c40 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80092c8:	e1cb      	b.n	8009662 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80092ca:	7bbb      	ldrb	r3, [r7, #14]
 80092cc:	2b04      	cmp	r3, #4
 80092ce:	d003      	beq.n	80092d8 <USBH_HandleControl+0xe8>
 80092d0:	7bbb      	ldrb	r3, [r7, #14]
 80092d2:	2b02      	cmp	r3, #2
 80092d4:	f040 81c5 	bne.w	8009662 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	220b      	movs	r2, #11
 80092dc:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2203      	movs	r2, #3
 80092e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80092f2:	2300      	movs	r3, #0
 80092f4:	2200      	movs	r2, #0
 80092f6:	f000 fca3 	bl	8009c40 <osMessageQueuePut>
      break;
 80092fa:	e1b2      	b.n	8009662 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009302:	b29a      	uxth	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6899      	ldr	r1, [r3, #8]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	899a      	ldrh	r2, [r3, #12]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	791b      	ldrb	r3, [r3, #4]
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 f9f2 	bl	80096fe <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2204      	movs	r2, #4
 800931e:	761a      	strb	r2, [r3, #24]
      break;
 8009320:	e1a8      	b.n	8009674 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	791b      	ldrb	r3, [r3, #4]
 8009326:	4619      	mov	r1, r3
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f003 fcdd 	bl	800cce8 <USBH_LL_GetURBState>
 800932e:	4603      	mov	r3, r0
 8009330:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009332:	7bbb      	ldrb	r3, [r7, #14]
 8009334:	2b01      	cmp	r3, #1
 8009336:	d110      	bne.n	800935a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2209      	movs	r2, #9
 800933c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2203      	movs	r2, #3
 8009342:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009352:	2300      	movs	r3, #0
 8009354:	2200      	movs	r2, #0
 8009356:	f000 fc73 	bl	8009c40 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800935a:	7bbb      	ldrb	r3, [r7, #14]
 800935c:	2b05      	cmp	r3, #5
 800935e:	d110      	bne.n	8009382 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009360:	2303      	movs	r3, #3
 8009362:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2203      	movs	r2, #3
 8009368:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009378:	2300      	movs	r3, #0
 800937a:	2200      	movs	r2, #0
 800937c:	f000 fc60 	bl	8009c40 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009380:	e171      	b.n	8009666 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8009382:	7bbb      	ldrb	r3, [r7, #14]
 8009384:	2b04      	cmp	r3, #4
 8009386:	f040 816e 	bne.w	8009666 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	220b      	movs	r2, #11
 800938e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2203      	movs	r2, #3
 8009394:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80093a4:	2300      	movs	r3, #0
 80093a6:	2200      	movs	r2, #0
 80093a8:	f000 fc4a 	bl	8009c40 <osMessageQueuePut>
      break;
 80093ac:	e15b      	b.n	8009666 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6899      	ldr	r1, [r3, #8]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	899a      	ldrh	r2, [r3, #12]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	795b      	ldrb	r3, [r3, #5]
 80093ba:	2001      	movs	r0, #1
 80093bc:	9000      	str	r0, [sp, #0]
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 f978 	bl	80096b4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80093ca:	b29a      	uxth	r2, r3
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2206      	movs	r2, #6
 80093d4:	761a      	strb	r2, [r3, #24]
      break;
 80093d6:	e14d      	b.n	8009674 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	795b      	ldrb	r3, [r3, #5]
 80093dc:	4619      	mov	r1, r3
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f003 fc82 	bl	800cce8 <USBH_LL_GetURBState>
 80093e4:	4603      	mov	r3, r0
 80093e6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80093e8:	7bbb      	ldrb	r3, [r7, #14]
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d111      	bne.n	8009412 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2207      	movs	r2, #7
 80093f2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2203      	movs	r2, #3
 80093f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009408:	2300      	movs	r3, #0
 800940a:	2200      	movs	r2, #0
 800940c:	f000 fc18 	bl	8009c40 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009410:	e12b      	b.n	800966a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8009412:	7bbb      	ldrb	r3, [r7, #14]
 8009414:	2b05      	cmp	r3, #5
 8009416:	d113      	bne.n	8009440 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	220c      	movs	r2, #12
 800941c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800941e:	2303      	movs	r3, #3
 8009420:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2203      	movs	r2, #3
 8009426:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009436:	2300      	movs	r3, #0
 8009438:	2200      	movs	r2, #0
 800943a:	f000 fc01 	bl	8009c40 <osMessageQueuePut>
      break;
 800943e:	e114      	b.n	800966a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009440:	7bbb      	ldrb	r3, [r7, #14]
 8009442:	2b02      	cmp	r3, #2
 8009444:	d111      	bne.n	800946a <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2205      	movs	r2, #5
 800944a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2203      	movs	r2, #3
 8009450:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009460:	2300      	movs	r3, #0
 8009462:	2200      	movs	r2, #0
 8009464:	f000 fbec 	bl	8009c40 <osMessageQueuePut>
      break;
 8009468:	e0ff      	b.n	800966a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800946a:	7bbb      	ldrb	r3, [r7, #14]
 800946c:	2b04      	cmp	r3, #4
 800946e:	f040 80fc 	bne.w	800966a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	220b      	movs	r2, #11
 8009476:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009478:	2302      	movs	r3, #2
 800947a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2203      	movs	r2, #3
 8009480:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009490:	2300      	movs	r3, #0
 8009492:	2200      	movs	r2, #0
 8009494:	f000 fbd4 	bl	8009c40 <osMessageQueuePut>
      break;
 8009498:	e0e7      	b.n	800966a <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	791b      	ldrb	r3, [r3, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	2100      	movs	r1, #0
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 f92b 	bl	80096fe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80094ae:	b29a      	uxth	r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2208      	movs	r2, #8
 80094b8:	761a      	strb	r2, [r3, #24]

      break;
 80094ba:	e0db      	b.n	8009674 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	791b      	ldrb	r3, [r3, #4]
 80094c0:	4619      	mov	r1, r3
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f003 fc10 	bl	800cce8 <USBH_LL_GetURBState>
 80094c8:	4603      	mov	r3, r0
 80094ca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80094cc:	7bbb      	ldrb	r3, [r7, #14]
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d113      	bne.n	80094fa <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	220d      	movs	r2, #13
 80094d6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80094d8:	2300      	movs	r3, #0
 80094da:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2203      	movs	r2, #3
 80094e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80094f0:	2300      	movs	r3, #0
 80094f2:	2200      	movs	r2, #0
 80094f4:	f000 fba4 	bl	8009c40 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80094f8:	e0b9      	b.n	800966e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 80094fa:	7bbb      	ldrb	r3, [r7, #14]
 80094fc:	2b04      	cmp	r3, #4
 80094fe:	d111      	bne.n	8009524 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	220b      	movs	r2, #11
 8009504:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2203      	movs	r2, #3
 800950a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800951a:	2300      	movs	r3, #0
 800951c:	2200      	movs	r2, #0
 800951e:	f000 fb8f 	bl	8009c40 <osMessageQueuePut>
      break;
 8009522:	e0a4      	b.n	800966e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8009524:	7bbb      	ldrb	r3, [r7, #14]
 8009526:	2b05      	cmp	r3, #5
 8009528:	f040 80a1 	bne.w	800966e <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800952c:	2303      	movs	r3, #3
 800952e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2203      	movs	r2, #3
 8009534:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009544:	2300      	movs	r3, #0
 8009546:	2200      	movs	r2, #0
 8009548:	f000 fb7a 	bl	8009c40 <osMessageQueuePut>
      break;
 800954c:	e08f      	b.n	800966e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	795b      	ldrb	r3, [r3, #5]
 8009552:	2201      	movs	r2, #1
 8009554:	9200      	str	r2, [sp, #0]
 8009556:	2200      	movs	r2, #0
 8009558:	2100      	movs	r1, #0
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 f8aa 	bl	80096b4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009566:	b29a      	uxth	r2, r3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	220a      	movs	r2, #10
 8009570:	761a      	strb	r2, [r3, #24]
      break;
 8009572:	e07f      	b.n	8009674 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	795b      	ldrb	r3, [r3, #5]
 8009578:	4619      	mov	r1, r3
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f003 fbb4 	bl	800cce8 <USBH_LL_GetURBState>
 8009580:	4603      	mov	r3, r0
 8009582:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009584:	7bbb      	ldrb	r3, [r7, #14]
 8009586:	2b01      	cmp	r3, #1
 8009588:	d113      	bne.n	80095b2 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800958a:	2300      	movs	r3, #0
 800958c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	220d      	movs	r2, #13
 8009592:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2203      	movs	r2, #3
 8009598:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80095a8:	2300      	movs	r3, #0
 80095aa:	2200      	movs	r2, #0
 80095ac:	f000 fb48 	bl	8009c40 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80095b0:	e05f      	b.n	8009672 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 80095b2:	7bbb      	ldrb	r3, [r7, #14]
 80095b4:	2b02      	cmp	r3, #2
 80095b6:	d111      	bne.n	80095dc <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2209      	movs	r2, #9
 80095bc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2203      	movs	r2, #3
 80095c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80095d2:	2300      	movs	r3, #0
 80095d4:	2200      	movs	r2, #0
 80095d6:	f000 fb33 	bl	8009c40 <osMessageQueuePut>
      break;
 80095da:	e04a      	b.n	8009672 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 80095dc:	7bbb      	ldrb	r3, [r7, #14]
 80095de:	2b04      	cmp	r3, #4
 80095e0:	d147      	bne.n	8009672 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	220b      	movs	r2, #11
 80095e6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2203      	movs	r2, #3
 80095ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80095fc:	2300      	movs	r3, #0
 80095fe:	2200      	movs	r2, #0
 8009600:	f000 fb1e 	bl	8009c40 <osMessageQueuePut>
      break;
 8009604:	e035      	b.n	8009672 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	7e5b      	ldrb	r3, [r3, #25]
 800960a:	3301      	adds	r3, #1
 800960c:	b2da      	uxtb	r2, r3
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	765a      	strb	r2, [r3, #25]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	7e5b      	ldrb	r3, [r3, #25]
 8009616:	2b02      	cmp	r3, #2
 8009618:	d806      	bhi.n	8009628 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2201      	movs	r2, #1
 800961e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2201      	movs	r2, #1
 8009624:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009626:	e025      	b.n	8009674 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800962e:	2106      	movs	r1, #6
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	795b      	ldrb	r3, [r3, #5]
 800963e:	4619      	mov	r1, r3
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 f90d 	bl	8009860 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	791b      	ldrb	r3, [r3, #4]
 800964a:	4619      	mov	r1, r3
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 f907 	bl	8009860 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2200      	movs	r2, #0
 8009656:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009658:	2302      	movs	r3, #2
 800965a:	73fb      	strb	r3, [r7, #15]
      break;
 800965c:	e00a      	b.n	8009674 <USBH_HandleControl+0x484>

    default:
      break;
 800965e:	bf00      	nop
 8009660:	e008      	b.n	8009674 <USBH_HandleControl+0x484>
      break;
 8009662:	bf00      	nop
 8009664:	e006      	b.n	8009674 <USBH_HandleControl+0x484>
      break;
 8009666:	bf00      	nop
 8009668:	e004      	b.n	8009674 <USBH_HandleControl+0x484>
      break;
 800966a:	bf00      	nop
 800966c:	e002      	b.n	8009674 <USBH_HandleControl+0x484>
      break;
 800966e:	bf00      	nop
 8009670:	e000      	b.n	8009674 <USBH_HandleControl+0x484>
      break;
 8009672:	bf00      	nop
  }

  return status;
 8009674:	7bfb      	ldrb	r3, [r7, #15]
}
 8009676:	4618      	mov	r0, r3
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop

08009680 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b088      	sub	sp, #32
 8009684:	af04      	add	r7, sp, #16
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	4613      	mov	r3, r2
 800968c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800968e:	79f9      	ldrb	r1, [r7, #7]
 8009690:	2300      	movs	r3, #0
 8009692:	9303      	str	r3, [sp, #12]
 8009694:	2308      	movs	r3, #8
 8009696:	9302      	str	r3, [sp, #8]
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	9301      	str	r3, [sp, #4]
 800969c:	2300      	movs	r3, #0
 800969e:	9300      	str	r3, [sp, #0]
 80096a0:	2300      	movs	r3, #0
 80096a2:	2200      	movs	r2, #0
 80096a4:	68f8      	ldr	r0, [r7, #12]
 80096a6:	f003 faee 	bl	800cc86 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80096aa:	2300      	movs	r3, #0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3710      	adds	r7, #16
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b088      	sub	sp, #32
 80096b8:	af04      	add	r7, sp, #16
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	60b9      	str	r1, [r7, #8]
 80096be:	4611      	mov	r1, r2
 80096c0:	461a      	mov	r2, r3
 80096c2:	460b      	mov	r3, r1
 80096c4:	80fb      	strh	r3, [r7, #6]
 80096c6:	4613      	mov	r3, r2
 80096c8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d001      	beq.n	80096d8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80096d4:	2300      	movs	r3, #0
 80096d6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80096d8:	7979      	ldrb	r1, [r7, #5]
 80096da:	7e3b      	ldrb	r3, [r7, #24]
 80096dc:	9303      	str	r3, [sp, #12]
 80096de:	88fb      	ldrh	r3, [r7, #6]
 80096e0:	9302      	str	r3, [sp, #8]
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	9301      	str	r3, [sp, #4]
 80096e6:	2301      	movs	r3, #1
 80096e8:	9300      	str	r3, [sp, #0]
 80096ea:	2300      	movs	r3, #0
 80096ec:	2200      	movs	r2, #0
 80096ee:	68f8      	ldr	r0, [r7, #12]
 80096f0:	f003 fac9 	bl	800cc86 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80096f4:	2300      	movs	r3, #0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3710      	adds	r7, #16
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}

080096fe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b088      	sub	sp, #32
 8009702:	af04      	add	r7, sp, #16
 8009704:	60f8      	str	r0, [r7, #12]
 8009706:	60b9      	str	r1, [r7, #8]
 8009708:	4611      	mov	r1, r2
 800970a:	461a      	mov	r2, r3
 800970c:	460b      	mov	r3, r1
 800970e:	80fb      	strh	r3, [r7, #6]
 8009710:	4613      	mov	r3, r2
 8009712:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009714:	7979      	ldrb	r1, [r7, #5]
 8009716:	2300      	movs	r3, #0
 8009718:	9303      	str	r3, [sp, #12]
 800971a:	88fb      	ldrh	r3, [r7, #6]
 800971c:	9302      	str	r3, [sp, #8]
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	9301      	str	r3, [sp, #4]
 8009722:	2301      	movs	r3, #1
 8009724:	9300      	str	r3, [sp, #0]
 8009726:	2300      	movs	r3, #0
 8009728:	2201      	movs	r2, #1
 800972a:	68f8      	ldr	r0, [r7, #12]
 800972c:	f003 faab 	bl	800cc86 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009730:	2300      	movs	r3, #0

}
 8009732:	4618      	mov	r0, r3
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b088      	sub	sp, #32
 800973e:	af04      	add	r7, sp, #16
 8009740:	60f8      	str	r0, [r7, #12]
 8009742:	60b9      	str	r1, [r7, #8]
 8009744:	4611      	mov	r1, r2
 8009746:	461a      	mov	r2, r3
 8009748:	460b      	mov	r3, r1
 800974a:	80fb      	strh	r3, [r7, #6]
 800974c:	4613      	mov	r3, r2
 800974e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009756:	2b00      	cmp	r3, #0
 8009758:	d001      	beq.n	800975e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800975a:	2300      	movs	r3, #0
 800975c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800975e:	7979      	ldrb	r1, [r7, #5]
 8009760:	7e3b      	ldrb	r3, [r7, #24]
 8009762:	9303      	str	r3, [sp, #12]
 8009764:	88fb      	ldrh	r3, [r7, #6]
 8009766:	9302      	str	r3, [sp, #8]
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	9301      	str	r3, [sp, #4]
 800976c:	2301      	movs	r3, #1
 800976e:	9300      	str	r3, [sp, #0]
 8009770:	2302      	movs	r3, #2
 8009772:	2200      	movs	r2, #0
 8009774:	68f8      	ldr	r0, [r7, #12]
 8009776:	f003 fa86 	bl	800cc86 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3710      	adds	r7, #16
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b088      	sub	sp, #32
 8009788:	af04      	add	r7, sp, #16
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	60b9      	str	r1, [r7, #8]
 800978e:	4611      	mov	r1, r2
 8009790:	461a      	mov	r2, r3
 8009792:	460b      	mov	r3, r1
 8009794:	80fb      	strh	r3, [r7, #6]
 8009796:	4613      	mov	r3, r2
 8009798:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800979a:	7979      	ldrb	r1, [r7, #5]
 800979c:	2300      	movs	r3, #0
 800979e:	9303      	str	r3, [sp, #12]
 80097a0:	88fb      	ldrh	r3, [r7, #6]
 80097a2:	9302      	str	r3, [sp, #8]
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	9301      	str	r3, [sp, #4]
 80097a8:	2301      	movs	r3, #1
 80097aa:	9300      	str	r3, [sp, #0]
 80097ac:	2302      	movs	r3, #2
 80097ae:	2201      	movs	r2, #1
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f003 fa68 	bl	800cc86 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80097b6:	2300      	movs	r3, #0
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3710      	adds	r7, #16
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b086      	sub	sp, #24
 80097c4:	af04      	add	r7, sp, #16
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	4608      	mov	r0, r1
 80097ca:	4611      	mov	r1, r2
 80097cc:	461a      	mov	r2, r3
 80097ce:	4603      	mov	r3, r0
 80097d0:	70fb      	strb	r3, [r7, #3]
 80097d2:	460b      	mov	r3, r1
 80097d4:	70bb      	strb	r3, [r7, #2]
 80097d6:	4613      	mov	r3, r2
 80097d8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80097da:	7878      	ldrb	r0, [r7, #1]
 80097dc:	78ba      	ldrb	r2, [r7, #2]
 80097de:	78f9      	ldrb	r1, [r7, #3]
 80097e0:	8b3b      	ldrh	r3, [r7, #24]
 80097e2:	9302      	str	r3, [sp, #8]
 80097e4:	7d3b      	ldrb	r3, [r7, #20]
 80097e6:	9301      	str	r3, [sp, #4]
 80097e8:	7c3b      	ldrb	r3, [r7, #16]
 80097ea:	9300      	str	r3, [sp, #0]
 80097ec:	4603      	mov	r3, r0
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f003 f9fb 	bl	800cbea <USBH_LL_OpenPipe>

  return USBH_OK;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3708      	adds	r7, #8
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b082      	sub	sp, #8
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
 8009806:	460b      	mov	r3, r1
 8009808:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800980a:	78fb      	ldrb	r3, [r7, #3]
 800980c:	4619      	mov	r1, r3
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f003 fa1a 	bl	800cc48 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009814:	2300      	movs	r3, #0
}
 8009816:	4618      	mov	r0, r3
 8009818:	3708      	adds	r7, #8
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b084      	sub	sp, #16
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
 8009826:	460b      	mov	r3, r1
 8009828:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 f836 	bl	800989c <USBH_GetFreePipe>
 8009830:	4603      	mov	r3, r0
 8009832:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009834:	89fb      	ldrh	r3, [r7, #14]
 8009836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800983a:	4293      	cmp	r3, r2
 800983c:	d00a      	beq.n	8009854 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800983e:	78fa      	ldrb	r2, [r7, #3]
 8009840:	89fb      	ldrh	r3, [r7, #14]
 8009842:	f003 030f 	and.w	r3, r3, #15
 8009846:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800984a:	6879      	ldr	r1, [r7, #4]
 800984c:	33e0      	adds	r3, #224	; 0xe0
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	440b      	add	r3, r1
 8009852:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009854:	89fb      	ldrh	r3, [r7, #14]
 8009856:	b2db      	uxtb	r3, r3
}
 8009858:	4618      	mov	r0, r3
 800985a:	3710      	adds	r7, #16
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	460b      	mov	r3, r1
 800986a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800986c:	78fb      	ldrb	r3, [r7, #3]
 800986e:	2b0f      	cmp	r3, #15
 8009870:	d80d      	bhi.n	800988e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009872:	78fb      	ldrb	r3, [r7, #3]
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	33e0      	adds	r3, #224	; 0xe0
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	4413      	add	r3, r2
 800987c:	685a      	ldr	r2, [r3, #4]
 800987e:	78fb      	ldrb	r3, [r7, #3]
 8009880:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009884:	6879      	ldr	r1, [r7, #4]
 8009886:	33e0      	adds	r3, #224	; 0xe0
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	440b      	add	r3, r1
 800988c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800988e:	2300      	movs	r3, #0
}
 8009890:	4618      	mov	r0, r3
 8009892:	370c      	adds	r7, #12
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800989c:	b480      	push	{r7}
 800989e:	b085      	sub	sp, #20
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80098a4:	2300      	movs	r3, #0
 80098a6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80098a8:	2300      	movs	r3, #0
 80098aa:	73fb      	strb	r3, [r7, #15]
 80098ac:	e00f      	b.n	80098ce <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80098ae:	7bfb      	ldrb	r3, [r7, #15]
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	33e0      	adds	r3, #224	; 0xe0
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	4413      	add	r3, r2
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d102      	bne.n	80098c8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80098c2:	7bfb      	ldrb	r3, [r7, #15]
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	e007      	b.n	80098d8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80098c8:	7bfb      	ldrb	r3, [r7, #15]
 80098ca:	3301      	adds	r3, #1
 80098cc:	73fb      	strb	r3, [r7, #15]
 80098ce:	7bfb      	ldrb	r3, [r7, #15]
 80098d0:	2b0f      	cmp	r3, #15
 80098d2:	d9ec      	bls.n	80098ae <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80098d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3714      	adds	r7, #20
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <__NVIC_SetPriority>:
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	4603      	mov	r3, r0
 80098ec:	6039      	str	r1, [r7, #0]
 80098ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80098f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	db0a      	blt.n	800990e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	b2da      	uxtb	r2, r3
 80098fc:	490c      	ldr	r1, [pc, #48]	; (8009930 <__NVIC_SetPriority+0x4c>)
 80098fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009902:	0112      	lsls	r2, r2, #4
 8009904:	b2d2      	uxtb	r2, r2
 8009906:	440b      	add	r3, r1
 8009908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800990c:	e00a      	b.n	8009924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	b2da      	uxtb	r2, r3
 8009912:	4908      	ldr	r1, [pc, #32]	; (8009934 <__NVIC_SetPriority+0x50>)
 8009914:	79fb      	ldrb	r3, [r7, #7]
 8009916:	f003 030f 	and.w	r3, r3, #15
 800991a:	3b04      	subs	r3, #4
 800991c:	0112      	lsls	r2, r2, #4
 800991e:	b2d2      	uxtb	r2, r2
 8009920:	440b      	add	r3, r1
 8009922:	761a      	strb	r2, [r3, #24]
}
 8009924:	bf00      	nop
 8009926:	370c      	adds	r7, #12
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr
 8009930:	e000e100 	.word	0xe000e100
 8009934:	e000ed00 	.word	0xe000ed00

08009938 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009938:	b580      	push	{r7, lr}
 800993a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800993c:	4b05      	ldr	r3, [pc, #20]	; (8009954 <SysTick_Handler+0x1c>)
 800993e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009940:	f001 ff10 	bl	800b764 <xTaskGetSchedulerState>
 8009944:	4603      	mov	r3, r0
 8009946:	2b01      	cmp	r3, #1
 8009948:	d001      	beq.n	800994e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800994a:	f002 fcf5 	bl	800c338 <xPortSysTickHandler>
  }
}
 800994e:	bf00      	nop
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	e000e010 	.word	0xe000e010

08009958 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009958:	b580      	push	{r7, lr}
 800995a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800995c:	2100      	movs	r1, #0
 800995e:	f06f 0004 	mvn.w	r0, #4
 8009962:	f7ff ffbf 	bl	80098e4 <__NVIC_SetPriority>
#endif
}
 8009966:	bf00      	nop
 8009968:	bd80      	pop	{r7, pc}
	...

0800996c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009972:	f3ef 8305 	mrs	r3, IPSR
 8009976:	603b      	str	r3, [r7, #0]
  return(result);
 8009978:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800997a:	2b00      	cmp	r3, #0
 800997c:	d003      	beq.n	8009986 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800997e:	f06f 0305 	mvn.w	r3, #5
 8009982:	607b      	str	r3, [r7, #4]
 8009984:	e00c      	b.n	80099a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009986:	4b0a      	ldr	r3, [pc, #40]	; (80099b0 <osKernelInitialize+0x44>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d105      	bne.n	800999a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800998e:	4b08      	ldr	r3, [pc, #32]	; (80099b0 <osKernelInitialize+0x44>)
 8009990:	2201      	movs	r2, #1
 8009992:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009994:	2300      	movs	r3, #0
 8009996:	607b      	str	r3, [r7, #4]
 8009998:	e002      	b.n	80099a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800999a:	f04f 33ff 	mov.w	r3, #4294967295
 800999e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80099a0:	687b      	ldr	r3, [r7, #4]
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	370c      	adds	r7, #12
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr
 80099ae:	bf00      	nop
 80099b0:	20000378 	.word	0x20000378

080099b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099ba:	f3ef 8305 	mrs	r3, IPSR
 80099be:	603b      	str	r3, [r7, #0]
  return(result);
 80099c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d003      	beq.n	80099ce <osKernelStart+0x1a>
    stat = osErrorISR;
 80099c6:	f06f 0305 	mvn.w	r3, #5
 80099ca:	607b      	str	r3, [r7, #4]
 80099cc:	e010      	b.n	80099f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80099ce:	4b0b      	ldr	r3, [pc, #44]	; (80099fc <osKernelStart+0x48>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d109      	bne.n	80099ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80099d6:	f7ff ffbf 	bl	8009958 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80099da:	4b08      	ldr	r3, [pc, #32]	; (80099fc <osKernelStart+0x48>)
 80099dc:	2202      	movs	r2, #2
 80099de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80099e0:	f001 fa52 	bl	800ae88 <vTaskStartScheduler>
      stat = osOK;
 80099e4:	2300      	movs	r3, #0
 80099e6:	607b      	str	r3, [r7, #4]
 80099e8:	e002      	b.n	80099f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80099ea:	f04f 33ff 	mov.w	r3, #4294967295
 80099ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80099f0:	687b      	ldr	r3, [r7, #4]
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3708      	adds	r7, #8
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	bf00      	nop
 80099fc:	20000378 	.word	0x20000378

08009a00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b08e      	sub	sp, #56	; 0x38
 8009a04:	af04      	add	r7, sp, #16
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a10:	f3ef 8305 	mrs	r3, IPSR
 8009a14:	617b      	str	r3, [r7, #20]
  return(result);
 8009a16:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d17e      	bne.n	8009b1a <osThreadNew+0x11a>
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d07b      	beq.n	8009b1a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009a22:	2380      	movs	r3, #128	; 0x80
 8009a24:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009a26:	2318      	movs	r3, #24
 8009a28:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8009a32:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d045      	beq.n	8009ac6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d002      	beq.n	8009a48 <osThreadNew+0x48>
        name = attr->name;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	699b      	ldr	r3, [r3, #24]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d002      	beq.n	8009a56 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	699b      	ldr	r3, [r3, #24]
 8009a54:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009a56:	69fb      	ldr	r3, [r7, #28]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d008      	beq.n	8009a6e <osThreadNew+0x6e>
 8009a5c:	69fb      	ldr	r3, [r7, #28]
 8009a5e:	2b38      	cmp	r3, #56	; 0x38
 8009a60:	d805      	bhi.n	8009a6e <osThreadNew+0x6e>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	f003 0301 	and.w	r3, r3, #1
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d001      	beq.n	8009a72 <osThreadNew+0x72>
        return (NULL);
 8009a6e:	2300      	movs	r3, #0
 8009a70:	e054      	b.n	8009b1c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	695b      	ldr	r3, [r3, #20]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d003      	beq.n	8009a82 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	695b      	ldr	r3, [r3, #20]
 8009a7e:	089b      	lsrs	r3, r3, #2
 8009a80:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00e      	beq.n	8009aa8 <osThreadNew+0xa8>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	68db      	ldr	r3, [r3, #12]
 8009a8e:	2b5f      	cmp	r3, #95	; 0x5f
 8009a90:	d90a      	bls.n	8009aa8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d006      	beq.n	8009aa8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	695b      	ldr	r3, [r3, #20]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d002      	beq.n	8009aa8 <osThreadNew+0xa8>
        mem = 1;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	61bb      	str	r3, [r7, #24]
 8009aa6:	e010      	b.n	8009aca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	689b      	ldr	r3, [r3, #8]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d10c      	bne.n	8009aca <osThreadNew+0xca>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	68db      	ldr	r3, [r3, #12]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d108      	bne.n	8009aca <osThreadNew+0xca>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d104      	bne.n	8009aca <osThreadNew+0xca>
          mem = 0;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	61bb      	str	r3, [r7, #24]
 8009ac4:	e001      	b.n	8009aca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d110      	bne.n	8009af2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ad8:	9202      	str	r2, [sp, #8]
 8009ada:	9301      	str	r3, [sp, #4]
 8009adc:	69fb      	ldr	r3, [r7, #28]
 8009ade:	9300      	str	r3, [sp, #0]
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	6a3a      	ldr	r2, [r7, #32]
 8009ae4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ae6:	68f8      	ldr	r0, [r7, #12]
 8009ae8:	f000 fff6 	bl	800aad8 <xTaskCreateStatic>
 8009aec:	4603      	mov	r3, r0
 8009aee:	613b      	str	r3, [r7, #16]
 8009af0:	e013      	b.n	8009b1a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d110      	bne.n	8009b1a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009af8:	6a3b      	ldr	r3, [r7, #32]
 8009afa:	b29a      	uxth	r2, r3
 8009afc:	f107 0310 	add.w	r3, r7, #16
 8009b00:	9301      	str	r3, [sp, #4]
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	9300      	str	r3, [sp, #0]
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b0a:	68f8      	ldr	r0, [r7, #12]
 8009b0c:	f001 f841 	bl	800ab92 <xTaskCreate>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d001      	beq.n	8009b1a <osThreadNew+0x11a>
            hTask = NULL;
 8009b16:	2300      	movs	r3, #0
 8009b18:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009b1a:	693b      	ldr	r3, [r7, #16]
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3728      	adds	r7, #40	; 0x28
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b2c:	f3ef 8305 	mrs	r3, IPSR
 8009b30:	60bb      	str	r3, [r7, #8]
  return(result);
 8009b32:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d003      	beq.n	8009b40 <osDelay+0x1c>
    stat = osErrorISR;
 8009b38:	f06f 0305 	mvn.w	r3, #5
 8009b3c:	60fb      	str	r3, [r7, #12]
 8009b3e:	e007      	b.n	8009b50 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009b40:	2300      	movs	r3, #0
 8009b42:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d002      	beq.n	8009b50 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f001 f968 	bl	800ae20 <vTaskDelay>
    }
  }

  return (stat);
 8009b50:	68fb      	ldr	r3, [r7, #12]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3710      	adds	r7, #16
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b08a      	sub	sp, #40	; 0x28
 8009b5e:	af02      	add	r7, sp, #8
 8009b60:	60f8      	str	r0, [r7, #12]
 8009b62:	60b9      	str	r1, [r7, #8]
 8009b64:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009b66:	2300      	movs	r3, #0
 8009b68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b6a:	f3ef 8305 	mrs	r3, IPSR
 8009b6e:	613b      	str	r3, [r7, #16]
  return(result);
 8009b70:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d15f      	bne.n	8009c36 <osMessageQueueNew+0xdc>
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d05c      	beq.n	8009c36 <osMessageQueueNew+0xdc>
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d059      	beq.n	8009c36 <osMessageQueueNew+0xdc>
    mem = -1;
 8009b82:	f04f 33ff 	mov.w	r3, #4294967295
 8009b86:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d029      	beq.n	8009be2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	689b      	ldr	r3, [r3, #8]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d012      	beq.n	8009bbc <osMessageQueueNew+0x62>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	68db      	ldr	r3, [r3, #12]
 8009b9a:	2b4f      	cmp	r3, #79	; 0x4f
 8009b9c:	d90e      	bls.n	8009bbc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d00a      	beq.n	8009bbc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	695a      	ldr	r2, [r3, #20]
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	68b9      	ldr	r1, [r7, #8]
 8009bae:	fb01 f303 	mul.w	r3, r1, r3
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d302      	bcc.n	8009bbc <osMessageQueueNew+0x62>
        mem = 1;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	61bb      	str	r3, [r7, #24]
 8009bba:	e014      	b.n	8009be6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	689b      	ldr	r3, [r3, #8]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d110      	bne.n	8009be6 <osMessageQueueNew+0x8c>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d10c      	bne.n	8009be6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d108      	bne.n	8009be6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	695b      	ldr	r3, [r3, #20]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d104      	bne.n	8009be6 <osMessageQueueNew+0x8c>
          mem = 0;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	61bb      	str	r3, [r7, #24]
 8009be0:	e001      	b.n	8009be6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009be2:	2300      	movs	r3, #0
 8009be4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009be6:	69bb      	ldr	r3, [r7, #24]
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d10b      	bne.n	8009c04 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	691a      	ldr	r2, [r3, #16]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	9100      	str	r1, [sp, #0]
 8009bf8:	68b9      	ldr	r1, [r7, #8]
 8009bfa:	68f8      	ldr	r0, [r7, #12]
 8009bfc:	f000 fa2e 	bl	800a05c <xQueueGenericCreateStatic>
 8009c00:	61f8      	str	r0, [r7, #28]
 8009c02:	e008      	b.n	8009c16 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d105      	bne.n	8009c16 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	68b9      	ldr	r1, [r7, #8]
 8009c0e:	68f8      	ldr	r0, [r7, #12]
 8009c10:	f000 fa9c 	bl	800a14c <xQueueGenericCreate>
 8009c14:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00c      	beq.n	8009c36 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d003      	beq.n	8009c2a <osMessageQueueNew+0xd0>
        name = attr->name;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	617b      	str	r3, [r7, #20]
 8009c28:	e001      	b.n	8009c2e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009c2e:	6979      	ldr	r1, [r7, #20]
 8009c30:	69f8      	ldr	r0, [r7, #28]
 8009c32:	f000 fef3 	bl	800aa1c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009c36:	69fb      	ldr	r3, [r7, #28]
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3720      	adds	r7, #32
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b088      	sub	sp, #32
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	603b      	str	r3, [r7, #0]
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009c54:	2300      	movs	r3, #0
 8009c56:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c58:	f3ef 8305 	mrs	r3, IPSR
 8009c5c:	617b      	str	r3, [r7, #20]
  return(result);
 8009c5e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d028      	beq.n	8009cb6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c64:	69bb      	ldr	r3, [r7, #24]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d005      	beq.n	8009c76 <osMessageQueuePut+0x36>
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d002      	beq.n	8009c76 <osMessageQueuePut+0x36>
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d003      	beq.n	8009c7e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009c76:	f06f 0303 	mvn.w	r3, #3
 8009c7a:	61fb      	str	r3, [r7, #28]
 8009c7c:	e038      	b.n	8009cf0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009c82:	f107 0210 	add.w	r2, r7, #16
 8009c86:	2300      	movs	r3, #0
 8009c88:	68b9      	ldr	r1, [r7, #8]
 8009c8a:	69b8      	ldr	r0, [r7, #24]
 8009c8c:	f000 fbba 	bl	800a404 <xQueueGenericSendFromISR>
 8009c90:	4603      	mov	r3, r0
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	d003      	beq.n	8009c9e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009c96:	f06f 0302 	mvn.w	r3, #2
 8009c9a:	61fb      	str	r3, [r7, #28]
 8009c9c:	e028      	b.n	8009cf0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d025      	beq.n	8009cf0 <osMessageQueuePut+0xb0>
 8009ca4:	4b15      	ldr	r3, [pc, #84]	; (8009cfc <osMessageQueuePut+0xbc>)
 8009ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009caa:	601a      	str	r2, [r3, #0]
 8009cac:	f3bf 8f4f 	dsb	sy
 8009cb0:	f3bf 8f6f 	isb	sy
 8009cb4:	e01c      	b.n	8009cf0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d002      	beq.n	8009cc2 <osMessageQueuePut+0x82>
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d103      	bne.n	8009cca <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009cc2:	f06f 0303 	mvn.w	r3, #3
 8009cc6:	61fb      	str	r3, [r7, #28]
 8009cc8:	e012      	b.n	8009cf0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009cca:	2300      	movs	r3, #0
 8009ccc:	683a      	ldr	r2, [r7, #0]
 8009cce:	68b9      	ldr	r1, [r7, #8]
 8009cd0:	69b8      	ldr	r0, [r7, #24]
 8009cd2:	f000 fa99 	bl	800a208 <xQueueGenericSend>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d009      	beq.n	8009cf0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d003      	beq.n	8009cea <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009ce2:	f06f 0301 	mvn.w	r3, #1
 8009ce6:	61fb      	str	r3, [r7, #28]
 8009ce8:	e002      	b.n	8009cf0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009cea:	f06f 0302 	mvn.w	r3, #2
 8009cee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009cf0:	69fb      	ldr	r3, [r7, #28]
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3720      	adds	r7, #32
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	e000ed04 	.word	0xe000ed04

08009d00 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b088      	sub	sp, #32
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	60b9      	str	r1, [r7, #8]
 8009d0a:	607a      	str	r2, [r7, #4]
 8009d0c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009d12:	2300      	movs	r3, #0
 8009d14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d16:	f3ef 8305 	mrs	r3, IPSR
 8009d1a:	617b      	str	r3, [r7, #20]
  return(result);
 8009d1c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d028      	beq.n	8009d74 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d005      	beq.n	8009d34 <osMessageQueueGet+0x34>
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d002      	beq.n	8009d34 <osMessageQueueGet+0x34>
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d003      	beq.n	8009d3c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009d34:	f06f 0303 	mvn.w	r3, #3
 8009d38:	61fb      	str	r3, [r7, #28]
 8009d3a:	e037      	b.n	8009dac <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009d40:	f107 0310 	add.w	r3, r7, #16
 8009d44:	461a      	mov	r2, r3
 8009d46:	68b9      	ldr	r1, [r7, #8]
 8009d48:	69b8      	ldr	r0, [r7, #24]
 8009d4a:	f000 fcd7 	bl	800a6fc <xQueueReceiveFromISR>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d003      	beq.n	8009d5c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009d54:	f06f 0302 	mvn.w	r3, #2
 8009d58:	61fb      	str	r3, [r7, #28]
 8009d5a:	e027      	b.n	8009dac <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d024      	beq.n	8009dac <osMessageQueueGet+0xac>
 8009d62:	4b15      	ldr	r3, [pc, #84]	; (8009db8 <osMessageQueueGet+0xb8>)
 8009d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d68:	601a      	str	r2, [r3, #0]
 8009d6a:	f3bf 8f4f 	dsb	sy
 8009d6e:	f3bf 8f6f 	isb	sy
 8009d72:	e01b      	b.n	8009dac <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009d74:	69bb      	ldr	r3, [r7, #24]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d002      	beq.n	8009d80 <osMessageQueueGet+0x80>
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d103      	bne.n	8009d88 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009d80:	f06f 0303 	mvn.w	r3, #3
 8009d84:	61fb      	str	r3, [r7, #28]
 8009d86:	e011      	b.n	8009dac <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009d88:	683a      	ldr	r2, [r7, #0]
 8009d8a:	68b9      	ldr	r1, [r7, #8]
 8009d8c:	69b8      	ldr	r0, [r7, #24]
 8009d8e:	f000 fbd5 	bl	800a53c <xQueueReceive>
 8009d92:	4603      	mov	r3, r0
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d009      	beq.n	8009dac <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d003      	beq.n	8009da6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009d9e:	f06f 0301 	mvn.w	r3, #1
 8009da2:	61fb      	str	r3, [r7, #28]
 8009da4:	e002      	b.n	8009dac <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009da6:	f06f 0302 	mvn.w	r3, #2
 8009daa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009dac:	69fb      	ldr	r3, [r7, #28]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3720      	adds	r7, #32
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	e000ed04 	.word	0xe000ed04

08009dbc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009dbc:	b480      	push	{r7}
 8009dbe:	b085      	sub	sp, #20
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	4a07      	ldr	r2, [pc, #28]	; (8009de8 <vApplicationGetIdleTaskMemory+0x2c>)
 8009dcc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	4a06      	ldr	r2, [pc, #24]	; (8009dec <vApplicationGetIdleTaskMemory+0x30>)
 8009dd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2280      	movs	r2, #128	; 0x80
 8009dd8:	601a      	str	r2, [r3, #0]
}
 8009dda:	bf00      	nop
 8009ddc:	3714      	adds	r7, #20
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop
 8009de8:	2000037c 	.word	0x2000037c
 8009dec:	200003dc 	.word	0x200003dc

08009df0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009df0:	b480      	push	{r7}
 8009df2:	b085      	sub	sp, #20
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	60f8      	str	r0, [r7, #12]
 8009df8:	60b9      	str	r1, [r7, #8]
 8009dfa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	4a07      	ldr	r2, [pc, #28]	; (8009e1c <vApplicationGetTimerTaskMemory+0x2c>)
 8009e00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	4a06      	ldr	r2, [pc, #24]	; (8009e20 <vApplicationGetTimerTaskMemory+0x30>)
 8009e06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e0e:	601a      	str	r2, [r3, #0]
}
 8009e10:	bf00      	nop
 8009e12:	3714      	adds	r7, #20
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr
 8009e1c:	200005dc 	.word	0x200005dc
 8009e20:	2000063c 	.word	0x2000063c

08009e24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009e24:	b480      	push	{r7}
 8009e26:	b083      	sub	sp, #12
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f103 0208 	add.w	r2, r3, #8
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f04f 32ff 	mov.w	r2, #4294967295
 8009e3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f103 0208 	add.w	r2, r3, #8
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f103 0208 	add.w	r2, r3, #8
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2200      	movs	r2, #0
 8009e56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009e58:	bf00      	nop
 8009e5a:	370c      	adds	r7, #12
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009e72:	bf00      	nop
 8009e74:	370c      	adds	r7, #12
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr

08009e7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e7e:	b480      	push	{r7}
 8009e80:	b085      	sub	sp, #20
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
 8009e86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	689a      	ldr	r2, [r3, #8]
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	683a      	ldr	r2, [r7, #0]
 8009ea2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	683a      	ldr	r2, [r7, #0]
 8009ea8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	1c5a      	adds	r2, r3, #1
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	601a      	str	r2, [r3, #0]
}
 8009eba:	bf00      	nop
 8009ebc:	3714      	adds	r7, #20
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr

08009ec6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ec6:	b480      	push	{r7}
 8009ec8:	b085      	sub	sp, #20
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
 8009ece:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009edc:	d103      	bne.n	8009ee6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	691b      	ldr	r3, [r3, #16]
 8009ee2:	60fb      	str	r3, [r7, #12]
 8009ee4:	e00c      	b.n	8009f00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	3308      	adds	r3, #8
 8009eea:	60fb      	str	r3, [r7, #12]
 8009eec:	e002      	b.n	8009ef4 <vListInsert+0x2e>
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	60fb      	str	r3, [r7, #12]
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	68ba      	ldr	r2, [r7, #8]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d2f6      	bcs.n	8009eee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	685a      	ldr	r2, [r3, #4]
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	683a      	ldr	r2, [r7, #0]
 8009f0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	68fa      	ldr	r2, [r7, #12]
 8009f14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	683a      	ldr	r2, [r7, #0]
 8009f1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	1c5a      	adds	r2, r3, #1
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	601a      	str	r2, [r3, #0]
}
 8009f2c:	bf00      	nop
 8009f2e:	3714      	adds	r7, #20
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	691b      	ldr	r3, [r3, #16]
 8009f44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	6892      	ldr	r2, [r2, #8]
 8009f4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	6852      	ldr	r2, [r2, #4]
 8009f58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d103      	bne.n	8009f6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	689a      	ldr	r2, [r3, #8]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	1e5a      	subs	r2, r3, #1
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3714      	adds	r7, #20
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr

08009f8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d10a      	bne.n	8009fb6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa4:	f383 8811 	msr	BASEPRI, r3
 8009fa8:	f3bf 8f6f 	isb	sy
 8009fac:	f3bf 8f4f 	dsb	sy
 8009fb0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009fb2:	bf00      	nop
 8009fb4:	e7fe      	b.n	8009fb4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009fb6:	f002 f92d 	bl	800c214 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fc2:	68f9      	ldr	r1, [r7, #12]
 8009fc4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009fc6:	fb01 f303 	mul.w	r3, r1, r3
 8009fca:	441a      	add	r2, r3
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fe6:	3b01      	subs	r3, #1
 8009fe8:	68f9      	ldr	r1, [r7, #12]
 8009fea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009fec:	fb01 f303 	mul.w	r3, r1, r3
 8009ff0:	441a      	add	r2, r3
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	22ff      	movs	r2, #255	; 0xff
 8009ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	22ff      	movs	r2, #255	; 0xff
 800a002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d114      	bne.n	800a036 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	691b      	ldr	r3, [r3, #16]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d01a      	beq.n	800a04a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	3310      	adds	r3, #16
 800a018:	4618      	mov	r0, r3
 800a01a:	f001 f9e3 	bl	800b3e4 <xTaskRemoveFromEventList>
 800a01e:	4603      	mov	r3, r0
 800a020:	2b00      	cmp	r3, #0
 800a022:	d012      	beq.n	800a04a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a024:	4b0c      	ldr	r3, [pc, #48]	; (800a058 <xQueueGenericReset+0xcc>)
 800a026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a02a:	601a      	str	r2, [r3, #0]
 800a02c:	f3bf 8f4f 	dsb	sy
 800a030:	f3bf 8f6f 	isb	sy
 800a034:	e009      	b.n	800a04a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	3310      	adds	r3, #16
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7ff fef2 	bl	8009e24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	3324      	adds	r3, #36	; 0x24
 800a044:	4618      	mov	r0, r3
 800a046:	f7ff feed 	bl	8009e24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a04a:	f002 f913 	bl	800c274 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a04e:	2301      	movs	r3, #1
}
 800a050:	4618      	mov	r0, r3
 800a052:	3710      	adds	r7, #16
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}
 800a058:	e000ed04 	.word	0xe000ed04

0800a05c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b08e      	sub	sp, #56	; 0x38
 800a060:	af02      	add	r7, sp, #8
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	607a      	str	r2, [r7, #4]
 800a068:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d10a      	bne.n	800a086 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a074:	f383 8811 	msr	BASEPRI, r3
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a082:	bf00      	nop
 800a084:	e7fe      	b.n	800a084 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d10a      	bne.n	800a0a2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a090:	f383 8811 	msr	BASEPRI, r3
 800a094:	f3bf 8f6f 	isb	sy
 800a098:	f3bf 8f4f 	dsb	sy
 800a09c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a09e:	bf00      	nop
 800a0a0:	e7fe      	b.n	800a0a0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d002      	beq.n	800a0ae <xQueueGenericCreateStatic+0x52>
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d001      	beq.n	800a0b2 <xQueueGenericCreateStatic+0x56>
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e000      	b.n	800a0b4 <xQueueGenericCreateStatic+0x58>
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d10a      	bne.n	800a0ce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0bc:	f383 8811 	msr	BASEPRI, r3
 800a0c0:	f3bf 8f6f 	isb	sy
 800a0c4:	f3bf 8f4f 	dsb	sy
 800a0c8:	623b      	str	r3, [r7, #32]
}
 800a0ca:	bf00      	nop
 800a0cc:	e7fe      	b.n	800a0cc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d102      	bne.n	800a0da <xQueueGenericCreateStatic+0x7e>
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d101      	bne.n	800a0de <xQueueGenericCreateStatic+0x82>
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e000      	b.n	800a0e0 <xQueueGenericCreateStatic+0x84>
 800a0de:	2300      	movs	r3, #0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d10a      	bne.n	800a0fa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e8:	f383 8811 	msr	BASEPRI, r3
 800a0ec:	f3bf 8f6f 	isb	sy
 800a0f0:	f3bf 8f4f 	dsb	sy
 800a0f4:	61fb      	str	r3, [r7, #28]
}
 800a0f6:	bf00      	nop
 800a0f8:	e7fe      	b.n	800a0f8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a0fa:	2350      	movs	r3, #80	; 0x50
 800a0fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	2b50      	cmp	r3, #80	; 0x50
 800a102:	d00a      	beq.n	800a11a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a108:	f383 8811 	msr	BASEPRI, r3
 800a10c:	f3bf 8f6f 	isb	sy
 800a110:	f3bf 8f4f 	dsb	sy
 800a114:	61bb      	str	r3, [r7, #24]
}
 800a116:	bf00      	nop
 800a118:	e7fe      	b.n	800a118 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a11a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a122:	2b00      	cmp	r3, #0
 800a124:	d00d      	beq.n	800a142 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a128:	2201      	movs	r2, #1
 800a12a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a12e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a134:	9300      	str	r3, [sp, #0]
 800a136:	4613      	mov	r3, r2
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	68b9      	ldr	r1, [r7, #8]
 800a13c:	68f8      	ldr	r0, [r7, #12]
 800a13e:	f000 f83f 	bl	800a1c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a144:	4618      	mov	r0, r3
 800a146:	3730      	adds	r7, #48	; 0x30
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b08a      	sub	sp, #40	; 0x28
 800a150:	af02      	add	r7, sp, #8
 800a152:	60f8      	str	r0, [r7, #12]
 800a154:	60b9      	str	r1, [r7, #8]
 800a156:	4613      	mov	r3, r2
 800a158:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d10a      	bne.n	800a176 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a164:	f383 8811 	msr	BASEPRI, r3
 800a168:	f3bf 8f6f 	isb	sy
 800a16c:	f3bf 8f4f 	dsb	sy
 800a170:	613b      	str	r3, [r7, #16]
}
 800a172:	bf00      	nop
 800a174:	e7fe      	b.n	800a174 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	68ba      	ldr	r2, [r7, #8]
 800a17a:	fb02 f303 	mul.w	r3, r2, r3
 800a17e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a180:	69fb      	ldr	r3, [r7, #28]
 800a182:	3350      	adds	r3, #80	; 0x50
 800a184:	4618      	mov	r0, r3
 800a186:	f002 f967 	bl	800c458 <pvPortMalloc>
 800a18a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d011      	beq.n	800a1b6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	3350      	adds	r3, #80	; 0x50
 800a19a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a19c:	69bb      	ldr	r3, [r7, #24]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a1a4:	79fa      	ldrb	r2, [r7, #7]
 800a1a6:	69bb      	ldr	r3, [r7, #24]
 800a1a8:	9300      	str	r3, [sp, #0]
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	697a      	ldr	r2, [r7, #20]
 800a1ae:	68b9      	ldr	r1, [r7, #8]
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	f000 f805 	bl	800a1c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a1b6:	69bb      	ldr	r3, [r7, #24]
	}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3720      	adds	r7, #32
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	607a      	str	r2, [r7, #4]
 800a1cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d103      	bne.n	800a1dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a1d4:	69bb      	ldr	r3, [r7, #24]
 800a1d6:	69ba      	ldr	r2, [r7, #24]
 800a1d8:	601a      	str	r2, [r3, #0]
 800a1da:	e002      	b.n	800a1e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a1dc:	69bb      	ldr	r3, [r7, #24]
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a1e2:	69bb      	ldr	r3, [r7, #24]
 800a1e4:	68fa      	ldr	r2, [r7, #12]
 800a1e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a1e8:	69bb      	ldr	r3, [r7, #24]
 800a1ea:	68ba      	ldr	r2, [r7, #8]
 800a1ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a1ee:	2101      	movs	r1, #1
 800a1f0:	69b8      	ldr	r0, [r7, #24]
 800a1f2:	f7ff fecb 	bl	8009f8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	78fa      	ldrb	r2, [r7, #3]
 800a1fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a1fe:	bf00      	nop
 800a200:	3710      	adds	r7, #16
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
	...

0800a208 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b08e      	sub	sp, #56	; 0x38
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	607a      	str	r2, [r7, #4]
 800a214:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a216:	2300      	movs	r3, #0
 800a218:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a220:	2b00      	cmp	r3, #0
 800a222:	d10a      	bne.n	800a23a <xQueueGenericSend+0x32>
	__asm volatile
 800a224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a228:	f383 8811 	msr	BASEPRI, r3
 800a22c:	f3bf 8f6f 	isb	sy
 800a230:	f3bf 8f4f 	dsb	sy
 800a234:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a236:	bf00      	nop
 800a238:	e7fe      	b.n	800a238 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d103      	bne.n	800a248 <xQueueGenericSend+0x40>
 800a240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a244:	2b00      	cmp	r3, #0
 800a246:	d101      	bne.n	800a24c <xQueueGenericSend+0x44>
 800a248:	2301      	movs	r3, #1
 800a24a:	e000      	b.n	800a24e <xQueueGenericSend+0x46>
 800a24c:	2300      	movs	r3, #0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d10a      	bne.n	800a268 <xQueueGenericSend+0x60>
	__asm volatile
 800a252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a256:	f383 8811 	msr	BASEPRI, r3
 800a25a:	f3bf 8f6f 	isb	sy
 800a25e:	f3bf 8f4f 	dsb	sy
 800a262:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a264:	bf00      	nop
 800a266:	e7fe      	b.n	800a266 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	2b02      	cmp	r3, #2
 800a26c:	d103      	bne.n	800a276 <xQueueGenericSend+0x6e>
 800a26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a272:	2b01      	cmp	r3, #1
 800a274:	d101      	bne.n	800a27a <xQueueGenericSend+0x72>
 800a276:	2301      	movs	r3, #1
 800a278:	e000      	b.n	800a27c <xQueueGenericSend+0x74>
 800a27a:	2300      	movs	r3, #0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d10a      	bne.n	800a296 <xQueueGenericSend+0x8e>
	__asm volatile
 800a280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a284:	f383 8811 	msr	BASEPRI, r3
 800a288:	f3bf 8f6f 	isb	sy
 800a28c:	f3bf 8f4f 	dsb	sy
 800a290:	623b      	str	r3, [r7, #32]
}
 800a292:	bf00      	nop
 800a294:	e7fe      	b.n	800a294 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a296:	f001 fa65 	bl	800b764 <xTaskGetSchedulerState>
 800a29a:	4603      	mov	r3, r0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d102      	bne.n	800a2a6 <xQueueGenericSend+0x9e>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d101      	bne.n	800a2aa <xQueueGenericSend+0xa2>
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e000      	b.n	800a2ac <xQueueGenericSend+0xa4>
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d10a      	bne.n	800a2c6 <xQueueGenericSend+0xbe>
	__asm volatile
 800a2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b4:	f383 8811 	msr	BASEPRI, r3
 800a2b8:	f3bf 8f6f 	isb	sy
 800a2bc:	f3bf 8f4f 	dsb	sy
 800a2c0:	61fb      	str	r3, [r7, #28]
}
 800a2c2:	bf00      	nop
 800a2c4:	e7fe      	b.n	800a2c4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a2c6:	f001 ffa5 	bl	800c214 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d302      	bcc.n	800a2dc <xQueueGenericSend+0xd4>
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	2b02      	cmp	r3, #2
 800a2da:	d129      	bne.n	800a330 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a2dc:	683a      	ldr	r2, [r7, #0]
 800a2de:	68b9      	ldr	r1, [r7, #8]
 800a2e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2e2:	f000 fa8b 	bl	800a7fc <prvCopyDataToQueue>
 800a2e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d010      	beq.n	800a312 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f2:	3324      	adds	r3, #36	; 0x24
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f001 f875 	bl	800b3e4 <xTaskRemoveFromEventList>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d013      	beq.n	800a328 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a300:	4b3f      	ldr	r3, [pc, #252]	; (800a400 <xQueueGenericSend+0x1f8>)
 800a302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a306:	601a      	str	r2, [r3, #0]
 800a308:	f3bf 8f4f 	dsb	sy
 800a30c:	f3bf 8f6f 	isb	sy
 800a310:	e00a      	b.n	800a328 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a314:	2b00      	cmp	r3, #0
 800a316:	d007      	beq.n	800a328 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a318:	4b39      	ldr	r3, [pc, #228]	; (800a400 <xQueueGenericSend+0x1f8>)
 800a31a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a31e:	601a      	str	r2, [r3, #0]
 800a320:	f3bf 8f4f 	dsb	sy
 800a324:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a328:	f001 ffa4 	bl	800c274 <vPortExitCritical>
				return pdPASS;
 800a32c:	2301      	movs	r3, #1
 800a32e:	e063      	b.n	800a3f8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d103      	bne.n	800a33e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a336:	f001 ff9d 	bl	800c274 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a33a:	2300      	movs	r3, #0
 800a33c:	e05c      	b.n	800a3f8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a33e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a340:	2b00      	cmp	r3, #0
 800a342:	d106      	bne.n	800a352 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a344:	f107 0314 	add.w	r3, r7, #20
 800a348:	4618      	mov	r0, r3
 800a34a:	f001 f8af 	bl	800b4ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a34e:	2301      	movs	r3, #1
 800a350:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a352:	f001 ff8f 	bl	800c274 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a356:	f000 fdfd 	bl	800af54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a35a:	f001 ff5b 	bl	800c214 <vPortEnterCritical>
 800a35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a360:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a364:	b25b      	sxtb	r3, r3
 800a366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a36a:	d103      	bne.n	800a374 <xQueueGenericSend+0x16c>
 800a36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36e:	2200      	movs	r2, #0
 800a370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a376:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a37a:	b25b      	sxtb	r3, r3
 800a37c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a380:	d103      	bne.n	800a38a <xQueueGenericSend+0x182>
 800a382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a384:	2200      	movs	r2, #0
 800a386:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a38a:	f001 ff73 	bl	800c274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a38e:	1d3a      	adds	r2, r7, #4
 800a390:	f107 0314 	add.w	r3, r7, #20
 800a394:	4611      	mov	r1, r2
 800a396:	4618      	mov	r0, r3
 800a398:	f001 f89e 	bl	800b4d8 <xTaskCheckForTimeOut>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d124      	bne.n	800a3ec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a3a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3a4:	f000 fb22 	bl	800a9ec <prvIsQueueFull>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d018      	beq.n	800a3e0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b0:	3310      	adds	r3, #16
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	4611      	mov	r1, r2
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f000 ffc4 	bl	800b344 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a3bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3be:	f000 faad 	bl	800a91c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a3c2:	f000 fdd5 	bl	800af70 <xTaskResumeAll>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	f47f af7c 	bne.w	800a2c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a3ce:	4b0c      	ldr	r3, [pc, #48]	; (800a400 <xQueueGenericSend+0x1f8>)
 800a3d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3d4:	601a      	str	r2, [r3, #0]
 800a3d6:	f3bf 8f4f 	dsb	sy
 800a3da:	f3bf 8f6f 	isb	sy
 800a3de:	e772      	b.n	800a2c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a3e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3e2:	f000 fa9b 	bl	800a91c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a3e6:	f000 fdc3 	bl	800af70 <xTaskResumeAll>
 800a3ea:	e76c      	b.n	800a2c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a3ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3ee:	f000 fa95 	bl	800a91c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a3f2:	f000 fdbd 	bl	800af70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a3f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3738      	adds	r7, #56	; 0x38
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}
 800a400:	e000ed04 	.word	0xe000ed04

0800a404 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b090      	sub	sp, #64	; 0x40
 800a408:	af00      	add	r7, sp, #0
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	607a      	str	r2, [r7, #4]
 800a410:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d10a      	bne.n	800a432 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a420:	f383 8811 	msr	BASEPRI, r3
 800a424:	f3bf 8f6f 	isb	sy
 800a428:	f3bf 8f4f 	dsb	sy
 800a42c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a42e:	bf00      	nop
 800a430:	e7fe      	b.n	800a430 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d103      	bne.n	800a440 <xQueueGenericSendFromISR+0x3c>
 800a438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a43a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d101      	bne.n	800a444 <xQueueGenericSendFromISR+0x40>
 800a440:	2301      	movs	r3, #1
 800a442:	e000      	b.n	800a446 <xQueueGenericSendFromISR+0x42>
 800a444:	2300      	movs	r3, #0
 800a446:	2b00      	cmp	r3, #0
 800a448:	d10a      	bne.n	800a460 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44e:	f383 8811 	msr	BASEPRI, r3
 800a452:	f3bf 8f6f 	isb	sy
 800a456:	f3bf 8f4f 	dsb	sy
 800a45a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a45c:	bf00      	nop
 800a45e:	e7fe      	b.n	800a45e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	2b02      	cmp	r3, #2
 800a464:	d103      	bne.n	800a46e <xQueueGenericSendFromISR+0x6a>
 800a466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a46a:	2b01      	cmp	r3, #1
 800a46c:	d101      	bne.n	800a472 <xQueueGenericSendFromISR+0x6e>
 800a46e:	2301      	movs	r3, #1
 800a470:	e000      	b.n	800a474 <xQueueGenericSendFromISR+0x70>
 800a472:	2300      	movs	r3, #0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d10a      	bne.n	800a48e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a47c:	f383 8811 	msr	BASEPRI, r3
 800a480:	f3bf 8f6f 	isb	sy
 800a484:	f3bf 8f4f 	dsb	sy
 800a488:	623b      	str	r3, [r7, #32]
}
 800a48a:	bf00      	nop
 800a48c:	e7fe      	b.n	800a48c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a48e:	f001 ffa3 	bl	800c3d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a492:	f3ef 8211 	mrs	r2, BASEPRI
 800a496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a49a:	f383 8811 	msr	BASEPRI, r3
 800a49e:	f3bf 8f6f 	isb	sy
 800a4a2:	f3bf 8f4f 	dsb	sy
 800a4a6:	61fa      	str	r2, [r7, #28]
 800a4a8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a4aa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a4ac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d302      	bcc.n	800a4c0 <xQueueGenericSendFromISR+0xbc>
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	2b02      	cmp	r3, #2
 800a4be:	d12f      	bne.n	800a520 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a4d0:	683a      	ldr	r2, [r7, #0]
 800a4d2:	68b9      	ldr	r1, [r7, #8]
 800a4d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a4d6:	f000 f991 	bl	800a7fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a4da:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a4de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4e2:	d112      	bne.n	800a50a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d016      	beq.n	800a51a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ee:	3324      	adds	r3, #36	; 0x24
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f000 ff77 	bl	800b3e4 <xTaskRemoveFromEventList>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d00e      	beq.n	800a51a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d00b      	beq.n	800a51a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2201      	movs	r2, #1
 800a506:	601a      	str	r2, [r3, #0]
 800a508:	e007      	b.n	800a51a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a50a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a50e:	3301      	adds	r3, #1
 800a510:	b2db      	uxtb	r3, r3
 800a512:	b25a      	sxtb	r2, r3
 800a514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a516:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a51a:	2301      	movs	r3, #1
 800a51c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a51e:	e001      	b.n	800a524 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a520:	2300      	movs	r3, #0
 800a522:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a526:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a52e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a532:	4618      	mov	r0, r3
 800a534:	3740      	adds	r7, #64	; 0x40
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
	...

0800a53c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b08c      	sub	sp, #48	; 0x30
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a548:	2300      	movs	r3, #0
 800a54a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a552:	2b00      	cmp	r3, #0
 800a554:	d10a      	bne.n	800a56c <xQueueReceive+0x30>
	__asm volatile
 800a556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a55a:	f383 8811 	msr	BASEPRI, r3
 800a55e:	f3bf 8f6f 	isb	sy
 800a562:	f3bf 8f4f 	dsb	sy
 800a566:	623b      	str	r3, [r7, #32]
}
 800a568:	bf00      	nop
 800a56a:	e7fe      	b.n	800a56a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d103      	bne.n	800a57a <xQueueReceive+0x3e>
 800a572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a576:	2b00      	cmp	r3, #0
 800a578:	d101      	bne.n	800a57e <xQueueReceive+0x42>
 800a57a:	2301      	movs	r3, #1
 800a57c:	e000      	b.n	800a580 <xQueueReceive+0x44>
 800a57e:	2300      	movs	r3, #0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d10a      	bne.n	800a59a <xQueueReceive+0x5e>
	__asm volatile
 800a584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a588:	f383 8811 	msr	BASEPRI, r3
 800a58c:	f3bf 8f6f 	isb	sy
 800a590:	f3bf 8f4f 	dsb	sy
 800a594:	61fb      	str	r3, [r7, #28]
}
 800a596:	bf00      	nop
 800a598:	e7fe      	b.n	800a598 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a59a:	f001 f8e3 	bl	800b764 <xTaskGetSchedulerState>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d102      	bne.n	800a5aa <xQueueReceive+0x6e>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d101      	bne.n	800a5ae <xQueueReceive+0x72>
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	e000      	b.n	800a5b0 <xQueueReceive+0x74>
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d10a      	bne.n	800a5ca <xQueueReceive+0x8e>
	__asm volatile
 800a5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b8:	f383 8811 	msr	BASEPRI, r3
 800a5bc:	f3bf 8f6f 	isb	sy
 800a5c0:	f3bf 8f4f 	dsb	sy
 800a5c4:	61bb      	str	r3, [r7, #24]
}
 800a5c6:	bf00      	nop
 800a5c8:	e7fe      	b.n	800a5c8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a5ca:	f001 fe23 	bl	800c214 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d01f      	beq.n	800a61a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a5da:	68b9      	ldr	r1, [r7, #8]
 800a5dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5de:	f000 f977 	bl	800a8d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e4:	1e5a      	subs	r2, r3, #1
 800a5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ec:	691b      	ldr	r3, [r3, #16]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d00f      	beq.n	800a612 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f4:	3310      	adds	r3, #16
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f000 fef4 	bl	800b3e4 <xTaskRemoveFromEventList>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d007      	beq.n	800a612 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a602:	4b3d      	ldr	r3, [pc, #244]	; (800a6f8 <xQueueReceive+0x1bc>)
 800a604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a608:	601a      	str	r2, [r3, #0]
 800a60a:	f3bf 8f4f 	dsb	sy
 800a60e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a612:	f001 fe2f 	bl	800c274 <vPortExitCritical>
				return pdPASS;
 800a616:	2301      	movs	r3, #1
 800a618:	e069      	b.n	800a6ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d103      	bne.n	800a628 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a620:	f001 fe28 	bl	800c274 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a624:	2300      	movs	r3, #0
 800a626:	e062      	b.n	800a6ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d106      	bne.n	800a63c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a62e:	f107 0310 	add.w	r3, r7, #16
 800a632:	4618      	mov	r0, r3
 800a634:	f000 ff3a 	bl	800b4ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a638:	2301      	movs	r3, #1
 800a63a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a63c:	f001 fe1a 	bl	800c274 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a640:	f000 fc88 	bl	800af54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a644:	f001 fde6 	bl	800c214 <vPortEnterCritical>
 800a648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a64e:	b25b      	sxtb	r3, r3
 800a650:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a654:	d103      	bne.n	800a65e <xQueueReceive+0x122>
 800a656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a658:	2200      	movs	r2, #0
 800a65a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a660:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a664:	b25b      	sxtb	r3, r3
 800a666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a66a:	d103      	bne.n	800a674 <xQueueReceive+0x138>
 800a66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66e:	2200      	movs	r2, #0
 800a670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a674:	f001 fdfe 	bl	800c274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a678:	1d3a      	adds	r2, r7, #4
 800a67a:	f107 0310 	add.w	r3, r7, #16
 800a67e:	4611      	mov	r1, r2
 800a680:	4618      	mov	r0, r3
 800a682:	f000 ff29 	bl	800b4d8 <xTaskCheckForTimeOut>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d123      	bne.n	800a6d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a68c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a68e:	f000 f997 	bl	800a9c0 <prvIsQueueEmpty>
 800a692:	4603      	mov	r3, r0
 800a694:	2b00      	cmp	r3, #0
 800a696:	d017      	beq.n	800a6c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a69a:	3324      	adds	r3, #36	; 0x24
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	4611      	mov	r1, r2
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f000 fe4f 	bl	800b344 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a6a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6a8:	f000 f938 	bl	800a91c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a6ac:	f000 fc60 	bl	800af70 <xTaskResumeAll>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d189      	bne.n	800a5ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a6b6:	4b10      	ldr	r3, [pc, #64]	; (800a6f8 <xQueueReceive+0x1bc>)
 800a6b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6bc:	601a      	str	r2, [r3, #0]
 800a6be:	f3bf 8f4f 	dsb	sy
 800a6c2:	f3bf 8f6f 	isb	sy
 800a6c6:	e780      	b.n	800a5ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a6c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6ca:	f000 f927 	bl	800a91c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a6ce:	f000 fc4f 	bl	800af70 <xTaskResumeAll>
 800a6d2:	e77a      	b.n	800a5ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a6d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6d6:	f000 f921 	bl	800a91c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a6da:	f000 fc49 	bl	800af70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6e0:	f000 f96e 	bl	800a9c0 <prvIsQueueEmpty>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	f43f af6f 	beq.w	800a5ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a6ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3730      	adds	r7, #48	; 0x30
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
 800a6f6:	bf00      	nop
 800a6f8:	e000ed04 	.word	0xe000ed04

0800a6fc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b08e      	sub	sp, #56	; 0x38
 800a700:	af00      	add	r7, sp, #0
 800a702:	60f8      	str	r0, [r7, #12]
 800a704:	60b9      	str	r1, [r7, #8]
 800a706:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d10a      	bne.n	800a728 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a716:	f383 8811 	msr	BASEPRI, r3
 800a71a:	f3bf 8f6f 	isb	sy
 800a71e:	f3bf 8f4f 	dsb	sy
 800a722:	623b      	str	r3, [r7, #32]
}
 800a724:	bf00      	nop
 800a726:	e7fe      	b.n	800a726 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d103      	bne.n	800a736 <xQueueReceiveFromISR+0x3a>
 800a72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a732:	2b00      	cmp	r3, #0
 800a734:	d101      	bne.n	800a73a <xQueueReceiveFromISR+0x3e>
 800a736:	2301      	movs	r3, #1
 800a738:	e000      	b.n	800a73c <xQueueReceiveFromISR+0x40>
 800a73a:	2300      	movs	r3, #0
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d10a      	bne.n	800a756 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a744:	f383 8811 	msr	BASEPRI, r3
 800a748:	f3bf 8f6f 	isb	sy
 800a74c:	f3bf 8f4f 	dsb	sy
 800a750:	61fb      	str	r3, [r7, #28]
}
 800a752:	bf00      	nop
 800a754:	e7fe      	b.n	800a754 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a756:	f001 fe3f 	bl	800c3d8 <vPortValidateInterruptPriority>
	__asm volatile
 800a75a:	f3ef 8211 	mrs	r2, BASEPRI
 800a75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a762:	f383 8811 	msr	BASEPRI, r3
 800a766:	f3bf 8f6f 	isb	sy
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	61ba      	str	r2, [r7, #24]
 800a770:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a772:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a774:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a77a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d02f      	beq.n	800a7e2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a784:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a788:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a78c:	68b9      	ldr	r1, [r7, #8]
 800a78e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a790:	f000 f89e 	bl	800a8d0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a796:	1e5a      	subs	r2, r3, #1
 800a798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a79a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a79c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a7a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7a4:	d112      	bne.n	800a7cc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a8:	691b      	ldr	r3, [r3, #16]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d016      	beq.n	800a7dc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b0:	3310      	adds	r3, #16
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f000 fe16 	bl	800b3e4 <xTaskRemoveFromEventList>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d00e      	beq.n	800a7dc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d00b      	beq.n	800a7dc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	601a      	str	r2, [r3, #0]
 800a7ca:	e007      	b.n	800a7dc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a7cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7d0:	3301      	adds	r3, #1
 800a7d2:	b2db      	uxtb	r3, r3
 800a7d4:	b25a      	sxtb	r2, r3
 800a7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	637b      	str	r3, [r7, #52]	; 0x34
 800a7e0:	e001      	b.n	800a7e6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	637b      	str	r3, [r7, #52]	; 0x34
 800a7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	f383 8811 	msr	BASEPRI, r3
}
 800a7f0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a7f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3738      	adds	r7, #56	; 0x38
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b086      	sub	sp, #24
 800a800:	af00      	add	r7, sp, #0
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	60b9      	str	r1, [r7, #8]
 800a806:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a808:	2300      	movs	r3, #0
 800a80a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a810:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a816:	2b00      	cmp	r3, #0
 800a818:	d10d      	bne.n	800a836 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d14d      	bne.n	800a8be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	689b      	ldr	r3, [r3, #8]
 800a826:	4618      	mov	r0, r3
 800a828:	f000 ffba 	bl	800b7a0 <xTaskPriorityDisinherit>
 800a82c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2200      	movs	r2, #0
 800a832:	609a      	str	r2, [r3, #8]
 800a834:	e043      	b.n	800a8be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d119      	bne.n	800a870 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6858      	ldr	r0, [r3, #4]
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a844:	461a      	mov	r2, r3
 800a846:	68b9      	ldr	r1, [r7, #8]
 800a848:	f002 fbfc 	bl	800d044 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	685a      	ldr	r2, [r3, #4]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a854:	441a      	add	r2, r3
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	685a      	ldr	r2, [r3, #4]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	429a      	cmp	r2, r3
 800a864:	d32b      	bcc.n	800a8be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	605a      	str	r2, [r3, #4]
 800a86e:	e026      	b.n	800a8be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	68d8      	ldr	r0, [r3, #12]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a878:	461a      	mov	r2, r3
 800a87a:	68b9      	ldr	r1, [r7, #8]
 800a87c:	f002 fbe2 	bl	800d044 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	68da      	ldr	r2, [r3, #12]
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a888:	425b      	negs	r3, r3
 800a88a:	441a      	add	r2, r3
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	68da      	ldr	r2, [r3, #12]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	429a      	cmp	r2, r3
 800a89a:	d207      	bcs.n	800a8ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	689a      	ldr	r2, [r3, #8]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8a4:	425b      	negs	r3, r3
 800a8a6:	441a      	add	r2, r3
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2b02      	cmp	r3, #2
 800a8b0:	d105      	bne.n	800a8be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d002      	beq.n	800a8be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	3b01      	subs	r3, #1
 800a8bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	1c5a      	adds	r2, r3, #1
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a8c6:	697b      	ldr	r3, [r7, #20]
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3718      	adds	r7, #24
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d018      	beq.n	800a914 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	68da      	ldr	r2, [r3, #12]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ea:	441a      	add	r2, r3
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	68da      	ldr	r2, [r3, #12]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d303      	bcc.n	800a904 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	68d9      	ldr	r1, [r3, #12]
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a90c:	461a      	mov	r2, r3
 800a90e:	6838      	ldr	r0, [r7, #0]
 800a910:	f002 fb98 	bl	800d044 <memcpy>
	}
}
 800a914:	bf00      	nop
 800a916:	3708      	adds	r7, #8
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a924:	f001 fc76 	bl	800c214 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a92e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a930:	e011      	b.n	800a956 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a936:	2b00      	cmp	r3, #0
 800a938:	d012      	beq.n	800a960 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	3324      	adds	r3, #36	; 0x24
 800a93e:	4618      	mov	r0, r3
 800a940:	f000 fd50 	bl	800b3e4 <xTaskRemoveFromEventList>
 800a944:	4603      	mov	r3, r0
 800a946:	2b00      	cmp	r3, #0
 800a948:	d001      	beq.n	800a94e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a94a:	f000 fe27 	bl	800b59c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a94e:	7bfb      	ldrb	r3, [r7, #15]
 800a950:	3b01      	subs	r3, #1
 800a952:	b2db      	uxtb	r3, r3
 800a954:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	dce9      	bgt.n	800a932 <prvUnlockQueue+0x16>
 800a95e:	e000      	b.n	800a962 <prvUnlockQueue+0x46>
					break;
 800a960:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	22ff      	movs	r2, #255	; 0xff
 800a966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a96a:	f001 fc83 	bl	800c274 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a96e:	f001 fc51 	bl	800c214 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a978:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a97a:	e011      	b.n	800a9a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	691b      	ldr	r3, [r3, #16]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d012      	beq.n	800a9aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	3310      	adds	r3, #16
 800a988:	4618      	mov	r0, r3
 800a98a:	f000 fd2b 	bl	800b3e4 <xTaskRemoveFromEventList>
 800a98e:	4603      	mov	r3, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d001      	beq.n	800a998 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a994:	f000 fe02 	bl	800b59c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a998:	7bbb      	ldrb	r3, [r7, #14]
 800a99a:	3b01      	subs	r3, #1
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a9a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	dce9      	bgt.n	800a97c <prvUnlockQueue+0x60>
 800a9a8:	e000      	b.n	800a9ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a9aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	22ff      	movs	r2, #255	; 0xff
 800a9b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a9b4:	f001 fc5e 	bl	800c274 <vPortExitCritical>
}
 800a9b8:	bf00      	nop
 800a9ba:	3710      	adds	r7, #16
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}

0800a9c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a9c8:	f001 fc24 	bl	800c214 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d102      	bne.n	800a9da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	60fb      	str	r3, [r7, #12]
 800a9d8:	e001      	b.n	800a9de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a9de:	f001 fc49 	bl	800c274 <vPortExitCritical>

	return xReturn;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3710      	adds	r7, #16
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b084      	sub	sp, #16
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a9f4:	f001 fc0e 	bl	800c214 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d102      	bne.n	800aa0a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aa04:	2301      	movs	r3, #1
 800aa06:	60fb      	str	r3, [r7, #12]
 800aa08:	e001      	b.n	800aa0e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa0e:	f001 fc31 	bl	800c274 <vPortExitCritical>

	return xReturn;
 800aa12:	68fb      	ldr	r3, [r7, #12]
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3710      	adds	r7, #16
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b085      	sub	sp, #20
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa26:	2300      	movs	r3, #0
 800aa28:	60fb      	str	r3, [r7, #12]
 800aa2a:	e014      	b.n	800aa56 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aa2c:	4a0f      	ldr	r2, [pc, #60]	; (800aa6c <vQueueAddToRegistry+0x50>)
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d10b      	bne.n	800aa50 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aa38:	490c      	ldr	r1, [pc, #48]	; (800aa6c <vQueueAddToRegistry+0x50>)
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	683a      	ldr	r2, [r7, #0]
 800aa3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aa42:	4a0a      	ldr	r2, [pc, #40]	; (800aa6c <vQueueAddToRegistry+0x50>)
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	00db      	lsls	r3, r3, #3
 800aa48:	4413      	add	r3, r2
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aa4e:	e006      	b.n	800aa5e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	3301      	adds	r3, #1
 800aa54:	60fb      	str	r3, [r7, #12]
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2b07      	cmp	r3, #7
 800aa5a:	d9e7      	bls.n	800aa2c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aa5c:	bf00      	nop
 800aa5e:	bf00      	nop
 800aa60:	3714      	adds	r7, #20
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr
 800aa6a:	bf00      	nop
 800aa6c:	20000a3c 	.word	0x20000a3c

0800aa70 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b086      	sub	sp, #24
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	60b9      	str	r1, [r7, #8]
 800aa7a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aa80:	f001 fbc8 	bl	800c214 <vPortEnterCritical>
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa8a:	b25b      	sxtb	r3, r3
 800aa8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa90:	d103      	bne.n	800aa9a <vQueueWaitForMessageRestricted+0x2a>
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	2200      	movs	r2, #0
 800aa96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aaa0:	b25b      	sxtb	r3, r3
 800aaa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaa6:	d103      	bne.n	800aab0 <vQueueWaitForMessageRestricted+0x40>
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aab0:	f001 fbe0 	bl	800c274 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d106      	bne.n	800aaca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	3324      	adds	r3, #36	; 0x24
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	68b9      	ldr	r1, [r7, #8]
 800aac4:	4618      	mov	r0, r3
 800aac6:	f000 fc61 	bl	800b38c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aaca:	6978      	ldr	r0, [r7, #20]
 800aacc:	f7ff ff26 	bl	800a91c <prvUnlockQueue>
	}
 800aad0:	bf00      	nop
 800aad2:	3718      	adds	r7, #24
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b08e      	sub	sp, #56	; 0x38
 800aadc:	af04      	add	r7, sp, #16
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	60b9      	str	r1, [r7, #8]
 800aae2:	607a      	str	r2, [r7, #4]
 800aae4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d10a      	bne.n	800ab02 <xTaskCreateStatic+0x2a>
	__asm volatile
 800aaec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf0:	f383 8811 	msr	BASEPRI, r3
 800aaf4:	f3bf 8f6f 	isb	sy
 800aaf8:	f3bf 8f4f 	dsb	sy
 800aafc:	623b      	str	r3, [r7, #32]
}
 800aafe:	bf00      	nop
 800ab00:	e7fe      	b.n	800ab00 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ab02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d10a      	bne.n	800ab1e <xTaskCreateStatic+0x46>
	__asm volatile
 800ab08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0c:	f383 8811 	msr	BASEPRI, r3
 800ab10:	f3bf 8f6f 	isb	sy
 800ab14:	f3bf 8f4f 	dsb	sy
 800ab18:	61fb      	str	r3, [r7, #28]
}
 800ab1a:	bf00      	nop
 800ab1c:	e7fe      	b.n	800ab1c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ab1e:	2360      	movs	r3, #96	; 0x60
 800ab20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	2b60      	cmp	r3, #96	; 0x60
 800ab26:	d00a      	beq.n	800ab3e <xTaskCreateStatic+0x66>
	__asm volatile
 800ab28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab2c:	f383 8811 	msr	BASEPRI, r3
 800ab30:	f3bf 8f6f 	isb	sy
 800ab34:	f3bf 8f4f 	dsb	sy
 800ab38:	61bb      	str	r3, [r7, #24]
}
 800ab3a:	bf00      	nop
 800ab3c:	e7fe      	b.n	800ab3c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ab3e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ab40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d01e      	beq.n	800ab84 <xTaskCreateStatic+0xac>
 800ab46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d01b      	beq.n	800ab84 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab4e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ab50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab54:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ab56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab58:	2202      	movs	r2, #2
 800ab5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ab5e:	2300      	movs	r3, #0
 800ab60:	9303      	str	r3, [sp, #12]
 800ab62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab64:	9302      	str	r3, [sp, #8]
 800ab66:	f107 0314 	add.w	r3, r7, #20
 800ab6a:	9301      	str	r3, [sp, #4]
 800ab6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6e:	9300      	str	r3, [sp, #0]
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	68b9      	ldr	r1, [r7, #8]
 800ab76:	68f8      	ldr	r0, [r7, #12]
 800ab78:	f000 f850 	bl	800ac1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab7e:	f000 f8df 	bl	800ad40 <prvAddNewTaskToReadyList>
 800ab82:	e001      	b.n	800ab88 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ab84:	2300      	movs	r3, #0
 800ab86:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ab88:	697b      	ldr	r3, [r7, #20]
	}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3728      	adds	r7, #40	; 0x28
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}

0800ab92 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ab92:	b580      	push	{r7, lr}
 800ab94:	b08c      	sub	sp, #48	; 0x30
 800ab96:	af04      	add	r7, sp, #16
 800ab98:	60f8      	str	r0, [r7, #12]
 800ab9a:	60b9      	str	r1, [r7, #8]
 800ab9c:	603b      	str	r3, [r7, #0]
 800ab9e:	4613      	mov	r3, r2
 800aba0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aba2:	88fb      	ldrh	r3, [r7, #6]
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	4618      	mov	r0, r3
 800aba8:	f001 fc56 	bl	800c458 <pvPortMalloc>
 800abac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d00e      	beq.n	800abd2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800abb4:	2060      	movs	r0, #96	; 0x60
 800abb6:	f001 fc4f 	bl	800c458 <pvPortMalloc>
 800abba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d003      	beq.n	800abca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800abc2:	69fb      	ldr	r3, [r7, #28]
 800abc4:	697a      	ldr	r2, [r7, #20]
 800abc6:	631a      	str	r2, [r3, #48]	; 0x30
 800abc8:	e005      	b.n	800abd6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800abca:	6978      	ldr	r0, [r7, #20]
 800abcc:	f001 fd14 	bl	800c5f8 <vPortFree>
 800abd0:	e001      	b.n	800abd6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800abd2:	2300      	movs	r3, #0
 800abd4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d017      	beq.n	800ac0c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800abdc:	69fb      	ldr	r3, [r7, #28]
 800abde:	2200      	movs	r2, #0
 800abe0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800abe4:	88fa      	ldrh	r2, [r7, #6]
 800abe6:	2300      	movs	r3, #0
 800abe8:	9303      	str	r3, [sp, #12]
 800abea:	69fb      	ldr	r3, [r7, #28]
 800abec:	9302      	str	r3, [sp, #8]
 800abee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf0:	9301      	str	r3, [sp, #4]
 800abf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf4:	9300      	str	r3, [sp, #0]
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	68b9      	ldr	r1, [r7, #8]
 800abfa:	68f8      	ldr	r0, [r7, #12]
 800abfc:	f000 f80e 	bl	800ac1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac00:	69f8      	ldr	r0, [r7, #28]
 800ac02:	f000 f89d 	bl	800ad40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ac06:	2301      	movs	r3, #1
 800ac08:	61bb      	str	r3, [r7, #24]
 800ac0a:	e002      	b.n	800ac12 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ac0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ac10:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ac12:	69bb      	ldr	r3, [r7, #24]
	}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3720      	adds	r7, #32
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b088      	sub	sp, #32
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	607a      	str	r2, [r7, #4]
 800ac28:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ac2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	461a      	mov	r2, r3
 800ac34:	21a5      	movs	r1, #165	; 0xa5
 800ac36:	f002 f9c1 	bl	800cfbc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ac3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ac44:	3b01      	subs	r3, #1
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	4413      	add	r3, r2
 800ac4a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ac4c:	69bb      	ldr	r3, [r7, #24]
 800ac4e:	f023 0307 	bic.w	r3, r3, #7
 800ac52:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ac54:	69bb      	ldr	r3, [r7, #24]
 800ac56:	f003 0307 	and.w	r3, r3, #7
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d00a      	beq.n	800ac74 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ac5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac62:	f383 8811 	msr	BASEPRI, r3
 800ac66:	f3bf 8f6f 	isb	sy
 800ac6a:	f3bf 8f4f 	dsb	sy
 800ac6e:	617b      	str	r3, [r7, #20]
}
 800ac70:	bf00      	nop
 800ac72:	e7fe      	b.n	800ac72 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d01f      	beq.n	800acba <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	61fb      	str	r3, [r7, #28]
 800ac7e:	e012      	b.n	800aca6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac80:	68ba      	ldr	r2, [r7, #8]
 800ac82:	69fb      	ldr	r3, [r7, #28]
 800ac84:	4413      	add	r3, r2
 800ac86:	7819      	ldrb	r1, [r3, #0]
 800ac88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac8a:	69fb      	ldr	r3, [r7, #28]
 800ac8c:	4413      	add	r3, r2
 800ac8e:	3334      	adds	r3, #52	; 0x34
 800ac90:	460a      	mov	r2, r1
 800ac92:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ac94:	68ba      	ldr	r2, [r7, #8]
 800ac96:	69fb      	ldr	r3, [r7, #28]
 800ac98:	4413      	add	r3, r2
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d006      	beq.n	800acae <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aca0:	69fb      	ldr	r3, [r7, #28]
 800aca2:	3301      	adds	r3, #1
 800aca4:	61fb      	str	r3, [r7, #28]
 800aca6:	69fb      	ldr	r3, [r7, #28]
 800aca8:	2b0f      	cmp	r3, #15
 800acaa:	d9e9      	bls.n	800ac80 <prvInitialiseNewTask+0x64>
 800acac:	e000      	b.n	800acb0 <prvInitialiseNewTask+0x94>
			{
				break;
 800acae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800acb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb2:	2200      	movs	r2, #0
 800acb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800acb8:	e003      	b.n	800acc2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800acba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acbc:	2200      	movs	r2, #0
 800acbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800acc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc4:	2b37      	cmp	r3, #55	; 0x37
 800acc6:	d901      	bls.n	800accc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800acc8:	2337      	movs	r3, #55	; 0x37
 800acca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800accc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acd0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800acd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acd6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800acd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acda:	2200      	movs	r2, #0
 800acdc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800acde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace0:	3304      	adds	r3, #4
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7ff f8be 	bl	8009e64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ace8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acea:	3318      	adds	r3, #24
 800acec:	4618      	mov	r0, r3
 800acee:	f7ff f8b9 	bl	8009e64 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800acf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acf6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acfa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800acfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad00:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ad02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad06:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800ad08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ad0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad10:	2200      	movs	r2, #0
 800ad12:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ad14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad16:	2200      	movs	r2, #0
 800ad18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ad1c:	683a      	ldr	r2, [r7, #0]
 800ad1e:	68f9      	ldr	r1, [r7, #12]
 800ad20:	69b8      	ldr	r0, [r7, #24]
 800ad22:	f001 f94d 	bl	800bfc0 <pxPortInitialiseStack>
 800ad26:	4602      	mov	r2, r0
 800ad28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad2a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ad2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d002      	beq.n	800ad38 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ad32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad36:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad38:	bf00      	nop
 800ad3a:	3720      	adds	r7, #32
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b082      	sub	sp, #8
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ad48:	f001 fa64 	bl	800c214 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ad4c:	4b2d      	ldr	r3, [pc, #180]	; (800ae04 <prvAddNewTaskToReadyList+0xc4>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	3301      	adds	r3, #1
 800ad52:	4a2c      	ldr	r2, [pc, #176]	; (800ae04 <prvAddNewTaskToReadyList+0xc4>)
 800ad54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ad56:	4b2c      	ldr	r3, [pc, #176]	; (800ae08 <prvAddNewTaskToReadyList+0xc8>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d109      	bne.n	800ad72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ad5e:	4a2a      	ldr	r2, [pc, #168]	; (800ae08 <prvAddNewTaskToReadyList+0xc8>)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ad64:	4b27      	ldr	r3, [pc, #156]	; (800ae04 <prvAddNewTaskToReadyList+0xc4>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d110      	bne.n	800ad8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ad6c:	f000 fc3c 	bl	800b5e8 <prvInitialiseTaskLists>
 800ad70:	e00d      	b.n	800ad8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ad72:	4b26      	ldr	r3, [pc, #152]	; (800ae0c <prvAddNewTaskToReadyList+0xcc>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d109      	bne.n	800ad8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ad7a:	4b23      	ldr	r3, [pc, #140]	; (800ae08 <prvAddNewTaskToReadyList+0xc8>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d802      	bhi.n	800ad8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ad88:	4a1f      	ldr	r2, [pc, #124]	; (800ae08 <prvAddNewTaskToReadyList+0xc8>)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ad8e:	4b20      	ldr	r3, [pc, #128]	; (800ae10 <prvAddNewTaskToReadyList+0xd0>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	3301      	adds	r3, #1
 800ad94:	4a1e      	ldr	r2, [pc, #120]	; (800ae10 <prvAddNewTaskToReadyList+0xd0>)
 800ad96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ad98:	4b1d      	ldr	r3, [pc, #116]	; (800ae10 <prvAddNewTaskToReadyList+0xd0>)
 800ad9a:	681a      	ldr	r2, [r3, #0]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ada4:	4b1b      	ldr	r3, [pc, #108]	; (800ae14 <prvAddNewTaskToReadyList+0xd4>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d903      	bls.n	800adb4 <prvAddNewTaskToReadyList+0x74>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb0:	4a18      	ldr	r2, [pc, #96]	; (800ae14 <prvAddNewTaskToReadyList+0xd4>)
 800adb2:	6013      	str	r3, [r2, #0]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adb8:	4613      	mov	r3, r2
 800adba:	009b      	lsls	r3, r3, #2
 800adbc:	4413      	add	r3, r2
 800adbe:	009b      	lsls	r3, r3, #2
 800adc0:	4a15      	ldr	r2, [pc, #84]	; (800ae18 <prvAddNewTaskToReadyList+0xd8>)
 800adc2:	441a      	add	r2, r3
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	3304      	adds	r3, #4
 800adc8:	4619      	mov	r1, r3
 800adca:	4610      	mov	r0, r2
 800adcc:	f7ff f857 	bl	8009e7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800add0:	f001 fa50 	bl	800c274 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800add4:	4b0d      	ldr	r3, [pc, #52]	; (800ae0c <prvAddNewTaskToReadyList+0xcc>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d00e      	beq.n	800adfa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800addc:	4b0a      	ldr	r3, [pc, #40]	; (800ae08 <prvAddNewTaskToReadyList+0xc8>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d207      	bcs.n	800adfa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800adea:	4b0c      	ldr	r3, [pc, #48]	; (800ae1c <prvAddNewTaskToReadyList+0xdc>)
 800adec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adf0:	601a      	str	r2, [r3, #0]
 800adf2:	f3bf 8f4f 	dsb	sy
 800adf6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800adfa:	bf00      	nop
 800adfc:	3708      	adds	r7, #8
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop
 800ae04:	20000f50 	.word	0x20000f50
 800ae08:	20000a7c 	.word	0x20000a7c
 800ae0c:	20000f5c 	.word	0x20000f5c
 800ae10:	20000f6c 	.word	0x20000f6c
 800ae14:	20000f58 	.word	0x20000f58
 800ae18:	20000a80 	.word	0x20000a80
 800ae1c:	e000ed04 	.word	0xe000ed04

0800ae20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d017      	beq.n	800ae62 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ae32:	4b13      	ldr	r3, [pc, #76]	; (800ae80 <vTaskDelay+0x60>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d00a      	beq.n	800ae50 <vTaskDelay+0x30>
	__asm volatile
 800ae3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae3e:	f383 8811 	msr	BASEPRI, r3
 800ae42:	f3bf 8f6f 	isb	sy
 800ae46:	f3bf 8f4f 	dsb	sy
 800ae4a:	60bb      	str	r3, [r7, #8]
}
 800ae4c:	bf00      	nop
 800ae4e:	e7fe      	b.n	800ae4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ae50:	f000 f880 	bl	800af54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ae54:	2100      	movs	r1, #0
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f000 fd10 	bl	800b87c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ae5c:	f000 f888 	bl	800af70 <xTaskResumeAll>
 800ae60:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d107      	bne.n	800ae78 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ae68:	4b06      	ldr	r3, [pc, #24]	; (800ae84 <vTaskDelay+0x64>)
 800ae6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae6e:	601a      	str	r2, [r3, #0]
 800ae70:	f3bf 8f4f 	dsb	sy
 800ae74:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae78:	bf00      	nop
 800ae7a:	3710      	adds	r7, #16
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	20000f78 	.word	0x20000f78
 800ae84:	e000ed04 	.word	0xe000ed04

0800ae88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b08a      	sub	sp, #40	; 0x28
 800ae8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ae92:	2300      	movs	r3, #0
 800ae94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ae96:	463a      	mov	r2, r7
 800ae98:	1d39      	adds	r1, r7, #4
 800ae9a:	f107 0308 	add.w	r3, r7, #8
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7fe ff8c 	bl	8009dbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aea4:	6839      	ldr	r1, [r7, #0]
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	68ba      	ldr	r2, [r7, #8]
 800aeaa:	9202      	str	r2, [sp, #8]
 800aeac:	9301      	str	r3, [sp, #4]
 800aeae:	2300      	movs	r3, #0
 800aeb0:	9300      	str	r3, [sp, #0]
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	460a      	mov	r2, r1
 800aeb6:	4921      	ldr	r1, [pc, #132]	; (800af3c <vTaskStartScheduler+0xb4>)
 800aeb8:	4821      	ldr	r0, [pc, #132]	; (800af40 <vTaskStartScheduler+0xb8>)
 800aeba:	f7ff fe0d 	bl	800aad8 <xTaskCreateStatic>
 800aebe:	4603      	mov	r3, r0
 800aec0:	4a20      	ldr	r2, [pc, #128]	; (800af44 <vTaskStartScheduler+0xbc>)
 800aec2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aec4:	4b1f      	ldr	r3, [pc, #124]	; (800af44 <vTaskStartScheduler+0xbc>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d002      	beq.n	800aed2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aecc:	2301      	movs	r3, #1
 800aece:	617b      	str	r3, [r7, #20]
 800aed0:	e001      	b.n	800aed6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aed2:	2300      	movs	r3, #0
 800aed4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	2b01      	cmp	r3, #1
 800aeda:	d102      	bne.n	800aee2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aedc:	f000 fd22 	bl	800b924 <xTimerCreateTimerTask>
 800aee0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d116      	bne.n	800af16 <vTaskStartScheduler+0x8e>
	__asm volatile
 800aee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeec:	f383 8811 	msr	BASEPRI, r3
 800aef0:	f3bf 8f6f 	isb	sy
 800aef4:	f3bf 8f4f 	dsb	sy
 800aef8:	613b      	str	r3, [r7, #16]
}
 800aefa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aefc:	4b12      	ldr	r3, [pc, #72]	; (800af48 <vTaskStartScheduler+0xc0>)
 800aefe:	f04f 32ff 	mov.w	r2, #4294967295
 800af02:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800af04:	4b11      	ldr	r3, [pc, #68]	; (800af4c <vTaskStartScheduler+0xc4>)
 800af06:	2201      	movs	r2, #1
 800af08:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800af0a:	4b11      	ldr	r3, [pc, #68]	; (800af50 <vTaskStartScheduler+0xc8>)
 800af0c:	2200      	movs	r2, #0
 800af0e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800af10:	f001 f8de 	bl	800c0d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800af14:	e00e      	b.n	800af34 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af1c:	d10a      	bne.n	800af34 <vTaskStartScheduler+0xac>
	__asm volatile
 800af1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af22:	f383 8811 	msr	BASEPRI, r3
 800af26:	f3bf 8f6f 	isb	sy
 800af2a:	f3bf 8f4f 	dsb	sy
 800af2e:	60fb      	str	r3, [r7, #12]
}
 800af30:	bf00      	nop
 800af32:	e7fe      	b.n	800af32 <vTaskStartScheduler+0xaa>
}
 800af34:	bf00      	nop
 800af36:	3718      	adds	r7, #24
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}
 800af3c:	0800d130 	.word	0x0800d130
 800af40:	0800b5b5 	.word	0x0800b5b5
 800af44:	20000f74 	.word	0x20000f74
 800af48:	20000f70 	.word	0x20000f70
 800af4c:	20000f5c 	.word	0x20000f5c
 800af50:	20000f54 	.word	0x20000f54

0800af54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800af54:	b480      	push	{r7}
 800af56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800af58:	4b04      	ldr	r3, [pc, #16]	; (800af6c <vTaskSuspendAll+0x18>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	3301      	adds	r3, #1
 800af5e:	4a03      	ldr	r2, [pc, #12]	; (800af6c <vTaskSuspendAll+0x18>)
 800af60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800af62:	bf00      	nop
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr
 800af6c:	20000f78 	.word	0x20000f78

0800af70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800af76:	2300      	movs	r3, #0
 800af78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800af7a:	2300      	movs	r3, #0
 800af7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800af7e:	4b42      	ldr	r3, [pc, #264]	; (800b088 <xTaskResumeAll+0x118>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d10a      	bne.n	800af9c <xTaskResumeAll+0x2c>
	__asm volatile
 800af86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8a:	f383 8811 	msr	BASEPRI, r3
 800af8e:	f3bf 8f6f 	isb	sy
 800af92:	f3bf 8f4f 	dsb	sy
 800af96:	603b      	str	r3, [r7, #0]
}
 800af98:	bf00      	nop
 800af9a:	e7fe      	b.n	800af9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800af9c:	f001 f93a 	bl	800c214 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800afa0:	4b39      	ldr	r3, [pc, #228]	; (800b088 <xTaskResumeAll+0x118>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	3b01      	subs	r3, #1
 800afa6:	4a38      	ldr	r2, [pc, #224]	; (800b088 <xTaskResumeAll+0x118>)
 800afa8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afaa:	4b37      	ldr	r3, [pc, #220]	; (800b088 <xTaskResumeAll+0x118>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d162      	bne.n	800b078 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800afb2:	4b36      	ldr	r3, [pc, #216]	; (800b08c <xTaskResumeAll+0x11c>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d05e      	beq.n	800b078 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800afba:	e02f      	b.n	800b01c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afbc:	4b34      	ldr	r3, [pc, #208]	; (800b090 <xTaskResumeAll+0x120>)
 800afbe:	68db      	ldr	r3, [r3, #12]
 800afc0:	68db      	ldr	r3, [r3, #12]
 800afc2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	3318      	adds	r3, #24
 800afc8:	4618      	mov	r0, r3
 800afca:	f7fe ffb5 	bl	8009f38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	3304      	adds	r3, #4
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7fe ffb0 	bl	8009f38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afdc:	4b2d      	ldr	r3, [pc, #180]	; (800b094 <xTaskResumeAll+0x124>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d903      	bls.n	800afec <xTaskResumeAll+0x7c>
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe8:	4a2a      	ldr	r2, [pc, #168]	; (800b094 <xTaskResumeAll+0x124>)
 800afea:	6013      	str	r3, [r2, #0]
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aff0:	4613      	mov	r3, r2
 800aff2:	009b      	lsls	r3, r3, #2
 800aff4:	4413      	add	r3, r2
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	4a27      	ldr	r2, [pc, #156]	; (800b098 <xTaskResumeAll+0x128>)
 800affa:	441a      	add	r2, r3
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	3304      	adds	r3, #4
 800b000:	4619      	mov	r1, r3
 800b002:	4610      	mov	r0, r2
 800b004:	f7fe ff3b 	bl	8009e7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b00c:	4b23      	ldr	r3, [pc, #140]	; (800b09c <xTaskResumeAll+0x12c>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b012:	429a      	cmp	r2, r3
 800b014:	d302      	bcc.n	800b01c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b016:	4b22      	ldr	r3, [pc, #136]	; (800b0a0 <xTaskResumeAll+0x130>)
 800b018:	2201      	movs	r2, #1
 800b01a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b01c:	4b1c      	ldr	r3, [pc, #112]	; (800b090 <xTaskResumeAll+0x120>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d1cb      	bne.n	800afbc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d001      	beq.n	800b02e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b02a:	f000 fb7b 	bl	800b724 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b02e:	4b1d      	ldr	r3, [pc, #116]	; (800b0a4 <xTaskResumeAll+0x134>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d010      	beq.n	800b05c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b03a:	f000 f847 	bl	800b0cc <xTaskIncrementTick>
 800b03e:	4603      	mov	r3, r0
 800b040:	2b00      	cmp	r3, #0
 800b042:	d002      	beq.n	800b04a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b044:	4b16      	ldr	r3, [pc, #88]	; (800b0a0 <xTaskResumeAll+0x130>)
 800b046:	2201      	movs	r2, #1
 800b048:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	3b01      	subs	r3, #1
 800b04e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d1f1      	bne.n	800b03a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b056:	4b13      	ldr	r3, [pc, #76]	; (800b0a4 <xTaskResumeAll+0x134>)
 800b058:	2200      	movs	r2, #0
 800b05a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b05c:	4b10      	ldr	r3, [pc, #64]	; (800b0a0 <xTaskResumeAll+0x130>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d009      	beq.n	800b078 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b064:	2301      	movs	r3, #1
 800b066:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b068:	4b0f      	ldr	r3, [pc, #60]	; (800b0a8 <xTaskResumeAll+0x138>)
 800b06a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b06e:	601a      	str	r2, [r3, #0]
 800b070:	f3bf 8f4f 	dsb	sy
 800b074:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b078:	f001 f8fc 	bl	800c274 <vPortExitCritical>

	return xAlreadyYielded;
 800b07c:	68bb      	ldr	r3, [r7, #8]
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3710      	adds	r7, #16
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	20000f78 	.word	0x20000f78
 800b08c:	20000f50 	.word	0x20000f50
 800b090:	20000f10 	.word	0x20000f10
 800b094:	20000f58 	.word	0x20000f58
 800b098:	20000a80 	.word	0x20000a80
 800b09c:	20000a7c 	.word	0x20000a7c
 800b0a0:	20000f64 	.word	0x20000f64
 800b0a4:	20000f60 	.word	0x20000f60
 800b0a8:	e000ed04 	.word	0xe000ed04

0800b0ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b083      	sub	sp, #12
 800b0b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b0b2:	4b05      	ldr	r3, [pc, #20]	; (800b0c8 <xTaskGetTickCount+0x1c>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b0b8:	687b      	ldr	r3, [r7, #4]
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	370c      	adds	r7, #12
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c4:	4770      	bx	lr
 800b0c6:	bf00      	nop
 800b0c8:	20000f54 	.word	0x20000f54

0800b0cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b086      	sub	sp, #24
 800b0d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0d6:	4b4f      	ldr	r3, [pc, #316]	; (800b214 <xTaskIncrementTick+0x148>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	f040 808f 	bne.w	800b1fe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b0e0:	4b4d      	ldr	r3, [pc, #308]	; (800b218 <xTaskIncrementTick+0x14c>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b0e8:	4a4b      	ldr	r2, [pc, #300]	; (800b218 <xTaskIncrementTick+0x14c>)
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d120      	bne.n	800b136 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b0f4:	4b49      	ldr	r3, [pc, #292]	; (800b21c <xTaskIncrementTick+0x150>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d00a      	beq.n	800b114 <xTaskIncrementTick+0x48>
	__asm volatile
 800b0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b102:	f383 8811 	msr	BASEPRI, r3
 800b106:	f3bf 8f6f 	isb	sy
 800b10a:	f3bf 8f4f 	dsb	sy
 800b10e:	603b      	str	r3, [r7, #0]
}
 800b110:	bf00      	nop
 800b112:	e7fe      	b.n	800b112 <xTaskIncrementTick+0x46>
 800b114:	4b41      	ldr	r3, [pc, #260]	; (800b21c <xTaskIncrementTick+0x150>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	60fb      	str	r3, [r7, #12]
 800b11a:	4b41      	ldr	r3, [pc, #260]	; (800b220 <xTaskIncrementTick+0x154>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	4a3f      	ldr	r2, [pc, #252]	; (800b21c <xTaskIncrementTick+0x150>)
 800b120:	6013      	str	r3, [r2, #0]
 800b122:	4a3f      	ldr	r2, [pc, #252]	; (800b220 <xTaskIncrementTick+0x154>)
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	6013      	str	r3, [r2, #0]
 800b128:	4b3e      	ldr	r3, [pc, #248]	; (800b224 <xTaskIncrementTick+0x158>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	3301      	adds	r3, #1
 800b12e:	4a3d      	ldr	r2, [pc, #244]	; (800b224 <xTaskIncrementTick+0x158>)
 800b130:	6013      	str	r3, [r2, #0]
 800b132:	f000 faf7 	bl	800b724 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b136:	4b3c      	ldr	r3, [pc, #240]	; (800b228 <xTaskIncrementTick+0x15c>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	693a      	ldr	r2, [r7, #16]
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d349      	bcc.n	800b1d4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b140:	4b36      	ldr	r3, [pc, #216]	; (800b21c <xTaskIncrementTick+0x150>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d104      	bne.n	800b154 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b14a:	4b37      	ldr	r3, [pc, #220]	; (800b228 <xTaskIncrementTick+0x15c>)
 800b14c:	f04f 32ff 	mov.w	r2, #4294967295
 800b150:	601a      	str	r2, [r3, #0]
					break;
 800b152:	e03f      	b.n	800b1d4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b154:	4b31      	ldr	r3, [pc, #196]	; (800b21c <xTaskIncrementTick+0x150>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	68db      	ldr	r3, [r3, #12]
 800b15a:	68db      	ldr	r3, [r3, #12]
 800b15c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b164:	693a      	ldr	r2, [r7, #16]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	429a      	cmp	r2, r3
 800b16a:	d203      	bcs.n	800b174 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b16c:	4a2e      	ldr	r2, [pc, #184]	; (800b228 <xTaskIncrementTick+0x15c>)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b172:	e02f      	b.n	800b1d4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	3304      	adds	r3, #4
 800b178:	4618      	mov	r0, r3
 800b17a:	f7fe fedd 	bl	8009f38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b182:	2b00      	cmp	r3, #0
 800b184:	d004      	beq.n	800b190 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	3318      	adds	r3, #24
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7fe fed4 	bl	8009f38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b194:	4b25      	ldr	r3, [pc, #148]	; (800b22c <xTaskIncrementTick+0x160>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	429a      	cmp	r2, r3
 800b19a:	d903      	bls.n	800b1a4 <xTaskIncrementTick+0xd8>
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a0:	4a22      	ldr	r2, [pc, #136]	; (800b22c <xTaskIncrementTick+0x160>)
 800b1a2:	6013      	str	r3, [r2, #0]
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1a8:	4613      	mov	r3, r2
 800b1aa:	009b      	lsls	r3, r3, #2
 800b1ac:	4413      	add	r3, r2
 800b1ae:	009b      	lsls	r3, r3, #2
 800b1b0:	4a1f      	ldr	r2, [pc, #124]	; (800b230 <xTaskIncrementTick+0x164>)
 800b1b2:	441a      	add	r2, r3
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	3304      	adds	r3, #4
 800b1b8:	4619      	mov	r1, r3
 800b1ba:	4610      	mov	r0, r2
 800b1bc:	f7fe fe5f 	bl	8009e7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1c4:	4b1b      	ldr	r3, [pc, #108]	; (800b234 <xTaskIncrementTick+0x168>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d3b8      	bcc.n	800b140 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1d2:	e7b5      	b.n	800b140 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b1d4:	4b17      	ldr	r3, [pc, #92]	; (800b234 <xTaskIncrementTick+0x168>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1da:	4915      	ldr	r1, [pc, #84]	; (800b230 <xTaskIncrementTick+0x164>)
 800b1dc:	4613      	mov	r3, r2
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	4413      	add	r3, r2
 800b1e2:	009b      	lsls	r3, r3, #2
 800b1e4:	440b      	add	r3, r1
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d901      	bls.n	800b1f0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b1f0:	4b11      	ldr	r3, [pc, #68]	; (800b238 <xTaskIncrementTick+0x16c>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d007      	beq.n	800b208 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	617b      	str	r3, [r7, #20]
 800b1fc:	e004      	b.n	800b208 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b1fe:	4b0f      	ldr	r3, [pc, #60]	; (800b23c <xTaskIncrementTick+0x170>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	3301      	adds	r3, #1
 800b204:	4a0d      	ldr	r2, [pc, #52]	; (800b23c <xTaskIncrementTick+0x170>)
 800b206:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b208:	697b      	ldr	r3, [r7, #20]
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3718      	adds	r7, #24
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	20000f78 	.word	0x20000f78
 800b218:	20000f54 	.word	0x20000f54
 800b21c:	20000f08 	.word	0x20000f08
 800b220:	20000f0c 	.word	0x20000f0c
 800b224:	20000f68 	.word	0x20000f68
 800b228:	20000f70 	.word	0x20000f70
 800b22c:	20000f58 	.word	0x20000f58
 800b230:	20000a80 	.word	0x20000a80
 800b234:	20000a7c 	.word	0x20000a7c
 800b238:	20000f64 	.word	0x20000f64
 800b23c:	20000f60 	.word	0x20000f60

0800b240 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b086      	sub	sp, #24
 800b244:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b246:	4b3a      	ldr	r3, [pc, #232]	; (800b330 <vTaskSwitchContext+0xf0>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d003      	beq.n	800b256 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b24e:	4b39      	ldr	r3, [pc, #228]	; (800b334 <vTaskSwitchContext+0xf4>)
 800b250:	2201      	movs	r2, #1
 800b252:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b254:	e068      	b.n	800b328 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 800b256:	4b37      	ldr	r3, [pc, #220]	; (800b334 <vTaskSwitchContext+0xf4>)
 800b258:	2200      	movs	r2, #0
 800b25a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800b25c:	4b36      	ldr	r3, [pc, #216]	; (800b338 <vTaskSwitchContext+0xf8>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b262:	613b      	str	r3, [r7, #16]
 800b264:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800b268:	60fb      	str	r3, [r7, #12]
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	68fa      	ldr	r2, [r7, #12]
 800b270:	429a      	cmp	r2, r3
 800b272:	d111      	bne.n	800b298 <vTaskSwitchContext+0x58>
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	3304      	adds	r3, #4
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	68fa      	ldr	r2, [r7, #12]
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d10b      	bne.n	800b298 <vTaskSwitchContext+0x58>
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	3308      	adds	r3, #8
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	68fa      	ldr	r2, [r7, #12]
 800b288:	429a      	cmp	r2, r3
 800b28a:	d105      	bne.n	800b298 <vTaskSwitchContext+0x58>
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	330c      	adds	r3, #12
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	68fa      	ldr	r2, [r7, #12]
 800b294:	429a      	cmp	r2, r3
 800b296:	d008      	beq.n	800b2aa <vTaskSwitchContext+0x6a>
 800b298:	4b27      	ldr	r3, [pc, #156]	; (800b338 <vTaskSwitchContext+0xf8>)
 800b29a:	681a      	ldr	r2, [r3, #0]
 800b29c:	4b26      	ldr	r3, [pc, #152]	; (800b338 <vTaskSwitchContext+0xf8>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	3334      	adds	r3, #52	; 0x34
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	4610      	mov	r0, r2
 800b2a6:	f7f5 f928 	bl	80004fa <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2aa:	4b24      	ldr	r3, [pc, #144]	; (800b33c <vTaskSwitchContext+0xfc>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	617b      	str	r3, [r7, #20]
 800b2b0:	e010      	b.n	800b2d4 <vTaskSwitchContext+0x94>
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d10a      	bne.n	800b2ce <vTaskSwitchContext+0x8e>
	__asm volatile
 800b2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2bc:	f383 8811 	msr	BASEPRI, r3
 800b2c0:	f3bf 8f6f 	isb	sy
 800b2c4:	f3bf 8f4f 	dsb	sy
 800b2c8:	607b      	str	r3, [r7, #4]
}
 800b2ca:	bf00      	nop
 800b2cc:	e7fe      	b.n	800b2cc <vTaskSwitchContext+0x8c>
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	3b01      	subs	r3, #1
 800b2d2:	617b      	str	r3, [r7, #20]
 800b2d4:	491a      	ldr	r1, [pc, #104]	; (800b340 <vTaskSwitchContext+0x100>)
 800b2d6:	697a      	ldr	r2, [r7, #20]
 800b2d8:	4613      	mov	r3, r2
 800b2da:	009b      	lsls	r3, r3, #2
 800b2dc:	4413      	add	r3, r2
 800b2de:	009b      	lsls	r3, r3, #2
 800b2e0:	440b      	add	r3, r1
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d0e4      	beq.n	800b2b2 <vTaskSwitchContext+0x72>
 800b2e8:	697a      	ldr	r2, [r7, #20]
 800b2ea:	4613      	mov	r3, r2
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	4413      	add	r3, r2
 800b2f0:	009b      	lsls	r3, r3, #2
 800b2f2:	4a13      	ldr	r2, [pc, #76]	; (800b340 <vTaskSwitchContext+0x100>)
 800b2f4:	4413      	add	r3, r2
 800b2f6:	60bb      	str	r3, [r7, #8]
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	685a      	ldr	r2, [r3, #4]
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	605a      	str	r2, [r3, #4]
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	685a      	ldr	r2, [r3, #4]
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	3308      	adds	r3, #8
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d104      	bne.n	800b318 <vTaskSwitchContext+0xd8>
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	685a      	ldr	r2, [r3, #4]
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	605a      	str	r2, [r3, #4]
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	68db      	ldr	r3, [r3, #12]
 800b31e:	4a06      	ldr	r2, [pc, #24]	; (800b338 <vTaskSwitchContext+0xf8>)
 800b320:	6013      	str	r3, [r2, #0]
 800b322:	4a06      	ldr	r2, [pc, #24]	; (800b33c <vTaskSwitchContext+0xfc>)
 800b324:	697b      	ldr	r3, [r7, #20]
 800b326:	6013      	str	r3, [r2, #0]
}
 800b328:	bf00      	nop
 800b32a:	3718      	adds	r7, #24
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}
 800b330:	20000f78 	.word	0x20000f78
 800b334:	20000f64 	.word	0x20000f64
 800b338:	20000a7c 	.word	0x20000a7c
 800b33c:	20000f58 	.word	0x20000f58
 800b340:	20000a80 	.word	0x20000a80

0800b344 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b084      	sub	sp, #16
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d10a      	bne.n	800b36a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b358:	f383 8811 	msr	BASEPRI, r3
 800b35c:	f3bf 8f6f 	isb	sy
 800b360:	f3bf 8f4f 	dsb	sy
 800b364:	60fb      	str	r3, [r7, #12]
}
 800b366:	bf00      	nop
 800b368:	e7fe      	b.n	800b368 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b36a:	4b07      	ldr	r3, [pc, #28]	; (800b388 <vTaskPlaceOnEventList+0x44>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	3318      	adds	r3, #24
 800b370:	4619      	mov	r1, r3
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f7fe fda7 	bl	8009ec6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b378:	2101      	movs	r1, #1
 800b37a:	6838      	ldr	r0, [r7, #0]
 800b37c:	f000 fa7e 	bl	800b87c <prvAddCurrentTaskToDelayedList>
}
 800b380:	bf00      	nop
 800b382:	3710      	adds	r7, #16
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}
 800b388:	20000a7c 	.word	0x20000a7c

0800b38c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b086      	sub	sp, #24
 800b390:	af00      	add	r7, sp, #0
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	60b9      	str	r1, [r7, #8]
 800b396:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d10a      	bne.n	800b3b4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a2:	f383 8811 	msr	BASEPRI, r3
 800b3a6:	f3bf 8f6f 	isb	sy
 800b3aa:	f3bf 8f4f 	dsb	sy
 800b3ae:	617b      	str	r3, [r7, #20]
}
 800b3b0:	bf00      	nop
 800b3b2:	e7fe      	b.n	800b3b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b3b4:	4b0a      	ldr	r3, [pc, #40]	; (800b3e0 <vTaskPlaceOnEventListRestricted+0x54>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	3318      	adds	r3, #24
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	68f8      	ldr	r0, [r7, #12]
 800b3be:	f7fe fd5e 	bl	8009e7e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d002      	beq.n	800b3ce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b3c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b3cc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b3ce:	6879      	ldr	r1, [r7, #4]
 800b3d0:	68b8      	ldr	r0, [r7, #8]
 800b3d2:	f000 fa53 	bl	800b87c <prvAddCurrentTaskToDelayedList>
	}
 800b3d6:	bf00      	nop
 800b3d8:	3718      	adds	r7, #24
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	20000a7c 	.word	0x20000a7c

0800b3e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b086      	sub	sp, #24
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	68db      	ldr	r3, [r3, #12]
 800b3f0:	68db      	ldr	r3, [r3, #12]
 800b3f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d10a      	bne.n	800b410 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3fe:	f383 8811 	msr	BASEPRI, r3
 800b402:	f3bf 8f6f 	isb	sy
 800b406:	f3bf 8f4f 	dsb	sy
 800b40a:	60fb      	str	r3, [r7, #12]
}
 800b40c:	bf00      	nop
 800b40e:	e7fe      	b.n	800b40e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	3318      	adds	r3, #24
 800b414:	4618      	mov	r0, r3
 800b416:	f7fe fd8f 	bl	8009f38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b41a:	4b1e      	ldr	r3, [pc, #120]	; (800b494 <xTaskRemoveFromEventList+0xb0>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d11d      	bne.n	800b45e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	3304      	adds	r3, #4
 800b426:	4618      	mov	r0, r3
 800b428:	f7fe fd86 	bl	8009f38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b430:	4b19      	ldr	r3, [pc, #100]	; (800b498 <xTaskRemoveFromEventList+0xb4>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	429a      	cmp	r2, r3
 800b436:	d903      	bls.n	800b440 <xTaskRemoveFromEventList+0x5c>
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b43c:	4a16      	ldr	r2, [pc, #88]	; (800b498 <xTaskRemoveFromEventList+0xb4>)
 800b43e:	6013      	str	r3, [r2, #0]
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b444:	4613      	mov	r3, r2
 800b446:	009b      	lsls	r3, r3, #2
 800b448:	4413      	add	r3, r2
 800b44a:	009b      	lsls	r3, r3, #2
 800b44c:	4a13      	ldr	r2, [pc, #76]	; (800b49c <xTaskRemoveFromEventList+0xb8>)
 800b44e:	441a      	add	r2, r3
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	3304      	adds	r3, #4
 800b454:	4619      	mov	r1, r3
 800b456:	4610      	mov	r0, r2
 800b458:	f7fe fd11 	bl	8009e7e <vListInsertEnd>
 800b45c:	e005      	b.n	800b46a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	3318      	adds	r3, #24
 800b462:	4619      	mov	r1, r3
 800b464:	480e      	ldr	r0, [pc, #56]	; (800b4a0 <xTaskRemoveFromEventList+0xbc>)
 800b466:	f7fe fd0a 	bl	8009e7e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b46e:	4b0d      	ldr	r3, [pc, #52]	; (800b4a4 <xTaskRemoveFromEventList+0xc0>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b474:	429a      	cmp	r2, r3
 800b476:	d905      	bls.n	800b484 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b478:	2301      	movs	r3, #1
 800b47a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b47c:	4b0a      	ldr	r3, [pc, #40]	; (800b4a8 <xTaskRemoveFromEventList+0xc4>)
 800b47e:	2201      	movs	r2, #1
 800b480:	601a      	str	r2, [r3, #0]
 800b482:	e001      	b.n	800b488 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b484:	2300      	movs	r3, #0
 800b486:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b488:	697b      	ldr	r3, [r7, #20]
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3718      	adds	r7, #24
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
 800b492:	bf00      	nop
 800b494:	20000f78 	.word	0x20000f78
 800b498:	20000f58 	.word	0x20000f58
 800b49c:	20000a80 	.word	0x20000a80
 800b4a0:	20000f10 	.word	0x20000f10
 800b4a4:	20000a7c 	.word	0x20000a7c
 800b4a8:	20000f64 	.word	0x20000f64

0800b4ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b083      	sub	sp, #12
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b4b4:	4b06      	ldr	r3, [pc, #24]	; (800b4d0 <vTaskInternalSetTimeOutState+0x24>)
 800b4b6:	681a      	ldr	r2, [r3, #0]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b4bc:	4b05      	ldr	r3, [pc, #20]	; (800b4d4 <vTaskInternalSetTimeOutState+0x28>)
 800b4be:	681a      	ldr	r2, [r3, #0]
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	605a      	str	r2, [r3, #4]
}
 800b4c4:	bf00      	nop
 800b4c6:	370c      	adds	r7, #12
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr
 800b4d0:	20000f68 	.word	0x20000f68
 800b4d4:	20000f54 	.word	0x20000f54

0800b4d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b088      	sub	sp, #32
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d10a      	bne.n	800b4fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ec:	f383 8811 	msr	BASEPRI, r3
 800b4f0:	f3bf 8f6f 	isb	sy
 800b4f4:	f3bf 8f4f 	dsb	sy
 800b4f8:	613b      	str	r3, [r7, #16]
}
 800b4fa:	bf00      	nop
 800b4fc:	e7fe      	b.n	800b4fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d10a      	bne.n	800b51a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b508:	f383 8811 	msr	BASEPRI, r3
 800b50c:	f3bf 8f6f 	isb	sy
 800b510:	f3bf 8f4f 	dsb	sy
 800b514:	60fb      	str	r3, [r7, #12]
}
 800b516:	bf00      	nop
 800b518:	e7fe      	b.n	800b518 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b51a:	f000 fe7b 	bl	800c214 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b51e:	4b1d      	ldr	r3, [pc, #116]	; (800b594 <xTaskCheckForTimeOut+0xbc>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	69ba      	ldr	r2, [r7, #24]
 800b52a:	1ad3      	subs	r3, r2, r3
 800b52c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b536:	d102      	bne.n	800b53e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b538:	2300      	movs	r3, #0
 800b53a:	61fb      	str	r3, [r7, #28]
 800b53c:	e023      	b.n	800b586 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681a      	ldr	r2, [r3, #0]
 800b542:	4b15      	ldr	r3, [pc, #84]	; (800b598 <xTaskCheckForTimeOut+0xc0>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	429a      	cmp	r2, r3
 800b548:	d007      	beq.n	800b55a <xTaskCheckForTimeOut+0x82>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	69ba      	ldr	r2, [r7, #24]
 800b550:	429a      	cmp	r2, r3
 800b552:	d302      	bcc.n	800b55a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b554:	2301      	movs	r3, #1
 800b556:	61fb      	str	r3, [r7, #28]
 800b558:	e015      	b.n	800b586 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	697a      	ldr	r2, [r7, #20]
 800b560:	429a      	cmp	r2, r3
 800b562:	d20b      	bcs.n	800b57c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	681a      	ldr	r2, [r3, #0]
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	1ad2      	subs	r2, r2, r3
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f7ff ff9b 	bl	800b4ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b576:	2300      	movs	r3, #0
 800b578:	61fb      	str	r3, [r7, #28]
 800b57a:	e004      	b.n	800b586 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	2200      	movs	r2, #0
 800b580:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b582:	2301      	movs	r3, #1
 800b584:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b586:	f000 fe75 	bl	800c274 <vPortExitCritical>

	return xReturn;
 800b58a:	69fb      	ldr	r3, [r7, #28]
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3720      	adds	r7, #32
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}
 800b594:	20000f54 	.word	0x20000f54
 800b598:	20000f68 	.word	0x20000f68

0800b59c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b59c:	b480      	push	{r7}
 800b59e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b5a0:	4b03      	ldr	r3, [pc, #12]	; (800b5b0 <vTaskMissedYield+0x14>)
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	601a      	str	r2, [r3, #0]
}
 800b5a6:	bf00      	nop
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr
 800b5b0:	20000f64 	.word	0x20000f64

0800b5b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b082      	sub	sp, #8
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b5bc:	f000 f854 	bl	800b668 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b5c0:	4b07      	ldr	r3, [pc, #28]	; (800b5e0 <prvIdleTask+0x2c>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	2b01      	cmp	r3, #1
 800b5c6:	d907      	bls.n	800b5d8 <prvIdleTask+0x24>
			{
				taskYIELD();
 800b5c8:	4b06      	ldr	r3, [pc, #24]	; (800b5e4 <prvIdleTask+0x30>)
 800b5ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5ce:	601a      	str	r2, [r3, #0]
 800b5d0:	f3bf 8f4f 	dsb	sy
 800b5d4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800b5d8:	f7f4 ff88 	bl	80004ec <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800b5dc:	e7ee      	b.n	800b5bc <prvIdleTask+0x8>
 800b5de:	bf00      	nop
 800b5e0:	20000a80 	.word	0x20000a80
 800b5e4:	e000ed04 	.word	0xe000ed04

0800b5e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	607b      	str	r3, [r7, #4]
 800b5f2:	e00c      	b.n	800b60e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	4613      	mov	r3, r2
 800b5f8:	009b      	lsls	r3, r3, #2
 800b5fa:	4413      	add	r3, r2
 800b5fc:	009b      	lsls	r3, r3, #2
 800b5fe:	4a12      	ldr	r2, [pc, #72]	; (800b648 <prvInitialiseTaskLists+0x60>)
 800b600:	4413      	add	r3, r2
 800b602:	4618      	mov	r0, r3
 800b604:	f7fe fc0e 	bl	8009e24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	3301      	adds	r3, #1
 800b60c:	607b      	str	r3, [r7, #4]
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2b37      	cmp	r3, #55	; 0x37
 800b612:	d9ef      	bls.n	800b5f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b614:	480d      	ldr	r0, [pc, #52]	; (800b64c <prvInitialiseTaskLists+0x64>)
 800b616:	f7fe fc05 	bl	8009e24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b61a:	480d      	ldr	r0, [pc, #52]	; (800b650 <prvInitialiseTaskLists+0x68>)
 800b61c:	f7fe fc02 	bl	8009e24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b620:	480c      	ldr	r0, [pc, #48]	; (800b654 <prvInitialiseTaskLists+0x6c>)
 800b622:	f7fe fbff 	bl	8009e24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b626:	480c      	ldr	r0, [pc, #48]	; (800b658 <prvInitialiseTaskLists+0x70>)
 800b628:	f7fe fbfc 	bl	8009e24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b62c:	480b      	ldr	r0, [pc, #44]	; (800b65c <prvInitialiseTaskLists+0x74>)
 800b62e:	f7fe fbf9 	bl	8009e24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b632:	4b0b      	ldr	r3, [pc, #44]	; (800b660 <prvInitialiseTaskLists+0x78>)
 800b634:	4a05      	ldr	r2, [pc, #20]	; (800b64c <prvInitialiseTaskLists+0x64>)
 800b636:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b638:	4b0a      	ldr	r3, [pc, #40]	; (800b664 <prvInitialiseTaskLists+0x7c>)
 800b63a:	4a05      	ldr	r2, [pc, #20]	; (800b650 <prvInitialiseTaskLists+0x68>)
 800b63c:	601a      	str	r2, [r3, #0]
}
 800b63e:	bf00      	nop
 800b640:	3708      	adds	r7, #8
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
 800b646:	bf00      	nop
 800b648:	20000a80 	.word	0x20000a80
 800b64c:	20000ee0 	.word	0x20000ee0
 800b650:	20000ef4 	.word	0x20000ef4
 800b654:	20000f10 	.word	0x20000f10
 800b658:	20000f24 	.word	0x20000f24
 800b65c:	20000f3c 	.word	0x20000f3c
 800b660:	20000f08 	.word	0x20000f08
 800b664:	20000f0c 	.word	0x20000f0c

0800b668 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b082      	sub	sp, #8
 800b66c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b66e:	e019      	b.n	800b6a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b670:	f000 fdd0 	bl	800c214 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b674:	4b10      	ldr	r3, [pc, #64]	; (800b6b8 <prvCheckTasksWaitingTermination+0x50>)
 800b676:	68db      	ldr	r3, [r3, #12]
 800b678:	68db      	ldr	r3, [r3, #12]
 800b67a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	3304      	adds	r3, #4
 800b680:	4618      	mov	r0, r3
 800b682:	f7fe fc59 	bl	8009f38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b686:	4b0d      	ldr	r3, [pc, #52]	; (800b6bc <prvCheckTasksWaitingTermination+0x54>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	3b01      	subs	r3, #1
 800b68c:	4a0b      	ldr	r2, [pc, #44]	; (800b6bc <prvCheckTasksWaitingTermination+0x54>)
 800b68e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b690:	4b0b      	ldr	r3, [pc, #44]	; (800b6c0 <prvCheckTasksWaitingTermination+0x58>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	3b01      	subs	r3, #1
 800b696:	4a0a      	ldr	r2, [pc, #40]	; (800b6c0 <prvCheckTasksWaitingTermination+0x58>)
 800b698:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b69a:	f000 fdeb 	bl	800c274 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f000 f810 	bl	800b6c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b6a4:	4b06      	ldr	r3, [pc, #24]	; (800b6c0 <prvCheckTasksWaitingTermination+0x58>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d1e1      	bne.n	800b670 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b6ac:	bf00      	nop
 800b6ae:	bf00      	nop
 800b6b0:	3708      	adds	r7, #8
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	20000f24 	.word	0x20000f24
 800b6bc:	20000f50 	.word	0x20000f50
 800b6c0:	20000f38 	.word	0x20000f38

0800b6c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b084      	sub	sp, #16
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d108      	bne.n	800b6e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f000 ff8c 	bl	800c5f8 <vPortFree>
				vPortFree( pxTCB );
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f000 ff89 	bl	800c5f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b6e6:	e018      	b.n	800b71a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d103      	bne.n	800b6fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f000 ff80 	bl	800c5f8 <vPortFree>
	}
 800b6f8:	e00f      	b.n	800b71a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b700:	2b02      	cmp	r3, #2
 800b702:	d00a      	beq.n	800b71a <prvDeleteTCB+0x56>
	__asm volatile
 800b704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b708:	f383 8811 	msr	BASEPRI, r3
 800b70c:	f3bf 8f6f 	isb	sy
 800b710:	f3bf 8f4f 	dsb	sy
 800b714:	60fb      	str	r3, [r7, #12]
}
 800b716:	bf00      	nop
 800b718:	e7fe      	b.n	800b718 <prvDeleteTCB+0x54>
	}
 800b71a:	bf00      	nop
 800b71c:	3710      	adds	r7, #16
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
	...

0800b724 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b72a:	4b0c      	ldr	r3, [pc, #48]	; (800b75c <prvResetNextTaskUnblockTime+0x38>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d104      	bne.n	800b73e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b734:	4b0a      	ldr	r3, [pc, #40]	; (800b760 <prvResetNextTaskUnblockTime+0x3c>)
 800b736:	f04f 32ff 	mov.w	r2, #4294967295
 800b73a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b73c:	e008      	b.n	800b750 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b73e:	4b07      	ldr	r3, [pc, #28]	; (800b75c <prvResetNextTaskUnblockTime+0x38>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	68db      	ldr	r3, [r3, #12]
 800b744:	68db      	ldr	r3, [r3, #12]
 800b746:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	4a04      	ldr	r2, [pc, #16]	; (800b760 <prvResetNextTaskUnblockTime+0x3c>)
 800b74e:	6013      	str	r3, [r2, #0]
}
 800b750:	bf00      	nop
 800b752:	370c      	adds	r7, #12
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr
 800b75c:	20000f08 	.word	0x20000f08
 800b760:	20000f70 	.word	0x20000f70

0800b764 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b764:	b480      	push	{r7}
 800b766:	b083      	sub	sp, #12
 800b768:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b76a:	4b0b      	ldr	r3, [pc, #44]	; (800b798 <xTaskGetSchedulerState+0x34>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d102      	bne.n	800b778 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b772:	2301      	movs	r3, #1
 800b774:	607b      	str	r3, [r7, #4]
 800b776:	e008      	b.n	800b78a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b778:	4b08      	ldr	r3, [pc, #32]	; (800b79c <xTaskGetSchedulerState+0x38>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d102      	bne.n	800b786 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b780:	2302      	movs	r3, #2
 800b782:	607b      	str	r3, [r7, #4]
 800b784:	e001      	b.n	800b78a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b786:	2300      	movs	r3, #0
 800b788:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b78a:	687b      	ldr	r3, [r7, #4]
	}
 800b78c:	4618      	mov	r0, r3
 800b78e:	370c      	adds	r7, #12
 800b790:	46bd      	mov	sp, r7
 800b792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b796:	4770      	bx	lr
 800b798:	20000f5c 	.word	0x20000f5c
 800b79c:	20000f78 	.word	0x20000f78

0800b7a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b086      	sub	sp, #24
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d056      	beq.n	800b864 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b7b6:	4b2e      	ldr	r3, [pc, #184]	; (800b870 <xTaskPriorityDisinherit+0xd0>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	693a      	ldr	r2, [r7, #16]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d00a      	beq.n	800b7d6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c4:	f383 8811 	msr	BASEPRI, r3
 800b7c8:	f3bf 8f6f 	isb	sy
 800b7cc:	f3bf 8f4f 	dsb	sy
 800b7d0:	60fb      	str	r3, [r7, #12]
}
 800b7d2:	bf00      	nop
 800b7d4:	e7fe      	b.n	800b7d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d10a      	bne.n	800b7f4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e2:	f383 8811 	msr	BASEPRI, r3
 800b7e6:	f3bf 8f6f 	isb	sy
 800b7ea:	f3bf 8f4f 	dsb	sy
 800b7ee:	60bb      	str	r3, [r7, #8]
}
 800b7f0:	bf00      	nop
 800b7f2:	e7fe      	b.n	800b7f2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7f8:	1e5a      	subs	r2, r3, #1
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b806:	429a      	cmp	r2, r3
 800b808:	d02c      	beq.n	800b864 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d128      	bne.n	800b864 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	3304      	adds	r3, #4
 800b816:	4618      	mov	r0, r3
 800b818:	f7fe fb8e 	bl	8009f38 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b828:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b834:	4b0f      	ldr	r3, [pc, #60]	; (800b874 <xTaskPriorityDisinherit+0xd4>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	429a      	cmp	r2, r3
 800b83a:	d903      	bls.n	800b844 <xTaskPriorityDisinherit+0xa4>
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b840:	4a0c      	ldr	r2, [pc, #48]	; (800b874 <xTaskPriorityDisinherit+0xd4>)
 800b842:	6013      	str	r3, [r2, #0]
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b848:	4613      	mov	r3, r2
 800b84a:	009b      	lsls	r3, r3, #2
 800b84c:	4413      	add	r3, r2
 800b84e:	009b      	lsls	r3, r3, #2
 800b850:	4a09      	ldr	r2, [pc, #36]	; (800b878 <xTaskPriorityDisinherit+0xd8>)
 800b852:	441a      	add	r2, r3
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	3304      	adds	r3, #4
 800b858:	4619      	mov	r1, r3
 800b85a:	4610      	mov	r0, r2
 800b85c:	f7fe fb0f 	bl	8009e7e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b860:	2301      	movs	r3, #1
 800b862:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b864:	697b      	ldr	r3, [r7, #20]
	}
 800b866:	4618      	mov	r0, r3
 800b868:	3718      	adds	r7, #24
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	bf00      	nop
 800b870:	20000a7c 	.word	0x20000a7c
 800b874:	20000f58 	.word	0x20000f58
 800b878:	20000a80 	.word	0x20000a80

0800b87c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b886:	4b21      	ldr	r3, [pc, #132]	; (800b90c <prvAddCurrentTaskToDelayedList+0x90>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b88c:	4b20      	ldr	r3, [pc, #128]	; (800b910 <prvAddCurrentTaskToDelayedList+0x94>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	3304      	adds	r3, #4
 800b892:	4618      	mov	r0, r3
 800b894:	f7fe fb50 	bl	8009f38 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b89e:	d10a      	bne.n	800b8b6 <prvAddCurrentTaskToDelayedList+0x3a>
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d007      	beq.n	800b8b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8a6:	4b1a      	ldr	r3, [pc, #104]	; (800b910 <prvAddCurrentTaskToDelayedList+0x94>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	3304      	adds	r3, #4
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	4819      	ldr	r0, [pc, #100]	; (800b914 <prvAddCurrentTaskToDelayedList+0x98>)
 800b8b0:	f7fe fae5 	bl	8009e7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b8b4:	e026      	b.n	800b904 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b8b6:	68fa      	ldr	r2, [r7, #12]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	4413      	add	r3, r2
 800b8bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b8be:	4b14      	ldr	r3, [pc, #80]	; (800b910 <prvAddCurrentTaskToDelayedList+0x94>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	68ba      	ldr	r2, [r7, #8]
 800b8c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b8c6:	68ba      	ldr	r2, [r7, #8]
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d209      	bcs.n	800b8e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8ce:	4b12      	ldr	r3, [pc, #72]	; (800b918 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	4b0f      	ldr	r3, [pc, #60]	; (800b910 <prvAddCurrentTaskToDelayedList+0x94>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	3304      	adds	r3, #4
 800b8d8:	4619      	mov	r1, r3
 800b8da:	4610      	mov	r0, r2
 800b8dc:	f7fe faf3 	bl	8009ec6 <vListInsert>
}
 800b8e0:	e010      	b.n	800b904 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8e2:	4b0e      	ldr	r3, [pc, #56]	; (800b91c <prvAddCurrentTaskToDelayedList+0xa0>)
 800b8e4:	681a      	ldr	r2, [r3, #0]
 800b8e6:	4b0a      	ldr	r3, [pc, #40]	; (800b910 <prvAddCurrentTaskToDelayedList+0x94>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	3304      	adds	r3, #4
 800b8ec:	4619      	mov	r1, r3
 800b8ee:	4610      	mov	r0, r2
 800b8f0:	f7fe fae9 	bl	8009ec6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b8f4:	4b0a      	ldr	r3, [pc, #40]	; (800b920 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	68ba      	ldr	r2, [r7, #8]
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d202      	bcs.n	800b904 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b8fe:	4a08      	ldr	r2, [pc, #32]	; (800b920 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	6013      	str	r3, [r2, #0]
}
 800b904:	bf00      	nop
 800b906:	3710      	adds	r7, #16
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}
 800b90c:	20000f54 	.word	0x20000f54
 800b910:	20000a7c 	.word	0x20000a7c
 800b914:	20000f3c 	.word	0x20000f3c
 800b918:	20000f0c 	.word	0x20000f0c
 800b91c:	20000f08 	.word	0x20000f08
 800b920:	20000f70 	.word	0x20000f70

0800b924 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b08a      	sub	sp, #40	; 0x28
 800b928:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b92a:	2300      	movs	r3, #0
 800b92c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b92e:	f000 fb07 	bl	800bf40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b932:	4b1c      	ldr	r3, [pc, #112]	; (800b9a4 <xTimerCreateTimerTask+0x80>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d021      	beq.n	800b97e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b93a:	2300      	movs	r3, #0
 800b93c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b93e:	2300      	movs	r3, #0
 800b940:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b942:	1d3a      	adds	r2, r7, #4
 800b944:	f107 0108 	add.w	r1, r7, #8
 800b948:	f107 030c 	add.w	r3, r7, #12
 800b94c:	4618      	mov	r0, r3
 800b94e:	f7fe fa4f 	bl	8009df0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b952:	6879      	ldr	r1, [r7, #4]
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	68fa      	ldr	r2, [r7, #12]
 800b958:	9202      	str	r2, [sp, #8]
 800b95a:	9301      	str	r3, [sp, #4]
 800b95c:	2302      	movs	r3, #2
 800b95e:	9300      	str	r3, [sp, #0]
 800b960:	2300      	movs	r3, #0
 800b962:	460a      	mov	r2, r1
 800b964:	4910      	ldr	r1, [pc, #64]	; (800b9a8 <xTimerCreateTimerTask+0x84>)
 800b966:	4811      	ldr	r0, [pc, #68]	; (800b9ac <xTimerCreateTimerTask+0x88>)
 800b968:	f7ff f8b6 	bl	800aad8 <xTaskCreateStatic>
 800b96c:	4603      	mov	r3, r0
 800b96e:	4a10      	ldr	r2, [pc, #64]	; (800b9b0 <xTimerCreateTimerTask+0x8c>)
 800b970:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b972:	4b0f      	ldr	r3, [pc, #60]	; (800b9b0 <xTimerCreateTimerTask+0x8c>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d001      	beq.n	800b97e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b97a:	2301      	movs	r3, #1
 800b97c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d10a      	bne.n	800b99a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b988:	f383 8811 	msr	BASEPRI, r3
 800b98c:	f3bf 8f6f 	isb	sy
 800b990:	f3bf 8f4f 	dsb	sy
 800b994:	613b      	str	r3, [r7, #16]
}
 800b996:	bf00      	nop
 800b998:	e7fe      	b.n	800b998 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b99a:	697b      	ldr	r3, [r7, #20]
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3718      	adds	r7, #24
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}
 800b9a4:	20000fac 	.word	0x20000fac
 800b9a8:	0800d138 	.word	0x0800d138
 800b9ac:	0800bae9 	.word	0x0800bae9
 800b9b0:	20000fb0 	.word	0x20000fb0

0800b9b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b08a      	sub	sp, #40	; 0x28
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	60b9      	str	r1, [r7, #8]
 800b9be:	607a      	str	r2, [r7, #4]
 800b9c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d10a      	bne.n	800b9e2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d0:	f383 8811 	msr	BASEPRI, r3
 800b9d4:	f3bf 8f6f 	isb	sy
 800b9d8:	f3bf 8f4f 	dsb	sy
 800b9dc:	623b      	str	r3, [r7, #32]
}
 800b9de:	bf00      	nop
 800b9e0:	e7fe      	b.n	800b9e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b9e2:	4b1a      	ldr	r3, [pc, #104]	; (800ba4c <xTimerGenericCommand+0x98>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d02a      	beq.n	800ba40 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	2b05      	cmp	r3, #5
 800b9fa:	dc18      	bgt.n	800ba2e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b9fc:	f7ff feb2 	bl	800b764 <xTaskGetSchedulerState>
 800ba00:	4603      	mov	r3, r0
 800ba02:	2b02      	cmp	r3, #2
 800ba04:	d109      	bne.n	800ba1a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ba06:	4b11      	ldr	r3, [pc, #68]	; (800ba4c <xTimerGenericCommand+0x98>)
 800ba08:	6818      	ldr	r0, [r3, #0]
 800ba0a:	f107 0110 	add.w	r1, r7, #16
 800ba0e:	2300      	movs	r3, #0
 800ba10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba12:	f7fe fbf9 	bl	800a208 <xQueueGenericSend>
 800ba16:	6278      	str	r0, [r7, #36]	; 0x24
 800ba18:	e012      	b.n	800ba40 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ba1a:	4b0c      	ldr	r3, [pc, #48]	; (800ba4c <xTimerGenericCommand+0x98>)
 800ba1c:	6818      	ldr	r0, [r3, #0]
 800ba1e:	f107 0110 	add.w	r1, r7, #16
 800ba22:	2300      	movs	r3, #0
 800ba24:	2200      	movs	r2, #0
 800ba26:	f7fe fbef 	bl	800a208 <xQueueGenericSend>
 800ba2a:	6278      	str	r0, [r7, #36]	; 0x24
 800ba2c:	e008      	b.n	800ba40 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ba2e:	4b07      	ldr	r3, [pc, #28]	; (800ba4c <xTimerGenericCommand+0x98>)
 800ba30:	6818      	ldr	r0, [r3, #0]
 800ba32:	f107 0110 	add.w	r1, r7, #16
 800ba36:	2300      	movs	r3, #0
 800ba38:	683a      	ldr	r2, [r7, #0]
 800ba3a:	f7fe fce3 	bl	800a404 <xQueueGenericSendFromISR>
 800ba3e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ba40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3728      	adds	r7, #40	; 0x28
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	20000fac 	.word	0x20000fac

0800ba50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b088      	sub	sp, #32
 800ba54:	af02      	add	r7, sp, #8
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba5a:	4b22      	ldr	r3, [pc, #136]	; (800bae4 <prvProcessExpiredTimer+0x94>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	68db      	ldr	r3, [r3, #12]
 800ba60:	68db      	ldr	r3, [r3, #12]
 800ba62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	3304      	adds	r3, #4
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f7fe fa65 	bl	8009f38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba74:	f003 0304 	and.w	r3, r3, #4
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d022      	beq.n	800bac2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	699a      	ldr	r2, [r3, #24]
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	18d1      	adds	r1, r2, r3
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	683a      	ldr	r2, [r7, #0]
 800ba88:	6978      	ldr	r0, [r7, #20]
 800ba8a:	f000 f8d1 	bl	800bc30 <prvInsertTimerInActiveList>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d01f      	beq.n	800bad4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ba94:	2300      	movs	r3, #0
 800ba96:	9300      	str	r3, [sp, #0]
 800ba98:	2300      	movs	r3, #0
 800ba9a:	687a      	ldr	r2, [r7, #4]
 800ba9c:	2100      	movs	r1, #0
 800ba9e:	6978      	ldr	r0, [r7, #20]
 800baa0:	f7ff ff88 	bl	800b9b4 <xTimerGenericCommand>
 800baa4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d113      	bne.n	800bad4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800baac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab0:	f383 8811 	msr	BASEPRI, r3
 800bab4:	f3bf 8f6f 	isb	sy
 800bab8:	f3bf 8f4f 	dsb	sy
 800babc:	60fb      	str	r3, [r7, #12]
}
 800babe:	bf00      	nop
 800bac0:	e7fe      	b.n	800bac0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bac8:	f023 0301 	bic.w	r3, r3, #1
 800bacc:	b2da      	uxtb	r2, r3
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	6a1b      	ldr	r3, [r3, #32]
 800bad8:	6978      	ldr	r0, [r7, #20]
 800bada:	4798      	blx	r3
}
 800badc:	bf00      	nop
 800bade:	3718      	adds	r7, #24
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}
 800bae4:	20000fa4 	.word	0x20000fa4

0800bae8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800baf0:	f107 0308 	add.w	r3, r7, #8
 800baf4:	4618      	mov	r0, r3
 800baf6:	f000 f857 	bl	800bba8 <prvGetNextExpireTime>
 800bafa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	4619      	mov	r1, r3
 800bb00:	68f8      	ldr	r0, [r7, #12]
 800bb02:	f000 f803 	bl	800bb0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bb06:	f000 f8d5 	bl	800bcb4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bb0a:	e7f1      	b.n	800baf0 <prvTimerTask+0x8>

0800bb0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bb16:	f7ff fa1d 	bl	800af54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bb1a:	f107 0308 	add.w	r3, r7, #8
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f000 f866 	bl	800bbf0 <prvSampleTimeNow>
 800bb24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d130      	bne.n	800bb8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d10a      	bne.n	800bb48 <prvProcessTimerOrBlockTask+0x3c>
 800bb32:	687a      	ldr	r2, [r7, #4]
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d806      	bhi.n	800bb48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bb3a:	f7ff fa19 	bl	800af70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bb3e:	68f9      	ldr	r1, [r7, #12]
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f7ff ff85 	bl	800ba50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bb46:	e024      	b.n	800bb92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d008      	beq.n	800bb60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bb4e:	4b13      	ldr	r3, [pc, #76]	; (800bb9c <prvProcessTimerOrBlockTask+0x90>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d101      	bne.n	800bb5c <prvProcessTimerOrBlockTask+0x50>
 800bb58:	2301      	movs	r3, #1
 800bb5a:	e000      	b.n	800bb5e <prvProcessTimerOrBlockTask+0x52>
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bb60:	4b0f      	ldr	r3, [pc, #60]	; (800bba0 <prvProcessTimerOrBlockTask+0x94>)
 800bb62:	6818      	ldr	r0, [r3, #0]
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	1ad3      	subs	r3, r2, r3
 800bb6a:	683a      	ldr	r2, [r7, #0]
 800bb6c:	4619      	mov	r1, r3
 800bb6e:	f7fe ff7f 	bl	800aa70 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bb72:	f7ff f9fd 	bl	800af70 <xTaskResumeAll>
 800bb76:	4603      	mov	r3, r0
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d10a      	bne.n	800bb92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bb7c:	4b09      	ldr	r3, [pc, #36]	; (800bba4 <prvProcessTimerOrBlockTask+0x98>)
 800bb7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb82:	601a      	str	r2, [r3, #0]
 800bb84:	f3bf 8f4f 	dsb	sy
 800bb88:	f3bf 8f6f 	isb	sy
}
 800bb8c:	e001      	b.n	800bb92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bb8e:	f7ff f9ef 	bl	800af70 <xTaskResumeAll>
}
 800bb92:	bf00      	nop
 800bb94:	3710      	adds	r7, #16
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	20000fa8 	.word	0x20000fa8
 800bba0:	20000fac 	.word	0x20000fac
 800bba4:	e000ed04 	.word	0xe000ed04

0800bba8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b085      	sub	sp, #20
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bbb0:	4b0e      	ldr	r3, [pc, #56]	; (800bbec <prvGetNextExpireTime+0x44>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d101      	bne.n	800bbbe <prvGetNextExpireTime+0x16>
 800bbba:	2201      	movs	r2, #1
 800bbbc:	e000      	b.n	800bbc0 <prvGetNextExpireTime+0x18>
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d105      	bne.n	800bbd8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bbcc:	4b07      	ldr	r3, [pc, #28]	; (800bbec <prvGetNextExpireTime+0x44>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	68db      	ldr	r3, [r3, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	60fb      	str	r3, [r7, #12]
 800bbd6:	e001      	b.n	800bbdc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3714      	adds	r7, #20
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe8:	4770      	bx	lr
 800bbea:	bf00      	nop
 800bbec:	20000fa4 	.word	0x20000fa4

0800bbf0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b084      	sub	sp, #16
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bbf8:	f7ff fa58 	bl	800b0ac <xTaskGetTickCount>
 800bbfc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bbfe:	4b0b      	ldr	r3, [pc, #44]	; (800bc2c <prvSampleTimeNow+0x3c>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	68fa      	ldr	r2, [r7, #12]
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d205      	bcs.n	800bc14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bc08:	f000 f936 	bl	800be78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2201      	movs	r2, #1
 800bc10:	601a      	str	r2, [r3, #0]
 800bc12:	e002      	b.n	800bc1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2200      	movs	r2, #0
 800bc18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bc1a:	4a04      	ldr	r2, [pc, #16]	; (800bc2c <prvSampleTimeNow+0x3c>)
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bc20:	68fb      	ldr	r3, [r7, #12]
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	20000fb4 	.word	0x20000fb4

0800bc30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b086      	sub	sp, #24
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	60f8      	str	r0, [r7, #12]
 800bc38:	60b9      	str	r1, [r7, #8]
 800bc3a:	607a      	str	r2, [r7, #4]
 800bc3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	68ba      	ldr	r2, [r7, #8]
 800bc46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	68fa      	ldr	r2, [r7, #12]
 800bc4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bc4e:	68ba      	ldr	r2, [r7, #8]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d812      	bhi.n	800bc7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc56:	687a      	ldr	r2, [r7, #4]
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	1ad2      	subs	r2, r2, r3
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	699b      	ldr	r3, [r3, #24]
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d302      	bcc.n	800bc6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bc64:	2301      	movs	r3, #1
 800bc66:	617b      	str	r3, [r7, #20]
 800bc68:	e01b      	b.n	800bca2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bc6a:	4b10      	ldr	r3, [pc, #64]	; (800bcac <prvInsertTimerInActiveList+0x7c>)
 800bc6c:	681a      	ldr	r2, [r3, #0]
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	3304      	adds	r3, #4
 800bc72:	4619      	mov	r1, r3
 800bc74:	4610      	mov	r0, r2
 800bc76:	f7fe f926 	bl	8009ec6 <vListInsert>
 800bc7a:	e012      	b.n	800bca2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bc7c:	687a      	ldr	r2, [r7, #4]
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d206      	bcs.n	800bc92 <prvInsertTimerInActiveList+0x62>
 800bc84:	68ba      	ldr	r2, [r7, #8]
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	429a      	cmp	r2, r3
 800bc8a:	d302      	bcc.n	800bc92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	617b      	str	r3, [r7, #20]
 800bc90:	e007      	b.n	800bca2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bc92:	4b07      	ldr	r3, [pc, #28]	; (800bcb0 <prvInsertTimerInActiveList+0x80>)
 800bc94:	681a      	ldr	r2, [r3, #0]
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	3304      	adds	r3, #4
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	4610      	mov	r0, r2
 800bc9e:	f7fe f912 	bl	8009ec6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bca2:	697b      	ldr	r3, [r7, #20]
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3718      	adds	r7, #24
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	20000fa8 	.word	0x20000fa8
 800bcb0:	20000fa4 	.word	0x20000fa4

0800bcb4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b08e      	sub	sp, #56	; 0x38
 800bcb8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bcba:	e0ca      	b.n	800be52 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	da18      	bge.n	800bcf4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bcc2:	1d3b      	adds	r3, r7, #4
 800bcc4:	3304      	adds	r3, #4
 800bcc6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bcc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d10a      	bne.n	800bce4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bcce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd2:	f383 8811 	msr	BASEPRI, r3
 800bcd6:	f3bf 8f6f 	isb	sy
 800bcda:	f3bf 8f4f 	dsb	sy
 800bcde:	61fb      	str	r3, [r7, #28]
}
 800bce0:	bf00      	nop
 800bce2:	e7fe      	b.n	800bce2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcea:	6850      	ldr	r0, [r2, #4]
 800bcec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcee:	6892      	ldr	r2, [r2, #8]
 800bcf0:	4611      	mov	r1, r2
 800bcf2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	f2c0 80ab 	blt.w	800be52 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd02:	695b      	ldr	r3, [r3, #20]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d004      	beq.n	800bd12 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0a:	3304      	adds	r3, #4
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7fe f913 	bl	8009f38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bd12:	463b      	mov	r3, r7
 800bd14:	4618      	mov	r0, r3
 800bd16:	f7ff ff6b 	bl	800bbf0 <prvSampleTimeNow>
 800bd1a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2b09      	cmp	r3, #9
 800bd20:	f200 8096 	bhi.w	800be50 <prvProcessReceivedCommands+0x19c>
 800bd24:	a201      	add	r2, pc, #4	; (adr r2, 800bd2c <prvProcessReceivedCommands+0x78>)
 800bd26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd2a:	bf00      	nop
 800bd2c:	0800bd55 	.word	0x0800bd55
 800bd30:	0800bd55 	.word	0x0800bd55
 800bd34:	0800bd55 	.word	0x0800bd55
 800bd38:	0800bdc9 	.word	0x0800bdc9
 800bd3c:	0800bddd 	.word	0x0800bddd
 800bd40:	0800be27 	.word	0x0800be27
 800bd44:	0800bd55 	.word	0x0800bd55
 800bd48:	0800bd55 	.word	0x0800bd55
 800bd4c:	0800bdc9 	.word	0x0800bdc9
 800bd50:	0800bddd 	.word	0x0800bddd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd5a:	f043 0301 	orr.w	r3, r3, #1
 800bd5e:	b2da      	uxtb	r2, r3
 800bd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bd66:	68ba      	ldr	r2, [r7, #8]
 800bd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6a:	699b      	ldr	r3, [r3, #24]
 800bd6c:	18d1      	adds	r1, r2, r3
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd74:	f7ff ff5c 	bl	800bc30 <prvInsertTimerInActiveList>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d069      	beq.n	800be52 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd80:	6a1b      	ldr	r3, [r3, #32]
 800bd82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd84:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd8c:	f003 0304 	and.w	r3, r3, #4
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d05e      	beq.n	800be52 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bd94:	68ba      	ldr	r2, [r7, #8]
 800bd96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd98:	699b      	ldr	r3, [r3, #24]
 800bd9a:	441a      	add	r2, r3
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	9300      	str	r3, [sp, #0]
 800bda0:	2300      	movs	r3, #0
 800bda2:	2100      	movs	r1, #0
 800bda4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bda6:	f7ff fe05 	bl	800b9b4 <xTimerGenericCommand>
 800bdaa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bdac:	6a3b      	ldr	r3, [r7, #32]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d14f      	bne.n	800be52 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bdb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb6:	f383 8811 	msr	BASEPRI, r3
 800bdba:	f3bf 8f6f 	isb	sy
 800bdbe:	f3bf 8f4f 	dsb	sy
 800bdc2:	61bb      	str	r3, [r7, #24]
}
 800bdc4:	bf00      	nop
 800bdc6:	e7fe      	b.n	800bdc6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bdc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdce:	f023 0301 	bic.w	r3, r3, #1
 800bdd2:	b2da      	uxtb	r2, r3
 800bdd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bdda:	e03a      	b.n	800be52 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bde2:	f043 0301 	orr.w	r3, r3, #1
 800bde6:	b2da      	uxtb	r2, r3
 800bde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bdee:	68ba      	ldr	r2, [r7, #8]
 800bdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf6:	699b      	ldr	r3, [r3, #24]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d10a      	bne.n	800be12 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bdfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be00:	f383 8811 	msr	BASEPRI, r3
 800be04:	f3bf 8f6f 	isb	sy
 800be08:	f3bf 8f4f 	dsb	sy
 800be0c:	617b      	str	r3, [r7, #20]
}
 800be0e:	bf00      	nop
 800be10:	e7fe      	b.n	800be10 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800be12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be14:	699a      	ldr	r2, [r3, #24]
 800be16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be18:	18d1      	adds	r1, r2, r3
 800be1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be20:	f7ff ff06 	bl	800bc30 <prvInsertTimerInActiveList>
					break;
 800be24:	e015      	b.n	800be52 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800be26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be2c:	f003 0302 	and.w	r3, r3, #2
 800be30:	2b00      	cmp	r3, #0
 800be32:	d103      	bne.n	800be3c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800be34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be36:	f000 fbdf 	bl	800c5f8 <vPortFree>
 800be3a:	e00a      	b.n	800be52 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be42:	f023 0301 	bic.w	r3, r3, #1
 800be46:	b2da      	uxtb	r2, r3
 800be48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800be4e:	e000      	b.n	800be52 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800be50:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be52:	4b08      	ldr	r3, [pc, #32]	; (800be74 <prvProcessReceivedCommands+0x1c0>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	1d39      	adds	r1, r7, #4
 800be58:	2200      	movs	r2, #0
 800be5a:	4618      	mov	r0, r3
 800be5c:	f7fe fb6e 	bl	800a53c <xQueueReceive>
 800be60:	4603      	mov	r3, r0
 800be62:	2b00      	cmp	r3, #0
 800be64:	f47f af2a 	bne.w	800bcbc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800be68:	bf00      	nop
 800be6a:	bf00      	nop
 800be6c:	3730      	adds	r7, #48	; 0x30
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
 800be72:	bf00      	nop
 800be74:	20000fac 	.word	0x20000fac

0800be78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b088      	sub	sp, #32
 800be7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be7e:	e048      	b.n	800bf12 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be80:	4b2d      	ldr	r3, [pc, #180]	; (800bf38 <prvSwitchTimerLists+0xc0>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	68db      	ldr	r3, [r3, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be8a:	4b2b      	ldr	r3, [pc, #172]	; (800bf38 <prvSwitchTimerLists+0xc0>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	68db      	ldr	r3, [r3, #12]
 800be90:	68db      	ldr	r3, [r3, #12]
 800be92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	3304      	adds	r3, #4
 800be98:	4618      	mov	r0, r3
 800be9a:	f7fe f84d 	bl	8009f38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	6a1b      	ldr	r3, [r3, #32]
 800bea2:	68f8      	ldr	r0, [r7, #12]
 800bea4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800beac:	f003 0304 	and.w	r3, r3, #4
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d02e      	beq.n	800bf12 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	699b      	ldr	r3, [r3, #24]
 800beb8:	693a      	ldr	r2, [r7, #16]
 800beba:	4413      	add	r3, r2
 800bebc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bebe:	68ba      	ldr	r2, [r7, #8]
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d90e      	bls.n	800bee4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	68ba      	ldr	r2, [r7, #8]
 800beca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	68fa      	ldr	r2, [r7, #12]
 800bed0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bed2:	4b19      	ldr	r3, [pc, #100]	; (800bf38 <prvSwitchTimerLists+0xc0>)
 800bed4:	681a      	ldr	r2, [r3, #0]
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	3304      	adds	r3, #4
 800beda:	4619      	mov	r1, r3
 800bedc:	4610      	mov	r0, r2
 800bede:	f7fd fff2 	bl	8009ec6 <vListInsert>
 800bee2:	e016      	b.n	800bf12 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bee4:	2300      	movs	r3, #0
 800bee6:	9300      	str	r3, [sp, #0]
 800bee8:	2300      	movs	r3, #0
 800beea:	693a      	ldr	r2, [r7, #16]
 800beec:	2100      	movs	r1, #0
 800beee:	68f8      	ldr	r0, [r7, #12]
 800bef0:	f7ff fd60 	bl	800b9b4 <xTimerGenericCommand>
 800bef4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d10a      	bne.n	800bf12 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800befc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf00:	f383 8811 	msr	BASEPRI, r3
 800bf04:	f3bf 8f6f 	isb	sy
 800bf08:	f3bf 8f4f 	dsb	sy
 800bf0c:	603b      	str	r3, [r7, #0]
}
 800bf0e:	bf00      	nop
 800bf10:	e7fe      	b.n	800bf10 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf12:	4b09      	ldr	r3, [pc, #36]	; (800bf38 <prvSwitchTimerLists+0xc0>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d1b1      	bne.n	800be80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bf1c:	4b06      	ldr	r3, [pc, #24]	; (800bf38 <prvSwitchTimerLists+0xc0>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bf22:	4b06      	ldr	r3, [pc, #24]	; (800bf3c <prvSwitchTimerLists+0xc4>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4a04      	ldr	r2, [pc, #16]	; (800bf38 <prvSwitchTimerLists+0xc0>)
 800bf28:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bf2a:	4a04      	ldr	r2, [pc, #16]	; (800bf3c <prvSwitchTimerLists+0xc4>)
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	6013      	str	r3, [r2, #0]
}
 800bf30:	bf00      	nop
 800bf32:	3718      	adds	r7, #24
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}
 800bf38:	20000fa4 	.word	0x20000fa4
 800bf3c:	20000fa8 	.word	0x20000fa8

0800bf40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b082      	sub	sp, #8
 800bf44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bf46:	f000 f965 	bl	800c214 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bf4a:	4b15      	ldr	r3, [pc, #84]	; (800bfa0 <prvCheckForValidListAndQueue+0x60>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d120      	bne.n	800bf94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bf52:	4814      	ldr	r0, [pc, #80]	; (800bfa4 <prvCheckForValidListAndQueue+0x64>)
 800bf54:	f7fd ff66 	bl	8009e24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bf58:	4813      	ldr	r0, [pc, #76]	; (800bfa8 <prvCheckForValidListAndQueue+0x68>)
 800bf5a:	f7fd ff63 	bl	8009e24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bf5e:	4b13      	ldr	r3, [pc, #76]	; (800bfac <prvCheckForValidListAndQueue+0x6c>)
 800bf60:	4a10      	ldr	r2, [pc, #64]	; (800bfa4 <prvCheckForValidListAndQueue+0x64>)
 800bf62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bf64:	4b12      	ldr	r3, [pc, #72]	; (800bfb0 <prvCheckForValidListAndQueue+0x70>)
 800bf66:	4a10      	ldr	r2, [pc, #64]	; (800bfa8 <prvCheckForValidListAndQueue+0x68>)
 800bf68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	9300      	str	r3, [sp, #0]
 800bf6e:	4b11      	ldr	r3, [pc, #68]	; (800bfb4 <prvCheckForValidListAndQueue+0x74>)
 800bf70:	4a11      	ldr	r2, [pc, #68]	; (800bfb8 <prvCheckForValidListAndQueue+0x78>)
 800bf72:	2110      	movs	r1, #16
 800bf74:	200a      	movs	r0, #10
 800bf76:	f7fe f871 	bl	800a05c <xQueueGenericCreateStatic>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	4a08      	ldr	r2, [pc, #32]	; (800bfa0 <prvCheckForValidListAndQueue+0x60>)
 800bf7e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bf80:	4b07      	ldr	r3, [pc, #28]	; (800bfa0 <prvCheckForValidListAndQueue+0x60>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d005      	beq.n	800bf94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bf88:	4b05      	ldr	r3, [pc, #20]	; (800bfa0 <prvCheckForValidListAndQueue+0x60>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	490b      	ldr	r1, [pc, #44]	; (800bfbc <prvCheckForValidListAndQueue+0x7c>)
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f7fe fd44 	bl	800aa1c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bf94:	f000 f96e 	bl	800c274 <vPortExitCritical>
}
 800bf98:	bf00      	nop
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
 800bf9e:	bf00      	nop
 800bfa0:	20000fac 	.word	0x20000fac
 800bfa4:	20000f7c 	.word	0x20000f7c
 800bfa8:	20000f90 	.word	0x20000f90
 800bfac:	20000fa4 	.word	0x20000fa4
 800bfb0:	20000fa8 	.word	0x20000fa8
 800bfb4:	20001058 	.word	0x20001058
 800bfb8:	20000fb8 	.word	0x20000fb8
 800bfbc:	0800d140 	.word	0x0800d140

0800bfc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b085      	sub	sp, #20
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	60f8      	str	r0, [r7, #12]
 800bfc8:	60b9      	str	r1, [r7, #8]
 800bfca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	3b04      	subs	r3, #4
 800bfd0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bfd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	3b04      	subs	r3, #4
 800bfde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	f023 0201 	bic.w	r2, r3, #1
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	3b04      	subs	r3, #4
 800bfee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bff0:	4a0c      	ldr	r2, [pc, #48]	; (800c024 <pxPortInitialiseStack+0x64>)
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	3b14      	subs	r3, #20
 800bffa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	3b04      	subs	r3, #4
 800c006:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	f06f 0202 	mvn.w	r2, #2
 800c00e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	3b20      	subs	r3, #32
 800c014:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c016:	68fb      	ldr	r3, [r7, #12]
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3714      	adds	r7, #20
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr
 800c024:	0800c029 	.word	0x0800c029

0800c028 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c028:	b480      	push	{r7}
 800c02a:	b085      	sub	sp, #20
 800c02c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c02e:	2300      	movs	r3, #0
 800c030:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c032:	4b12      	ldr	r3, [pc, #72]	; (800c07c <prvTaskExitError+0x54>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c03a:	d00a      	beq.n	800c052 <prvTaskExitError+0x2a>
	__asm volatile
 800c03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c040:	f383 8811 	msr	BASEPRI, r3
 800c044:	f3bf 8f6f 	isb	sy
 800c048:	f3bf 8f4f 	dsb	sy
 800c04c:	60fb      	str	r3, [r7, #12]
}
 800c04e:	bf00      	nop
 800c050:	e7fe      	b.n	800c050 <prvTaskExitError+0x28>
	__asm volatile
 800c052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c056:	f383 8811 	msr	BASEPRI, r3
 800c05a:	f3bf 8f6f 	isb	sy
 800c05e:	f3bf 8f4f 	dsb	sy
 800c062:	60bb      	str	r3, [r7, #8]
}
 800c064:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c066:	bf00      	nop
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d0fc      	beq.n	800c068 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c06e:	bf00      	nop
 800c070:	bf00      	nop
 800c072:	3714      	adds	r7, #20
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	4770      	bx	lr
 800c07c:	2000002c 	.word	0x2000002c

0800c080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c080:	4b07      	ldr	r3, [pc, #28]	; (800c0a0 <pxCurrentTCBConst2>)
 800c082:	6819      	ldr	r1, [r3, #0]
 800c084:	6808      	ldr	r0, [r1, #0]
 800c086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c08a:	f380 8809 	msr	PSP, r0
 800c08e:	f3bf 8f6f 	isb	sy
 800c092:	f04f 0000 	mov.w	r0, #0
 800c096:	f380 8811 	msr	BASEPRI, r0
 800c09a:	4770      	bx	lr
 800c09c:	f3af 8000 	nop.w

0800c0a0 <pxCurrentTCBConst2>:
 800c0a0:	20000a7c 	.word	0x20000a7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c0a4:	bf00      	nop
 800c0a6:	bf00      	nop

0800c0a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c0a8:	4808      	ldr	r0, [pc, #32]	; (800c0cc <prvPortStartFirstTask+0x24>)
 800c0aa:	6800      	ldr	r0, [r0, #0]
 800c0ac:	6800      	ldr	r0, [r0, #0]
 800c0ae:	f380 8808 	msr	MSP, r0
 800c0b2:	f04f 0000 	mov.w	r0, #0
 800c0b6:	f380 8814 	msr	CONTROL, r0
 800c0ba:	b662      	cpsie	i
 800c0bc:	b661      	cpsie	f
 800c0be:	f3bf 8f4f 	dsb	sy
 800c0c2:	f3bf 8f6f 	isb	sy
 800c0c6:	df00      	svc	0
 800c0c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c0ca:	bf00      	nop
 800c0cc:	e000ed08 	.word	0xe000ed08

0800c0d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b086      	sub	sp, #24
 800c0d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c0d6:	4b46      	ldr	r3, [pc, #280]	; (800c1f0 <xPortStartScheduler+0x120>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	4a46      	ldr	r2, [pc, #280]	; (800c1f4 <xPortStartScheduler+0x124>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d10a      	bne.n	800c0f6 <xPortStartScheduler+0x26>
	__asm volatile
 800c0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e4:	f383 8811 	msr	BASEPRI, r3
 800c0e8:	f3bf 8f6f 	isb	sy
 800c0ec:	f3bf 8f4f 	dsb	sy
 800c0f0:	613b      	str	r3, [r7, #16]
}
 800c0f2:	bf00      	nop
 800c0f4:	e7fe      	b.n	800c0f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c0f6:	4b3e      	ldr	r3, [pc, #248]	; (800c1f0 <xPortStartScheduler+0x120>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	4a3f      	ldr	r2, [pc, #252]	; (800c1f8 <xPortStartScheduler+0x128>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d10a      	bne.n	800c116 <xPortStartScheduler+0x46>
	__asm volatile
 800c100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c104:	f383 8811 	msr	BASEPRI, r3
 800c108:	f3bf 8f6f 	isb	sy
 800c10c:	f3bf 8f4f 	dsb	sy
 800c110:	60fb      	str	r3, [r7, #12]
}
 800c112:	bf00      	nop
 800c114:	e7fe      	b.n	800c114 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c116:	4b39      	ldr	r3, [pc, #228]	; (800c1fc <xPortStartScheduler+0x12c>)
 800c118:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	b2db      	uxtb	r3, r3
 800c120:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	22ff      	movs	r2, #255	; 0xff
 800c126:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	b2db      	uxtb	r3, r3
 800c12e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c130:	78fb      	ldrb	r3, [r7, #3]
 800c132:	b2db      	uxtb	r3, r3
 800c134:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c138:	b2da      	uxtb	r2, r3
 800c13a:	4b31      	ldr	r3, [pc, #196]	; (800c200 <xPortStartScheduler+0x130>)
 800c13c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c13e:	4b31      	ldr	r3, [pc, #196]	; (800c204 <xPortStartScheduler+0x134>)
 800c140:	2207      	movs	r2, #7
 800c142:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c144:	e009      	b.n	800c15a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c146:	4b2f      	ldr	r3, [pc, #188]	; (800c204 <xPortStartScheduler+0x134>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	3b01      	subs	r3, #1
 800c14c:	4a2d      	ldr	r2, [pc, #180]	; (800c204 <xPortStartScheduler+0x134>)
 800c14e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c150:	78fb      	ldrb	r3, [r7, #3]
 800c152:	b2db      	uxtb	r3, r3
 800c154:	005b      	lsls	r3, r3, #1
 800c156:	b2db      	uxtb	r3, r3
 800c158:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c15a:	78fb      	ldrb	r3, [r7, #3]
 800c15c:	b2db      	uxtb	r3, r3
 800c15e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c162:	2b80      	cmp	r3, #128	; 0x80
 800c164:	d0ef      	beq.n	800c146 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c166:	4b27      	ldr	r3, [pc, #156]	; (800c204 <xPortStartScheduler+0x134>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f1c3 0307 	rsb	r3, r3, #7
 800c16e:	2b04      	cmp	r3, #4
 800c170:	d00a      	beq.n	800c188 <xPortStartScheduler+0xb8>
	__asm volatile
 800c172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c176:	f383 8811 	msr	BASEPRI, r3
 800c17a:	f3bf 8f6f 	isb	sy
 800c17e:	f3bf 8f4f 	dsb	sy
 800c182:	60bb      	str	r3, [r7, #8]
}
 800c184:	bf00      	nop
 800c186:	e7fe      	b.n	800c186 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c188:	4b1e      	ldr	r3, [pc, #120]	; (800c204 <xPortStartScheduler+0x134>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	021b      	lsls	r3, r3, #8
 800c18e:	4a1d      	ldr	r2, [pc, #116]	; (800c204 <xPortStartScheduler+0x134>)
 800c190:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c192:	4b1c      	ldr	r3, [pc, #112]	; (800c204 <xPortStartScheduler+0x134>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c19a:	4a1a      	ldr	r2, [pc, #104]	; (800c204 <xPortStartScheduler+0x134>)
 800c19c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	b2da      	uxtb	r2, r3
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c1a6:	4b18      	ldr	r3, [pc, #96]	; (800c208 <xPortStartScheduler+0x138>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	4a17      	ldr	r2, [pc, #92]	; (800c208 <xPortStartScheduler+0x138>)
 800c1ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c1b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c1b2:	4b15      	ldr	r3, [pc, #84]	; (800c208 <xPortStartScheduler+0x138>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	4a14      	ldr	r2, [pc, #80]	; (800c208 <xPortStartScheduler+0x138>)
 800c1b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c1bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c1be:	f000 f8dd 	bl	800c37c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c1c2:	4b12      	ldr	r3, [pc, #72]	; (800c20c <xPortStartScheduler+0x13c>)
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c1c8:	f000 f8fc 	bl	800c3c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c1cc:	4b10      	ldr	r3, [pc, #64]	; (800c210 <xPortStartScheduler+0x140>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	4a0f      	ldr	r2, [pc, #60]	; (800c210 <xPortStartScheduler+0x140>)
 800c1d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c1d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c1d8:	f7ff ff66 	bl	800c0a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c1dc:	f7ff f830 	bl	800b240 <vTaskSwitchContext>
	prvTaskExitError();
 800c1e0:	f7ff ff22 	bl	800c028 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c1e4:	2300      	movs	r3, #0
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3718      	adds	r7, #24
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
 800c1ee:	bf00      	nop
 800c1f0:	e000ed00 	.word	0xe000ed00
 800c1f4:	410fc271 	.word	0x410fc271
 800c1f8:	410fc270 	.word	0x410fc270
 800c1fc:	e000e400 	.word	0xe000e400
 800c200:	200010a8 	.word	0x200010a8
 800c204:	200010ac 	.word	0x200010ac
 800c208:	e000ed20 	.word	0xe000ed20
 800c20c:	2000002c 	.word	0x2000002c
 800c210:	e000ef34 	.word	0xe000ef34

0800c214 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c214:	b480      	push	{r7}
 800c216:	b083      	sub	sp, #12
 800c218:	af00      	add	r7, sp, #0
	__asm volatile
 800c21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c21e:	f383 8811 	msr	BASEPRI, r3
 800c222:	f3bf 8f6f 	isb	sy
 800c226:	f3bf 8f4f 	dsb	sy
 800c22a:	607b      	str	r3, [r7, #4]
}
 800c22c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c22e:	4b0f      	ldr	r3, [pc, #60]	; (800c26c <vPortEnterCritical+0x58>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	3301      	adds	r3, #1
 800c234:	4a0d      	ldr	r2, [pc, #52]	; (800c26c <vPortEnterCritical+0x58>)
 800c236:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c238:	4b0c      	ldr	r3, [pc, #48]	; (800c26c <vPortEnterCritical+0x58>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	2b01      	cmp	r3, #1
 800c23e:	d10f      	bne.n	800c260 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c240:	4b0b      	ldr	r3, [pc, #44]	; (800c270 <vPortEnterCritical+0x5c>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	b2db      	uxtb	r3, r3
 800c246:	2b00      	cmp	r3, #0
 800c248:	d00a      	beq.n	800c260 <vPortEnterCritical+0x4c>
	__asm volatile
 800c24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c24e:	f383 8811 	msr	BASEPRI, r3
 800c252:	f3bf 8f6f 	isb	sy
 800c256:	f3bf 8f4f 	dsb	sy
 800c25a:	603b      	str	r3, [r7, #0]
}
 800c25c:	bf00      	nop
 800c25e:	e7fe      	b.n	800c25e <vPortEnterCritical+0x4a>
	}
}
 800c260:	bf00      	nop
 800c262:	370c      	adds	r7, #12
 800c264:	46bd      	mov	sp, r7
 800c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26a:	4770      	bx	lr
 800c26c:	2000002c 	.word	0x2000002c
 800c270:	e000ed04 	.word	0xe000ed04

0800c274 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c274:	b480      	push	{r7}
 800c276:	b083      	sub	sp, #12
 800c278:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c27a:	4b12      	ldr	r3, [pc, #72]	; (800c2c4 <vPortExitCritical+0x50>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d10a      	bne.n	800c298 <vPortExitCritical+0x24>
	__asm volatile
 800c282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c286:	f383 8811 	msr	BASEPRI, r3
 800c28a:	f3bf 8f6f 	isb	sy
 800c28e:	f3bf 8f4f 	dsb	sy
 800c292:	607b      	str	r3, [r7, #4]
}
 800c294:	bf00      	nop
 800c296:	e7fe      	b.n	800c296 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c298:	4b0a      	ldr	r3, [pc, #40]	; (800c2c4 <vPortExitCritical+0x50>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	3b01      	subs	r3, #1
 800c29e:	4a09      	ldr	r2, [pc, #36]	; (800c2c4 <vPortExitCritical+0x50>)
 800c2a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c2a2:	4b08      	ldr	r3, [pc, #32]	; (800c2c4 <vPortExitCritical+0x50>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d105      	bne.n	800c2b6 <vPortExitCritical+0x42>
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	f383 8811 	msr	BASEPRI, r3
}
 800c2b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c2b6:	bf00      	nop
 800c2b8:	370c      	adds	r7, #12
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c0:	4770      	bx	lr
 800c2c2:	bf00      	nop
 800c2c4:	2000002c 	.word	0x2000002c
	...

0800c2d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c2d0:	f3ef 8009 	mrs	r0, PSP
 800c2d4:	f3bf 8f6f 	isb	sy
 800c2d8:	4b15      	ldr	r3, [pc, #84]	; (800c330 <pxCurrentTCBConst>)
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	f01e 0f10 	tst.w	lr, #16
 800c2e0:	bf08      	it	eq
 800c2e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c2e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ea:	6010      	str	r0, [r2, #0]
 800c2ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c2f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c2f4:	f380 8811 	msr	BASEPRI, r0
 800c2f8:	f3bf 8f4f 	dsb	sy
 800c2fc:	f3bf 8f6f 	isb	sy
 800c300:	f7fe ff9e 	bl	800b240 <vTaskSwitchContext>
 800c304:	f04f 0000 	mov.w	r0, #0
 800c308:	f380 8811 	msr	BASEPRI, r0
 800c30c:	bc09      	pop	{r0, r3}
 800c30e:	6819      	ldr	r1, [r3, #0]
 800c310:	6808      	ldr	r0, [r1, #0]
 800c312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c316:	f01e 0f10 	tst.w	lr, #16
 800c31a:	bf08      	it	eq
 800c31c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c320:	f380 8809 	msr	PSP, r0
 800c324:	f3bf 8f6f 	isb	sy
 800c328:	4770      	bx	lr
 800c32a:	bf00      	nop
 800c32c:	f3af 8000 	nop.w

0800c330 <pxCurrentTCBConst>:
 800c330:	20000a7c 	.word	0x20000a7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c334:	bf00      	nop
 800c336:	bf00      	nop

0800c338 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b082      	sub	sp, #8
 800c33c:	af00      	add	r7, sp, #0
	__asm volatile
 800c33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c342:	f383 8811 	msr	BASEPRI, r3
 800c346:	f3bf 8f6f 	isb	sy
 800c34a:	f3bf 8f4f 	dsb	sy
 800c34e:	607b      	str	r3, [r7, #4]
}
 800c350:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c352:	f7fe febb 	bl	800b0cc <xTaskIncrementTick>
 800c356:	4603      	mov	r3, r0
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d003      	beq.n	800c364 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c35c:	4b06      	ldr	r3, [pc, #24]	; (800c378 <xPortSysTickHandler+0x40>)
 800c35e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c362:	601a      	str	r2, [r3, #0]
 800c364:	2300      	movs	r3, #0
 800c366:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	f383 8811 	msr	BASEPRI, r3
}
 800c36e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c370:	bf00      	nop
 800c372:	3708      	adds	r7, #8
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}
 800c378:	e000ed04 	.word	0xe000ed04

0800c37c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c37c:	b480      	push	{r7}
 800c37e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c380:	4b0b      	ldr	r3, [pc, #44]	; (800c3b0 <vPortSetupTimerInterrupt+0x34>)
 800c382:	2200      	movs	r2, #0
 800c384:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c386:	4b0b      	ldr	r3, [pc, #44]	; (800c3b4 <vPortSetupTimerInterrupt+0x38>)
 800c388:	2200      	movs	r2, #0
 800c38a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c38c:	4b0a      	ldr	r3, [pc, #40]	; (800c3b8 <vPortSetupTimerInterrupt+0x3c>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4a0a      	ldr	r2, [pc, #40]	; (800c3bc <vPortSetupTimerInterrupt+0x40>)
 800c392:	fba2 2303 	umull	r2, r3, r2, r3
 800c396:	099b      	lsrs	r3, r3, #6
 800c398:	4a09      	ldr	r2, [pc, #36]	; (800c3c0 <vPortSetupTimerInterrupt+0x44>)
 800c39a:	3b01      	subs	r3, #1
 800c39c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c39e:	4b04      	ldr	r3, [pc, #16]	; (800c3b0 <vPortSetupTimerInterrupt+0x34>)
 800c3a0:	2207      	movs	r2, #7
 800c3a2:	601a      	str	r2, [r3, #0]
}
 800c3a4:	bf00      	nop
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ac:	4770      	bx	lr
 800c3ae:	bf00      	nop
 800c3b0:	e000e010 	.word	0xe000e010
 800c3b4:	e000e018 	.word	0xe000e018
 800c3b8:	20000000 	.word	0x20000000
 800c3bc:	10624dd3 	.word	0x10624dd3
 800c3c0:	e000e014 	.word	0xe000e014

0800c3c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c3c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c3d4 <vPortEnableVFP+0x10>
 800c3c8:	6801      	ldr	r1, [r0, #0]
 800c3ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c3ce:	6001      	str	r1, [r0, #0]
 800c3d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c3d2:	bf00      	nop
 800c3d4:	e000ed88 	.word	0xe000ed88

0800c3d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c3d8:	b480      	push	{r7}
 800c3da:	b085      	sub	sp, #20
 800c3dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c3de:	f3ef 8305 	mrs	r3, IPSR
 800c3e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	2b0f      	cmp	r3, #15
 800c3e8:	d914      	bls.n	800c414 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c3ea:	4a17      	ldr	r2, [pc, #92]	; (800c448 <vPortValidateInterruptPriority+0x70>)
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	4413      	add	r3, r2
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c3f4:	4b15      	ldr	r3, [pc, #84]	; (800c44c <vPortValidateInterruptPriority+0x74>)
 800c3f6:	781b      	ldrb	r3, [r3, #0]
 800c3f8:	7afa      	ldrb	r2, [r7, #11]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d20a      	bcs.n	800c414 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c402:	f383 8811 	msr	BASEPRI, r3
 800c406:	f3bf 8f6f 	isb	sy
 800c40a:	f3bf 8f4f 	dsb	sy
 800c40e:	607b      	str	r3, [r7, #4]
}
 800c410:	bf00      	nop
 800c412:	e7fe      	b.n	800c412 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c414:	4b0e      	ldr	r3, [pc, #56]	; (800c450 <vPortValidateInterruptPriority+0x78>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c41c:	4b0d      	ldr	r3, [pc, #52]	; (800c454 <vPortValidateInterruptPriority+0x7c>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	429a      	cmp	r2, r3
 800c422:	d90a      	bls.n	800c43a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c428:	f383 8811 	msr	BASEPRI, r3
 800c42c:	f3bf 8f6f 	isb	sy
 800c430:	f3bf 8f4f 	dsb	sy
 800c434:	603b      	str	r3, [r7, #0]
}
 800c436:	bf00      	nop
 800c438:	e7fe      	b.n	800c438 <vPortValidateInterruptPriority+0x60>
	}
 800c43a:	bf00      	nop
 800c43c:	3714      	adds	r7, #20
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr
 800c446:	bf00      	nop
 800c448:	e000e3f0 	.word	0xe000e3f0
 800c44c:	200010a8 	.word	0x200010a8
 800c450:	e000ed0c 	.word	0xe000ed0c
 800c454:	200010ac 	.word	0x200010ac

0800c458 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b08a      	sub	sp, #40	; 0x28
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c460:	2300      	movs	r3, #0
 800c462:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c464:	f7fe fd76 	bl	800af54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c468:	4b5d      	ldr	r3, [pc, #372]	; (800c5e0 <pvPortMalloc+0x188>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d101      	bne.n	800c474 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c470:	f000 f924 	bl	800c6bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c474:	4b5b      	ldr	r3, [pc, #364]	; (800c5e4 <pvPortMalloc+0x18c>)
 800c476:	681a      	ldr	r2, [r3, #0]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	4013      	ands	r3, r2
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	f040 8093 	bne.w	800c5a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d01d      	beq.n	800c4c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c488:	2208      	movs	r2, #8
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	4413      	add	r3, r2
 800c48e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f003 0307 	and.w	r3, r3, #7
 800c496:	2b00      	cmp	r3, #0
 800c498:	d014      	beq.n	800c4c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f023 0307 	bic.w	r3, r3, #7
 800c4a0:	3308      	adds	r3, #8
 800c4a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f003 0307 	and.w	r3, r3, #7
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d00a      	beq.n	800c4c4 <pvPortMalloc+0x6c>
	__asm volatile
 800c4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b2:	f383 8811 	msr	BASEPRI, r3
 800c4b6:	f3bf 8f6f 	isb	sy
 800c4ba:	f3bf 8f4f 	dsb	sy
 800c4be:	617b      	str	r3, [r7, #20]
}
 800c4c0:	bf00      	nop
 800c4c2:	e7fe      	b.n	800c4c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d06e      	beq.n	800c5a8 <pvPortMalloc+0x150>
 800c4ca:	4b47      	ldr	r3, [pc, #284]	; (800c5e8 <pvPortMalloc+0x190>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	687a      	ldr	r2, [r7, #4]
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	d869      	bhi.n	800c5a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c4d4:	4b45      	ldr	r3, [pc, #276]	; (800c5ec <pvPortMalloc+0x194>)
 800c4d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c4d8:	4b44      	ldr	r3, [pc, #272]	; (800c5ec <pvPortMalloc+0x194>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c4de:	e004      	b.n	800c4ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ec:	685b      	ldr	r3, [r3, #4]
 800c4ee:	687a      	ldr	r2, [r7, #4]
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	d903      	bls.n	800c4fc <pvPortMalloc+0xa4>
 800c4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d1f1      	bne.n	800c4e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c4fc:	4b38      	ldr	r3, [pc, #224]	; (800c5e0 <pvPortMalloc+0x188>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c502:	429a      	cmp	r2, r3
 800c504:	d050      	beq.n	800c5a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c506:	6a3b      	ldr	r3, [r7, #32]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	2208      	movs	r2, #8
 800c50c:	4413      	add	r3, r2
 800c50e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c512:	681a      	ldr	r2, [r3, #0]
 800c514:	6a3b      	ldr	r3, [r7, #32]
 800c516:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c51a:	685a      	ldr	r2, [r3, #4]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	1ad2      	subs	r2, r2, r3
 800c520:	2308      	movs	r3, #8
 800c522:	005b      	lsls	r3, r3, #1
 800c524:	429a      	cmp	r2, r3
 800c526:	d91f      	bls.n	800c568 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	4413      	add	r3, r2
 800c52e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c530:	69bb      	ldr	r3, [r7, #24]
 800c532:	f003 0307 	and.w	r3, r3, #7
 800c536:	2b00      	cmp	r3, #0
 800c538:	d00a      	beq.n	800c550 <pvPortMalloc+0xf8>
	__asm volatile
 800c53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c53e:	f383 8811 	msr	BASEPRI, r3
 800c542:	f3bf 8f6f 	isb	sy
 800c546:	f3bf 8f4f 	dsb	sy
 800c54a:	613b      	str	r3, [r7, #16]
}
 800c54c:	bf00      	nop
 800c54e:	e7fe      	b.n	800c54e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c552:	685a      	ldr	r2, [r3, #4]
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	1ad2      	subs	r2, r2, r3
 800c558:	69bb      	ldr	r3, [r7, #24]
 800c55a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c562:	69b8      	ldr	r0, [r7, #24]
 800c564:	f000 f90c 	bl	800c780 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c568:	4b1f      	ldr	r3, [pc, #124]	; (800c5e8 <pvPortMalloc+0x190>)
 800c56a:	681a      	ldr	r2, [r3, #0]
 800c56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c56e:	685b      	ldr	r3, [r3, #4]
 800c570:	1ad3      	subs	r3, r2, r3
 800c572:	4a1d      	ldr	r2, [pc, #116]	; (800c5e8 <pvPortMalloc+0x190>)
 800c574:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c576:	4b1c      	ldr	r3, [pc, #112]	; (800c5e8 <pvPortMalloc+0x190>)
 800c578:	681a      	ldr	r2, [r3, #0]
 800c57a:	4b1d      	ldr	r3, [pc, #116]	; (800c5f0 <pvPortMalloc+0x198>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	429a      	cmp	r2, r3
 800c580:	d203      	bcs.n	800c58a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c582:	4b19      	ldr	r3, [pc, #100]	; (800c5e8 <pvPortMalloc+0x190>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	4a1a      	ldr	r2, [pc, #104]	; (800c5f0 <pvPortMalloc+0x198>)
 800c588:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c58c:	685a      	ldr	r2, [r3, #4]
 800c58e:	4b15      	ldr	r3, [pc, #84]	; (800c5e4 <pvPortMalloc+0x18c>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	431a      	orrs	r2, r3
 800c594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c596:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c59a:	2200      	movs	r2, #0
 800c59c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c59e:	4b15      	ldr	r3, [pc, #84]	; (800c5f4 <pvPortMalloc+0x19c>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	3301      	adds	r3, #1
 800c5a4:	4a13      	ldr	r2, [pc, #76]	; (800c5f4 <pvPortMalloc+0x19c>)
 800c5a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c5a8:	f7fe fce2 	bl	800af70 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800c5ac:	69fb      	ldr	r3, [r7, #28]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d101      	bne.n	800c5b6 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800c5b2:	f7f3 ffad 	bl	8000510 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5b6:	69fb      	ldr	r3, [r7, #28]
 800c5b8:	f003 0307 	and.w	r3, r3, #7
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d00a      	beq.n	800c5d6 <pvPortMalloc+0x17e>
	__asm volatile
 800c5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c4:	f383 8811 	msr	BASEPRI, r3
 800c5c8:	f3bf 8f6f 	isb	sy
 800c5cc:	f3bf 8f4f 	dsb	sy
 800c5d0:	60fb      	str	r3, [r7, #12]
}
 800c5d2:	bf00      	nop
 800c5d4:	e7fe      	b.n	800c5d4 <pvPortMalloc+0x17c>
	return pvReturn;
 800c5d6:	69fb      	ldr	r3, [r7, #28]
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3728      	adds	r7, #40	; 0x28
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	200090b8 	.word	0x200090b8
 800c5e4:	200090cc 	.word	0x200090cc
 800c5e8:	200090bc 	.word	0x200090bc
 800c5ec:	200090b0 	.word	0x200090b0
 800c5f0:	200090c0 	.word	0x200090c0
 800c5f4:	200090c4 	.word	0x200090c4

0800c5f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b086      	sub	sp, #24
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d04d      	beq.n	800c6a6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c60a:	2308      	movs	r3, #8
 800c60c:	425b      	negs	r3, r3
 800c60e:	697a      	ldr	r2, [r7, #20]
 800c610:	4413      	add	r3, r2
 800c612:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	685a      	ldr	r2, [r3, #4]
 800c61c:	4b24      	ldr	r3, [pc, #144]	; (800c6b0 <vPortFree+0xb8>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	4013      	ands	r3, r2
 800c622:	2b00      	cmp	r3, #0
 800c624:	d10a      	bne.n	800c63c <vPortFree+0x44>
	__asm volatile
 800c626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c62a:	f383 8811 	msr	BASEPRI, r3
 800c62e:	f3bf 8f6f 	isb	sy
 800c632:	f3bf 8f4f 	dsb	sy
 800c636:	60fb      	str	r3, [r7, #12]
}
 800c638:	bf00      	nop
 800c63a:	e7fe      	b.n	800c63a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d00a      	beq.n	800c65a <vPortFree+0x62>
	__asm volatile
 800c644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c648:	f383 8811 	msr	BASEPRI, r3
 800c64c:	f3bf 8f6f 	isb	sy
 800c650:	f3bf 8f4f 	dsb	sy
 800c654:	60bb      	str	r3, [r7, #8]
}
 800c656:	bf00      	nop
 800c658:	e7fe      	b.n	800c658 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	685a      	ldr	r2, [r3, #4]
 800c65e:	4b14      	ldr	r3, [pc, #80]	; (800c6b0 <vPortFree+0xb8>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	4013      	ands	r3, r2
 800c664:	2b00      	cmp	r3, #0
 800c666:	d01e      	beq.n	800c6a6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d11a      	bne.n	800c6a6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c670:	693b      	ldr	r3, [r7, #16]
 800c672:	685a      	ldr	r2, [r3, #4]
 800c674:	4b0e      	ldr	r3, [pc, #56]	; (800c6b0 <vPortFree+0xb8>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	43db      	mvns	r3, r3
 800c67a:	401a      	ands	r2, r3
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c680:	f7fe fc68 	bl	800af54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	685a      	ldr	r2, [r3, #4]
 800c688:	4b0a      	ldr	r3, [pc, #40]	; (800c6b4 <vPortFree+0xbc>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	4413      	add	r3, r2
 800c68e:	4a09      	ldr	r2, [pc, #36]	; (800c6b4 <vPortFree+0xbc>)
 800c690:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c692:	6938      	ldr	r0, [r7, #16]
 800c694:	f000 f874 	bl	800c780 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c698:	4b07      	ldr	r3, [pc, #28]	; (800c6b8 <vPortFree+0xc0>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	3301      	adds	r3, #1
 800c69e:	4a06      	ldr	r2, [pc, #24]	; (800c6b8 <vPortFree+0xc0>)
 800c6a0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c6a2:	f7fe fc65 	bl	800af70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c6a6:	bf00      	nop
 800c6a8:	3718      	adds	r7, #24
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}
 800c6ae:	bf00      	nop
 800c6b0:	200090cc 	.word	0x200090cc
 800c6b4:	200090bc 	.word	0x200090bc
 800c6b8:	200090c8 	.word	0x200090c8

0800c6bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b085      	sub	sp, #20
 800c6c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c6c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c6c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c6c8:	4b27      	ldr	r3, [pc, #156]	; (800c768 <prvHeapInit+0xac>)
 800c6ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f003 0307 	and.w	r3, r3, #7
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d00c      	beq.n	800c6f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	3307      	adds	r3, #7
 800c6da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	f023 0307 	bic.w	r3, r3, #7
 800c6e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c6e4:	68ba      	ldr	r2, [r7, #8]
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	1ad3      	subs	r3, r2, r3
 800c6ea:	4a1f      	ldr	r2, [pc, #124]	; (800c768 <prvHeapInit+0xac>)
 800c6ec:	4413      	add	r3, r2
 800c6ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c6f4:	4a1d      	ldr	r2, [pc, #116]	; (800c76c <prvHeapInit+0xb0>)
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c6fa:	4b1c      	ldr	r3, [pc, #112]	; (800c76c <prvHeapInit+0xb0>)
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	68ba      	ldr	r2, [r7, #8]
 800c704:	4413      	add	r3, r2
 800c706:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c708:	2208      	movs	r2, #8
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	1a9b      	subs	r3, r3, r2
 800c70e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f023 0307 	bic.w	r3, r3, #7
 800c716:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	4a15      	ldr	r2, [pc, #84]	; (800c770 <prvHeapInit+0xb4>)
 800c71c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c71e:	4b14      	ldr	r3, [pc, #80]	; (800c770 <prvHeapInit+0xb4>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	2200      	movs	r2, #0
 800c724:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c726:	4b12      	ldr	r3, [pc, #72]	; (800c770 <prvHeapInit+0xb4>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	2200      	movs	r2, #0
 800c72c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	68fa      	ldr	r2, [r7, #12]
 800c736:	1ad2      	subs	r2, r2, r3
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c73c:	4b0c      	ldr	r3, [pc, #48]	; (800c770 <prvHeapInit+0xb4>)
 800c73e:	681a      	ldr	r2, [r3, #0]
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	685b      	ldr	r3, [r3, #4]
 800c748:	4a0a      	ldr	r2, [pc, #40]	; (800c774 <prvHeapInit+0xb8>)
 800c74a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	4a09      	ldr	r2, [pc, #36]	; (800c778 <prvHeapInit+0xbc>)
 800c752:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c754:	4b09      	ldr	r3, [pc, #36]	; (800c77c <prvHeapInit+0xc0>)
 800c756:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c75a:	601a      	str	r2, [r3, #0]
}
 800c75c:	bf00      	nop
 800c75e:	3714      	adds	r7, #20
 800c760:	46bd      	mov	sp, r7
 800c762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c766:	4770      	bx	lr
 800c768:	200010b0 	.word	0x200010b0
 800c76c:	200090b0 	.word	0x200090b0
 800c770:	200090b8 	.word	0x200090b8
 800c774:	200090c0 	.word	0x200090c0
 800c778:	200090bc 	.word	0x200090bc
 800c77c:	200090cc 	.word	0x200090cc

0800c780 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c780:	b480      	push	{r7}
 800c782:	b085      	sub	sp, #20
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c788:	4b28      	ldr	r3, [pc, #160]	; (800c82c <prvInsertBlockIntoFreeList+0xac>)
 800c78a:	60fb      	str	r3, [r7, #12]
 800c78c:	e002      	b.n	800c794 <prvInsertBlockIntoFreeList+0x14>
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	60fb      	str	r3, [r7, #12]
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	687a      	ldr	r2, [r7, #4]
 800c79a:	429a      	cmp	r2, r3
 800c79c:	d8f7      	bhi.n	800c78e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	685b      	ldr	r3, [r3, #4]
 800c7a6:	68ba      	ldr	r2, [r7, #8]
 800c7a8:	4413      	add	r3, r2
 800c7aa:	687a      	ldr	r2, [r7, #4]
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d108      	bne.n	800c7c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	685a      	ldr	r2, [r3, #4]
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	441a      	add	r2, r3
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	68ba      	ldr	r2, [r7, #8]
 800c7cc:	441a      	add	r2, r3
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	429a      	cmp	r2, r3
 800c7d4:	d118      	bne.n	800c808 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	681a      	ldr	r2, [r3, #0]
 800c7da:	4b15      	ldr	r3, [pc, #84]	; (800c830 <prvInsertBlockIntoFreeList+0xb0>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	d00d      	beq.n	800c7fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	685a      	ldr	r2, [r3, #4]
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	441a      	add	r2, r3
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	681a      	ldr	r2, [r3, #0]
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	601a      	str	r2, [r3, #0]
 800c7fc:	e008      	b.n	800c810 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c7fe:	4b0c      	ldr	r3, [pc, #48]	; (800c830 <prvInsertBlockIntoFreeList+0xb0>)
 800c800:	681a      	ldr	r2, [r3, #0]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	601a      	str	r2, [r3, #0]
 800c806:	e003      	b.n	800c810 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681a      	ldr	r2, [r3, #0]
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c810:	68fa      	ldr	r2, [r7, #12]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	429a      	cmp	r2, r3
 800c816:	d002      	beq.n	800c81e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	687a      	ldr	r2, [r7, #4]
 800c81c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c81e:	bf00      	nop
 800c820:	3714      	adds	r7, #20
 800c822:	46bd      	mov	sp, r7
 800c824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c828:	4770      	bx	lr
 800c82a:	bf00      	nop
 800c82c:	200090b0 	.word	0x200090b0
 800c830:	200090b8 	.word	0x200090b8

0800c834 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800c838:	2200      	movs	r2, #0
 800c83a:	490e      	ldr	r1, [pc, #56]	; (800c874 <MX_USB_HOST_Init+0x40>)
 800c83c:	480e      	ldr	r0, [pc, #56]	; (800c878 <MX_USB_HOST_Init+0x44>)
 800c83e:	f7fb f9cf 	bl	8007be0 <USBH_Init>
 800c842:	4603      	mov	r3, r0
 800c844:	2b00      	cmp	r3, #0
 800c846:	d001      	beq.n	800c84c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c848:	f7f4 fab0 	bl	8000dac <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800c84c:	490b      	ldr	r1, [pc, #44]	; (800c87c <MX_USB_HOST_Init+0x48>)
 800c84e:	480a      	ldr	r0, [pc, #40]	; (800c878 <MX_USB_HOST_Init+0x44>)
 800c850:	f7fb fa76 	bl	8007d40 <USBH_RegisterClass>
 800c854:	4603      	mov	r3, r0
 800c856:	2b00      	cmp	r3, #0
 800c858:	d001      	beq.n	800c85e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c85a:	f7f4 faa7 	bl	8000dac <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800c85e:	4806      	ldr	r0, [pc, #24]	; (800c878 <MX_USB_HOST_Init+0x44>)
 800c860:	f7fb fafa 	bl	8007e58 <USBH_Start>
 800c864:	4603      	mov	r3, r0
 800c866:	2b00      	cmp	r3, #0
 800c868:	d001      	beq.n	800c86e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c86a:	f7f4 fa9f 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c86e:	bf00      	nop
 800c870:	bd80      	pop	{r7, pc}
 800c872:	bf00      	nop
 800c874:	0800c881 	.word	0x0800c881
 800c878:	200090d0 	.word	0x200090d0
 800c87c:	2000000c 	.word	0x2000000c

0800c880 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c880:	b480      	push	{r7}
 800c882:	b083      	sub	sp, #12
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	460b      	mov	r3, r1
 800c88a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c88c:	78fb      	ldrb	r3, [r7, #3]
 800c88e:	3b01      	subs	r3, #1
 800c890:	2b04      	cmp	r3, #4
 800c892:	d819      	bhi.n	800c8c8 <USBH_UserProcess+0x48>
 800c894:	a201      	add	r2, pc, #4	; (adr r2, 800c89c <USBH_UserProcess+0x1c>)
 800c896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c89a:	bf00      	nop
 800c89c:	0800c8c9 	.word	0x0800c8c9
 800c8a0:	0800c8b9 	.word	0x0800c8b9
 800c8a4:	0800c8c9 	.word	0x0800c8c9
 800c8a8:	0800c8c1 	.word	0x0800c8c1
 800c8ac:	0800c8b1 	.word	0x0800c8b1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c8b0:	4b09      	ldr	r3, [pc, #36]	; (800c8d8 <USBH_UserProcess+0x58>)
 800c8b2:	2203      	movs	r2, #3
 800c8b4:	701a      	strb	r2, [r3, #0]
  break;
 800c8b6:	e008      	b.n	800c8ca <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c8b8:	4b07      	ldr	r3, [pc, #28]	; (800c8d8 <USBH_UserProcess+0x58>)
 800c8ba:	2202      	movs	r2, #2
 800c8bc:	701a      	strb	r2, [r3, #0]
  break;
 800c8be:	e004      	b.n	800c8ca <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c8c0:	4b05      	ldr	r3, [pc, #20]	; (800c8d8 <USBH_UserProcess+0x58>)
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	701a      	strb	r2, [r3, #0]
  break;
 800c8c6:	e000      	b.n	800c8ca <USBH_UserProcess+0x4a>

  default:
  break;
 800c8c8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c8ca:	bf00      	nop
 800c8cc:	370c      	adds	r7, #12
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d4:	4770      	bx	lr
 800c8d6:	bf00      	nop
 800c8d8:	200094b4 	.word	0x200094b4

0800c8dc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b08a      	sub	sp, #40	; 0x28
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c8e4:	f107 0314 	add.w	r3, r7, #20
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	601a      	str	r2, [r3, #0]
 800c8ec:	605a      	str	r2, [r3, #4]
 800c8ee:	609a      	str	r2, [r3, #8]
 800c8f0:	60da      	str	r2, [r3, #12]
 800c8f2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	4a24      	ldr	r2, [pc, #144]	; (800c98c <HAL_HCD_MspInit+0xb0>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d141      	bne.n	800c982 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c8fe:	2300      	movs	r3, #0
 800c900:	613b      	str	r3, [r7, #16]
 800c902:	4b23      	ldr	r3, [pc, #140]	; (800c990 <HAL_HCD_MspInit+0xb4>)
 800c904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c906:	4a22      	ldr	r2, [pc, #136]	; (800c990 <HAL_HCD_MspInit+0xb4>)
 800c908:	f043 0302 	orr.w	r3, r3, #2
 800c90c:	6313      	str	r3, [r2, #48]	; 0x30
 800c90e:	4b20      	ldr	r3, [pc, #128]	; (800c990 <HAL_HCD_MspInit+0xb4>)
 800c910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c912:	f003 0302 	and.w	r3, r3, #2
 800c916:	613b      	str	r3, [r7, #16]
 800c918:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800c91a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800c91e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c920:	2302      	movs	r3, #2
 800c922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c924:	2300      	movs	r3, #0
 800c926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c928:	2300      	movs	r3, #0
 800c92a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800c92c:	230c      	movs	r3, #12
 800c92e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c930:	f107 0314 	add.w	r3, r7, #20
 800c934:	4619      	mov	r1, r3
 800c936:	4817      	ldr	r0, [pc, #92]	; (800c994 <HAL_HCD_MspInit+0xb8>)
 800c938:	f7f5 fa20 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800c93c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c942:	2300      	movs	r3, #0
 800c944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c946:	2300      	movs	r3, #0
 800c948:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800c94a:	f107 0314 	add.w	r3, r7, #20
 800c94e:	4619      	mov	r1, r3
 800c950:	4810      	ldr	r0, [pc, #64]	; (800c994 <HAL_HCD_MspInit+0xb8>)
 800c952:	f7f5 fa13 	bl	8001d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800c956:	2300      	movs	r3, #0
 800c958:	60fb      	str	r3, [r7, #12]
 800c95a:	4b0d      	ldr	r3, [pc, #52]	; (800c990 <HAL_HCD_MspInit+0xb4>)
 800c95c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c95e:	4a0c      	ldr	r2, [pc, #48]	; (800c990 <HAL_HCD_MspInit+0xb4>)
 800c960:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c964:	6313      	str	r3, [r2, #48]	; 0x30
 800c966:	4b0a      	ldr	r3, [pc, #40]	; (800c990 <HAL_HCD_MspInit+0xb4>)
 800c968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c96a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c96e:	60fb      	str	r3, [r7, #12]
 800c970:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800c972:	2200      	movs	r2, #0
 800c974:	2105      	movs	r1, #5
 800c976:	204d      	movs	r0, #77	; 0x4d
 800c978:	f7f4 ffce 	bl	8001918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800c97c:	204d      	movs	r0, #77	; 0x4d
 800c97e:	f7f4 ffe7 	bl	8001950 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800c982:	bf00      	nop
 800c984:	3728      	adds	r7, #40	; 0x28
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}
 800c98a:	bf00      	nop
 800c98c:	40040000 	.word	0x40040000
 800c990:	40023800 	.word	0x40023800
 800c994:	40020400 	.word	0x40020400

0800c998 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b082      	sub	sp, #8
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f7fb ff0d 	bl	80087c6 <USBH_LL_IncTimer>
}
 800c9ac:	bf00      	nop
 800c9ae:	3708      	adds	r7, #8
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}

0800c9b4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b082      	sub	sp, #8
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f7fb ff51 	bl	800886a <USBH_LL_Connect>
}
 800c9c8:	bf00      	nop
 800c9ca:	3708      	adds	r7, #8
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}

0800c9d0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b082      	sub	sp, #8
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7fb ff66 	bl	80088b0 <USBH_LL_Disconnect>
}
 800c9e4:	bf00      	nop
 800c9e6:	3708      	adds	r7, #8
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}

0800c9ec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b082      	sub	sp, #8
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	460b      	mov	r3, r1
 800c9f6:	70fb      	strb	r3, [r7, #3]
 800c9f8:	4613      	mov	r3, r2
 800c9fa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7fb ff9d 	bl	8008942 <USBH_LL_NotifyURBChange>
#endif
}
 800ca08:	bf00      	nop
 800ca0a:	3708      	adds	r7, #8
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b082      	sub	sp, #8
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f7fb fefb 	bl	800881a <USBH_LL_PortEnabled>
}
 800ca24:	bf00      	nop
 800ca26:	3708      	adds	r7, #8
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}

0800ca2c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b082      	sub	sp, #8
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f7fb ff07 	bl	800884e <USBH_LL_PortDisabled>
}
 800ca40:	bf00      	nop
 800ca42:	3708      	adds	r7, #8
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}

0800ca48 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b082      	sub	sp, #8
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d132      	bne.n	800cac0 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800ca5a:	4a1c      	ldr	r2, [pc, #112]	; (800cacc <USBH_LL_Init+0x84>)
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	4a19      	ldr	r2, [pc, #100]	; (800cacc <USBH_LL_Init+0x84>)
 800ca66:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800ca6a:	4b18      	ldr	r3, [pc, #96]	; (800cacc <USBH_LL_Init+0x84>)
 800ca6c:	4a18      	ldr	r2, [pc, #96]	; (800cad0 <USBH_LL_Init+0x88>)
 800ca6e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800ca70:	4b16      	ldr	r3, [pc, #88]	; (800cacc <USBH_LL_Init+0x84>)
 800ca72:	220c      	movs	r2, #12
 800ca74:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800ca76:	4b15      	ldr	r3, [pc, #84]	; (800cacc <USBH_LL_Init+0x84>)
 800ca78:	2201      	movs	r2, #1
 800ca7a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800ca7c:	4b13      	ldr	r3, [pc, #76]	; (800cacc <USBH_LL_Init+0x84>)
 800ca7e:	2200      	movs	r2, #0
 800ca80:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800ca82:	4b12      	ldr	r3, [pc, #72]	; (800cacc <USBH_LL_Init+0x84>)
 800ca84:	2202      	movs	r2, #2
 800ca86:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800ca88:	4b10      	ldr	r3, [pc, #64]	; (800cacc <USBH_LL_Init+0x84>)
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800ca8e:	4b0f      	ldr	r3, [pc, #60]	; (800cacc <USBH_LL_Init+0x84>)
 800ca90:	2200      	movs	r2, #0
 800ca92:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800ca94:	4b0d      	ldr	r3, [pc, #52]	; (800cacc <USBH_LL_Init+0x84>)
 800ca96:	2200      	movs	r2, #0
 800ca98:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800ca9a:	4b0c      	ldr	r3, [pc, #48]	; (800cacc <USBH_LL_Init+0x84>)
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800caa0:	480a      	ldr	r0, [pc, #40]	; (800cacc <USBH_LL_Init+0x84>)
 800caa2:	f7f5 fb6e 	bl	8002182 <HAL_HCD_Init>
 800caa6:	4603      	mov	r3, r0
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d001      	beq.n	800cab0 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800caac:	f7f4 f97e 	bl	8000dac <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800cab0:	4806      	ldr	r0, [pc, #24]	; (800cacc <USBH_LL_Init+0x84>)
 800cab2:	f7f5 ff52 	bl	800295a <HAL_HCD_GetCurrentFrame>
 800cab6:	4603      	mov	r3, r0
 800cab8:	4619      	mov	r1, r3
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f7fb fe74 	bl	80087a8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800cac0:	2300      	movs	r3, #0
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3708      	adds	r7, #8
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop
 800cacc:	200094b8 	.word	0x200094b8
 800cad0:	40040000 	.word	0x40040000

0800cad4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b084      	sub	sp, #16
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cadc:	2300      	movs	r3, #0
 800cade:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cae0:	2300      	movs	r3, #0
 800cae2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800caea:	4618      	mov	r0, r3
 800caec:	f7f5 febf 	bl	800286e <HAL_HCD_Start>
 800caf0:	4603      	mov	r3, r0
 800caf2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800caf4:	7bfb      	ldrb	r3, [r7, #15]
 800caf6:	4618      	mov	r0, r3
 800caf8:	f000 f95c 	bl	800cdb4 <USBH_Get_USB_Status>
 800cafc:	4603      	mov	r3, r0
 800cafe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb00:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3710      	adds	r7, #16
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}

0800cb0a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800cb0a:	b580      	push	{r7, lr}
 800cb0c:	b084      	sub	sp, #16
 800cb0e:	af00      	add	r7, sp, #0
 800cb10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb12:	2300      	movs	r3, #0
 800cb14:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cb16:	2300      	movs	r3, #0
 800cb18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cb20:	4618      	mov	r0, r3
 800cb22:	f7f5 fec7 	bl	80028b4 <HAL_HCD_Stop>
 800cb26:	4603      	mov	r3, r0
 800cb28:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cb2a:	7bfb      	ldrb	r3, [r7, #15]
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f000 f941 	bl	800cdb4 <USBH_Get_USB_Status>
 800cb32:	4603      	mov	r3, r0
 800cb34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb36:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	3710      	adds	r7, #16
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}

0800cb40 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b084      	sub	sp, #16
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800cb48:	2301      	movs	r3, #1
 800cb4a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cb52:	4618      	mov	r0, r3
 800cb54:	f7f5 ff0f 	bl	8002976 <HAL_HCD_GetCurrentSpeed>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	2b02      	cmp	r3, #2
 800cb5c:	d00c      	beq.n	800cb78 <USBH_LL_GetSpeed+0x38>
 800cb5e:	2b02      	cmp	r3, #2
 800cb60:	d80d      	bhi.n	800cb7e <USBH_LL_GetSpeed+0x3e>
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d002      	beq.n	800cb6c <USBH_LL_GetSpeed+0x2c>
 800cb66:	2b01      	cmp	r3, #1
 800cb68:	d003      	beq.n	800cb72 <USBH_LL_GetSpeed+0x32>
 800cb6a:	e008      	b.n	800cb7e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	73fb      	strb	r3, [r7, #15]
    break;
 800cb70:	e008      	b.n	800cb84 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800cb72:	2301      	movs	r3, #1
 800cb74:	73fb      	strb	r3, [r7, #15]
    break;
 800cb76:	e005      	b.n	800cb84 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800cb78:	2302      	movs	r3, #2
 800cb7a:	73fb      	strb	r3, [r7, #15]
    break;
 800cb7c:	e002      	b.n	800cb84 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800cb7e:	2301      	movs	r3, #1
 800cb80:	73fb      	strb	r3, [r7, #15]
    break;
 800cb82:	bf00      	nop
  }
  return  speed;
 800cb84:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3710      	adds	r7, #16
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}

0800cb8e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800cb8e:	b580      	push	{r7, lr}
 800cb90:	b084      	sub	sp, #16
 800cb92:	af00      	add	r7, sp, #0
 800cb94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb96:	2300      	movs	r3, #0
 800cb98:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cba4:	4618      	mov	r0, r3
 800cba6:	f7f5 fea2 	bl	80028ee <HAL_HCD_ResetPort>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cbae:	7bfb      	ldrb	r3, [r7, #15]
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f000 f8ff 	bl	800cdb4 <USBH_Get_USB_Status>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbba:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3710      	adds	r7, #16
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b082      	sub	sp, #8
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	460b      	mov	r3, r1
 800cbce:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cbd6:	78fa      	ldrb	r2, [r7, #3]
 800cbd8:	4611      	mov	r1, r2
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f7f5 fea9 	bl	8002932 <HAL_HCD_HC_GetXferCount>
 800cbe0:	4603      	mov	r3, r0
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3708      	adds	r7, #8
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}

0800cbea <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cbea:	b590      	push	{r4, r7, lr}
 800cbec:	b089      	sub	sp, #36	; 0x24
 800cbee:	af04      	add	r7, sp, #16
 800cbf0:	6078      	str	r0, [r7, #4]
 800cbf2:	4608      	mov	r0, r1
 800cbf4:	4611      	mov	r1, r2
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	70fb      	strb	r3, [r7, #3]
 800cbfc:	460b      	mov	r3, r1
 800cbfe:	70bb      	strb	r3, [r7, #2]
 800cc00:	4613      	mov	r3, r2
 800cc02:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc04:	2300      	movs	r3, #0
 800cc06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cc12:	787c      	ldrb	r4, [r7, #1]
 800cc14:	78ba      	ldrb	r2, [r7, #2]
 800cc16:	78f9      	ldrb	r1, [r7, #3]
 800cc18:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cc1a:	9302      	str	r3, [sp, #8]
 800cc1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cc20:	9301      	str	r3, [sp, #4]
 800cc22:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cc26:	9300      	str	r3, [sp, #0]
 800cc28:	4623      	mov	r3, r4
 800cc2a:	f7f5 fb0c 	bl	8002246 <HAL_HCD_HC_Init>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800cc32:	7bfb      	ldrb	r3, [r7, #15]
 800cc34:	4618      	mov	r0, r3
 800cc36:	f000 f8bd 	bl	800cdb4 <USBH_Get_USB_Status>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	3714      	adds	r7, #20
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd90      	pop	{r4, r7, pc}

0800cc48 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b084      	sub	sp, #16
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	460b      	mov	r3, r1
 800cc52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc54:	2300      	movs	r3, #0
 800cc56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cc62:	78fa      	ldrb	r2, [r7, #3]
 800cc64:	4611      	mov	r1, r2
 800cc66:	4618      	mov	r0, r3
 800cc68:	f7f5 fb7c 	bl	8002364 <HAL_HCD_HC_Halt>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cc70:	7bfb      	ldrb	r3, [r7, #15]
 800cc72:	4618      	mov	r0, r3
 800cc74:	f000 f89e 	bl	800cdb4 <USBH_Get_USB_Status>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3710      	adds	r7, #16
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}

0800cc86 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800cc86:	b590      	push	{r4, r7, lr}
 800cc88:	b089      	sub	sp, #36	; 0x24
 800cc8a:	af04      	add	r7, sp, #16
 800cc8c:	6078      	str	r0, [r7, #4]
 800cc8e:	4608      	mov	r0, r1
 800cc90:	4611      	mov	r1, r2
 800cc92:	461a      	mov	r2, r3
 800cc94:	4603      	mov	r3, r0
 800cc96:	70fb      	strb	r3, [r7, #3]
 800cc98:	460b      	mov	r3, r1
 800cc9a:	70bb      	strb	r3, [r7, #2]
 800cc9c:	4613      	mov	r3, r2
 800cc9e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cca0:	2300      	movs	r3, #0
 800cca2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cca4:	2300      	movs	r3, #0
 800cca6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ccae:	787c      	ldrb	r4, [r7, #1]
 800ccb0:	78ba      	ldrb	r2, [r7, #2]
 800ccb2:	78f9      	ldrb	r1, [r7, #3]
 800ccb4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ccb8:	9303      	str	r3, [sp, #12]
 800ccba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ccbc:	9302      	str	r3, [sp, #8]
 800ccbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc0:	9301      	str	r3, [sp, #4]
 800ccc2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ccc6:	9300      	str	r3, [sp, #0]
 800ccc8:	4623      	mov	r3, r4
 800ccca:	f7f5 fb6f 	bl	80023ac <HAL_HCD_HC_SubmitRequest>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ccd2:	7bfb      	ldrb	r3, [r7, #15]
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f000 f86d 	bl	800cdb4 <USBH_Get_USB_Status>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccde:	7bbb      	ldrb	r3, [r7, #14]
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3714      	adds	r7, #20
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd90      	pop	{r4, r7, pc}

0800cce8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b082      	sub	sp, #8
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
 800ccf0:	460b      	mov	r3, r1
 800ccf2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ccfa:	78fa      	ldrb	r2, [r7, #3]
 800ccfc:	4611      	mov	r1, r2
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f7f5 fe03 	bl	800290a <HAL_HCD_HC_GetURBState>
 800cd04:	4603      	mov	r3, r0
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3708      	adds	r7, #8
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}

0800cd0e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800cd0e:	b580      	push	{r7, lr}
 800cd10:	b082      	sub	sp, #8
 800cd12:	af00      	add	r7, sp, #0
 800cd14:	6078      	str	r0, [r7, #4]
 800cd16:	460b      	mov	r3, r1
 800cd18:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d103      	bne.n	800cd2c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800cd24:	78fb      	ldrb	r3, [r7, #3]
 800cd26:	4618      	mov	r0, r3
 800cd28:	f000 f870 	bl	800ce0c <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800cd2c:	20c8      	movs	r0, #200	; 0xc8
 800cd2e:	f7f4 fd17 	bl	8001760 <HAL_Delay>
  return USBH_OK;
 800cd32:	2300      	movs	r3, #0
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3708      	adds	r7, #8
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}

0800cd3c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b085      	sub	sp, #20
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	460b      	mov	r3, r1
 800cd46:	70fb      	strb	r3, [r7, #3]
 800cd48:	4613      	mov	r3, r2
 800cd4a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cd52:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800cd54:	78fb      	ldrb	r3, [r7, #3]
 800cd56:	68fa      	ldr	r2, [r7, #12]
 800cd58:	212c      	movs	r1, #44	; 0x2c
 800cd5a:	fb01 f303 	mul.w	r3, r1, r3
 800cd5e:	4413      	add	r3, r2
 800cd60:	333b      	adds	r3, #59	; 0x3b
 800cd62:	781b      	ldrb	r3, [r3, #0]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d009      	beq.n	800cd7c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800cd68:	78fb      	ldrb	r3, [r7, #3]
 800cd6a:	68fa      	ldr	r2, [r7, #12]
 800cd6c:	212c      	movs	r1, #44	; 0x2c
 800cd6e:	fb01 f303 	mul.w	r3, r1, r3
 800cd72:	4413      	add	r3, r2
 800cd74:	3354      	adds	r3, #84	; 0x54
 800cd76:	78ba      	ldrb	r2, [r7, #2]
 800cd78:	701a      	strb	r2, [r3, #0]
 800cd7a:	e008      	b.n	800cd8e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800cd7c:	78fb      	ldrb	r3, [r7, #3]
 800cd7e:	68fa      	ldr	r2, [r7, #12]
 800cd80:	212c      	movs	r1, #44	; 0x2c
 800cd82:	fb01 f303 	mul.w	r3, r1, r3
 800cd86:	4413      	add	r3, r2
 800cd88:	3355      	adds	r3, #85	; 0x55
 800cd8a:	78ba      	ldrb	r2, [r7, #2]
 800cd8c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800cd8e:	2300      	movs	r3, #0
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	3714      	adds	r7, #20
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr

0800cd9c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b082      	sub	sp, #8
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f7f4 fcdb 	bl	8001760 <HAL_Delay>
}
 800cdaa:	bf00      	nop
 800cdac:	3708      	adds	r7, #8
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}
	...

0800cdb4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	b085      	sub	sp, #20
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	4603      	mov	r3, r0
 800cdbc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cdc2:	79fb      	ldrb	r3, [r7, #7]
 800cdc4:	2b03      	cmp	r3, #3
 800cdc6:	d817      	bhi.n	800cdf8 <USBH_Get_USB_Status+0x44>
 800cdc8:	a201      	add	r2, pc, #4	; (adr r2, 800cdd0 <USBH_Get_USB_Status+0x1c>)
 800cdca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdce:	bf00      	nop
 800cdd0:	0800cde1 	.word	0x0800cde1
 800cdd4:	0800cde7 	.word	0x0800cde7
 800cdd8:	0800cded 	.word	0x0800cded
 800cddc:	0800cdf3 	.word	0x0800cdf3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800cde0:	2300      	movs	r3, #0
 800cde2:	73fb      	strb	r3, [r7, #15]
    break;
 800cde4:	e00b      	b.n	800cdfe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800cde6:	2302      	movs	r3, #2
 800cde8:	73fb      	strb	r3, [r7, #15]
    break;
 800cdea:	e008      	b.n	800cdfe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800cdec:	2301      	movs	r3, #1
 800cdee:	73fb      	strb	r3, [r7, #15]
    break;
 800cdf0:	e005      	b.n	800cdfe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800cdf2:	2302      	movs	r3, #2
 800cdf4:	73fb      	strb	r3, [r7, #15]
    break;
 800cdf6:	e002      	b.n	800cdfe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800cdf8:	2302      	movs	r3, #2
 800cdfa:	73fb      	strb	r3, [r7, #15]
    break;
 800cdfc:	bf00      	nop
  }
  return usb_status;
 800cdfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	3714      	adds	r7, #20
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr

0800ce0c <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b084      	sub	sp, #16
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	4603      	mov	r3, r0
 800ce14:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ce16:	79fb      	ldrb	r3, [r7, #7]
 800ce18:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800ce1a:	79fb      	ldrb	r3, [r7, #7]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d102      	bne.n	800ce26 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800ce20:	2301      	movs	r3, #1
 800ce22:	73fb      	strb	r3, [r7, #15]
 800ce24:	e001      	b.n	800ce2a <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800ce26:	2300      	movs	r3, #0
 800ce28:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800ce2a:	7bfb      	ldrb	r3, [r7, #15]
 800ce2c:	461a      	mov	r2, r3
 800ce2e:	2110      	movs	r1, #16
 800ce30:	4803      	ldr	r0, [pc, #12]	; (800ce40 <MX_DriverVbusHS+0x34>)
 800ce32:	f7f5 f94f 	bl	80020d4 <HAL_GPIO_WritePin>
}
 800ce36:	bf00      	nop
 800ce38:	3710      	adds	r7, #16
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
 800ce3e:	bf00      	nop
 800ce40:	40020800 	.word	0x40020800

0800ce44 <malloc>:
 800ce44:	4b02      	ldr	r3, [pc, #8]	; (800ce50 <malloc+0xc>)
 800ce46:	4601      	mov	r1, r0
 800ce48:	6818      	ldr	r0, [r3, #0]
 800ce4a:	f000 b82b 	b.w	800cea4 <_malloc_r>
 800ce4e:	bf00      	nop
 800ce50:	2000007c 	.word	0x2000007c

0800ce54 <free>:
 800ce54:	4b02      	ldr	r3, [pc, #8]	; (800ce60 <free+0xc>)
 800ce56:	4601      	mov	r1, r0
 800ce58:	6818      	ldr	r0, [r3, #0]
 800ce5a:	f000 b901 	b.w	800d060 <_free_r>
 800ce5e:	bf00      	nop
 800ce60:	2000007c 	.word	0x2000007c

0800ce64 <sbrk_aligned>:
 800ce64:	b570      	push	{r4, r5, r6, lr}
 800ce66:	4e0e      	ldr	r6, [pc, #56]	; (800cea0 <sbrk_aligned+0x3c>)
 800ce68:	460c      	mov	r4, r1
 800ce6a:	6831      	ldr	r1, [r6, #0]
 800ce6c:	4605      	mov	r5, r0
 800ce6e:	b911      	cbnz	r1, 800ce76 <sbrk_aligned+0x12>
 800ce70:	f000 f8ac 	bl	800cfcc <_sbrk_r>
 800ce74:	6030      	str	r0, [r6, #0]
 800ce76:	4621      	mov	r1, r4
 800ce78:	4628      	mov	r0, r5
 800ce7a:	f000 f8a7 	bl	800cfcc <_sbrk_r>
 800ce7e:	1c43      	adds	r3, r0, #1
 800ce80:	d00a      	beq.n	800ce98 <sbrk_aligned+0x34>
 800ce82:	1cc4      	adds	r4, r0, #3
 800ce84:	f024 0403 	bic.w	r4, r4, #3
 800ce88:	42a0      	cmp	r0, r4
 800ce8a:	d007      	beq.n	800ce9c <sbrk_aligned+0x38>
 800ce8c:	1a21      	subs	r1, r4, r0
 800ce8e:	4628      	mov	r0, r5
 800ce90:	f000 f89c 	bl	800cfcc <_sbrk_r>
 800ce94:	3001      	adds	r0, #1
 800ce96:	d101      	bne.n	800ce9c <sbrk_aligned+0x38>
 800ce98:	f04f 34ff 	mov.w	r4, #4294967295
 800ce9c:	4620      	mov	r0, r4
 800ce9e:	bd70      	pop	{r4, r5, r6, pc}
 800cea0:	200097c0 	.word	0x200097c0

0800cea4 <_malloc_r>:
 800cea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cea8:	1ccd      	adds	r5, r1, #3
 800ceaa:	f025 0503 	bic.w	r5, r5, #3
 800ceae:	3508      	adds	r5, #8
 800ceb0:	2d0c      	cmp	r5, #12
 800ceb2:	bf38      	it	cc
 800ceb4:	250c      	movcc	r5, #12
 800ceb6:	2d00      	cmp	r5, #0
 800ceb8:	4607      	mov	r7, r0
 800ceba:	db01      	blt.n	800cec0 <_malloc_r+0x1c>
 800cebc:	42a9      	cmp	r1, r5
 800cebe:	d905      	bls.n	800cecc <_malloc_r+0x28>
 800cec0:	230c      	movs	r3, #12
 800cec2:	603b      	str	r3, [r7, #0]
 800cec4:	2600      	movs	r6, #0
 800cec6:	4630      	mov	r0, r6
 800cec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cecc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cfa0 <_malloc_r+0xfc>
 800ced0:	f000 f868 	bl	800cfa4 <__malloc_lock>
 800ced4:	f8d8 3000 	ldr.w	r3, [r8]
 800ced8:	461c      	mov	r4, r3
 800ceda:	bb5c      	cbnz	r4, 800cf34 <_malloc_r+0x90>
 800cedc:	4629      	mov	r1, r5
 800cede:	4638      	mov	r0, r7
 800cee0:	f7ff ffc0 	bl	800ce64 <sbrk_aligned>
 800cee4:	1c43      	adds	r3, r0, #1
 800cee6:	4604      	mov	r4, r0
 800cee8:	d155      	bne.n	800cf96 <_malloc_r+0xf2>
 800ceea:	f8d8 4000 	ldr.w	r4, [r8]
 800ceee:	4626      	mov	r6, r4
 800cef0:	2e00      	cmp	r6, #0
 800cef2:	d145      	bne.n	800cf80 <_malloc_r+0xdc>
 800cef4:	2c00      	cmp	r4, #0
 800cef6:	d048      	beq.n	800cf8a <_malloc_r+0xe6>
 800cef8:	6823      	ldr	r3, [r4, #0]
 800cefa:	4631      	mov	r1, r6
 800cefc:	4638      	mov	r0, r7
 800cefe:	eb04 0903 	add.w	r9, r4, r3
 800cf02:	f000 f863 	bl	800cfcc <_sbrk_r>
 800cf06:	4581      	cmp	r9, r0
 800cf08:	d13f      	bne.n	800cf8a <_malloc_r+0xe6>
 800cf0a:	6821      	ldr	r1, [r4, #0]
 800cf0c:	1a6d      	subs	r5, r5, r1
 800cf0e:	4629      	mov	r1, r5
 800cf10:	4638      	mov	r0, r7
 800cf12:	f7ff ffa7 	bl	800ce64 <sbrk_aligned>
 800cf16:	3001      	adds	r0, #1
 800cf18:	d037      	beq.n	800cf8a <_malloc_r+0xe6>
 800cf1a:	6823      	ldr	r3, [r4, #0]
 800cf1c:	442b      	add	r3, r5
 800cf1e:	6023      	str	r3, [r4, #0]
 800cf20:	f8d8 3000 	ldr.w	r3, [r8]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d038      	beq.n	800cf9a <_malloc_r+0xf6>
 800cf28:	685a      	ldr	r2, [r3, #4]
 800cf2a:	42a2      	cmp	r2, r4
 800cf2c:	d12b      	bne.n	800cf86 <_malloc_r+0xe2>
 800cf2e:	2200      	movs	r2, #0
 800cf30:	605a      	str	r2, [r3, #4]
 800cf32:	e00f      	b.n	800cf54 <_malloc_r+0xb0>
 800cf34:	6822      	ldr	r2, [r4, #0]
 800cf36:	1b52      	subs	r2, r2, r5
 800cf38:	d41f      	bmi.n	800cf7a <_malloc_r+0xd6>
 800cf3a:	2a0b      	cmp	r2, #11
 800cf3c:	d917      	bls.n	800cf6e <_malloc_r+0xca>
 800cf3e:	1961      	adds	r1, r4, r5
 800cf40:	42a3      	cmp	r3, r4
 800cf42:	6025      	str	r5, [r4, #0]
 800cf44:	bf18      	it	ne
 800cf46:	6059      	strne	r1, [r3, #4]
 800cf48:	6863      	ldr	r3, [r4, #4]
 800cf4a:	bf08      	it	eq
 800cf4c:	f8c8 1000 	streq.w	r1, [r8]
 800cf50:	5162      	str	r2, [r4, r5]
 800cf52:	604b      	str	r3, [r1, #4]
 800cf54:	4638      	mov	r0, r7
 800cf56:	f104 060b 	add.w	r6, r4, #11
 800cf5a:	f000 f829 	bl	800cfb0 <__malloc_unlock>
 800cf5e:	f026 0607 	bic.w	r6, r6, #7
 800cf62:	1d23      	adds	r3, r4, #4
 800cf64:	1af2      	subs	r2, r6, r3
 800cf66:	d0ae      	beq.n	800cec6 <_malloc_r+0x22>
 800cf68:	1b9b      	subs	r3, r3, r6
 800cf6a:	50a3      	str	r3, [r4, r2]
 800cf6c:	e7ab      	b.n	800cec6 <_malloc_r+0x22>
 800cf6e:	42a3      	cmp	r3, r4
 800cf70:	6862      	ldr	r2, [r4, #4]
 800cf72:	d1dd      	bne.n	800cf30 <_malloc_r+0x8c>
 800cf74:	f8c8 2000 	str.w	r2, [r8]
 800cf78:	e7ec      	b.n	800cf54 <_malloc_r+0xb0>
 800cf7a:	4623      	mov	r3, r4
 800cf7c:	6864      	ldr	r4, [r4, #4]
 800cf7e:	e7ac      	b.n	800ceda <_malloc_r+0x36>
 800cf80:	4634      	mov	r4, r6
 800cf82:	6876      	ldr	r6, [r6, #4]
 800cf84:	e7b4      	b.n	800cef0 <_malloc_r+0x4c>
 800cf86:	4613      	mov	r3, r2
 800cf88:	e7cc      	b.n	800cf24 <_malloc_r+0x80>
 800cf8a:	230c      	movs	r3, #12
 800cf8c:	603b      	str	r3, [r7, #0]
 800cf8e:	4638      	mov	r0, r7
 800cf90:	f000 f80e 	bl	800cfb0 <__malloc_unlock>
 800cf94:	e797      	b.n	800cec6 <_malloc_r+0x22>
 800cf96:	6025      	str	r5, [r4, #0]
 800cf98:	e7dc      	b.n	800cf54 <_malloc_r+0xb0>
 800cf9a:	605b      	str	r3, [r3, #4]
 800cf9c:	deff      	udf	#255	; 0xff
 800cf9e:	bf00      	nop
 800cfa0:	200097bc 	.word	0x200097bc

0800cfa4 <__malloc_lock>:
 800cfa4:	4801      	ldr	r0, [pc, #4]	; (800cfac <__malloc_lock+0x8>)
 800cfa6:	f000 b84b 	b.w	800d040 <__retarget_lock_acquire_recursive>
 800cfaa:	bf00      	nop
 800cfac:	20009900 	.word	0x20009900

0800cfb0 <__malloc_unlock>:
 800cfb0:	4801      	ldr	r0, [pc, #4]	; (800cfb8 <__malloc_unlock+0x8>)
 800cfb2:	f000 b846 	b.w	800d042 <__retarget_lock_release_recursive>
 800cfb6:	bf00      	nop
 800cfb8:	20009900 	.word	0x20009900

0800cfbc <memset>:
 800cfbc:	4402      	add	r2, r0
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	4293      	cmp	r3, r2
 800cfc2:	d100      	bne.n	800cfc6 <memset+0xa>
 800cfc4:	4770      	bx	lr
 800cfc6:	f803 1b01 	strb.w	r1, [r3], #1
 800cfca:	e7f9      	b.n	800cfc0 <memset+0x4>

0800cfcc <_sbrk_r>:
 800cfcc:	b538      	push	{r3, r4, r5, lr}
 800cfce:	4d06      	ldr	r5, [pc, #24]	; (800cfe8 <_sbrk_r+0x1c>)
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	4604      	mov	r4, r0
 800cfd4:	4608      	mov	r0, r1
 800cfd6:	602b      	str	r3, [r5, #0]
 800cfd8:	f7f4 fb0e 	bl	80015f8 <_sbrk>
 800cfdc:	1c43      	adds	r3, r0, #1
 800cfde:	d102      	bne.n	800cfe6 <_sbrk_r+0x1a>
 800cfe0:	682b      	ldr	r3, [r5, #0]
 800cfe2:	b103      	cbz	r3, 800cfe6 <_sbrk_r+0x1a>
 800cfe4:	6023      	str	r3, [r4, #0]
 800cfe6:	bd38      	pop	{r3, r4, r5, pc}
 800cfe8:	200098fc 	.word	0x200098fc

0800cfec <__errno>:
 800cfec:	4b01      	ldr	r3, [pc, #4]	; (800cff4 <__errno+0x8>)
 800cfee:	6818      	ldr	r0, [r3, #0]
 800cff0:	4770      	bx	lr
 800cff2:	bf00      	nop
 800cff4:	2000007c 	.word	0x2000007c

0800cff8 <__libc_init_array>:
 800cff8:	b570      	push	{r4, r5, r6, lr}
 800cffa:	4d0d      	ldr	r5, [pc, #52]	; (800d030 <__libc_init_array+0x38>)
 800cffc:	4c0d      	ldr	r4, [pc, #52]	; (800d034 <__libc_init_array+0x3c>)
 800cffe:	1b64      	subs	r4, r4, r5
 800d000:	10a4      	asrs	r4, r4, #2
 800d002:	2600      	movs	r6, #0
 800d004:	42a6      	cmp	r6, r4
 800d006:	d109      	bne.n	800d01c <__libc_init_array+0x24>
 800d008:	4d0b      	ldr	r5, [pc, #44]	; (800d038 <__libc_init_array+0x40>)
 800d00a:	4c0c      	ldr	r4, [pc, #48]	; (800d03c <__libc_init_array+0x44>)
 800d00c:	f000 f874 	bl	800d0f8 <_init>
 800d010:	1b64      	subs	r4, r4, r5
 800d012:	10a4      	asrs	r4, r4, #2
 800d014:	2600      	movs	r6, #0
 800d016:	42a6      	cmp	r6, r4
 800d018:	d105      	bne.n	800d026 <__libc_init_array+0x2e>
 800d01a:	bd70      	pop	{r4, r5, r6, pc}
 800d01c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d020:	4798      	blx	r3
 800d022:	3601      	adds	r6, #1
 800d024:	e7ee      	b.n	800d004 <__libc_init_array+0xc>
 800d026:	f855 3b04 	ldr.w	r3, [r5], #4
 800d02a:	4798      	blx	r3
 800d02c:	3601      	adds	r6, #1
 800d02e:	e7f2      	b.n	800d016 <__libc_init_array+0x1e>
 800d030:	0800d1b0 	.word	0x0800d1b0
 800d034:	0800d1b0 	.word	0x0800d1b0
 800d038:	0800d1b0 	.word	0x0800d1b0
 800d03c:	0800d1b4 	.word	0x0800d1b4

0800d040 <__retarget_lock_acquire_recursive>:
 800d040:	4770      	bx	lr

0800d042 <__retarget_lock_release_recursive>:
 800d042:	4770      	bx	lr

0800d044 <memcpy>:
 800d044:	440a      	add	r2, r1
 800d046:	4291      	cmp	r1, r2
 800d048:	f100 33ff 	add.w	r3, r0, #4294967295
 800d04c:	d100      	bne.n	800d050 <memcpy+0xc>
 800d04e:	4770      	bx	lr
 800d050:	b510      	push	{r4, lr}
 800d052:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d056:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d05a:	4291      	cmp	r1, r2
 800d05c:	d1f9      	bne.n	800d052 <memcpy+0xe>
 800d05e:	bd10      	pop	{r4, pc}

0800d060 <_free_r>:
 800d060:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d062:	2900      	cmp	r1, #0
 800d064:	d044      	beq.n	800d0f0 <_free_r+0x90>
 800d066:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d06a:	9001      	str	r0, [sp, #4]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	f1a1 0404 	sub.w	r4, r1, #4
 800d072:	bfb8      	it	lt
 800d074:	18e4      	addlt	r4, r4, r3
 800d076:	f7ff ff95 	bl	800cfa4 <__malloc_lock>
 800d07a:	4a1e      	ldr	r2, [pc, #120]	; (800d0f4 <_free_r+0x94>)
 800d07c:	9801      	ldr	r0, [sp, #4]
 800d07e:	6813      	ldr	r3, [r2, #0]
 800d080:	b933      	cbnz	r3, 800d090 <_free_r+0x30>
 800d082:	6063      	str	r3, [r4, #4]
 800d084:	6014      	str	r4, [r2, #0]
 800d086:	b003      	add	sp, #12
 800d088:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d08c:	f7ff bf90 	b.w	800cfb0 <__malloc_unlock>
 800d090:	42a3      	cmp	r3, r4
 800d092:	d908      	bls.n	800d0a6 <_free_r+0x46>
 800d094:	6825      	ldr	r5, [r4, #0]
 800d096:	1961      	adds	r1, r4, r5
 800d098:	428b      	cmp	r3, r1
 800d09a:	bf01      	itttt	eq
 800d09c:	6819      	ldreq	r1, [r3, #0]
 800d09e:	685b      	ldreq	r3, [r3, #4]
 800d0a0:	1949      	addeq	r1, r1, r5
 800d0a2:	6021      	streq	r1, [r4, #0]
 800d0a4:	e7ed      	b.n	800d082 <_free_r+0x22>
 800d0a6:	461a      	mov	r2, r3
 800d0a8:	685b      	ldr	r3, [r3, #4]
 800d0aa:	b10b      	cbz	r3, 800d0b0 <_free_r+0x50>
 800d0ac:	42a3      	cmp	r3, r4
 800d0ae:	d9fa      	bls.n	800d0a6 <_free_r+0x46>
 800d0b0:	6811      	ldr	r1, [r2, #0]
 800d0b2:	1855      	adds	r5, r2, r1
 800d0b4:	42a5      	cmp	r5, r4
 800d0b6:	d10b      	bne.n	800d0d0 <_free_r+0x70>
 800d0b8:	6824      	ldr	r4, [r4, #0]
 800d0ba:	4421      	add	r1, r4
 800d0bc:	1854      	adds	r4, r2, r1
 800d0be:	42a3      	cmp	r3, r4
 800d0c0:	6011      	str	r1, [r2, #0]
 800d0c2:	d1e0      	bne.n	800d086 <_free_r+0x26>
 800d0c4:	681c      	ldr	r4, [r3, #0]
 800d0c6:	685b      	ldr	r3, [r3, #4]
 800d0c8:	6053      	str	r3, [r2, #4]
 800d0ca:	440c      	add	r4, r1
 800d0cc:	6014      	str	r4, [r2, #0]
 800d0ce:	e7da      	b.n	800d086 <_free_r+0x26>
 800d0d0:	d902      	bls.n	800d0d8 <_free_r+0x78>
 800d0d2:	230c      	movs	r3, #12
 800d0d4:	6003      	str	r3, [r0, #0]
 800d0d6:	e7d6      	b.n	800d086 <_free_r+0x26>
 800d0d8:	6825      	ldr	r5, [r4, #0]
 800d0da:	1961      	adds	r1, r4, r5
 800d0dc:	428b      	cmp	r3, r1
 800d0de:	bf04      	itt	eq
 800d0e0:	6819      	ldreq	r1, [r3, #0]
 800d0e2:	685b      	ldreq	r3, [r3, #4]
 800d0e4:	6063      	str	r3, [r4, #4]
 800d0e6:	bf04      	itt	eq
 800d0e8:	1949      	addeq	r1, r1, r5
 800d0ea:	6021      	streq	r1, [r4, #0]
 800d0ec:	6054      	str	r4, [r2, #4]
 800d0ee:	e7ca      	b.n	800d086 <_free_r+0x26>
 800d0f0:	b003      	add	sp, #12
 800d0f2:	bd30      	pop	{r4, r5, pc}
 800d0f4:	200097bc 	.word	0x200097bc

0800d0f8 <_init>:
 800d0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0fa:	bf00      	nop
 800d0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0fe:	bc08      	pop	{r3}
 800d100:	469e      	mov	lr, r3
 800d102:	4770      	bx	lr

0800d104 <_fini>:
 800d104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d106:	bf00      	nop
 800d108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d10a:	bc08      	pop	{r3}
 800d10c:	469e      	mov	lr, r3
 800d10e:	4770      	bx	lr
